/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/express-engine/schematics/testing/test-app", ["require", "exports", "@angular-devkit/schematics/testing", "rxjs/operators"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const testing_1 = require("@angular-devkit/schematics/testing");
    const operators_1 = require("rxjs/operators");
    /** Path to the collection file for the NgUniversal schematics */
    exports.collectionPath = require.resolve('nguniversal/modules/express-engine/schematics/collection.json');
    /** Create a base app used for testing. */
    function createTestApp(appOptions = {}) {
        const baseRunner = new testing_1.SchematicTestRunner('universal-schematics', exports.collectionPath);
        return baseRunner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', {
            name: 'workspace',
            version: '6.0.0',
            newProjectRoot: 'projects',
        })
            .pipe(operators_1.switchMap(workspaceTree => baseRunner.runExternalSchematicAsync('@schematics/angular', 'application', Object.assign({}, appOptions, { name: 'bar' }), workspaceTree)));
    }
    exports.createTestApp = createTestApp;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1hcHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2V4cHJlc3MtZW5naW5lL3NjaGVtYXRpY3MvdGVzdGluZy90ZXN0LWFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7OztJQUVILGdFQUFxRjtJQUVyRiw4Q0FBeUM7SUFFekMsaUVBQWlFO0lBQ3BELFFBQUEsY0FBYyxHQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDLCtEQUErRCxDQUFDLENBQUM7SUFFbkYsMENBQTBDO0lBQzFDLFNBQWdCLGFBQWEsQ0FBQyxVQUFVLEdBQUcsRUFBRTtRQUMzQyxNQUFNLFVBQVUsR0FDWixJQUFJLDZCQUFtQixDQUFDLHNCQUFzQixFQUFFLHNCQUFjLENBQUMsQ0FBQztRQUVwRSxPQUFPLFVBQVU7YUFDWix5QkFBeUIsQ0FBQyxxQkFBcUIsRUFBRSxXQUFXLEVBQUU7WUFDN0QsSUFBSSxFQUFFLFdBQVc7WUFDakIsT0FBTyxFQUFFLE9BQU87WUFDaEIsY0FBYyxFQUFFLFVBQVU7U0FDM0IsQ0FBQzthQUNELElBQUksQ0FDRCxxQkFBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUN2RCxxQkFBcUIsRUFBRSxhQUFhLG9CQUNoQyxVQUFVLElBQUUsSUFBSSxFQUFFLEtBQUssS0FBRyxhQUFhLENBQUMsQ0FBQyxDQUN4RCxDQUFDO0lBQ1IsQ0FBQztJQWZELHNDQWVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7U2NoZW1hdGljVGVzdFJ1bm5lciwgVW5pdFRlc3RUcmVlfSBmcm9tICdAYW5ndWxhci1kZXZraXQvc2NoZW1hdGljcy90ZXN0aW5nJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3N3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKiogUGF0aCB0byB0aGUgY29sbGVjdGlvbiBmaWxlIGZvciB0aGUgTmdVbml2ZXJzYWwgc2NoZW1hdGljcyAqL1xuZXhwb3J0IGNvbnN0IGNvbGxlY3Rpb25QYXRoID1cbiAgcmVxdWlyZS5yZXNvbHZlKCduZ3VuaXZlcnNhbC9tb2R1bGVzL2V4cHJlc3MtZW5naW5lL3NjaGVtYXRpY3MvY29sbGVjdGlvbi5qc29uJyk7XG5cbi8qKiBDcmVhdGUgYSBiYXNlIGFwcCB1c2VkIGZvciB0ZXN0aW5nLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRlc3RBcHAoYXBwT3B0aW9ucyA9IHt9KTogT2JzZXJ2YWJsZTxVbml0VGVzdFRyZWU+IHtcbiAgY29uc3QgYmFzZVJ1bm5lciA9XG4gICAgICBuZXcgU2NoZW1hdGljVGVzdFJ1bm5lcigndW5pdmVyc2FsLXNjaGVtYXRpY3MnLCBjb2xsZWN0aW9uUGF0aCk7XG5cbiAgcmV0dXJuIGJhc2VSdW5uZXJcbiAgICAgIC5ydW5FeHRlcm5hbFNjaGVtYXRpY0FzeW5jKCdAc2NoZW1hdGljcy9hbmd1bGFyJywgJ3dvcmtzcGFjZScsIHtcbiAgICAgICAgbmFtZTogJ3dvcmtzcGFjZScsXG4gICAgICAgIHZlcnNpb246ICc2LjAuMCcsXG4gICAgICAgIG5ld1Byb2plY3RSb290OiAncHJvamVjdHMnLFxuICAgICAgfSlcbiAgICAgIC5waXBlKFxuICAgICAgICAgIHN3aXRjaE1hcCh3b3Jrc3BhY2VUcmVlID0+IGJhc2VSdW5uZXIucnVuRXh0ZXJuYWxTY2hlbWF0aWNBc3luYyhcbiAgICAgICAgICAgICAgICAgICdAc2NoZW1hdGljcy9hbmd1bGFyJywgJ2FwcGxpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgIHsuLi5hcHBPcHRpb25zLCBuYW1lOiAnYmFyJ30sIHdvcmtzcGFjZVRyZWUpKSxcbiAgICAgICk7XG59XG4iXX0=