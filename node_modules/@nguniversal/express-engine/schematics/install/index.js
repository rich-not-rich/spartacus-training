(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/express-engine/schematics/install/index", ["require", "exports", "@angular-devkit/core", "@angular-devkit/schematics", "@angular-devkit/schematics/tasks", "@schematics/angular/utility/config", "@schematics/angular/utility/dependencies", "@schematics/angular/utility/project", "@schematics/angular/utility/project-targets", "@schematics/angular/utility/ast-utils", "typescript", "@nguniversal/express-engine/schematics/install/utils", "@schematics/angular/utility/workspace"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const tasks_1 = require("@angular-devkit/schematics/tasks");
    const config_1 = require("@schematics/angular/utility/config");
    const dependencies_1 = require("@schematics/angular/utility/dependencies");
    const project_1 = require("@schematics/angular/utility/project");
    const project_targets_1 = require("@schematics/angular/utility/project-targets");
    const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
    const ts = require("typescript");
    const utils_1 = require("@nguniversal/express-engine/schematics/install/utils");
    const workspace_1 = require("@schematics/angular/utility/workspace");
    // TODO(CaerusKaru): make these configurable
    const BROWSER_DIST = 'dist/browser';
    const SERVER_DIST = 'dist/server';
    function getClientProject(host, options) {
        const workspace = config_1.getWorkspace(host);
        const clientProject = workspace.projects[options.clientProject];
        if (!clientProject) {
            throw new schematics_1.SchematicsException(`Client app ${options.clientProject} not found.`);
        }
        return clientProject;
    }
    function addDependenciesAndScripts(options) {
        return (host) => {
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Default,
                name: '@nguniversal/express-engine',
                version: 'v8.2.6',
            });
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Default,
                name: '@nguniversal/module-map-ngfactory-loader',
                version: 'v8.2.6',
            });
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Default,
                name: 'express',
                version: '^4.15.2',
            });
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Dev,
                name: '@types/express',
                version: '^4.17.0',
            });
            if (options.webpack) {
                dependencies_1.addPackageJsonDependency(host, {
                    type: dependencies_1.NodeDependencyType.Dev,
                    name: 'ts-loader',
                    version: '^5.2.0',
                });
                dependencies_1.addPackageJsonDependency(host, {
                    type: dependencies_1.NodeDependencyType.Dev,
                    name: 'webpack-cli',
                    version: '^3.1.0',
                });
            }
            const serverFileName = options.serverFileName.replace('.ts', '');
            const pkgPath = '/package.json';
            const buffer = host.read(pkgPath);
            if (buffer === null) {
                throw new schematics_1.SchematicsException('Could not find package.json');
            }
            const pkg = JSON.parse(buffer.toString());
            pkg.scripts['compile:server'] = options.webpack ?
                'webpack --config webpack.server.config.js --progress --colors' :
                `tsc -p ${serverFileName}.tsconfig.json`;
            pkg.scripts['serve:ssr'] = `node dist/${serverFileName}`;
            pkg.scripts['build:ssr'] = 'npm run build:client-and-server-bundles && npm run compile:server';
            pkg.scripts['build:client-and-server-bundles'] =
                // tslint:disable:max-line-length
                `ng build --prod && ng run ${options.clientProject}:server:production --bundleDependencies all`;
            host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
            return host;
        };
    }
    function updateConfigFile(options) {
        return workspace_1.updateWorkspace((workspace => {
            const clientProject = workspace.projects.get(options.clientProject);
            if (clientProject) {
                const buildTarget = clientProject.targets.get('build');
                const serverTarget = clientProject.targets.get('server');
                // We have to check if the project config has a server target, because
                // if the Universal step in this schematic isn't run, it can't be guaranteed
                // to exist
                if (!serverTarget || !buildTarget) {
                    return;
                }
                serverTarget.options = Object.assign({}, serverTarget.options, { outputPath: SERVER_DIST });
                buildTarget.options = Object.assign({}, buildTarget.options, { outputPath: BROWSER_DIST });
            }
        }));
    }
    function addModuleMapLoader(options) {
        return (host) => {
            const clientProject = project_1.getProject(host, options.clientProject);
            const clientTargets = project_targets_1.getProjectTargets(clientProject);
            if (!clientTargets.server) {
                // If they skipped Universal schematics and don't have a server target,
                // just get out
                return;
            }
            const mainPath = core_1.normalize('/' + clientTargets.server.options.main);
            const appServerModuleRelativePath = utils_1.findAppServerModulePath(host, mainPath);
            const modulePath = core_1.normalize(`/${clientProject.root}/src/${appServerModuleRelativePath}.ts`);
            // Add the module map loader import
            let moduleSource = utils_1.getTsSourceFile(host, modulePath);
            const importModule = 'ModuleMapLoaderModule';
            const importPath = '@nguniversal/module-map-ngfactory-loader';
            const moduleMapImportChange = ast_utils_1.insertImport(moduleSource, modulePath, importModule, importPath);
            if (moduleMapImportChange) {
                const recorder = host.beginUpdate(modulePath);
                recorder.insertLeft(moduleMapImportChange.pos, moduleMapImportChange.toAdd);
                host.commitUpdate(recorder);
            }
            // Add the module map loader module to the imports
            const importText = 'ModuleMapLoaderModule';
            moduleSource = utils_1.getTsSourceFile(host, modulePath);
            const metadataChanges = ast_utils_1.addSymbolToNgModuleMetadata(moduleSource, modulePath, 'imports', importText);
            if (metadataChanges) {
                const recorder = host.beginUpdate(modulePath);
                metadataChanges.forEach((change) => {
                    recorder.insertRight(change.pos, change.toAdd);
                });
                host.commitUpdate(recorder);
            }
        };
    }
    function addExports(options) {
        return (host) => {
            const clientProject = project_1.getProject(host, options.clientProject);
            const clientTargets = project_targets_1.getProjectTargets(clientProject);
            if (!clientTargets.server) {
                // If they skipped Universal schematics and don't have a server target,
                // just get out
                return;
            }
            const mainPath = core_1.normalize('/' + clientTargets.server.options.main);
            const mainSourceFile = utils_1.getTsSourceFile(host, mainPath);
            let mainText = utils_1.getTsSourceText(host, mainPath);
            const mainRecorder = host.beginUpdate(mainPath);
            const expressEngineExport = utils_1.generateExport(mainSourceFile, ['ngExpressEngine'], '@nguniversal/express-engine');
            const moduleMapExport = utils_1.generateExport(mainSourceFile, ['provideModuleMap'], '@nguniversal/module-map-ngfactory-loader');
            const exports = ast_utils_1.findNodes(mainSourceFile, ts.SyntaxKind.ExportDeclaration);
            const addedExports = `\n${expressEngineExport}\n${moduleMapExport}\n`;
            const exportChange = ast_utils_1.insertAfterLastOccurrence(exports, addedExports, mainText, 0);
            mainRecorder.insertLeft(exportChange.pos, exportChange.toAdd);
            host.commitUpdate(mainRecorder);
        };
    }
    function default_1(options) {
        return (host, context) => {
            const clientProject = getClientProject(host, options);
            if (clientProject.projectType !== 'application') {
                throw new schematics_1.SchematicsException(`Universal requires a project type of "application".`);
            }
            if (!options.skipInstall) {
                context.addTask(new tasks_1.NodePackageInstallTask());
            }
            const rootSource = schematics_1.apply(schematics_1.url('./files/root'), [
                options.skipServer ? schematics_1.filter(path => !path.startsWith('__serverFileName')) : schematics_1.noop(),
                options.webpack ?
                    schematics_1.filter(path => !path.includes('tsconfig')) : schematics_1.filter(path => !path.startsWith('webpack')),
                schematics_1.template(Object.assign({}, core_1.strings, options, { stripTsExtension: (s) => s.replace(/\.ts$/, ''), getBrowserDistDirectory: () => BROWSER_DIST, getServerDistDirectory: () => SERVER_DIST }))
            ]);
            return schematics_1.chain([
                options.skipUniversal ?
                    schematics_1.noop() : schematics_1.externalSchematic('@schematics/angular', 'universal', options),
                updateConfigFile(options),
                schematics_1.mergeWith(rootSource),
                addDependenciesAndScripts(options),
                addModuleMapLoader(options),
                addExports(options),
            ]);
        };
    }
    exports.default = default_1;
});
//# sourceMappingURL=data:application/json;base64,