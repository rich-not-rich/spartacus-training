(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/express-engine/schematics/install/utils", ["require", "exports", "@angular-devkit/schematics", "typescript", "@schematics/angular/utility/ast-utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const schematics_1 = require("@angular-devkit/schematics");
    const ts = require("typescript");
    const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
    function getTsSourceText(host, path) {
        const buffer = host.read(path);
        if (!buffer) {
            throw new schematics_1.SchematicsException(`Could not read file (${path}).`);
        }
        return buffer.toString();
    }
    exports.getTsSourceText = getTsSourceText;
    function getTsSourceFile(host, path) {
        return ts.createSourceFile(path, getTsSourceText(host, path), ts.ScriptTarget.Latest, true);
    }
    exports.getTsSourceFile = getTsSourceFile;
    function findAppServerModuleExport(host, mainPath) {
        const source = getTsSourceFile(host, mainPath);
        const exportNodes = ast_utils_1.findNodes(source, ts.SyntaxKind.ExportDeclaration);
        if (exportNodes && exportNodes.length > 0) {
            return exportNodes[0];
        }
        else {
            return null;
        }
    }
    exports.findAppServerModuleExport = findAppServerModuleExport;
    function findAppServerModulePath(host, mainPath) {
        const exportDeclaration = findAppServerModuleExport(host, mainPath);
        if (!exportDeclaration) {
            throw new schematics_1.SchematicsException('Could not find app server module export');
        }
        const moduleSpecifier = exportDeclaration.moduleSpecifier.getText();
        return moduleSpecifier.substring(1, moduleSpecifier.length - 1);
    }
    exports.findAppServerModulePath = findAppServerModulePath;
    function generateExport(sourceFile, elements, module) {
        const printer = ts.createPrinter();
        const exports = elements.map(element => ts.createExportSpecifier(undefined, element));
        const namedExports = ts.createNamedExports(exports);
        const moduleSpecifier = ts.createStringLiteral(module);
        const exportDeclaration = ts.createExportDeclaration(undefined, undefined, namedExports, moduleSpecifier);
        return printer.printNode(ts.EmitHint.Unspecified, exportDeclaration, sourceFile);
    }
    exports.generateExport = generateExport;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2V4cHJlc3MtZW5naW5lL3NjaGVtYXRpY3MvaW5zdGFsbC91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFBOzs7Ozs7T0FNRztJQUNILDJEQUF1RTtJQUN2RSxpQ0FBaUM7SUFDakMscUVBQWtFO0lBRWxFLFNBQWdCLGVBQWUsQ0FBQyxJQUFVLEVBQUUsSUFBWTtRQUN0RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLElBQUksZ0NBQW1CLENBQUMsd0JBQXdCLElBQUksSUFBSSxDQUFDLENBQUM7U0FDakU7UUFDRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBTkQsMENBTUM7SUFFRCxTQUFnQixlQUFlLENBQUMsSUFBVSxFQUFFLElBQVk7UUFDdEQsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUZELDBDQUVDO0lBRUQsU0FBZ0IseUJBQXlCLENBQUMsSUFBVSxFQUNWLFFBQWdCO1FBQ3hELE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0MsTUFBTSxXQUFXLEdBQUcscUJBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBeUIsQ0FBQztTQUMvQzthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7SUFURCw4REFTQztJQUVELFNBQWdCLHVCQUF1QixDQUFDLElBQVUsRUFBRSxRQUFnQjtRQUNsRSxNQUFNLGlCQUFpQixHQUFHLHlCQUF5QixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDdEIsTUFBTSxJQUFJLGdDQUFtQixDQUFDLHlDQUF5QyxDQUFDLENBQUM7U0FDMUU7UUFFRCxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxlQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3JFLE9BQU8sZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBUkQsMERBUUM7SUFFRCxTQUFnQixjQUFjLENBQUMsVUFBeUIsRUFDekIsUUFBa0IsRUFDbEIsTUFBYztRQUMzQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbkMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUNyQyxFQUFFLENBQUMscUJBQXFCLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDaEQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUN2RSxZQUFZLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFakMsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFaRCx3Q0FZQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgU2NoZW1hdGljc0V4Y2VwdGlvbiwgVHJlZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9zY2hlbWF0aWNzJztcbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgZmluZE5vZGVzIH0gZnJvbSAnQHNjaGVtYXRpY3MvYW5ndWxhci91dGlsaXR5L2FzdC11dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUc1NvdXJjZVRleHQoaG9zdDogVHJlZSwgcGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgYnVmZmVyID0gaG9zdC5yZWFkKHBhdGgpO1xuICBpZiAoIWJ1ZmZlcikge1xuICAgIHRocm93IG5ldyBTY2hlbWF0aWNzRXhjZXB0aW9uKGBDb3VsZCBub3QgcmVhZCBmaWxlICgke3BhdGh9KS5gKTtcbiAgfVxuICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUc1NvdXJjZUZpbGUoaG9zdDogVHJlZSwgcGF0aDogc3RyaW5nKTogdHMuU291cmNlRmlsZSB7XG4gIHJldHVybiB0cy5jcmVhdGVTb3VyY2VGaWxlKHBhdGgsIGdldFRzU291cmNlVGV4dChob3N0LCBwYXRoKSwgdHMuU2NyaXB0VGFyZ2V0LkxhdGVzdCwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQXBwU2VydmVyTW9kdWxlRXhwb3J0KGhvc3Q6IFRyZWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluUGF0aDogc3RyaW5nKTogdHMuRXhwb3J0RGVjbGFyYXRpb24gfCBudWxsIHtcbiAgY29uc3Qgc291cmNlID0gZ2V0VHNTb3VyY2VGaWxlKGhvc3QsIG1haW5QYXRoKTtcbiAgY29uc3QgZXhwb3J0Tm9kZXMgPSBmaW5kTm9kZXMoc291cmNlLCB0cy5TeW50YXhLaW5kLkV4cG9ydERlY2xhcmF0aW9uKTtcbiAgaWYgKGV4cG9ydE5vZGVzICYmIGV4cG9ydE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gZXhwb3J0Tm9kZXNbMF0gYXMgdHMuRXhwb3J0RGVjbGFyYXRpb247XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBcHBTZXJ2ZXJNb2R1bGVQYXRoKGhvc3Q6IFRyZWUsIG1haW5QYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBleHBvcnREZWNsYXJhdGlvbiA9IGZpbmRBcHBTZXJ2ZXJNb2R1bGVFeHBvcnQoaG9zdCwgbWFpblBhdGgpO1xuICBpZiAoIWV4cG9ydERlY2xhcmF0aW9uKSB7XG4gICAgdGhyb3cgbmV3IFNjaGVtYXRpY3NFeGNlcHRpb24oJ0NvdWxkIG5vdCBmaW5kIGFwcCBzZXJ2ZXIgbW9kdWxlIGV4cG9ydCcpO1xuICB9XG5cbiAgY29uc3QgbW9kdWxlU3BlY2lmaWVyID0gZXhwb3J0RGVjbGFyYXRpb24ubW9kdWxlU3BlY2lmaWVyIS5nZXRUZXh0KCk7XG4gIHJldHVybiBtb2R1bGVTcGVjaWZpZXIuc3Vic3RyaW5nKDEsIG1vZHVsZVNwZWNpZmllci5sZW5ndGggLSAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRXhwb3J0KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHM6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgcHJpbnRlciA9IHRzLmNyZWF0ZVByaW50ZXIoKTtcbiAgY29uc3QgZXhwb3J0cyA9IGVsZW1lbnRzLm1hcChlbGVtZW50ID0+XG4gICAgdHMuY3JlYXRlRXhwb3J0U3BlY2lmaWVyKHVuZGVmaW5lZCwgZWxlbWVudCkpO1xuICBjb25zdCBuYW1lZEV4cG9ydHMgPSB0cy5jcmVhdGVOYW1lZEV4cG9ydHMoZXhwb3J0cyk7XG4gIGNvbnN0IG1vZHVsZVNwZWNpZmllciA9IHRzLmNyZWF0ZVN0cmluZ0xpdGVyYWwobW9kdWxlKTtcbiAgY29uc3QgZXhwb3J0RGVjbGFyYXRpb24gPSB0cy5jcmVhdGVFeHBvcnREZWNsYXJhdGlvbih1bmRlZmluZWQsIHVuZGVmaW5lZCxcbiAgICBuYW1lZEV4cG9ydHMsIG1vZHVsZVNwZWNpZmllcik7XG5cbiAgcmV0dXJuIHByaW50ZXIucHJpbnROb2RlKHRzLkVtaXRIaW50LlVuc3BlY2lmaWVkLCBleHBvcnREZWNsYXJhdGlvbiwgc291cmNlRmlsZSk7XG59XG4iXX0=