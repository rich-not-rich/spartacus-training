/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { OccConfig } from '../config/occ-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/occ-config";
/**
 * Http interceptor to add cookies to all cross-site requests.
 */
var WithCredentialsInterceptor = /** @class */ (function () {
    function WithCredentialsInterceptor(config) {
        this.config = config;
    }
    /**
     * Intercepts each request and adds the `withCredential` flag to it
     * if it hasn't been added already.
     */
    /**
     * Intercepts each request and adds the `withCredential` flag to it
     * if it hasn't been added already.
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    WithCredentialsInterceptor.prototype.intercept = /**
     * Intercepts each request and adds the `withCredential` flag to it
     * if it hasn't been added already.
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        if (this.requiresWithCredentials(request)) {
            request = request.clone({
                withCredentials: true,
            });
        }
        return next.handle(request);
    };
    /**
     * Indicates whether this is an OCC request.
     */
    /**
     * Indicates whether this is an OCC request.
     * @protected
     * @param {?} request
     * @return {?}
     */
    WithCredentialsInterceptor.prototype.requiresWithCredentials = /**
     * Indicates whether this is an OCC request.
     * @protected
     * @param {?} request
     * @return {?}
     */
    function (request) {
        return (
        /**
         * This `occConfig?.useWithCredentials` flag has only been introduced in
         * version 2.0. Customers must provide this interceptors manually in their
         * app to opt-in to use this feature, as we don't backport the configuration.
         */
        // this.occConfig?.useWithCredentials &&
        request.url.indexOf(this.occConfig.prefix) > -1);
    };
    Object.defineProperty(WithCredentialsInterceptor.prototype, "occConfig", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.config && this.config.backend && this.config.backend.occ
                ? this.config.backend.occ
                : {};
        },
        enumerable: true,
        configurable: true
    });
    WithCredentialsInterceptor.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    WithCredentialsInterceptor.ctorParameters = function () { return [
        { type: OccConfig }
    ]; };
    /** @nocollapse */ WithCredentialsInterceptor.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function WithCredentialsInterceptor_Factory() { return new WithCredentialsInterceptor(i0.ɵɵinject(i1.OccConfig)); }, token: WithCredentialsInterceptor, providedIn: "root" });
    return WithCredentialsInterceptor;
}());
export { WithCredentialsInterceptor };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    WithCredentialsInterceptor.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC1jcmVkZW50aWFscy5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9vY2MvaW50ZXJjZXB0b3Ivd2l0aC1jcmVkZW50aWFscy5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBTUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7OztBQUtqRDtJQUVFLG9DQUFzQixNQUFpQjtRQUFqQixXQUFNLEdBQU4sTUFBTSxDQUFXO0lBQUcsQ0FBQztJQUUzQzs7O09BR0c7Ozs7Ozs7O0lBQ0gsOENBQVM7Ozs7Ozs7SUFBVCxVQUNFLE9BQXlCLEVBQ3pCLElBQWlCO1FBRWpCLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUN0QixlQUFlLEVBQUUsSUFBSTthQUN0QixDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDTyw0REFBdUI7Ozs7OztJQUFqQyxVQUFrQyxPQUF5QjtRQUN6RCxPQUFPO1FBQ0w7Ozs7V0FJRztRQUNILHdDQUF3QztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNoRCxDQUFDO0lBQ0osQ0FBQztJQUVELHNCQUFZLGlEQUFTOzs7OztRQUFyQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHO2dCQUNsRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRztnQkFDekIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNULENBQUM7OztPQUFBOztnQkF2Q0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztnQkFMekIsU0FBUzs7O3FDQVJsQjtDQXFEQyxBQXhDRCxJQXdDQztTQXZDWSwwQkFBMEI7Ozs7OztJQUN6Qiw0Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBIdHRwRXZlbnQsXG4gIEh0dHBIYW5kbGVyLFxuICBIdHRwSW50ZXJjZXB0b3IsXG4gIEh0dHBSZXF1ZXN0LFxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPY2NDb25maWcgfSBmcm9tICcuLi9jb25maWcvb2NjLWNvbmZpZyc7XG5cbi8qKlxuICogSHR0cCBpbnRlcmNlcHRvciB0byBhZGQgY29va2llcyB0byBhbGwgY3Jvc3Mtc2l0ZSByZXF1ZXN0cy5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBXaXRoQ3JlZGVudGlhbHNJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb25maWc6IE9jY0NvbmZpZykge31cblxuICAvKipcbiAgICogSW50ZXJjZXB0cyBlYWNoIHJlcXVlc3QgYW5kIGFkZHMgdGhlIGB3aXRoQ3JlZGVudGlhbGAgZmxhZyB0byBpdFxuICAgKiBpZiBpdCBoYXNuJ3QgYmVlbiBhZGRlZCBhbHJlYWR5LlxuICAgKi9cbiAgaW50ZXJjZXB0KFxuICAgIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgbmV4dDogSHR0cEhhbmRsZXJcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGlmICh0aGlzLnJlcXVpcmVzV2l0aENyZWRlbnRpYWxzKHJlcXVlc3QpKSB7XG4gICAgICByZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhbiBPQ0MgcmVxdWVzdC5cbiAgICovXG4gIHByb3RlY3RlZCByZXF1aXJlc1dpdGhDcmVkZW50aWFscyhyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qKlxuICAgICAgICogVGhpcyBgb2NjQ29uZmlnPy51c2VXaXRoQ3JlZGVudGlhbHNgIGZsYWcgaGFzIG9ubHkgYmVlbiBpbnRyb2R1Y2VkIGluXG4gICAgICAgKiB2ZXJzaW9uIDIuMC4gQ3VzdG9tZXJzIG11c3QgcHJvdmlkZSB0aGlzIGludGVyY2VwdG9ycyBtYW51YWxseSBpbiB0aGVpclxuICAgICAgICogYXBwIHRvIG9wdC1pbiB0byB1c2UgdGhpcyBmZWF0dXJlLCBhcyB3ZSBkb24ndCBiYWNrcG9ydCB0aGUgY29uZmlndXJhdGlvbi5cbiAgICAgICAqL1xuICAgICAgLy8gdGhpcy5vY2NDb25maWc/LnVzZVdpdGhDcmVkZW50aWFscyAmJlxuICAgICAgcmVxdWVzdC51cmwuaW5kZXhPZih0aGlzLm9jY0NvbmZpZy5wcmVmaXgpID4gLTFcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgb2NjQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5iYWNrZW5kICYmIHRoaXMuY29uZmlnLmJhY2tlbmQub2NjXG4gICAgICA/IHRoaXMuY29uZmlnLmJhY2tlbmQub2NjXG4gICAgICA6IHt9O1xuICB9XG59XG4iXX0=