/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/store/actions/index';
import { PageType } from '../../../model/cms.model';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';
import { entityReducer } from '../../../state/utils/entity/entity.reducer';
import { COMPONENT_ENTITY, NAVIGATION_DETAIL_ENTITY, } from '../cms-state';
import * as fromComponentsReducer from './components.reducer';
import * as fromNavigation from './navigation-entry-item.reducer';
import * as fromPageReducer from './page-data.reducer';
import * as fromPageIndexReducer from './page-index.reducer';
/**
 * @return {?}
 */
export function getReducers() {
    return {
        page: combineReducers({
            pageData: fromPageReducer.reducer,
            index: combineReducers({
                content: entityLoaderReducer(PageType.CONTENT_PAGE, fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)),
                product: entityLoaderReducer(PageType.PRODUCT_PAGE, fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)),
                category: entityLoaderReducer(PageType.CATEGORY_PAGE, fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)),
                catalog: entityLoaderReducer(PageType.CATALOG_PAGE, fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)),
            }),
        }),
        /**
         * @deprecated in favour of `components`. From 2.0, this will be removed.
         */
        // TODO(issue:6027) - remove this `component` slice
        component: entityLoaderReducer(COMPONENT_ENTITY),
        components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),
        navigation: entityLoaderReducer(NAVIGATION_DETAIL_ENTITY, fromNavigation.reducer),
    };
}
/** @type {?} */
export var reducerToken = new InjectionToken('CmsReducers');
/** @type {?} */
export var reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
/**
 * @param {?} reducer
 * @return {?}
 */
export function clearCmsState(reducer) {
    return (/**
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    function (state, action) {
        if (action.type === SiteContextActions.LANGUAGE_CHANGE ||
            action.type === AuthActions.LOGOUT ||
            action.type === AuthActions.LOGIN) {
            state = undefined;
        }
        return reducer(state, action);
    });
}
/** @type {?} */
export var metaReducers = [clearCmsState];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFJTCxlQUFlLEdBRWhCLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDL0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBRTNFLE9BQU8sRUFFTCxnQkFBZ0IsRUFDaEIsd0JBQXdCLEdBRXpCLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sS0FBSyxxQkFBcUIsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEtBQUssY0FBYyxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sS0FBSyxlQUFlLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxLQUFLLG9CQUFvQixNQUFNLHNCQUFzQixDQUFDOzs7O0FBRTdELE1BQU0sVUFBVSxXQUFXO0lBQ3pCLE9BQU87UUFDTCxJQUFJLEVBQUUsZUFBZSxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxlQUFlLENBQUMsT0FBTztZQUNqQyxLQUFLLEVBQUUsZUFBZSxDQUFDO2dCQUNyQixPQUFPLEVBQUUsbUJBQW1CLENBQzFCLFFBQVEsQ0FBQyxZQUFZLEVBQ3JCLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQ3BEO2dCQUNELE9BQU8sRUFBRSxtQkFBbUIsQ0FDMUIsUUFBUSxDQUFDLFlBQVksRUFDckIsb0JBQW9CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FDcEQ7Z0JBQ0QsUUFBUSxFQUFFLG1CQUFtQixDQUMzQixRQUFRLENBQUMsYUFBYSxFQUN0QixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUNyRDtnQkFDRCxPQUFPLEVBQUUsbUJBQW1CLENBQzFCLFFBQVEsQ0FBQyxZQUFZLEVBQ3JCLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQ3BEO2FBQ0YsQ0FBQztTQUNILENBQUM7Ozs7O1FBS0YsU0FBUyxFQUFFLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDO1FBQ2hELFVBQVUsRUFBRSxhQUFhLENBQUMsZ0JBQWdCLEVBQUUscUJBQXFCLENBQUMsT0FBTyxDQUFDO1FBQzFFLFVBQVUsRUFBRSxtQkFBbUIsQ0FDN0Isd0JBQXdCLEVBQ3hCLGNBQWMsQ0FBQyxPQUFPLENBQ3ZCO0tBQ0YsQ0FBQztBQUNKLENBQUM7O0FBRUQsTUFBTSxLQUFPLFlBQVksR0FFckIsSUFBSSxjQUFjLENBQTZCLGFBQWEsQ0FBQzs7QUFFakUsTUFBTSxLQUFPLGVBQWUsR0FBYTtJQUN2QyxPQUFPLEVBQUUsWUFBWTtJQUNyQixVQUFVLEVBQUUsV0FBVztDQUN4Qjs7Ozs7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUMzQixPQUE0QztJQUU1Qzs7Ozs7SUFBTyxVQUFTLEtBQUssRUFBRSxNQUFNO1FBQzNCLElBQ0UsTUFBTSxDQUFDLElBQUksS0FBSyxrQkFBa0IsQ0FBQyxlQUFlO1lBQ2xELE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLE1BQU07WUFDbEMsTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsS0FBSyxFQUNqQztZQUNBLEtBQUssR0FBRyxTQUFTLENBQUM7U0FDbkI7UUFDRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxFQUFDO0FBQ0osQ0FBQzs7QUFFRCxNQUFNLEtBQU8sWUFBWSxHQUFnQyxDQUFDLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWN0aW9uLFxuICBBY3Rpb25SZWR1Y2VyLFxuICBBY3Rpb25SZWR1Y2VyTWFwLFxuICBjb21iaW5lUmVkdWNlcnMsXG4gIE1ldGFSZWR1Y2VyLFxufSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBdXRoQWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2F1dGgvc3RvcmUvYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBQYWdlVHlwZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XG5pbXBvcnQgeyBTaXRlQ29udGV4dEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zaXRlLWNvbnRleHQvc3RvcmUvYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBlbnRpdHlMb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLnJlZHVjZXInO1xuaW1wb3J0IHsgZW50aXR5UmVkdWNlciB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS9lbnRpdHkucmVkdWNlcic7XG5pbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gJy4uLy4uL21vZGVsL25vZGUtaXRlbS5tb2RlbCc7XG5pbXBvcnQge1xuICBDbXNTdGF0ZSxcbiAgQ09NUE9ORU5UX0VOVElUWSxcbiAgTkFWSUdBVElPTl9ERVRBSUxfRU5USVRZLFxuICBTdGF0ZVdpdGhDbXMsXG59IGZyb20gJy4uL2Ntcy1zdGF0ZSc7XG5pbXBvcnQgKiBhcyBmcm9tQ29tcG9uZW50c1JlZHVjZXIgZnJvbSAnLi9jb21wb25lbnRzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbU5hdmlnYXRpb24gZnJvbSAnLi9uYXZpZ2F0aW9uLWVudHJ5LWl0ZW0ucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tUGFnZVJlZHVjZXIgZnJvbSAnLi9wYWdlLWRhdGEucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tUGFnZUluZGV4UmVkdWNlciBmcm9tICcuL3BhZ2UtaW5kZXgucmVkdWNlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWR1Y2VycygpOiBBY3Rpb25SZWR1Y2VyTWFwPENtc1N0YXRlPiB7XG4gIHJldHVybiB7XG4gICAgcGFnZTogY29tYmluZVJlZHVjZXJzKHtcbiAgICAgIHBhZ2VEYXRhOiBmcm9tUGFnZVJlZHVjZXIucmVkdWNlcixcbiAgICAgIGluZGV4OiBjb21iaW5lUmVkdWNlcnMoe1xuICAgICAgICBjb250ZW50OiBlbnRpdHlMb2FkZXJSZWR1Y2VyPHN0cmluZz4oXG4gICAgICAgICAgUGFnZVR5cGUuQ09OVEVOVF9QQUdFLFxuICAgICAgICAgIGZyb21QYWdlSW5kZXhSZWR1Y2VyLnJlZHVjZXIoUGFnZVR5cGUuQ09OVEVOVF9QQUdFKVxuICAgICAgICApLFxuICAgICAgICBwcm9kdWN0OiBlbnRpdHlMb2FkZXJSZWR1Y2VyPHN0cmluZz4oXG4gICAgICAgICAgUGFnZVR5cGUuUFJPRFVDVF9QQUdFLFxuICAgICAgICAgIGZyb21QYWdlSW5kZXhSZWR1Y2VyLnJlZHVjZXIoUGFnZVR5cGUuUFJPRFVDVF9QQUdFKVxuICAgICAgICApLFxuICAgICAgICBjYXRlZ29yeTogZW50aXR5TG9hZGVyUmVkdWNlcjxzdHJpbmc+KFxuICAgICAgICAgIFBhZ2VUeXBlLkNBVEVHT1JZX1BBR0UsXG4gICAgICAgICAgZnJvbVBhZ2VJbmRleFJlZHVjZXIucmVkdWNlcihQYWdlVHlwZS5DQVRFR09SWV9QQUdFKVxuICAgICAgICApLFxuICAgICAgICBjYXRhbG9nOiBlbnRpdHlMb2FkZXJSZWR1Y2VyPHN0cmluZz4oXG4gICAgICAgICAgUGFnZVR5cGUuQ0FUQUxPR19QQUdFLFxuICAgICAgICAgIGZyb21QYWdlSW5kZXhSZWR1Y2VyLnJlZHVjZXIoUGFnZVR5cGUuQ0FUQUxPR19QQUdFKVxuICAgICAgICApLFxuICAgICAgfSksXG4gICAgfSksXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mIGBjb21wb25lbnRzYC4gRnJvbSAyLjAsIHRoaXMgd2lsbCBiZSByZW1vdmVkLlxuICAgICAqL1xuICAgIC8vIFRPRE8oaXNzdWU6NjAyNykgLSByZW1vdmUgdGhpcyBgY29tcG9uZW50YCBzbGljZVxuICAgIGNvbXBvbmVudDogZW50aXR5TG9hZGVyUmVkdWNlcihDT01QT05FTlRfRU5USVRZKSxcbiAgICBjb21wb25lbnRzOiBlbnRpdHlSZWR1Y2VyKENPTVBPTkVOVF9FTlRJVFksIGZyb21Db21wb25lbnRzUmVkdWNlci5yZWR1Y2VyKSxcbiAgICBuYXZpZ2F0aW9uOiBlbnRpdHlMb2FkZXJSZWR1Y2VyPE5vZGVJdGVtPihcbiAgICAgIE5BVklHQVRJT05fREVUQUlMX0VOVElUWSxcbiAgICAgIGZyb21OYXZpZ2F0aW9uLnJlZHVjZXJcbiAgICApLFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgcmVkdWNlclRva2VuOiBJbmplY3Rpb25Ub2tlbjxcbiAgQWN0aW9uUmVkdWNlck1hcDxDbXNTdGF0ZT5cbj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48QWN0aW9uUmVkdWNlck1hcDxDbXNTdGF0ZT4+KCdDbXNSZWR1Y2VycycpO1xuXG5leHBvcnQgY29uc3QgcmVkdWNlclByb3ZpZGVyOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogcmVkdWNlclRva2VuLFxuICB1c2VGYWN0b3J5OiBnZXRSZWR1Y2Vycyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNtc1N0YXRlKFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPFN0YXRlV2l0aENtcywgQWN0aW9uPlxuKTogQWN0aW9uUmVkdWNlcjxTdGF0ZVdpdGhDbXMsIEFjdGlvbj4ge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChcbiAgICAgIGFjdGlvbi50eXBlID09PSBTaXRlQ29udGV4dEFjdGlvbnMuTEFOR1VBR0VfQ0hBTkdFIHx8XG4gICAgICBhY3Rpb24udHlwZSA9PT0gQXV0aEFjdGlvbnMuTE9HT1VUIHx8XG4gICAgICBhY3Rpb24udHlwZSA9PT0gQXV0aEFjdGlvbnMuTE9HSU5cbiAgICApIHtcbiAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IG1ldGFSZWR1Y2VyczogTWV0YVJlZHVjZXI8U3RhdGVXaXRoQ21zPltdID0gW2NsZWFyQ21zU3RhdGVdO1xuIl19