/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { EMPTY, timer } from 'rxjs';
import { debounce, distinctUntilChanged, filter, map, shareReplay, switchMap, take, tap, withLatestFrom, } from 'rxjs/operators';
import { AuthService } from '../../auth/index';
import { OCC_CART_ID_CURRENT, OCC_USER_ID_ANONYMOUS, OCC_USER_ID_GUEST, } from '../../occ/utils/occ-constants';
import { EMAIL_PATTERN } from '../../util/regex-pattern';
import { MultiCartSelectors } from '../store/selectors/index';
import { getCartIdByUserId, isTempCartId } from '../utils/utils';
import { MultiCartService } from './multi-cart.service';
var ActiveCartService = /** @class */ (function () {
    function ActiveCartService(store, authService, multiCartService) {
        var _this = this;
        this.store = store;
        this.authService = authService;
        this.multiCartService = multiCartService;
        this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
        this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
        this.userId = OCC_USER_ID_ANONYMOUS;
        this.activeCartId$ = this.store.pipe(select(MultiCartSelectors.getActiveCartId), map((/**
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            if (!cartId) {
                return OCC_CART_ID_CURRENT;
            }
            return cartId;
        })));
        this.cartSelector$ = this.activeCartId$.pipe(switchMap((/**
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) { return _this.multiCartService.getCartEntity(cartId); })));
        this.authService.getOccUserId().subscribe((/**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            _this.userId = userId;
            if (_this.userId !== OCC_USER_ID_ANONYMOUS) {
                if (_this.isJustLoggedIn(userId)) {
                    _this.loadOrMerge(_this.cartId);
                }
            }
            _this.previousUserId = userId;
        }));
        this.activeCartId$.subscribe((/**
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            _this.cartId = cartId;
        }));
        this.initActiveCart();
    }
    /**
     * @private
     * @return {?}
     */
    ActiveCartService.prototype.initActiveCart = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.activeCart$ = this.cartSelector$.pipe(withLatestFrom(this.activeCartId$), map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), cartEntity = _b[0], activeCartId = _b[1];
            return {
                cart: cartEntity.value,
                cartId: activeCartId,
                isStable: !cartEntity.loading && cartEntity.processesCount === 0,
                loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
            };
        })), 
        // we want to emit empty carts even if those are not stable
        // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete
        // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart
        filter((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var isStable = _a.isStable, cart = _a.cart;
            return isStable || _this.isEmpty(cart);
        })), tap((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var cart = _a.cart, cartId = _a.cartId, loaded = _a.loaded, isStable = _a.isStable;
            if (isStable &&
                _this.isEmpty(cart) &&
                !loaded &&
                !isTempCartId(cartId)) {
                _this.load(cartId);
            }
        })), map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var cart = _a.cart;
            return (cart ? cart : {});
        })), tap((/**
         * @param {?} cart
         * @return {?}
         */
        function (cart) {
            if (cart) {
                _this.cartUser = cart.user;
            }
        })), distinctUntilChanged(), shareReplay({ bufferSize: 1, refCount: true }));
    };
    /**
     * Returns active cart
     */
    /**
     * Returns active cart
     * @return {?}
     */
    ActiveCartService.prototype.getActive = /**
     * Returns active cart
     * @return {?}
     */
    function () {
        return this.activeCart$;
    };
    /**
     * Returns active cart id
     */
    /**
     * Returns active cart id
     * @return {?}
     */
    ActiveCartService.prototype.getActiveCartId = /**
     * Returns active cart id
     * @return {?}
     */
    function () {
        var _this = this;
        return this.activeCart$.pipe(map((/**
         * @param {?} cart
         * @return {?}
         */
        function (cart) { return getCartIdByUserId(cart, _this.userId); })), distinctUntilChanged());
    };
    /**
     * Returns cart entries
     */
    /**
     * Returns cart entries
     * @return {?}
     */
    ActiveCartService.prototype.getEntries = /**
     * Returns cart entries
     * @return {?}
     */
    function () {
        var _this = this;
        return this.activeCartId$.pipe(switchMap((/**
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) { return _this.multiCartService.getEntries(cartId); })), distinctUntilChanged());
    };
    /**
     * Returns true when cart is stable (not loading and not pending processes on cart)
     */
    /**
     * Returns true when cart is stable (not loading and not pending processes on cart)
     * @return {?}
     */
    ActiveCartService.prototype.getLoaded = /**
     * Returns true when cart is stable (not loading and not pending processes on cart)
     * @return {?}
     */
    function () {
        var _this = this;
        // Debounce is used here, to avoid flickering when we switch between different cart entities.
        // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.
        // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.
        // At the end we finally switch to cart `code` for cart id. Between those switches cart `getLoaded` function should not flicker.
        return this.activeCartId$.pipe(switchMap((/**
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) { return _this.multiCartService.isStable(cartId); })), debounce((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (state ? timer(0) : EMPTY); })), distinctUntilChanged());
    };
    /**
     * @private
     * @param {?} cartId
     * @return {?}
     */
    ActiveCartService.prototype.loadOrMerge = /**
     * @private
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        // for login user, whenever there's an existing cart, we will load the user
        // current cart and merge it into the existing cart
        if (!cartId || cartId === OCC_CART_ID_CURRENT) {
            this.multiCartService.loadCart({
                userId: this.userId,
                cartId: OCC_CART_ID_CURRENT,
                extraData: {
                    active: true,
                },
            });
        }
        else if (this.isGuestCart()) {
            this.guestCartMerge(cartId);
        }
        else {
            this.multiCartService.mergeToCurrentCart({
                userId: this.userId,
                cartId: cartId,
                extraData: {
                    active: true,
                },
            });
        }
    };
    /**
     * @private
     * @param {?} cartId
     * @return {?}
     */
    ActiveCartService.prototype.load = /**
     * @private
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        if (this.userId !== OCC_USER_ID_ANONYMOUS) {
            this.multiCartService.loadCart({
                userId: this.userId,
                cartId: cartId ? cartId : OCC_CART_ID_CURRENT,
                extraData: {
                    active: true,
                },
            });
        }
        else if (cartId && cartId !== OCC_CART_ID_CURRENT) {
            this.multiCartService.loadCart({
                userId: this.userId,
                cartId: cartId,
                extraData: {
                    active: true,
                },
            });
        }
    };
    /**
     * @private
     * @param {?} cartEntries
     * @return {?}
     */
    ActiveCartService.prototype.addEntriesGuestMerge = /**
     * @private
     * @param {?} cartEntries
     * @return {?}
     */
    function (cartEntries) {
        var _this = this;
        /** @type {?} */
        var entriesToAdd = cartEntries.map((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return ({
            productCode: entry.product.code,
            quantity: entry.quantity,
        }); }));
        this.requireLoadedCartForGuestMerge().subscribe((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) {
            _this.multiCartService.addEntries(_this.userId, getCartIdByUserId(cartState.value, _this.userId), entriesToAdd);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ActiveCartService.prototype.requireLoadedCartForGuestMerge = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return this.requireLoadedCart(this.cartSelector$.pipe(filter((/**
         * @return {?}
         */
        function () { return !_this.isGuestCart(); }))));
    };
    /**
     * @private
     * @param {?} cartState
     * @return {?}
     */
    ActiveCartService.prototype.isCartCreating = /**
     * @private
     * @param {?} cartState
     * @return {?}
     */
    function (cartState) {
        // cart creating is always represented with loading flags
        // when all loading flags are false it means that we restored wrong cart id
        // could happen on context change or reload right in the middle on cart create call
        return (isTempCartId(this.cartId) &&
            (cartState.loading || cartState.success || cartState.error));
    };
    /**
     * @private
     * @param {?=} customCartSelector$
     * @return {?}
     */
    ActiveCartService.prototype.requireLoadedCart = /**
     * @private
     * @param {?=} customCartSelector$
     * @return {?}
     */
    function (customCartSelector$) {
        var _this = this;
        // For guest cart merge we want to filter guest cart in the whole stream
        // We have to wait with load/create/addEntry after guest cart will be deleted.
        // That's why you can provide custom selector with this filter applied.
        /** @type {?} */
        var cartSelector$ = customCartSelector$
            ? customCartSelector$
            : this.cartSelector$;
        return cartSelector$.pipe(filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) { return !cartState.loading; })), 
        // Avoid load/create call when there are new cart creating at the moment
        filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) { return !_this.isCartCreating(cartState); })), take(1), switchMap((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) {
            // Try to load the cart, because it might have been created on another device between our login and add entry call
            if (_this.isEmpty(cartState.value) &&
                _this.userId !== OCC_USER_ID_ANONYMOUS) {
                _this.load(undefined);
            }
            return cartSelector$;
        })), filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) { return !cartState.loading; })), 
        // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty
        filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) {
            return _this.userId === OCC_USER_ID_ANONYMOUS ||
                cartState.success ||
                cartState.error;
        })), take(1), switchMap((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) {
            if (_this.isEmpty(cartState.value)) {
                _this.multiCartService.createCart({
                    userId: _this.userId,
                    extraData: {
                        active: true,
                    },
                });
            }
            return cartSelector$;
        })), filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) { return !cartState.loading; })), filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) { return cartState.success || cartState.error; })), 
        // wait for active cart id to point to code/guid to avoid some work on temp cart entity
        filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) { return !_this.isCartCreating(cartState); })), filter((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) { return !_this.isEmpty(cartState.value); })), take(1));
    };
    /**
     * Add entry to active cart
     *
     * @param productCode
     * @param quantity
     */
    /**
     * Add entry to active cart
     *
     * @param {?} productCode
     * @param {?} quantity
     * @return {?}
     */
    ActiveCartService.prototype.addEntry = /**
     * Add entry to active cart
     *
     * @param {?} productCode
     * @param {?} quantity
     * @return {?}
     */
    function (productCode, quantity) {
        var _this = this;
        this.requireLoadedCart().subscribe((/**
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) {
            _this.multiCartService.addEntry(_this.userId, getCartIdByUserId(cartState.value, _this.userId), productCode, quantity);
        }));
    };
    /**
     * Remove entry
     *
     * @param entry
     */
    /**
     * Remove entry
     *
     * @param {?} entry
     * @return {?}
     */
    ActiveCartService.prototype.removeEntry = /**
     * Remove entry
     *
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
    };
    /**
     * Update entry
     *
     * @param entryNumber
     * @param quantity
     */
    /**
     * Update entry
     *
     * @param {?} entryNumber
     * @param {?} quantity
     * @return {?}
     */
    ActiveCartService.prototype.updateEntry = /**
     * Update entry
     *
     * @param {?} entryNumber
     * @param {?} quantity
     * @return {?}
     */
    function (entryNumber, quantity) {
        this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
    };
    /**
     * Returns cart entry
     *
     * @param productCode
     */
    /**
     * Returns cart entry
     *
     * @param {?} productCode
     * @return {?}
     */
    ActiveCartService.prototype.getEntry = /**
     * Returns cart entry
     *
     * @param {?} productCode
     * @return {?}
     */
    function (productCode) {
        var _this = this;
        return this.activeCartId$.pipe(switchMap((/**
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) { return _this.multiCartService.getEntry(cartId, productCode); })), distinctUntilChanged());
    };
    /**
     * Assign email to cart
     *
     * @param email
     */
    /**
     * Assign email to cart
     *
     * @param {?} email
     * @return {?}
     */
    ActiveCartService.prototype.addEmail = /**
     * Assign email to cart
     *
     * @param {?} email
     * @return {?}
     */
    function (email) {
        this.multiCartService.assignEmail(this.cartId, this.userId, email);
    };
    /**
     * Get assigned user to cart
     */
    /**
     * Get assigned user to cart
     * @return {?}
     */
    ActiveCartService.prototype.getAssignedUser = /**
     * Get assigned user to cart
     * @return {?}
     */
    function () {
        return this.getActive().pipe(map((/**
         * @param {?} cart
         * @return {?}
         */
        function (cart) { return cart.user; })));
    };
    /**
     * Returns true for guest cart
     */
    /**
     * Returns true for guest cart
     * @return {?}
     */
    ActiveCartService.prototype.isGuestCart = /**
     * Returns true for guest cart
     * @return {?}
     */
    function () {
        return (this.cartUser &&
            (this.cartUser.name === OCC_USER_ID_GUEST ||
                this.isEmail(this.cartUser.uid
                    .split('|')
                    .slice(1)
                    .join('|'))));
    };
    /**
     * Add multiple entries to a cart
     *
     * @param cartEntries : list of entries to add (OrderEntry[])
     */
    /**
     * Add multiple entries to a cart
     *
     * @param {?} cartEntries : list of entries to add (OrderEntry[])
     * @return {?}
     */
    ActiveCartService.prototype.addEntries = /**
     * Add multiple entries to a cart
     *
     * @param {?} cartEntries : list of entries to add (OrderEntry[])
     * @return {?}
     */
    function (cartEntries) {
        var _this = this;
        cartEntries.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) {
            _this.addEntry(entry.product.code, entry.quantity);
        }));
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    ActiveCartService.prototype.isEmail = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str) {
            return str.match(EMAIL_PATTERN) ? true : false;
        }
        return false;
    };
    // TODO: Remove once backend is updated
    /**
     * Temporary method to merge guest cart with user cart because of backend limitation
     * This is for an edge case
     */
    // TODO: Remove once backend is updated
    /**
     * Temporary method to merge guest cart with user cart because of backend limitation
     * This is for an edge case
     * @private
     * @param {?} cartId
     * @return {?}
     */
    ActiveCartService.prototype.guestCartMerge = 
    // TODO: Remove once backend is updated
    /**
     * Temporary method to merge guest cart with user cart because of backend limitation
     * This is for an edge case
     * @private
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        /** @type {?} */
        var cartEntries;
        this.getEntries()
            .pipe(take(1))
            .subscribe((/**
         * @param {?} entries
         * @return {?}
         */
        function (entries) {
            cartEntries = entries;
        }));
        this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);
        this.addEntriesGuestMerge(cartEntries);
    };
    /**
     * @private
     * @param {?} cart
     * @return {?}
     */
    ActiveCartService.prototype.isEmpty = /**
     * @private
     * @param {?} cart
     * @return {?}
     */
    function (cart) {
        return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
    };
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    ActiveCartService.prototype.isJustLoggedIn = /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        return (this.previousUserId !== userId && // *just* logged in
            this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
        );
    };
    ActiveCartService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActiveCartService.ctorParameters = function () { return [
        { type: Store },
        { type: AuthService },
        { type: MultiCartService }
    ]; };
    return ActiveCartService;
}());
export { ActiveCartService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.PREVIOUS_USER_ID_INITIAL_VALUE;
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.previousUserId;
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.activeCart$;
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.userId;
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.cartId;
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.cartUser;
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.activeCartId$;
    /**
     * @type {?}
     * @private
     */
    ActiveCartService.prototype.cartSelector$;
    /**
     * @type {?}
     * @protected
     */
    ActiveCartService.prototype.store;
    /**
     * @type {?}
     * @protected
     */
    ActiveCartService.prototype.authService;
    /**
     * @type {?}
     * @protected
     */
    ActiveCartService.prototype.multiCartService;
}
//# sourceMappingURL=data:application/json;base64,