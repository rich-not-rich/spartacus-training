/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { getUserState } from './feature.selector';
import { StateLoaderSelectors } from '../../../state/utils/index';
var ɵ0 = /**
 * @param {?} state
 * @return {?}
 */
function (state) { return state.orderReturn; };
/** @type {?} */
export var getOrderReturnRequestState = createSelector(getUserState, (ɵ0));
var ɵ1 = /**
 * @param {?} state
 * @return {?}
 */
function (state) {
    return StateLoaderSelectors.loaderValueSelector(state);
};
/** @type {?} */
export var getOrderReturnRequest = createSelector(getOrderReturnRequestState, (ɵ1));
var ɵ2 = /**
 * @param {?} state
 * @return {?}
 */
function (state) {
    return StateLoaderSelectors.loaderLoadingSelector(state);
};
/** @type {?} */
export var getOrderReturnRequestLoading = createSelector(getOrderReturnRequestState, (ɵ2));
var ɵ3 = /**
 * @param {?} state
 * @return {?}
 */
function (state) {
    return StateLoaderSelectors.loaderSuccessSelector(state) &&
        !StateLoaderSelectors.loaderLoadingSelector(state);
};
/** @type {?} */
export var getOrderReturnRequestSuccess = createSelector(getOrderReturnRequestState, (ɵ3));
var ɵ4 = /**
 * @param {?} state
 * @return {?}
 */
function (state) { return state.orderReturnList; };
/** @type {?} */
export var getOrderReturnRequestListState = createSelector(getUserState, (ɵ4));
var ɵ5 = /**
 * @param {?} state
 * @return {?}
 */
function (state) {
    return StateLoaderSelectors.loaderValueSelector(state);
};
/** @type {?} */
export var getOrderReturnRequestList = createSelector(getOrderReturnRequestListState, (ɵ5));
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItcmV0dXJuLXJlcXVlc3Quc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvc2VsZWN0b3JzL29yZGVyLXJldHVybi1yZXF1ZXN0LnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFHL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7OztBQU9oRSxVQUFDLEtBQWdCLElBQUssT0FBQSxLQUFLLENBQUMsV0FBVyxFQUFqQixDQUFpQjs7QUFMekMsTUFBTSxLQUFPLDBCQUEwQixHQUduQyxjQUFjLENBQ2hCLFlBQVksT0FFYjs7Ozs7QUFPQyxVQUFDLEtBQWlDO0lBQ2hDLE9BQUEsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0FBQS9DLENBQStDOztBQU5uRCxNQUFNLEtBQU8scUJBQXFCLEdBRzlCLGNBQWMsQ0FDaEIsMEJBQTBCLE9BRzNCOzs7OztBQU9DLFVBQUMsS0FBaUM7SUFDaEMsT0FBQSxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7QUFBakQsQ0FBaUQ7O0FBTnJELE1BQU0sS0FBTyw0QkFBNEIsR0FHckMsY0FBYyxDQUNoQiwwQkFBMEIsT0FHM0I7Ozs7O0FBT0MsVUFBQyxLQUFpQztJQUNoQyxPQUFBLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUNqRCxDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztBQURsRCxDQUNrRDs7QUFQdEQsTUFBTSxLQUFPLDRCQUE0QixHQUdyQyxjQUFjLENBQ2hCLDBCQUEwQixPQUkzQjs7Ozs7QUFPQyxVQUFDLEtBQWdCLElBQUssT0FBQSxLQUFLLENBQUMsZUFBZSxFQUFyQixDQUFxQjs7QUFMN0MsTUFBTSxLQUFPLDhCQUE4QixHQUd2QyxjQUFjLENBQ2hCLFlBQVksT0FFYjs7Ozs7QUFPQyxVQUFDLEtBQXFDO0lBQ3BDLE9BQUEsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0FBQS9DLENBQStDOztBQU5uRCxNQUFNLEtBQU8seUJBQXlCLEdBR2xDLGNBQWMsQ0FDaEIsOEJBQThCLE9BRy9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBSZXR1cm5SZXF1ZXN0LCBSZXR1cm5SZXF1ZXN0TGlzdCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlV2l0aFVzZXIsIFVzZXJTdGF0ZSB9IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuaW1wb3J0IHsgZ2V0VXNlclN0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcbmltcG9ydCB7IExvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci1zdGF0ZSc7XG5pbXBvcnQgeyBTdGF0ZUxvYWRlclNlbGVjdG9ycyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0PlxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRVc2VyU3RhdGUsXG4gIChzdGF0ZTogVXNlclN0YXRlKSA9PiBzdGF0ZS5vcmRlclJldHVyblxuKTtcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgUmV0dXJuUmVxdWVzdFxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmRlclJldHVyblJlcXVlc3RTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0PikgPT5cbiAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdExvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0U3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmV0dXJuUmVxdWVzdD4pID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdFN1Y2Nlc3M6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0U3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmV0dXJuUmVxdWVzdD4pID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKSAmJlxuICAgICFTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TGlzdFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0TGlzdD5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0VXNlclN0YXRlLFxuICAoc3RhdGU6IFVzZXJTdGF0ZSkgPT4gc3RhdGUub3JkZXJSZXR1cm5MaXN0XG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TGlzdDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgUmV0dXJuUmVxdWVzdExpc3Rcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TGlzdFN0YXRlLFxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJldHVyblJlcXVlc3RMaXN0PikgPT5cbiAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKVxuKTtcbiJdfQ==