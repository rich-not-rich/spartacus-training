(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@ngrx/store'), require('@angular/common/http'), require('@angular/router'), require('@ngrx/effects'), require('@angular/platform-browser'), require('@angular/forms'), require('@ngrx/router-store'), require('i18next'), require('i18next-xhr-backend')) :
    typeof define === 'function' && define.amd ? define('@spartacus/core', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators', '@ngrx/store', '@angular/common/http', '@angular/router', '@ngrx/effects', '@angular/platform-browser', '@angular/forms', '@ngrx/router-store', 'i18next', 'i18next-xhr-backend'], factory) :
    (global = global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.core = {}), global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators, global.store, global.ng.common.http, global.ng.router, global.effects, global.ng.platformBrowser, global.ng.forms, global.fromNgrxRouter, global.i18next, global.i18nextXhrBackend));
}(this, function (exports, core, common, rxjs, operators, store, http, router, effects$d, platformBrowser, forms, routerStore, i18next, i18nextXhrBackend) { 'use strict';

    i18next = i18next && i18next.hasOwnProperty('default') ? i18next['default'] : i18next;
    i18nextXhrBackend = i18nextXhrBackend && i18nextXhrBackend.hasOwnProperty('default') ? i18nextXhrBackend['default'] : i18nextXhrBackend;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ConfigValidatorToken = new core.InjectionToken('ConfigurationValidator');
    /**
     * Use to probide config validation at app bootstrap (when all config chunks are merged)
     *
     * @param {?} configValidator
     * @return {?}
     */
    function provideConfigValidator(configValidator) {
        return {
            provide: ConfigValidatorToken,
            useValue: configValidator,
            multi: true,
        };
    }
    /**
     * @param {?} config
     * @param {?} configValidators
     * @return {?}
     */
    function validateConfig(config, configValidators) {
        var e_1, _a;
        try {
            for (var configValidators_1 = __values(configValidators), configValidators_1_1 = configValidators_1.next(); !configValidators_1_1.done; configValidators_1_1 = configValidators_1.next()) {
                var validate = configValidators_1_1.value;
                /** @type {?} */
                var warning = validate(config);
                if (warning) {
                    console.warn(warning);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configValidators_1_1 && !configValidators_1_1.done && (_a = configValidators_1.return)) _a.call(configValidators_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} item
     * @return {?}
     */
    function isObject(item) {
        return item && typeof item === 'object' && !Array.isArray(item);
    }
    /**
     * @param {?=} target
     * @param {...?} sources
     * @return {?}
     */
    function deepMerge(target) {
        var _a, _b, _c;
        if (target === void 0) { target = {}; }
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length) {
            return target;
        }
        /** @type {?} */
        var source = sources.shift() || {};
        if (isObject(target) && isObject(source)) {
            for (var key in source) {
                if (source[key] instanceof Date) {
                    Object.assign(target, (_a = {}, _a[key] = source[key], _a));
                }
                else if (isObject(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_b = {}, _b[key] = {}, _b));
                    }
                    deepMerge(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_c = {}, _c[key] = source[key], _c));
                }
            }
        }
        return deepMerge.apply(void 0, __spread([target], sources));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CONFIG_INITIALIZER = new core.InjectionToken('ConfigInitializer');
    /**
     * Used to provide asynchronous config during app initialization
     * @record
     */
    function ConfigInitializer() { }
    if (false) {
        /**
         * List of config parts that are resolved by configFactory, e.g.:
         * 'context.baseSite', 'context.language'
         * @type {?}
         */
        ConfigInitializer.prototype.scopes;
        /**
         * Promise that returns config chunk
         * @type {?}
         */
        ConfigInitializer.prototype.configFactory;
    }
    /** @type {?} */
    var CONFIG_INITIALIZER_FORROOT_GUARD = new core.InjectionToken('CONFIG_INITIALIZER_FORROOT_GUARD');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Global Configuration injection token, can be used to inject configuration to any part of the app
     * @type {?}
     */
    var Config = new core.InjectionToken('Configuration');
    /**
     * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.
     * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.
     * @type {?}
     */
    var ConfigChunk = new core.InjectionToken('ConfigurationChunk');
    /**
     * Helper function to provide configuration chunk using ConfigChunk token
     *
     * @param {?=} config Config object to merge with the global configuration
     * @return {?}
     */
    function provideConfig(config) {
        if (config === void 0) { config = {}; }
        return { provide: ConfigChunk, useValue: config, multi: true };
    }
    /**
     * Helper function to provide configuration with factory function, using ConfigChunk token
     *
     * @param {?} configFactory Factory Function that will generate config object
     * @param {?=} deps Optional dependencies to a factory function
     * @return {?}
     */
    function provideConfigFactory(configFactory, deps) {
        return {
            provide: ConfigChunk,
            useFactory: configFactory,
            multi: true,
            deps: deps,
        };
    }
    /**
     * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.
     *
     * @param {?} configChunks
     * @param {?} configValidators
     * @param {?=} configInitializerGuard
     * @return {?}
     */
    function configurationFactory(configChunks, configValidators, // TODO: remove, deprecated since 1.3, issue #5279
    configInitializerGuard // TODO: remove, deprecated since 1.3, issue #5279
    ) {
        /** @type {?} */
        var config = deepMerge.apply(void 0, __spread([{}], configChunks));
        // TODO: remove as validators should run independently, deprecated since 1.3, issue #5279
        if (core.isDevMode() && !configInitializerGuard) {
            validateConfig(config, configValidators || []);
        }
        return config;
    }
    var ConfigModule = /** @class */ (function () {
        function ConfigModule() {
        }
        /**
         * Import ConfigModule and contribute config to the global configuration
         *
         * @param config Config object to merge with the global configuration
         */
        /**
         * Import ConfigModule and contribute config to the global configuration
         *
         * @param {?} config Config object to merge with the global configuration
         * @return {?}
         */
        ConfigModule.withConfig = /**
         * Import ConfigModule and contribute config to the global configuration
         *
         * @param {?} config Config object to merge with the global configuration
         * @return {?}
         */
        function (config) {
            return {
                ngModule: ConfigModule,
                providers: [provideConfig(config)],
            };
        };
        /**
         * Import ConfigModule and contribute config to the global configuration using factory function
         *
         * @param configFactory Factory function that will generate configuration
         * @param deps Optional dependencies to factory function
         */
        /**
         * Import ConfigModule and contribute config to the global configuration using factory function
         *
         * @param {?} configFactory Factory function that will generate configuration
         * @param {?=} deps Optional dependencies to factory function
         * @return {?}
         */
        ConfigModule.withConfigFactory = /**
         * Import ConfigModule and contribute config to the global configuration using factory function
         *
         * @param {?} configFactory Factory function that will generate configuration
         * @param {?=} deps Optional dependencies to factory function
         * @return {?}
         */
        function (configFactory, deps) {
            return {
                ngModule: ConfigModule,
                providers: [provideConfigFactory(configFactory, deps)],
            };
        };
        /**
         * Module with providers, should be imported only once, if possible, at the root of the app.
         *
         * @param config
         */
        /**
         * Module with providers, should be imported only once, if possible, at the root of the app.
         *
         * @param {?=} config
         * @return {?}
         */
        ConfigModule.forRoot = /**
         * Module with providers, should be imported only once, if possible, at the root of the app.
         *
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: ConfigModule,
                providers: [
                    provideConfig(config),
                    {
                        provide: Config,
                        useFactory: configurationFactory,
                        deps: [
                            ConfigChunk,
                            [new core.Optional(), ConfigValidatorToken],
                            [new core.Optional(), CONFIG_INITIALIZER_FORROOT_GUARD],
                        ],
                    },
                ],
            };
        };
        ConfigModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [],
                    },] }
        ];
        return ConfigModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} cookie
     * @param {?} name
     * @return {?}
     */
    function getCookie(cookie, name) {
        /** @type {?} */
        var regExp = new RegExp('(?:^|;\\s*)' + name + '=([^;]*)', 'g');
        /** @type {?} */
        var result = regExp.exec(cookie);
        return (result && decodeURIComponent(result[1])) || '';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TEST_CONFIG_COOKIE_NAME = new core.InjectionToken('TEST_CONFIG_COOKIE_NAME');
    /**
     * @param {?} config
     * @return {?}
     */
    function parseConfigJSON(config) {
        try {
            return JSON.parse(decodeURIComponent(config));
        }
        catch (_) {
            return {};
        }
    }
    /**
     * @param {?} cookieName
     * @param {?} platform
     * @param {?} document
     * @return {?}
     */
    function configFromCookieFactory(cookieName, platform, document) {
        if (common.isPlatformBrowser(platform) && cookieName) {
            /** @type {?} */
            var config = getCookie(document.cookie, cookieName);
            return parseConfigJSON(config);
        }
        return {};
    }
    /**
     * @record
     */
    function TestConfigModuleOptions() { }
    if (false) {
        /** @type {?} */
        TestConfigModuleOptions.prototype.cookie;
    }
    /**
     * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).
     *
     * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
     */
    var TestConfigModule = /** @class */ (function () {
        function TestConfigModule() {
        }
        /**
         * Injects JSON config from the cookie of the given name.
         *
         * Be aware of the cookie limitations (4096 bytes).
         *
         * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
         */
        /**
         * Injects JSON config from the cookie of the given name.
         *
         * Be aware of the cookie limitations (4096 bytes).
         *
         * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
         * @param {?} options
         * @return {?}
         */
        TestConfigModule.forRoot = /**
         * Injects JSON config from the cookie of the given name.
         *
         * Be aware of the cookie limitations (4096 bytes).
         *
         * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            return {
                ngModule: TestConfigModule,
                providers: [
                    {
                        provide: TEST_CONFIG_COOKIE_NAME,
                        useValue: options && options.cookie,
                    },
                    provideConfigFactory(configFromCookieFactory, [
                        TEST_CONFIG_COOKIE_NAME,
                        core.PLATFORM_ID,
                        common.DOCUMENT,
                    ]),
                ],
            };
        };
        TestConfigModule.decorators = [
            { type: core.NgModule, args: [{},] }
        ];
        return TestConfigModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Provides support for CONFIG_INITIALIZERS
     */
    var ConfigInitializerService = /** @class */ (function () {
        function ConfigInitializerService(config, initializerGuard) {
            this.config = config;
            this.initializerGuard = initializerGuard;
            this.ongoingScopes$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(ConfigInitializerService.prototype, "isStable", {
            /**
             * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly
             */
            get: /**
             * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly
             * @return {?}
             */
            function () {
                return (!this.initializerGuard ||
                    (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Recommended way to get config for code that can run before app will finish
         * initialization (APP_INITIALIZERS, selected service constructors)
         *
         * Used without parameters waits for the whole config to become stable
         *
         * Parameters allow to describe which part of the config should be stable using
         * string describing config part, e.g.:
         * 'siteContext', 'siteContext.language', etc.
         *
         * @param scopes String describing parts of the config we want to be sure are stable
         */
        /**
         * Recommended way to get config for code that can run before app will finish
         * initialization (APP_INITIALIZERS, selected service constructors)
         *
         * Used without parameters waits for the whole config to become stable
         *
         * Parameters allow to describe which part of the config should be stable using
         * string describing config part, e.g.:
         * 'siteContext', 'siteContext.language', etc.
         *
         * @param {...?} scopes String describing parts of the config we want to be sure are stable
         * @return {?}
         */
        ConfigInitializerService.prototype.getStableConfig = /**
         * Recommended way to get config for code that can run before app will finish
         * initialization (APP_INITIALIZERS, selected service constructors)
         *
         * Used without parameters waits for the whole config to become stable
         *
         * Parameters allow to describe which part of the config should be stable using
         * string describing config part, e.g.:
         * 'siteContext', 'siteContext.language', etc.
         *
         * @param {...?} scopes String describing parts of the config we want to be sure are stable
         * @return {?}
         */
        function () {
            var scopes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                scopes[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.isStable) {
                        return [2 /*return*/, this.config];
                    }
                    return [2 /*return*/, this.ongoingScopes$
                            .pipe(operators.filter((/**
                         * @param {?} ongoingScopes
                         * @return {?}
                         */
                        function (ongoingScopes) { return ongoingScopes && _this.areReady(scopes, ongoingScopes); })), operators.take(1), operators.mapTo(this.config))
                            .toPromise()];
                });
            });
        };
        /**
         * Removes provided scopes from currently ongoingScopes
         *
         * @param scopes
         */
        /**
         * Removes provided scopes from currently ongoingScopes
         *
         * @protected
         * @param {?} scopes
         * @return {?}
         */
        ConfigInitializerService.prototype.finishScopes = /**
         * Removes provided scopes from currently ongoingScopes
         *
         * @protected
         * @param {?} scopes
         * @return {?}
         */
        function (scopes) {
            var e_1, _a;
            /** @type {?} */
            var newScopes = __spread(this.ongoingScopes$.value);
            try {
                for (var scopes_1 = __values(scopes), scopes_1_1 = scopes_1.next(); !scopes_1_1.done; scopes_1_1 = scopes_1.next()) {
                    var scope = scopes_1_1.value;
                    newScopes.splice(newScopes.indexOf(scope), 1);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (scopes_1_1 && !scopes_1_1.done && (_a = scopes_1.return)) _a.call(scopes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.ongoingScopes$.next(newScopes);
        };
        /**
         * Return true if provided scopes are not part of ongoingScopes
         *
         * @param scopes
         * @param ongoingScopes
         */
        /**
         * Return true if provided scopes are not part of ongoingScopes
         *
         * @protected
         * @param {?} scopes
         * @param {?} ongoingScopes
         * @return {?}
         */
        ConfigInitializerService.prototype.areReady = /**
         * Return true if provided scopes are not part of ongoingScopes
         *
         * @protected
         * @param {?} scopes
         * @param {?} ongoingScopes
         * @return {?}
         */
        function (scopes, ongoingScopes) {
            var e_2, _a, e_3, _b;
            if (!scopes.length) {
                return !ongoingScopes.length;
            }
            try {
                for (var scopes_2 = __values(scopes), scopes_2_1 = scopes_2.next(); !scopes_2_1.done; scopes_2_1 = scopes_2.next()) {
                    var scope = scopes_2_1.value;
                    try {
                        for (var ongoingScopes_1 = (e_3 = void 0, __values(ongoingScopes)), ongoingScopes_1_1 = ongoingScopes_1.next(); !ongoingScopes_1_1.done; ongoingScopes_1_1 = ongoingScopes_1.next()) {
                            var ongoingScope = ongoingScopes_1_1.value;
                            if (this.scopesOverlap(scope, ongoingScope)) {
                                return false;
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (ongoingScopes_1_1 && !ongoingScopes_1_1.done && (_b = ongoingScopes_1.return)) _b.call(ongoingScopes_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (scopes_2_1 && !scopes_2_1.done && (_a = scopes_2.return)) _a.call(scopes_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return true;
        };
        /**
         * Check if two scopes overlap.
         *
         * Example of scopes that overlap:
         * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'
         *
         * Example of scopes that do not overlap:
         * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'
         *
         * @param a ScopeA
         * @param b ScopeB
         */
        /**
         * Check if two scopes overlap.
         *
         * Example of scopes that overlap:
         * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'
         *
         * Example of scopes that do not overlap:
         * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'
         *
         * @protected
         * @param {?} a ScopeA
         * @param {?} b ScopeB
         * @return {?}
         */
        ConfigInitializerService.prototype.scopesOverlap = /**
         * Check if two scopes overlap.
         *
         * Example of scopes that overlap:
         * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'
         *
         * Example of scopes that do not overlap:
         * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'
         *
         * @protected
         * @param {?} a ScopeA
         * @param {?} b ScopeB
         * @return {?}
         */
        function (a, b) {
            var _a;
            if (b.length > a.length) {
                _a = __read([b, a], 2), a = _a[0], b = _a[1];
            }
            return a.startsWith(b) && (a[b.length] || '.') === '.';
        };
        /**
         * @internal
         *
         * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS
         *
         */
        /**
         * \@internal
         *
         * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS
         *
         * @param {?=} initializers
         * @return {?}
         */
        ConfigInitializerService.prototype.initialize = /**
         * \@internal
         *
         * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS
         *
         * @param {?=} initializers
         * @return {?}
         */
        function (initializers) {
            return __awaiter(this, void 0, void 0, function () {
                var ongoingScopes, asyncConfigs, _loop_1, this_1, _a, _b, initializer;
                var e_4, _c;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (this.ongoingScopes$.value) {
                                // guard for double initialization
                                return [2 /*return*/];
                            }
                            ongoingScopes = [];
                            asyncConfigs = [];
                            _loop_1 = function (initializer) {
                                if (!initializer) {
                                    return "continue";
                                }
                                if (!initializer.scopes || !initializer.scopes.length) {
                                    throw new Error('CONFIG_INITIALIZER should provide scope!');
                                }
                                if (core.isDevMode() && !this_1.areReady(initializer.scopes, ongoingScopes)) {
                                    console.warn('More than one CONFIG_INITIALIZER is initializing the same config scope.');
                                }
                                ongoingScopes.push.apply(ongoingScopes, __spread(initializer.scopes));
                                asyncConfigs.push(((/**
                                 * @return {?}
                                 */
                                function () { return __awaiter(_this, void 0, void 0, function () {
                                    var _a, _b;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                _a = deepMerge;
                                                _b = [this.config];
                                                return [4 /*yield*/, initializer.configFactory()];
                                            case 1:
                                                _a.apply(void 0, _b.concat([_c.sent()]));
                                                this.finishScopes(initializer.scopes);
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }))());
                            };
                            this_1 = this;
                            try {
                                for (_a = __values(initializers || []), _b = _a.next(); !_b.done; _b = _a.next()) {
                                    initializer = _b.value;
                                    _loop_1(initializer);
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                            this.ongoingScopes$.next(ongoingScopes);
                            if (!asyncConfigs.length) return [3 /*break*/, 2];
                            return [4 /*yield*/, Promise.all(asyncConfigs)];
                        case 1:
                            _d.sent();
                            _d.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigInitializerService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ConfigInitializerService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [Config,] }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [CONFIG_INITIALIZER_FORROOT_GUARD,] }] }
        ]; };
        /** @nocollapse */ ConfigInitializerService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ConfigInitializerService_Factory() { return new ConfigInitializerService(core.ɵɵinject(Config), core.ɵɵinject(CONFIG_INITIALIZER_FORROOT_GUARD, 8)); }, token: ConfigInitializerService, providedIn: "root" });
        return ConfigInitializerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ConfigInitializerService.prototype.ongoingScopes$;
        /**
         * @type {?}
         * @protected
         */
        ConfigInitializerService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        ConfigInitializerService.prototype.initializerGuard;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} configInitializer
     * @param {?} validators
     * @return {?}
     */
    function configValidatorFactory(configInitializer, validators) {
        /** @type {?} */
        var validate = (/**
         * @return {?}
         */
        function () {
            if (core.isDevMode()) {
                configInitializer
                    .getStableConfig()
                    .then((/**
                 * @param {?} config
                 * @return {?}
                 */
                function (config) { return validateConfig(config, validators || []); }));
            }
        });
        return validate;
    }
    /**
     * Should stay private in 1.x
     * as forRoot() is used internally by ConfigInitializerModule
     *
     * issue: #5279
     */
    var ConfigValidatorModule = /** @class */ (function () {
        function ConfigValidatorModule() {
        }
        /**
         * @return {?}
         */
        ConfigValidatorModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: ConfigValidatorModule,
                providers: [
                    {
                        provide: core.APP_INITIALIZER,
                        multi: true,
                        useFactory: configValidatorFactory,
                        deps: [
                            ConfigInitializerService,
                            [new core.Optional(), ConfigValidatorToken],
                        ],
                    },
                ],
            };
        };
        ConfigValidatorModule.decorators = [
            { type: core.NgModule }
        ];
        return ConfigValidatorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} configInitializer
     * @param {?} initializers
     * @return {?}
     */
    function configInitializerFactory(configInitializer, initializers) {
        /** @type {?} */
        var isReady = (/**
         * @return {?}
         */
        function () { return configInitializer.initialize(initializers); });
        return isReady;
    }
    var ConfigInitializerModule = /** @class */ (function () {
        function ConfigInitializerModule() {
        }
        /**
         * @return {?}
         */
        ConfigInitializerModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: ConfigInitializerModule,
                providers: [
                    {
                        provide: CONFIG_INITIALIZER_FORROOT_GUARD,
                        useValue: true,
                    },
                    {
                        provide: core.APP_INITIALIZER,
                        multi: true,
                        useFactory: configInitializerFactory,
                        deps: [
                            ConfigInitializerService,
                            [new core.Optional(), CONFIG_INITIALIZER],
                        ],
                    },
                ],
            };
        };
        ConfigInitializerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            ConfigValidatorModule.forRoot(),
                        ],
                    },] }
        ];
        return ConfigInitializerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    SiteContextConfig = /** @class */ (function () {
        function SiteContextConfig() {
        }
        return SiteContextConfig;
    }());
    if (false) {
        /** @type {?} */
        SiteContextConfig.prototype.context;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    OccConfig = /** @class */ (function (_super) {
        __extends(OccConfig, _super);
        function OccConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return OccConfig;
    }(SiteContextConfig));
    if (false) {
        /** @type {?} */
        OccConfig.prototype.backend;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    AnonymousConsentsConfig = /** @class */ (function (_super) {
        __extends(AnonymousConsentsConfig, _super);
        function AnonymousConsentsConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AnonymousConsentsConfig;
    }(OccConfig));
    if (false) {
        /** @type {?} */
        AnonymousConsentsConfig.prototype.anonymousConsents;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultAnonymousConsentsConfig = {
        anonymousConsents: {
            registerConsent: 'MARKETING_NEWSLETTER',
            showLegalDescriptionInDialog: true,
            requiredConsents: [],
            consentManagementPage: {
                showAnonymousConsents: true,
                hideConsents: [],
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    AuthConfig = /** @class */ (function (_super) {
        __extends(AuthConfig, _super);
        function AuthConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AuthConfig;
    }(OccConfig));
    if (false) {
        /** @type {?} */
        AuthConfig.prototype.authentication;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultAuthConfig = {
        authentication: {
            client_id: 'mobile_android',
            client_secret: 'secret',
        },
        backend: {
            occ: {
                endpoints: {
                    login: '/authorizationserver/oauth/token',
                    revoke: '/authorizationserver/oauth/revoke',
                },
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var USE_CLIENT_TOKEN = 'cx-use-client-token';
    /** @type {?} */
    var USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';
    /** @type {?} */
    var TOKEN_REVOCATION_HEADER = 'cx-token-revocation';
    var InterceptorUtil = /** @class */ (function () {
        function InterceptorUtil() {
        }
        /**
         * @template T
         * @param {?} headerName
         * @param {?} interceptorParam
         * @param {?=} headers
         * @return {?}
         */
        InterceptorUtil.createHeader = /**
         * @template T
         * @param {?} headerName
         * @param {?} interceptorParam
         * @param {?=} headers
         * @return {?}
         */
        function (headerName, interceptorParam, headers) {
            if (headers) {
                return headers.append(headerName, JSON.stringify(interceptorParam));
            }
            headers = new http.HttpHeaders().set(headerName, JSON.stringify(interceptorParam));
            return headers;
        };
        /**
         * @param {?} headerName
         * @param {?} request
         * @return {?}
         */
        InterceptorUtil.removeHeader = /**
         * @param {?} headerName
         * @param {?} request
         * @return {?}
         */
        function (headerName, request) {
            /** @type {?} */
            var updatedHeaders = request.headers.delete(headerName);
            return request.clone({ headers: updatedHeaders });
        };
        /**
         * @template T
         * @param {?} headerName
         * @param {?} headers
         * @return {?}
         */
        InterceptorUtil.getInterceptorParam = /**
         * @template T
         * @param {?} headerName
         * @param {?} headers
         * @return {?}
         */
        function (headerName, headers) {
            /** @type {?} */
            var rawValue = headers.get(headerName);
            if (rawValue) {
                return JSON.parse(rawValue);
            }
            return undefined;
        };
        return InterceptorUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OCC_USER_ID_CURRENT = 'current';
    /** @type {?} */
    var OCC_USER_ID_ANONYMOUS = 'anonymous';
    /** @type {?} */
    var OCC_USER_ID_GUEST = 'guest';
    /** @type {?} */
    var OCC_CART_ID_CURRENT = 'current';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';
    /** @type {?} */
    var ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';
    /**
     * @record
     */
    function EntityMeta() { }
    if (false) {
        /** @type {?} */
        EntityMeta.prototype.entityType;
        /** @type {?} */
        EntityMeta.prototype.entityId;
        /** @type {?|undefined} */
        EntityMeta.prototype.entityRemove;
    }
    /**
     * @param {?} type
     * @param {?} id
     * @return {?}
     */
    function entityMeta(type, id) {
        return {
            entityType: type,
            entityId: id,
        };
    }
    /**
     * @param {?} type
     * @param {?} id
     * @return {?}
     */
    function entityRemoveMeta(type, id) {
        return {
            entityId: id,
            entityType: type,
            entityRemove: true,
        };
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function entityRemoveAllMeta(type) {
        return {
            entityId: null,
            entityType: type,
            entityRemove: true,
        };
    }
    /**
     * @record
     */
    function EntityAction() { }
    if (false) {
        /** @type {?|undefined} */
        EntityAction.prototype.payload;
        /** @type {?|undefined} */
        EntityAction.prototype.meta;
    }
    var EntityRemoveAction = /** @class */ (function () {
        function EntityRemoveAction(entityType, id) {
            this.type = ENTITY_REMOVE_ACTION;
            this.meta = entityRemoveMeta(entityType, id);
        }
        return EntityRemoveAction;
    }());
    if (false) {
        /** @type {?} */
        EntityRemoveAction.prototype.type;
        /** @type {?} */
        EntityRemoveAction.prototype.meta;
    }
    var EntityRemoveAllAction = /** @class */ (function () {
        function EntityRemoveAllAction(entityType) {
            this.type = ENTITY_REMOVE_ALL_ACTION;
            this.meta = entityRemoveAllMeta(entityType);
        }
        return EntityRemoveAllAction;
    }());
    if (false) {
        /** @type {?} */
        EntityRemoveAllAction.prototype.type;
        /** @type {?} */
        EntityRemoveAllAction.prototype.meta;
    }

    var entity_action = /*#__PURE__*/Object.freeze({
        ENTITY_REMOVE_ACTION: ENTITY_REMOVE_ACTION,
        ENTITY_REMOVE_ALL_ACTION: ENTITY_REMOVE_ALL_ACTION,
        EntityMeta: EntityMeta,
        entityMeta: entityMeta,
        entityRemoveMeta: entityRemoveMeta,
        entityRemoveAllMeta: entityRemoveAllMeta,
        EntityAction: EntityAction,
        EntityRemoveAction: EntityRemoveAction,
        EntityRemoveAllAction: EntityRemoveAllAction
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOADER_LOAD_ACTION = '[LOADER] LOAD';
    /** @type {?} */
    var LOADER_FAIL_ACTION = '[LOADER] FAIL';
    /** @type {?} */
    var LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';
    /** @type {?} */
    var LOADER_RESET_ACTION = '[LOADER] RESET';
    /**
     * @record
     */
    function LoaderMeta() { }
    if (false) {
        /** @type {?} */
        LoaderMeta.prototype.entityType;
        /** @type {?} */
        LoaderMeta.prototype.loader;
    }
    /**
     * @record
     */
    function LoaderAction() { }
    if (false) {
        /** @type {?|undefined} */
        LoaderAction.prototype.payload;
        /** @type {?|undefined} */
        LoaderAction.prototype.meta;
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function loadMeta(entityType) {
        return {
            entityType: entityType,
            loader: {
                load: true,
            },
        };
    }
    /**
     * @param {?} entityType
     * @param {?=} error
     * @return {?}
     */
    function failMeta(entityType, error) {
        return {
            entityType: entityType,
            loader: {
                error: error ? error : true,
            },
        };
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function successMeta(entityType) {
        return {
            entityType: entityType,
            loader: {
                success: true,
            },
        };
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function resetMeta(entityType) {
        return {
            entityType: entityType,
            loader: {},
        };
    }
    var LoaderLoadAction = /** @class */ (function () {
        function LoaderLoadAction(entityType) {
            this.type = LOADER_LOAD_ACTION;
            this.meta = loadMeta(entityType);
        }
        return LoaderLoadAction;
    }());
    if (false) {
        /** @type {?} */
        LoaderLoadAction.prototype.type;
        /** @type {?} */
        LoaderLoadAction.prototype.meta;
    }
    var LoaderFailAction = /** @class */ (function () {
        function LoaderFailAction(entityType, error) {
            this.type = LOADER_FAIL_ACTION;
            this.meta = failMeta(entityType, error);
        }
        return LoaderFailAction;
    }());
    if (false) {
        /** @type {?} */
        LoaderFailAction.prototype.type;
        /** @type {?} */
        LoaderFailAction.prototype.meta;
    }
    var LoaderSuccessAction = /** @class */ (function () {
        function LoaderSuccessAction(entityType) {
            this.type = LOADER_SUCCESS_ACTION;
            this.meta = successMeta(entityType);
        }
        return LoaderSuccessAction;
    }());
    if (false) {
        /** @type {?} */
        LoaderSuccessAction.prototype.type;
        /** @type {?} */
        LoaderSuccessAction.prototype.meta;
    }
    var LoaderResetAction = /** @class */ (function () {
        function LoaderResetAction(entityType) {
            this.type = LOADER_RESET_ACTION;
            this.meta = resetMeta(entityType);
        }
        return LoaderResetAction;
    }());
    if (false) {
        /** @type {?} */
        LoaderResetAction.prototype.type;
        /** @type {?} */
        LoaderResetAction.prototype.meta;
    }

    var loader_action = /*#__PURE__*/Object.freeze({
        LOADER_LOAD_ACTION: LOADER_LOAD_ACTION,
        LOADER_FAIL_ACTION: LOADER_FAIL_ACTION,
        LOADER_SUCCESS_ACTION: LOADER_SUCCESS_ACTION,
        LOADER_RESET_ACTION: LOADER_RESET_ACTION,
        LoaderMeta: LoaderMeta,
        LoaderAction: LoaderAction,
        loadMeta: loadMeta,
        failMeta: failMeta,
        successMeta: successMeta,
        resetMeta: resetMeta,
        LoaderLoadAction: LoaderLoadAction,
        LoaderFailAction: LoaderFailAction,
        LoaderSuccessAction: LoaderSuccessAction,
        LoaderResetAction: LoaderResetAction
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ENTITY_LOAD_ACTION = '[ENTITY] LOAD';
    /** @type {?} */
    var ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';
    /** @type {?} */
    var ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';
    /** @type {?} */
    var ENTITY_RESET_ACTION = '[ENTITY] RESET';
    /**
     * @record
     */
    function EntityLoaderMeta() { }
    /**
     * @record
     */
    function EntityLoaderAction() { }
    if (false) {
        /** @type {?|undefined} */
        EntityLoaderAction.prototype.payload;
        /** @type {?|undefined} */
        EntityLoaderAction.prototype.meta;
    }
    /**
     * @param {?} entityType
     * @param {?} id
     * @return {?}
     */
    function entityLoadMeta(entityType, id) {
        return __assign({}, loadMeta(entityType), entityMeta(entityType, id));
    }
    /**
     * @param {?} entityType
     * @param {?} id
     * @param {?=} error
     * @return {?}
     */
    function entityFailMeta(entityType, id, error) {
        return __assign({}, failMeta(entityType, error), entityMeta(entityType, id));
    }
    /**
     * @param {?} entityType
     * @param {?} id
     * @return {?}
     */
    function entitySuccessMeta(entityType, id) {
        return __assign({}, successMeta(entityType), entityMeta(entityType, id));
    }
    /**
     * @param {?} entityType
     * @param {?} id
     * @return {?}
     */
    function entityResetMeta(entityType, id) {
        return __assign({}, resetMeta(entityType), entityMeta(entityType, id));
    }
    var EntityLoadAction = /** @class */ (function () {
        function EntityLoadAction(entityType, id) {
            this.type = ENTITY_LOAD_ACTION;
            this.meta = entityLoadMeta(entityType, id);
        }
        return EntityLoadAction;
    }());
    if (false) {
        /** @type {?} */
        EntityLoadAction.prototype.type;
        /** @type {?} */
        EntityLoadAction.prototype.meta;
    }
    var EntityFailAction = /** @class */ (function () {
        function EntityFailAction(entityType, id, error) {
            this.type = ENTITY_FAIL_ACTION;
            this.meta = entityFailMeta(entityType, id, error);
        }
        return EntityFailAction;
    }());
    if (false) {
        /** @type {?} */
        EntityFailAction.prototype.type;
        /** @type {?} */
        EntityFailAction.prototype.meta;
    }
    var EntitySuccessAction = /** @class */ (function () {
        function EntitySuccessAction(entityType, id, payload) {
            this.payload = payload;
            this.type = ENTITY_SUCCESS_ACTION;
            this.meta = entitySuccessMeta(entityType, id);
        }
        return EntitySuccessAction;
    }());
    if (false) {
        /** @type {?} */
        EntitySuccessAction.prototype.type;
        /** @type {?} */
        EntitySuccessAction.prototype.meta;
        /** @type {?} */
        EntitySuccessAction.prototype.payload;
    }
    var EntityResetAction = /** @class */ (function () {
        function EntityResetAction(entityType, id) {
            this.type = ENTITY_RESET_ACTION;
            this.meta = entityResetMeta(entityType, id);
        }
        return EntityResetAction;
    }());
    if (false) {
        /** @type {?} */
        EntityResetAction.prototype.type;
        /** @type {?} */
        EntityResetAction.prototype.meta;
    }

    var entityLoader_action = /*#__PURE__*/Object.freeze({
        ENTITY_LOAD_ACTION: ENTITY_LOAD_ACTION,
        ENTITY_FAIL_ACTION: ENTITY_FAIL_ACTION,
        ENTITY_SUCCESS_ACTION: ENTITY_SUCCESS_ACTION,
        ENTITY_RESET_ACTION: ENTITY_RESET_ACTION,
        EntityLoaderMeta: EntityLoaderMeta,
        EntityLoaderAction: EntityLoaderAction,
        entityLoadMeta: entityLoadMeta,
        entityFailMeta: entityFailMeta,
        entitySuccessMeta: entitySuccessMeta,
        entityResetMeta: entityResetMeta,
        EntityLoadAction: EntityLoadAction,
        EntityFailAction: EntityFailAction,
        EntitySuccessAction: EntitySuccessAction,
        EntityResetAction: EntityResetAction
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialLoaderState = {
        loading: false,
        error: false,
        success: false,
        value: undefined,
    };
    /**
     * Higher order reducer that adds generic loading flag to chunk of the state
     *
     * Utilizes "loader" meta field of actions to set specific flags for specific
     * action (LOAD, SUCCESS, FAIL, RESET)
     * @template T
     * @param {?} entityType
     * @param {?=} reducer
     * @return {?}
     */
    function loaderReducer(entityType, reducer) {
        return (/**
         * @param {?=} state
         * @param {?=} action
         * @return {?}
         */
        function (state, action) {
            if (state === void 0) { state = initialLoaderState; }
            if (action.meta &&
                action.meta.loader &&
                action.meta.entityType === entityType) {
                /** @type {?} */
                var entity = action.meta.loader;
                if (entity.load) {
                    return __assign({}, state, { loading: true, value: reducer ? reducer(state.value, action) : state.value });
                }
                else if (entity.error) {
                    return __assign({}, state, { loading: false, error: true, success: false, value: reducer ? reducer(state.value, action) : undefined });
                }
                else if (entity.success) {
                    return __assign({}, state, { value: reducer ? reducer(state.value, action) : action.payload, loading: false, error: false, success: true });
                }
                else {
                    // reset state action
                    return __assign({}, initialLoaderState, { value: reducer
                            ? reducer(initialLoaderState.value, action)
                            : initialLoaderState.value });
                }
            }
            if (reducer) {
                /** @type {?} */
                var newValue = reducer(state.value, action);
                if (newValue !== state.value) {
                    return __assign({}, state, { value: newValue });
                }
            }
            return state;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entityStateSelector(state, id) {
        return state.entities[id] || initialLoaderState;
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entityValueSelector(state, id) {
        /** @type {?} */
        var entityState = entityStateSelector(state, id);
        return entityState.value;
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entityLoadingSelector(state, id) {
        /** @type {?} */
        var entityState = entityStateSelector(state, id);
        return entityState.loading;
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entityErrorSelector(state, id) {
        /** @type {?} */
        var entityState = entityStateSelector(state, id);
        return entityState.error;
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entitySuccessSelector(state, id) {
        /** @type {?} */
        var entityState = entityStateSelector(state, id);
        return entityState.success;
    }

    var entityLoader_selectors = /*#__PURE__*/Object.freeze({
        entityStateSelector: entityStateSelector,
        entityValueSelector: entityValueSelector,
        entityLoadingSelector: entityLoadingSelector,
        entityErrorSelector: entityErrorSelector,
        entitySuccessSelector: entitySuccessSelector
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialEntityState = { entities: {} };
    /**
     * Higher order reducer for reusing reducer logic for multiple entities
     *
     * Utilizes entityId meta field to target entity by id in actions
     * @template T
     * @param {?} entityType
     * @param {?} reducer
     * @return {?}
     */
    function entityReducer(entityType, reducer) {
        return (/**
         * @param {?=} state
         * @param {?=} action
         * @return {?}
         */
        function (state, action) {
            if (state === void 0) { state = initialEntityState; }
            /** @type {?} */
            var ids;
            /** @type {?} */
            var partitionPayload = false;
            if (action.meta &&
                action.meta.entityType === entityType &&
                action.meta.entityId !== undefined) {
                ids = [].concat(action.meta.entityId);
                // remove selected entities
                if (action.meta.entityRemove) {
                    if (action.meta.entityId === null) {
                        return initialEntityState;
                    }
                    else {
                        /** @type {?} */
                        var removed_1 = false;
                        /** @type {?} */
                        var newEntities = Object.keys(state.entities).reduce((/**
                         * @param {?} acc
                         * @param {?} cur
                         * @return {?}
                         */
                        function (acc, cur) {
                            if (ids.includes(cur)) {
                                removed_1 = true;
                            }
                            else {
                                acc[cur] = state.entities[cur];
                            }
                            return acc;
                        }), {});
                        return removed_1 ? { entities: newEntities } : state;
                    }
                }
                partitionPayload =
                    Array.isArray(action.meta.entityId) && Array.isArray(action.payload);
            }
            else {
                ids = Object.keys(state.entities);
            }
            /** @type {?} */
            var entityUpdates = {};
            for (var i = 0; i < ids.length; i++) {
                /** @type {?} */
                var id = ids[i];
                /** @type {?} */
                var subAction = partitionPayload
                    ? __assign({}, action, { payload: action.payload[i] }) : action;
                /** @type {?} */
                var newState = reducer(state.entities[id], subAction);
                if (newState) {
                    entityUpdates[id] = newState;
                }
            }
            if (Object.keys(entityUpdates).length > 0) {
                return __assign({}, state, { entities: __assign({}, state.entities, entityUpdates) });
            }
            return state;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing
     * single state reducer to support multiple entities with generic loading flags
     * @template T
     * @param {?} entityType
     * @param {?=} reducer
     * @return {?}
     */
    function entityLoaderReducer(entityType, reducer) {
        return entityReducer(entityType, loaderReducer(entityType, reducer));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';
    /** @type {?} */
    var PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';
    /** @type {?} */
    var PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';
    /**
     * @record
     */
    function ProcessesLoaderMeta() { }
    if (false) {
        /** @type {?} */
        ProcessesLoaderMeta.prototype.entityType;
        /** @type {?|undefined} */
        ProcessesLoaderMeta.prototype.processesCountDiff;
    }
    /**
     * @record
     */
    function ProcessesLoaderAction() { }
    if (false) {
        /** @type {?|undefined} */
        ProcessesLoaderAction.prototype.payload;
        /** @type {?|undefined} */
        ProcessesLoaderAction.prototype.meta;
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function processesIncrementMeta(entityType) {
        return {
            entityType: entityType,
            loader: undefined,
            processesCountDiff: 1,
        };
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function processesDecrementMeta(entityType) {
        return {
            entityType: entityType,
            loader: undefined,
            processesCountDiff: -1,
        };
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function processesLoaderResetMeta(entityType) {
        // processes reset action is a reset action for loader reducer, but not the other way around
        return __assign({}, resetMeta(entityType), { processesCountDiff: null });
    }
    var ProcessesLoaderResetAction = /** @class */ (function () {
        function ProcessesLoaderResetAction(entityType) {
            this.type = PROCESSES_LOADER_RESET_ACTION;
            this.meta = processesLoaderResetMeta(entityType);
        }
        return ProcessesLoaderResetAction;
    }());
    if (false) {
        /** @type {?} */
        ProcessesLoaderResetAction.prototype.type;
        /** @type {?} */
        ProcessesLoaderResetAction.prototype.meta;
    }
    var ProcessesIncrementAction = /** @class */ (function () {
        function ProcessesIncrementAction(entityType) {
            this.type = PROCESSES_INCREMENT_ACTION;
            this.meta = processesIncrementMeta(entityType);
        }
        return ProcessesIncrementAction;
    }());
    if (false) {
        /** @type {?} */
        ProcessesIncrementAction.prototype.type;
        /** @type {?} */
        ProcessesIncrementAction.prototype.meta;
    }
    var ProcessesDecrementAction = /** @class */ (function () {
        function ProcessesDecrementAction(entityType) {
            this.type = PROCESSES_DECREMENT_ACTION;
            this.meta = processesDecrementMeta(entityType);
        }
        return ProcessesDecrementAction;
    }());
    if (false) {
        /** @type {?} */
        ProcessesDecrementAction.prototype.type;
        /** @type {?} */
        ProcessesDecrementAction.prototype.meta;
    }

    var processesLoader_action = /*#__PURE__*/Object.freeze({
        PROCESSES_INCREMENT_ACTION: PROCESSES_INCREMENT_ACTION,
        PROCESSES_DECREMENT_ACTION: PROCESSES_DECREMENT_ACTION,
        PROCESSES_LOADER_RESET_ACTION: PROCESSES_LOADER_RESET_ACTION,
        ProcessesLoaderMeta: ProcessesLoaderMeta,
        ProcessesLoaderAction: ProcessesLoaderAction,
        processesIncrementMeta: processesIncrementMeta,
        processesDecrementMeta: processesDecrementMeta,
        processesLoaderResetMeta: processesLoaderResetMeta,
        ProcessesLoaderResetAction: ProcessesLoaderResetAction,
        ProcessesIncrementAction: ProcessesIncrementAction,
        ProcessesDecrementAction: ProcessesDecrementAction
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ENTITY_PROCESSES_LOADER_RESET_ACTION = '[ENTITY] PROCESSES LOADER RESET';
    /** @type {?} */
    var ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';
    /** @type {?} */
    var ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';
    /**
     * @record
     */
    function EntityProcessesLoaderMeta() { }
    /**
     * @record
     */
    function EntityProcessesLoaderAction() { }
    if (false) {
        /** @type {?|undefined} */
        EntityProcessesLoaderAction.prototype.payload;
        /** @type {?|undefined} */
        EntityProcessesLoaderAction.prototype.meta;
    }
    /**
     * @param {?} entityType
     * @param {?} id
     * @return {?}
     */
    function entityProcessesLoaderResetMeta(entityType, id) {
        return __assign({}, processesLoaderResetMeta(entityType), entityMeta(entityType, id));
    }
    /**
     * @param {?} entityType
     * @param {?} id
     * @return {?}
     */
    function entityProcessesIncrementMeta(entityType, id) {
        return __assign({}, processesIncrementMeta(entityType), entityMeta(entityType, id));
    }
    /**
     * @param {?} entityType
     * @param {?} id
     * @return {?}
     */
    function entityProcessesDecrementMeta(entityType, id) {
        return __assign({}, processesDecrementMeta(entityType), entityMeta(entityType, id));
    }
    var EntityProcessesLoaderResetAction = /** @class */ (function () {
        function EntityProcessesLoaderResetAction(entityType, id) {
            this.type = ENTITY_PROCESSES_LOADER_RESET_ACTION;
            this.meta = entityProcessesLoaderResetMeta(entityType, id);
        }
        return EntityProcessesLoaderResetAction;
    }());
    if (false) {
        /** @type {?} */
        EntityProcessesLoaderResetAction.prototype.type;
        /** @type {?} */
        EntityProcessesLoaderResetAction.prototype.meta;
    }
    var EntityProcessesIncrementAction = /** @class */ (function () {
        function EntityProcessesIncrementAction(entityType, id) {
            this.type = ENTITY_PROCESSES_INCREMENT_ACTION;
            this.meta = entityProcessesIncrementMeta(entityType, id);
        }
        return EntityProcessesIncrementAction;
    }());
    if (false) {
        /** @type {?} */
        EntityProcessesIncrementAction.prototype.type;
        /** @type {?} */
        EntityProcessesIncrementAction.prototype.meta;
    }
    var EntityProcessesDecrementAction = /** @class */ (function () {
        function EntityProcessesDecrementAction(entityType, id) {
            this.type = ENTITY_PROCESSES_DECREMENT_ACTION;
            this.meta = entityProcessesDecrementMeta(entityType, id);
        }
        return EntityProcessesDecrementAction;
    }());
    if (false) {
        /** @type {?} */
        EntityProcessesDecrementAction.prototype.type;
        /** @type {?} */
        EntityProcessesDecrementAction.prototype.meta;
    }

    var entityProcessesLoader_action = /*#__PURE__*/Object.freeze({
        ENTITY_PROCESSES_LOADER_RESET_ACTION: ENTITY_PROCESSES_LOADER_RESET_ACTION,
        ENTITY_PROCESSES_INCREMENT_ACTION: ENTITY_PROCESSES_INCREMENT_ACTION,
        ENTITY_PROCESSES_DECREMENT_ACTION: ENTITY_PROCESSES_DECREMENT_ACTION,
        EntityProcessesLoaderMeta: EntityProcessesLoaderMeta,
        EntityProcessesLoaderAction: EntityProcessesLoaderAction,
        entityProcessesLoaderResetMeta: entityProcessesLoaderResetMeta,
        entityProcessesIncrementMeta: entityProcessesIncrementMeta,
        entityProcessesDecrementMeta: entityProcessesDecrementMeta,
        EntityProcessesLoaderResetAction: EntityProcessesLoaderResetAction,
        EntityProcessesIncrementAction: EntityProcessesIncrementAction,
        EntityProcessesDecrementAction: EntityProcessesDecrementAction
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function isStableSelector(state) {
        return state.processesCount === 0 && !state.loading;
    }
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function hasPendingProcessesSelector(state) {
        return state.processesCount > 0;
    }

    var processesLoader_selectors = /*#__PURE__*/Object.freeze({
        isStableSelector: isStableSelector,
        hasPendingProcessesSelector: hasPendingProcessesSelector
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template T
     */
    function ProcessesLoaderState() { }
    if (false) {
        /** @type {?|undefined} */
        ProcessesLoaderState.prototype.processesCount;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialProcessesState = {
        processesCount: 0,
    };
    /**
     * Higher order reducer that adds processes count
     * @template T
     * @param {?} entityType
     * @param {?=} reducer
     * @return {?}
     */
    function processesLoaderReducer(entityType, reducer) {
        return (/**
         * @param {?=} state
         * @param {?=} action
         * @return {?}
         */
        function (state, action) {
            if (state === void 0) { state = __assign({}, initialProcessesState, initialLoaderState); }
            /** @type {?} */
            var loaderState = loaderReducer(entityType, reducer)(state, action);
            if (action.meta && action.meta.entityType === entityType) {
                /** @type {?} */
                var processesCountDiff = action.meta.processesCountDiff;
                if (core.isDevMode() && state.processesCount + processesCountDiff < 0) {
                    console.error("Action '" + action.type + "' sets processesCount to value < 0!\n" +
                        'Make sure to keep processesCount in sync.\n' +
                        'There should always be only one decrement action for each increment action.\n' +
                        "Make sure that you don't reset state in between those actions.\n", action);
                }
                if (processesCountDiff) {
                    return __assign({}, loaderState, { processesCount: state.processesCount
                            ? state.processesCount + processesCountDiff
                            : processesCountDiff });
                }
                else if (processesCountDiff === null) {
                    // reset action
                    return __assign({}, loaderState, initialProcessesState);
                }
            }
            return loaderState;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialProcessesLoaderState = __assign({}, initialLoaderState, initialProcessesState);
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entityHasPendingProcessesSelector(state, id) {
        /** @type {?} */
        var entityState = entityStateSelector(state, id);
        return hasPendingProcessesSelector(entityState);
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entityIsStableSelector(state, id) {
        /** @type {?} */
        var entityState = entityStateSelector(state, id);
        return isStableSelector(entityState);
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entityProcessesLoaderStateSelector(state, id) {
        return state.entities[id] || initialProcessesLoaderState;
    }

    var entityProcessesLoader_selectors = /*#__PURE__*/Object.freeze({
        entityHasPendingProcessesSelector: entityHasPendingProcessesSelector,
        entityIsStableSelector: entityIsStableSelector,
        entityProcessesLoaderStateSelector: entityProcessesLoaderStateSelector
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing
     * single state reducer to support multiple entities with generic processesCount flag
     * @template T
     * @param {?} entityType
     * @param {?=} reducer
     * @return {?}
     */
    function entityProcessesLoaderReducer(entityType, reducer) {
        return entityReducer(entityType, processesLoaderReducer(entityType, reducer));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function entitySelector(state, id) {
        return state.entities[id] || undefined;
    }

    var entity_selectors = /*#__PURE__*/Object.freeze({
        entitySelector: entitySelector
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template T
     */
    function EntityState() { }
    if (false) {
        /** @type {?} */
        EntityState.prototype.entities;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OBJECT_SEPARATOR = '.';
    /**
     * @template T, E
     * @param {?} keys
     * @param {?} state
     * @return {?}
     */
    function getStateSliceValue(keys, state) {
        return keys
            .split(OBJECT_SEPARATOR)
            .reduce((/**
         * @param {?} previous
         * @param {?} current
         * @return {?}
         */
        function (previous, current) { return (previous ? previous[current] : undefined); }), state);
    }
    /**
     * @template T, E
     * @param {?} key
     * @param {?} excludeKeys
     * @param {?} value
     * @return {?}
     */
    function createShellObject(key, excludeKeys, value) {
        if (!key || !value || Object.keys(value).length === 0) {
            return (/** @type {?} */ ({}));
        }
        /** @type {?} */
        var shell = key.split(OBJECT_SEPARATOR).reduceRight((/**
         * @param {?} acc
         * @param {?} previous
         * @return {?}
         */
        function (acc, previous) {
            var _a;
            return (/** @type {?} */ (((/** @type {?} */ (_a = {}, _a[previous] = acc, _a)))));
        }), value);
        return handleExclusions(key, excludeKeys, shell);
    }
    /**
     * @template T, E
     * @param {?} keys
     * @param {?} excludeKeys
     * @param {?} state
     * @return {?}
     */
    function getStateSlice(keys, excludeKeys, state) {
        var e_1, _a;
        if (keys && keys.length === 0) {
            return (/** @type {?} */ ({}));
        }
        /** @type {?} */
        var stateSlices = {};
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var currentKey = keys_1_1.value;
                /** @type {?} */
                var stateValue = getStateSliceValue(currentKey, state);
                /** @type {?} */
                var shell = createShellObject(currentKey, excludeKeys, stateValue);
                stateSlices = deepMerge(stateSlices, shell);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return (/** @type {?} */ (stateSlices));
    }
    /**
     * @param {?} key
     * @param {?} excludeKeys
     * @param {?} value
     * @return {?}
     */
    function handleExclusions(key, excludeKeys, value) {
        var e_2, _a;
        /** @type {?} */
        var exclusionKeys = getExclusionKeys(key, excludeKeys);
        if (exclusionKeys.length === 0) {
            return value;
        }
        /** @type {?} */
        var finalValue = deepMerge({}, value);
        try {
            for (var exclusionKeys_1 = __values(exclusionKeys), exclusionKeys_1_1 = exclusionKeys_1.next(); !exclusionKeys_1_1.done; exclusionKeys_1_1 = exclusionKeys_1.next()) {
                var currentExclusionKey = exclusionKeys_1_1.value;
                /** @type {?} */
                var exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);
                /** @type {?} */
                var nestedTemp = finalValue;
                for (var i = 0; i < exclusionChunksSplit.length; i++) {
                    /** @type {?} */
                    var currentChunk = exclusionChunksSplit[i];
                    // last iteration
                    if (i === exclusionChunksSplit.length - 1) {
                        if (nestedTemp && nestedTemp[currentChunk]) {
                            delete nestedTemp[currentChunk];
                        }
                    }
                    else {
                        nestedTemp = nestedTemp[currentChunk];
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (exclusionKeys_1_1 && !exclusionKeys_1_1.done && (_a = exclusionKeys_1.return)) _a.call(exclusionKeys_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return finalValue;
    }
    /**
     * @param {?} key
     * @param {?} excludeKeys
     * @return {?}
     */
    function getExclusionKeys(key, excludeKeys) {
        var e_3, _a;
        if (!key || !excludeKeys) {
            return [];
        }
        /** @type {?} */
        var exclusionKeys = [];
        try {
            for (var excludeKeys_1 = __values(excludeKeys), excludeKeys_1_1 = excludeKeys_1.next(); !excludeKeys_1_1.done; excludeKeys_1_1 = excludeKeys_1.next()) {
                var exclusionKey = excludeKeys_1_1.value;
                if (exclusionKey.includes(key)) {
                    exclusionKeys.push(exclusionKey);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (excludeKeys_1_1 && !excludeKeys_1_1.done && (_a = excludeKeys_1.return)) _a.call(excludeKeys_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return exclusionKeys;
    }
    /**
     * @param {?} keys
     * @param {?} type
     * @return {?}
     */
    function filterKeysByType(keys, type) {
        if (!keys) {
            return [];
        }
        return Object.keys(keys).filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return keys[key] === type; }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function loaderValueSelector(state) {
        return state.value;
    }
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function loaderLoadingSelector(state) {
        return state.loading;
    }
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function loaderErrorSelector(state) {
        return state.error;
    }
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function loaderSuccessSelector(state) {
        return state.success;
    }

    var loader_selectors = /*#__PURE__*/Object.freeze({
        loaderValueSelector: loaderValueSelector,
        loaderLoadingSelector: loaderLoadingSelector,
        loaderErrorSelector: loaderErrorSelector,
        loaderSuccessSelector: loaderSuccessSelector
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template T
     */
    function LoaderState() { }
    if (false) {
        /** @type {?|undefined} */
        LoaderState.prototype.loading;
        /** @type {?|undefined} */
        LoaderState.prototype.error;
        /** @type {?|undefined} */
        LoaderState.prototype.success;
        /** @type {?|undefined} */
        LoaderState.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} entityType
     * @return {?}
     */
    function ofLoaderLoad(entityType) {
        return operators.filter((/**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            return action.meta &&
                action.meta.loader &&
                action.meta.entityType === entityType &&
                action.meta.loader.load;
        }));
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function ofLoaderFail(entityType) {
        return operators.filter((/**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            return action.meta &&
                action.meta.loader &&
                action.meta.entityType === entityType &&
                action.meta.loader.error;
        }));
    }
    /**
     * @param {?} entityType
     * @return {?}
     */
    function ofLoaderSuccess(entityType) {
        return operators.filter((/**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            return action.meta &&
                action.meta.loader &&
                action.meta.entityType === entityType &&
                !action.meta.loader.load &&
                !action.meta.loader.error;
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var AUTH_FEATURE = 'auth';
    /** @type {?} */
    var CLIENT_TOKEN_DATA = '[Auth] Client Token Data';
    /**
     * @record
     */
    function StateWithAuth() { }
    if (false) {
        /* Skipping unnamed member:
        [AUTH_FEATURE]: AuthState;*/
    }
    /**
     * @record
     */
    function AuthState() { }
    if (false) {
        /** @type {?} */
        AuthState.prototype.userToken;
        /** @type {?} */
        AuthState.prototype.clientToken;
    }
    /**
     * @record
     */
    function UserTokenState() { }
    if (false) {
        /** @type {?} */
        UserTokenState.prototype.token;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CLIENT_TOKEN = '[Token] Load Client Token';
    /** @type {?} */
    var LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';
    /** @type {?} */
    var LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';
    var LoadClientToken = /** @class */ (function (_super) {
        __extends(LoadClientToken, _super);
        function LoadClientToken() {
            var _this = _super.call(this, CLIENT_TOKEN_DATA) || this;
            _this.type = LOAD_CLIENT_TOKEN;
            return _this;
        }
        return LoadClientToken;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadClientToken.prototype.type;
    }
    var LoadClientTokenFail = /** @class */ (function (_super) {
        __extends(LoadClientTokenFail, _super);
        function LoadClientTokenFail(payload) {
            var _this = _super.call(this, CLIENT_TOKEN_DATA, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CLIENT_TOKEN_FAIL;
            return _this;
        }
        return LoadClientTokenFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadClientTokenFail.prototype.type;
        /** @type {?} */
        LoadClientTokenFail.prototype.payload;
    }
    var LoadClientTokenSuccess = /** @class */ (function (_super) {
        __extends(LoadClientTokenSuccess, _super);
        function LoadClientTokenSuccess(payload) {
            var _this = _super.call(this, CLIENT_TOKEN_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_CLIENT_TOKEN_SUCCESS;
            return _this;
        }
        return LoadClientTokenSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadClientTokenSuccess.prototype.type;
        /** @type {?} */
        LoadClientTokenSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOGIN = '[Auth] Login';
    /** @type {?} */
    var LOGOUT = '[Auth] Logout';
    /** @type {?} */
    var LOGOUT_CUSTOMER_SUPPORT_AGENT = '[Auth] Logout Customer Support Agent';
    var Login = /** @class */ (function () {
        function Login() {
            this.type = LOGIN;
        }
        return Login;
    }());
    if (false) {
        /** @type {?} */
        Login.prototype.type;
    }
    var Logout = /** @class */ (function () {
        function Logout() {
            this.type = LOGOUT;
        }
        return Logout;
    }());
    if (false) {
        /** @type {?} */
        Logout.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_USER_TOKEN = '[Auth] Load User Token';
    /** @type {?} */
    var LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';
    /** @type {?} */
    var LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';
    /** @type {?} */
    var REFRESH_USER_TOKEN = '[Auth] Refresh User Token';
    /** @type {?} */
    var REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';
    /** @type {?} */
    var REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';
    /** @type {?} */
    var REVOKE_USER_TOKEN = '[Auth] Revoke User Token';
    /** @type {?} */
    var REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';
    /** @type {?} */
    var REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';
    var LoadUserToken = /** @class */ (function () {
        function LoadUserToken(payload) {
            this.payload = payload;
            this.type = LOAD_USER_TOKEN;
        }
        return LoadUserToken;
    }());
    if (false) {
        /** @type {?} */
        LoadUserToken.prototype.type;
        /** @type {?} */
        LoadUserToken.prototype.payload;
    }
    var LoadUserTokenFail = /** @class */ (function () {
        function LoadUserTokenFail(payload) {
            this.payload = payload;
            this.type = LOAD_USER_TOKEN_FAIL;
        }
        return LoadUserTokenFail;
    }());
    if (false) {
        /** @type {?} */
        LoadUserTokenFail.prototype.type;
        /** @type {?} */
        LoadUserTokenFail.prototype.payload;
    }
    var LoadUserTokenSuccess = /** @class */ (function () {
        function LoadUserTokenSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_USER_TOKEN_SUCCESS;
        }
        return LoadUserTokenSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadUserTokenSuccess.prototype.type;
        /** @type {?} */
        LoadUserTokenSuccess.prototype.payload;
    }
    var RefreshUserToken = /** @class */ (function () {
        function RefreshUserToken(payload) {
            this.payload = payload;
            this.type = REFRESH_USER_TOKEN;
        }
        return RefreshUserToken;
    }());
    if (false) {
        /** @type {?} */
        RefreshUserToken.prototype.type;
        /** @type {?} */
        RefreshUserToken.prototype.payload;
    }
    var RefreshUserTokenSuccess = /** @class */ (function () {
        function RefreshUserTokenSuccess(payload) {
            this.payload = payload;
            this.type = REFRESH_USER_TOKEN_SUCCESS;
        }
        return RefreshUserTokenSuccess;
    }());
    if (false) {
        /** @type {?} */
        RefreshUserTokenSuccess.prototype.type;
        /** @type {?} */
        RefreshUserTokenSuccess.prototype.payload;
    }
    var RefreshUserTokenFail = /** @class */ (function () {
        function RefreshUserTokenFail(payload) {
            this.payload = payload;
            this.type = REFRESH_USER_TOKEN_FAIL;
        }
        return RefreshUserTokenFail;
    }());
    if (false) {
        /** @type {?} */
        RefreshUserTokenFail.prototype.type;
        /** @type {?} */
        RefreshUserTokenFail.prototype.payload;
    }
    var RevokeUserToken = /** @class */ (function () {
        function RevokeUserToken(payload) {
            this.payload = payload;
            this.type = REVOKE_USER_TOKEN;
        }
        return RevokeUserToken;
    }());
    if (false) {
        /** @type {?} */
        RevokeUserToken.prototype.type;
        /** @type {?} */
        RevokeUserToken.prototype.payload;
    }
    var RevokeUserTokenSuccess = /** @class */ (function () {
        function RevokeUserTokenSuccess(payload) {
            this.payload = payload;
            this.type = REVOKE_USER_TOKEN_SUCCESS;
        }
        return RevokeUserTokenSuccess;
    }());
    if (false) {
        /** @type {?} */
        RevokeUserTokenSuccess.prototype.type;
        /** @type {?} */
        RevokeUserTokenSuccess.prototype.payload;
    }
    var RevokeUserTokenFail = /** @class */ (function () {
        function RevokeUserTokenFail(payload) {
            this.payload = payload;
            this.type = REVOKE_USER_TOKEN_FAIL;
        }
        return RevokeUserTokenFail;
    }());
    if (false) {
        /** @type {?} */
        RevokeUserTokenFail.prototype.type;
        /** @type {?} */
        RevokeUserTokenFail.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var authGroup_actions = /*#__PURE__*/Object.freeze({
        LOAD_CLIENT_TOKEN: LOAD_CLIENT_TOKEN,
        LOAD_CLIENT_TOKEN_FAIL: LOAD_CLIENT_TOKEN_FAIL,
        LOAD_CLIENT_TOKEN_SUCCESS: LOAD_CLIENT_TOKEN_SUCCESS,
        LoadClientToken: LoadClientToken,
        LoadClientTokenFail: LoadClientTokenFail,
        LoadClientTokenSuccess: LoadClientTokenSuccess,
        LOGIN: LOGIN,
        LOGOUT: LOGOUT,
        LOGOUT_CUSTOMER_SUPPORT_AGENT: LOGOUT_CUSTOMER_SUPPORT_AGENT,
        Login: Login,
        Logout: Logout,
        LOAD_USER_TOKEN: LOAD_USER_TOKEN,
        LOAD_USER_TOKEN_FAIL: LOAD_USER_TOKEN_FAIL,
        LOAD_USER_TOKEN_SUCCESS: LOAD_USER_TOKEN_SUCCESS,
        REFRESH_USER_TOKEN: REFRESH_USER_TOKEN,
        REFRESH_USER_TOKEN_FAIL: REFRESH_USER_TOKEN_FAIL,
        REFRESH_USER_TOKEN_SUCCESS: REFRESH_USER_TOKEN_SUCCESS,
        REVOKE_USER_TOKEN: REVOKE_USER_TOKEN,
        REVOKE_USER_TOKEN_FAIL: REVOKE_USER_TOKEN_FAIL,
        REVOKE_USER_TOKEN_SUCCESS: REVOKE_USER_TOKEN_SUCCESS,
        LoadUserToken: LoadUserToken,
        LoadUserTokenFail: LoadUserTokenFail,
        LoadUserTokenSuccess: LoadUserTokenSuccess,
        RefreshUserToken: RefreshUserToken,
        RefreshUserTokenSuccess: RefreshUserTokenSuccess,
        RefreshUserTokenFail: RefreshUserTokenFail,
        RevokeUserToken: RevokeUserToken,
        RevokeUserTokenSuccess: RevokeUserTokenSuccess,
        RevokeUserTokenFail: RevokeUserTokenFail
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getAuthState = store.createFeatureSelector(AUTH_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.clientToken; };
    /** @type {?} */
    var getClientTokenState = store.createSelector(getAuthState, (ɵ0));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getUserTokenSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.token; });
    var ɵ0$1 = getUserTokenSelector;
    var ɵ1 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.userToken; };
    /** @type {?} */
    var getUserTokenState = store.createSelector(getAuthState, (ɵ1));
    /** @type {?} */
    var getUserToken = store.createSelector(getUserTokenState, getUserTokenSelector);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var authGroup_selectors = /*#__PURE__*/Object.freeze({
        getClientTokenState: getClientTokenState,
        getAuthState: getAuthState,
        getUserTokenState: getUserTokenState,
        getUserToken: getUserToken
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthService = /** @class */ (function () {
        function AuthService(store) {
            this.store = store;
        }
        /**
         * Loads a new user token
         * @param userId
         * @param password
         */
        /**
         * Loads a new user token
         * @param {?} userId
         * @param {?} password
         * @return {?}
         */
        AuthService.prototype.authorize = /**
         * Loads a new user token
         * @param {?} userId
         * @param {?} password
         * @return {?}
         */
        function (userId, password) {
            this.store.dispatch(new LoadUserToken({
                userId: userId,
                password: password,
            }));
        };
        /**
         * This function provides the userId the OCC calls should use, depending
         * on whether there is an active storefront session or not.
         *
         * It returns the userId of the current storefront user or 'anonymous'
         * in the case there are no signed in user in the storefront.
         *
         * The user id of a regular customer session is 'current'.  In the case of an
         * asm customer emulation session, the userId will be the customerId.
         */
        /**
         * This function provides the userId the OCC calls should use, depending
         * on whether there is an active storefront session or not.
         *
         * It returns the userId of the current storefront user or 'anonymous'
         * in the case there are no signed in user in the storefront.
         *
         * The user id of a regular customer session is 'current'.  In the case of an
         * asm customer emulation session, the userId will be the customerId.
         * @return {?}
         */
        AuthService.prototype.getOccUserId = /**
         * This function provides the userId the OCC calls should use, depending
         * on whether there is an active storefront session or not.
         *
         * It returns the userId of the current storefront user or 'anonymous'
         * in the case there are no signed in user in the storefront.
         *
         * The user id of a regular customer session is 'current'.  In the case of an
         * asm customer emulation session, the userId will be the customerId.
         * @return {?}
         */
        function () {
            return this.getUserToken().pipe(operators.map((/**
             * @param {?} userToken
             * @return {?}
             */
            function (userToken) {
                if (!!userToken && !!userToken.userId) {
                    return userToken.userId;
                }
                else {
                    return OCC_USER_ID_ANONYMOUS;
                }
            })));
        };
        /**
         * Returns the user's token
         */
        /**
         * Returns the user's token
         * @return {?}
         */
        AuthService.prototype.getUserToken = /**
         * Returns the user's token
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getUserToken));
        };
        /**
         * Refreshes the user token
         * @param token a user token to refresh
         */
        /**
         * Refreshes the user token
         * @param {?} token a user token to refresh
         * @return {?}
         */
        AuthService.prototype.refreshUserToken = /**
         * Refreshes the user token
         * @param {?} token a user token to refresh
         * @return {?}
         */
        function (token) {
            this.store.dispatch(new RefreshUserToken({
                refreshToken: token.refresh_token,
            }));
        };
        /**
         * Store the provided token
         */
        /**
         * Store the provided token
         * @param {?} token
         * @return {?}
         */
        AuthService.prototype.authorizeWithToken = /**
         * Store the provided token
         * @param {?} token
         * @return {?}
         */
        function (token) {
            this.store.dispatch(new LoadUserTokenSuccess(token));
        };
        /**
         * Logout a storefront customer
         */
        /**
         * Logout a storefront customer
         * @return {?}
         */
        AuthService.prototype.logout = /**
         * Logout a storefront customer
         * @return {?}
         */
        function () {
            var _this = this;
            this.getUserToken()
                .pipe(operators.take(1))
                .subscribe((/**
             * @param {?} userToken
             * @return {?}
             */
            function (userToken) {
                _this.store.dispatch(new Logout());
                if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {
                    _this.store.dispatch(new RevokeUserToken(userToken));
                }
            }));
        };
        /**
         * Returns a client token.  The client token from the store is returned if there is one.
         * Otherwise, an new token is fetched from the backend and saved in the store.
         */
        /**
         * Returns a client token.  The client token from the store is returned if there is one.
         * Otherwise, an new token is fetched from the backend and saved in the store.
         * @return {?}
         */
        AuthService.prototype.getClientToken = /**
         * Returns a client token.  The client token from the store is returned if there is one.
         * Otherwise, an new token is fetched from the backend and saved in the store.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.store.pipe(store.select(getClientTokenState), operators.filter((/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                if (_this.isClientTokenLoaded(state)) {
                    return true;
                }
                else {
                    if (!state.loading) {
                        _this.store.dispatch(new LoadClientToken());
                    }
                    return false;
                }
            })), operators.map((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return state.value; })));
        };
        /**
         * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.
         * The new clientToken is returned.
         */
        /**
         * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.
         * The new clientToken is returned.
         * @return {?}
         */
        AuthService.prototype.refreshClientToken = /**
         * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.
         * The new clientToken is returned.
         * @return {?}
         */
        function () {
            var _this = this;
            this.store.dispatch(new LoadClientToken());
            return this.store.pipe(store.select(getClientTokenState), operators.filter((/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                return _this.isClientTokenLoaded(state);
            })), operators.map((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return state.value; })));
        };
        /**
         * @protected
         * @param {?} state
         * @return {?}
         */
        AuthService.prototype.isClientTokenLoaded = /**
         * @protected
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return (state.success || state.error) && !state.loading;
        };
        /**
         * Returns `true` if the user is logged in; and `false` if the user is anonymous.
         */
        /**
         * Returns `true` if the user is logged in; and `false` if the user is anonymous.
         * @return {?}
         */
        AuthService.prototype.isUserLoggedIn = /**
         * Returns `true` if the user is logged in; and `false` if the user is anonymous.
         * @return {?}
         */
        function () {
            return this.getUserToken().pipe(operators.map((/**
             * @param {?} userToken
             * @return {?}
             */
            function (userToken) { return Boolean(userToken) && Boolean(userToken.access_token); })));
        };
        AuthService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AuthService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        /** @nocollapse */ AuthService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(core.ɵɵinject(store.Store)); }, token: AuthService, providedIn: "root" });
        return AuthService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        AuthService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClientErrorHandlingService = /** @class */ (function () {
        function ClientErrorHandlingService(authService) {
            this.authService = authService;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        ClientErrorHandlingService.prototype.handleExpiredClientToken = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            return this.authService.refreshClientToken().pipe(operators.take(1), operators.switchMap((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                return next.handle(_this.createNewRequestWithNewToken(request, token));
            })));
        };
        /**
         * @protected
         * @param {?} request
         * @param {?} token
         * @return {?}
         */
        ClientErrorHandlingService.prototype.createNewRequestWithNewToken = /**
         * @protected
         * @param {?} request
         * @param {?} token
         * @return {?}
         */
        function (request, token) {
            request = request.clone({
                setHeaders: {
                    Authorization: token.token_type + " " + token.access_token,
                },
            });
            return request;
        };
        ClientErrorHandlingService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ClientErrorHandlingService.ctorParameters = function () { return [
            { type: AuthService }
        ]; };
        return ClientErrorHandlingService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ClientErrorHandlingService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WindowRef = /** @class */ (function () {
        function WindowRef(document) {
            // it's a workaround to have document property properly typed
            // see: https://github.com/angular/angular/issues/15640
            this.document = document;
        }
        Object.defineProperty(WindowRef.prototype, "nativeWindow", {
            get: /**
             * @return {?}
             */
            function () {
                return typeof window !== 'undefined' ? window : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WindowRef.prototype, "sessionStorage", {
            get: /**
             * @return {?}
             */
            function () {
                return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WindowRef.prototype, "localStorage", {
            get: /**
             * @return {?}
             */
            function () {
                return this.nativeWindow ? this.nativeWindow.localStorage : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WindowRef.prototype, "resize$", {
            /**
             * Returns an observable for the window resize event and emits an event
             * every 300ms in case of resizing. An event is simulated initially.
             *
             * If there's no window object availale (i.e. in SSR), a null value is emitted.
             */
            get: /**
             * Returns an observable for the window resize event and emits an event
             * every 300ms in case of resizing. An event is simulated initially.
             *
             * If there's no window object availale (i.e. in SSR), a null value is emitted.
             * @return {?}
             */
            function () {
                if (!this.nativeWindow) {
                    return rxjs.of(null);
                }
                else {
                    return rxjs.fromEvent(this.nativeWindow, 'resize').pipe(operators.debounceTime(300), operators.startWith({ target: this.nativeWindow }), operators.distinctUntilChanged());
                }
            },
            enumerable: true,
            configurable: true
        });
        WindowRef.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        WindowRef.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
        ]; };
        /** @nocollapse */ WindowRef.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function WindowRef_Factory() { return new WindowRef(core.ɵɵinject(common.DOCUMENT)); }, token: WindowRef, providedIn: "root" });
        return WindowRef;
    }());
    if (false) {
        /** @type {?} */
        WindowRef.prototype.document;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UrlParsingService = /** @class */ (function () {
        function UrlParsingService(router) {
            this.router = router;
        }
        /**
         * @param {?} url
         * @return {?}
         */
        UrlParsingService.prototype.getPrimarySegments = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            /** @type {?} */
            var urlTree = this.router.parseUrl(url);
            return this._getPrimarySegmentsFromUrlTree(urlTree.root);
        };
        /**
         * @private
         * @param {?} tree
         * @return {?}
         */
        UrlParsingService.prototype._getPrimarySegmentsFromUrlTree = /**
         * @private
         * @param {?} tree
         * @return {?}
         */
        function (tree) {
            /** @type {?} */
            var segments = tree.segments.map((/**
             * @param {?} s
             * @return {?}
             */
            function (s) { return s.path; }));
            /** @type {?} */
            var childrenSegments = tree.children[router.PRIMARY_OUTLET]
                ? this._getPrimarySegmentsFromUrlTree(tree.children[router.PRIMARY_OUTLET])
                : [];
            return segments.concat(childrenSegments);
        };
        UrlParsingService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        UrlParsingService.ctorParameters = function () { return [
            { type: router.Router }
        ]; };
        /** @nocollapse */ UrlParsingService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UrlParsingService_Factory() { return new UrlParsingService(core.ɵɵinject(router.Router)); }, token: UrlParsingService, providedIn: "root" });
        return UrlParsingService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        UrlParsingService.prototype.router;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var isParam = (/**
     * @param {?} segment
     * @return {?}
     */
    function (segment) { return segment.startsWith(':'); });
    /** @type {?} */
    var getParamName = (/**
     * @param {?} segment
     * @return {?}
     */
    function (segment) { return segment.slice(1); });
    // it just removes leading ':'
    /** @type {?} */
    var ensureLeadingSlash = (/**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return path.startsWith('/') ? path : '/' + path;
    });
    /** @type {?} */
    var removeLeadingSlash = (/**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return path.startsWith('/') ? path.slice(1) : path;
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    RoutingConfig = /** @class */ (function () {
        function RoutingConfig() {
        }
        return RoutingConfig;
    }());
    if (false) {
        /** @type {?} */
        RoutingConfig.prototype.routing;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RoutingConfigService = /** @class */ (function () {
        function RoutingConfigService(config) {
            this.config = config;
        }
        /**
         * @param {?} routeName
         * @return {?}
         */
        RoutingConfigService.prototype.getRouteConfig = /**
         * @param {?} routeName
         * @return {?}
         */
        function (routeName) {
            /** @type {?} */
            var routeConfig = this.config && this.config.routing && this.config.routing.routes;
            /** @type {?} */
            var result = routeConfig && routeConfig[routeName];
            if (!routeConfig || result === undefined) {
                this.warn("No path was configured for the named route '" + routeName + "'!");
            }
            return result;
        };
        /**
         * @private
         * @param {...?} args
         * @return {?}
         */
        RoutingConfigService.prototype.warn = /**
         * @private
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (core.isDevMode()) {
                console.warn.apply(console, __spread(args));
            }
        };
        RoutingConfigService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        RoutingConfigService.ctorParameters = function () { return [
            { type: RoutingConfig }
        ]; };
        /** @nocollapse */ RoutingConfigService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function RoutingConfigService_Factory() { return new RoutingConfigService(core.ɵɵinject(RoutingConfig)); }, token: RoutingConfigService, providedIn: "root" });
        return RoutingConfigService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        RoutingConfigService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SemanticPathService = /** @class */ (function () {
        function SemanticPathService(routingConfigService, urlParser) {
            this.routingConfigService = routingConfigService;
            this.urlParser = urlParser;
            this.ROOT_URL = ['/'];
        }
        /**
         * Returns the first path alias configured for a given route name. It adds `/` at the beginning.
         */
        /**
         * Returns the first path alias configured for a given route name. It adds `/` at the beginning.
         * @param {?} routeName
         * @return {?}
         */
        SemanticPathService.prototype.get = /**
         * Returns the first path alias configured for a given route name. It adds `/` at the beginning.
         * @param {?} routeName
         * @return {?}
         */
        function (routeName) {
            /** @type {?} */
            var routeConfig = this.routingConfigService.getRouteConfig(routeName);
            return routeConfig && Array.isArray(routeConfig.paths)
                ? '/' + routeConfig.paths[0]
                : undefined;
        };
        /**
         * Transforms the array of url commands. Each command can be:
         * a) string - will be left untouched
         * b) object { cxRoute: <route name> } - will be replaced with semantic path
         * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params
         *
         * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)
         */
        /**
         * Transforms the array of url commands. Each command can be:
         * a) string - will be left untouched
         * b) object { cxRoute: <route name> } - will be replaced with semantic path
         * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params
         *
         * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)
         * @param {?} commands
         * @return {?}
         */
        SemanticPathService.prototype.transform = /**
         * Transforms the array of url commands. Each command can be:
         * a) string - will be left untouched
         * b) object { cxRoute: <route name> } - will be replaced with semantic path
         * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params
         *
         * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)
         * @param {?} commands
         * @return {?}
         */
        function (commands) {
            var e_1, _a;
            if (!Array.isArray(commands)) {
                commands = [commands];
            }
            /** @type {?} */
            var result = [];
            try {
                for (var commands_1 = __values(commands), commands_1_1 = commands_1.next(); !commands_1_1.done; commands_1_1 = commands_1.next()) {
                    var command = commands_1_1.value;
                    if (!this.isRouteCommand(command)) {
                        // don't modify segment that is not route command:
                        result.push(command);
                    }
                    else {
                        // generate array with url segments for given route command:
                        /** @type {?} */
                        var partialResult = this.generateUrlPart(command);
                        if (partialResult === null) {
                            return this.ROOT_URL;
                        }
                        result.push.apply(result, __spread(partialResult));
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (commands_1_1 && !commands_1_1.done && (_a = commands_1.return)) _a.call(commands_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.shouldOutputAbsolute(commands)) {
                result.unshift('/');
            }
            return result;
        };
        /**
         * @private
         * @param {?} command
         * @return {?}
         */
        SemanticPathService.prototype.isRouteCommand = /**
         * @private
         * @param {?} command
         * @return {?}
         */
        function (command) {
            return command && Boolean(command.cxRoute);
        };
        /**
         * @private
         * @param {?} commands
         * @return {?}
         */
        SemanticPathService.prototype.shouldOutputAbsolute = /**
         * @private
         * @param {?} commands
         * @return {?}
         */
        function (commands) {
            return this.isRouteCommand(commands[0]);
        };
        /**
         * @private
         * @param {?} command
         * @return {?}
         */
        SemanticPathService.prototype.generateUrlPart = /**
         * @private
         * @param {?} command
         * @return {?}
         */
        function (command) {
            this.standarizeRouteCommand(command);
            if (!command.cxRoute) {
                return null;
            }
            /** @type {?} */
            var routeConfig = this.routingConfigService.getRouteConfig(command.cxRoute);
            // if no route translation was configured, return null:
            if (!routeConfig || !routeConfig.paths) {
                return null;
            }
            // find first path that can satisfy it's parameters with given parameters
            /** @type {?} */
            var path = this.findPathWithFillableParams(routeConfig, command.params);
            // if there is no configured path that can be satisfied with given params, return null
            if (!path) {
                return null;
            }
            /** @type {?} */
            var result = this.provideParamsValues(path, command.params, routeConfig.paramsMapping);
            return result;
        };
        /**
         * @private
         * @param {?} command
         * @return {?}
         */
        SemanticPathService.prototype.standarizeRouteCommand = /**
         * @private
         * @param {?} command
         * @return {?}
         */
        function (command) {
            command.params = command.params || {};
        };
        /**
         * @private
         * @param {?} path
         * @param {?} params
         * @param {?} paramsMapping
         * @return {?}
         */
        SemanticPathService.prototype.provideParamsValues = /**
         * @private
         * @param {?} path
         * @param {?} params
         * @param {?} paramsMapping
         * @return {?}
         */
        function (path, params, paramsMapping) {
            var _this = this;
            return this.urlParser.getPrimarySegments(path).map((/**
             * @param {?} segment
             * @return {?}
             */
            function (segment) {
                if (isParam(segment)) {
                    /** @type {?} */
                    var paramName = getParamName(segment);
                    /** @type {?} */
                    var mappedParamName = _this.getMappedParamName(paramName, paramsMapping);
                    return params[mappedParamName];
                }
                return segment;
            }));
        };
        /**
         * @private
         * @param {?} routeConfig
         * @param {?} params
         * @return {?}
         */
        SemanticPathService.prototype.findPathWithFillableParams = /**
         * @private
         * @param {?} routeConfig
         * @param {?} params
         * @return {?}
         */
        function (routeConfig, params) {
            var _this = this;
            /** @type {?} */
            var foundPath = routeConfig.paths.find((/**
             * @param {?} path
             * @return {?}
             */
            function (path) {
                return _this.getParams(path).every((/**
                 * @param {?} paramName
                 * @return {?}
                 */
                function (paramName) {
                    /** @type {?} */
                    var mappedParamName = _this.getMappedParamName(paramName, routeConfig.paramsMapping);
                    return params[mappedParamName] !== undefined;
                }));
            }));
            if (foundPath === undefined || foundPath === null) {
                this.warn("No configured path matches all its params to given object. ", "Route config: ", routeConfig, "Params object: ", params);
                return null;
            }
            return foundPath;
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        SemanticPathService.prototype.getParams = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            return this.urlParser
                .getPrimarySegments(path)
                .filter(isParam)
                .map(getParamName);
        };
        /**
         * @private
         * @param {?} paramName
         * @param {?} paramsMapping
         * @return {?}
         */
        SemanticPathService.prototype.getMappedParamName = /**
         * @private
         * @param {?} paramName
         * @param {?} paramsMapping
         * @return {?}
         */
        function (paramName, paramsMapping) {
            if (paramsMapping) {
                return paramsMapping[paramName] || paramName;
            }
            return paramName;
        };
        /**
         * @private
         * @param {...?} args
         * @return {?}
         */
        SemanticPathService.prototype.warn = /**
         * @private
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (core.isDevMode()) {
                console.warn.apply(console, __spread(args));
            }
        };
        SemanticPathService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        SemanticPathService.ctorParameters = function () { return [
            { type: RoutingConfigService },
            { type: UrlParsingService }
        ]; };
        /** @nocollapse */ SemanticPathService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SemanticPathService_Factory() { return new SemanticPathService(core.ɵɵinject(RoutingConfigService), core.ɵɵinject(UrlParsingService)); }, token: SemanticPathService, providedIn: "root" });
        return SemanticPathService;
    }());
    if (false) {
        /** @type {?} */
        SemanticPathService.prototype.ROOT_URL;
        /**
         * @type {?}
         * @protected
         */
        SemanticPathService.prototype.routingConfigService;
        /**
         * @type {?}
         * @protected
         */
        SemanticPathService.prototype.urlParser;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ROUTER_GO = '[Router] Go';
    /** @type {?} */
    var ROUTER_GO_BY_URL = '[Router] Go By Url';
    /** @type {?} */
    var ROUTER_BACK = '[Router] Back';
    /** @type {?} */
    var ROUTER_FORWARD = '[Router] Forward';
    var RouteGoAction = /** @class */ (function () {
        function RouteGoAction(payload) {
            this.payload = payload;
            this.type = ROUTER_GO;
        }
        return RouteGoAction;
    }());
    if (false) {
        /** @type {?} */
        RouteGoAction.prototype.type;
        /** @type {?} */
        RouteGoAction.prototype.payload;
    }
    var RouteGoByUrlAction = /** @class */ (function () {
        function RouteGoByUrlAction(payload) {
            this.payload = payload;
            this.type = ROUTER_GO_BY_URL;
        }
        return RouteGoByUrlAction;
    }());
    if (false) {
        /** @type {?} */
        RouteGoByUrlAction.prototype.type;
        /** @type {?} */
        RouteGoByUrlAction.prototype.payload;
    }
    var RouteBackAction = /** @class */ (function () {
        function RouteBackAction() {
            this.type = ROUTER_BACK;
        }
        return RouteBackAction;
    }());
    if (false) {
        /** @type {?} */
        RouteBackAction.prototype.type;
    }
    var RouteForwardAction = /** @class */ (function () {
        function RouteForwardAction() {
            this.type = ROUTER_FORWARD;
        }
        return RouteForwardAction;
    }());
    if (false) {
        /** @type {?} */
        RouteForwardAction.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var routingGroup_actions = /*#__PURE__*/Object.freeze({
        ROUTER_GO: ROUTER_GO,
        ROUTER_GO_BY_URL: ROUTER_GO_BY_URL,
        ROUTER_BACK: ROUTER_BACK,
        ROUTER_FORWARD: ROUTER_FORWARD,
        RouteGoAction: RouteGoAction,
        RouteGoByUrlAction: RouteGoByUrlAction,
        RouteBackAction: RouteBackAction,
        RouteForwardAction: RouteForwardAction
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ROUTING_FEATURE = 'router';
    /**
     * @record
     */
    function RouterState() { }
    if (false) {
        /** @type {?|undefined} */
        RouterState.prototype.nextState;
    }
    /**
     * @record
     */
    function ActivatedRouterStateSnapshot() { }
    if (false) {
        /** @type {?} */
        ActivatedRouterStateSnapshot.prototype.url;
        /** @type {?} */
        ActivatedRouterStateSnapshot.prototype.queryParams;
        /** @type {?} */
        ActivatedRouterStateSnapshot.prototype.params;
        /** @type {?} */
        ActivatedRouterStateSnapshot.prototype.context;
        /** @type {?} */
        ActivatedRouterStateSnapshot.prototype.cmsRequired;
    }
    /**
     * @record
     */
    function State() { }
    if (false) {
        /* Skipping unnamed member:
        [ROUTING_FEATURE]: RouterState;*/
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getRouterFeatureState = store.createFeatureSelector(ROUTING_FEATURE);
    var ɵ0$2 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.router; };
    /** @type {?} */
    var getRouterState = store.createSelector(getRouterFeatureState, (ɵ0$2));
    var ɵ1$1 = /**
     * @param {?} routingState
     * @return {?}
     */
    function (routingState) {
        return (routingState.state && routingState.state.context) || { id: '' };
    };
    /** @type {?} */
    var getPageContext = store.createSelector(getRouterState, (ɵ1$1));
    var ɵ2 = /**
     * @param {?} routingState
     * @return {?}
     */
    function (routingState) {
        return routingState.nextState && routingState.nextState.context;
    };
    /** @type {?} */
    var getNextPageContext = store.createSelector(getRouterState, (ɵ2));
    var ɵ3 = /**
     * @param {?} context
     * @return {?}
     */
    function (context) { return !!context; };
    /** @type {?} */
    var isNavigating = store.createSelector(getNextPageContext, (ɵ3));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var routingGroup_selectors = /*#__PURE__*/Object.freeze({
        getRouterFeatureState: getRouterFeatureState,
        getRouterState: getRouterState,
        getPageContext: getPageContext,
        getNextPageContext: getNextPageContext,
        isNavigating: isNavigating
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RoutingService = /** @class */ (function () {
        function RoutingService(store, winRef, semanticPathService) {
            this.store = store;
            this.winRef = winRef;
            this.semanticPathService = semanticPathService;
        }
        /**
         * Get the current router state
         */
        /**
         * Get the current router state
         * @return {?}
         */
        RoutingService.prototype.getRouterState = /**
         * Get the current router state
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getRouterState));
        };
        /**
         * Get the `PageContext` from the state
         */
        /**
         * Get the `PageContext` from the state
         * @return {?}
         */
        RoutingService.prototype.getPageContext = /**
         * Get the `PageContext` from the state
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getPageContext));
        };
        /**
         * Get the next `PageContext` from the state
         */
        /**
         * Get the next `PageContext` from the state
         * @return {?}
         */
        RoutingService.prototype.getNextPageContext = /**
         * Get the next `PageContext` from the state
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getNextPageContext));
        };
        /**
         * Get the `isNavigating` info from the state
         */
        /**
         * Get the `isNavigating` info from the state
         * @return {?}
         */
        RoutingService.prototype.isNavigating = /**
         * Get the `isNavigating` info from the state
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(isNavigating));
        };
        /**
         * Navigation with a new state into history
         * @param commands: url commands
         * @param query
         * @param extras: Represents the extra options used during navigation.
         */
        /**
         * Navigation with a new state into history
         * @param {?} commands
         * @param {?=} query
         * @param {?=} extras
         * @return {?}
         */
        RoutingService.prototype.go = /**
         * Navigation with a new state into history
         * @param {?} commands
         * @param {?=} query
         * @param {?=} extras
         * @return {?}
         */
        function (commands, query, extras) {
            /** @type {?} */
            var path = this.semanticPathService.transform(commands);
            return this.navigate(path, query, extras);
        };
        /**
         * Navigation using URL
         * @param url
         */
        /**
         * Navigation using URL
         * @param {?} url
         * @return {?}
         */
        RoutingService.prototype.goByUrl = /**
         * Navigation using URL
         * @param {?} url
         * @return {?}
         */
        function (url) {
            this.store.dispatch(new RouteGoByUrlAction(url));
        };
        /**
         * Navigating back
         */
        /**
         * Navigating back
         * @return {?}
         */
        RoutingService.prototype.back = /**
         * Navigating back
         * @return {?}
         */
        function () {
            /** @type {?} */
            var isLastPageInApp = this.winRef.document.referrer.includes(this.winRef.nativeWindow.location.origin);
            if (isLastPageInApp) {
                this.store.dispatch(new RouteBackAction());
                return;
            }
            this.go(['/']);
            return;
        };
        /**
         * Navigating forward
         */
        /**
         * Navigating forward
         * @return {?}
         */
        RoutingService.prototype.forward = /**
         * Navigating forward
         * @return {?}
         */
        function () {
            this.store.dispatch(new RouteForwardAction());
        };
        /**
         * Navigation with a new state into history
         * @param path
         * @param query
         * @param extras: Represents the extra options used during navigation.
         */
        /**
         * Navigation with a new state into history
         * @protected
         * @param {?} path
         * @param {?=} query
         * @param {?=} extras
         * @return {?}
         */
        RoutingService.prototype.navigate = /**
         * Navigation with a new state into history
         * @protected
         * @param {?} path
         * @param {?=} query
         * @param {?=} extras
         * @return {?}
         */
        function (path, query, extras) {
            this.store.dispatch(new RouteGoAction({
                path: path,
                query: query,
                extras: extras,
            }));
        };
        RoutingService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        RoutingService.ctorParameters = function () { return [
            { type: store.Store },
            { type: WindowRef },
            { type: SemanticPathService }
        ]; };
        /** @nocollapse */ RoutingService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function RoutingService_Factory() { return new RoutingService(core.ɵɵinject(store.Store), core.ɵɵinject(WindowRef), core.ɵɵinject(SemanticPathService)); }, token: RoutingService, providedIn: "root" });
        return RoutingService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        RoutingService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        RoutingService.prototype.winRef;
        /**
         * @type {?}
         * @protected
         */
        RoutingService.prototype.semanticPathService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserErrorHandlingService = /** @class */ (function () {
        function UserErrorHandlingService(authService, routingService) {
            this.authService = authService;
            this.routingService = routingService;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        UserErrorHandlingService.prototype.handleExpiredUserToken = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            return this.handleExpiredToken().pipe(operators.switchMap((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                return next.handle(_this.createNewRequestWithNewToken(request, token));
            })));
        };
        /**
         * @return {?}
         */
        UserErrorHandlingService.prototype.handleExpiredRefreshToken = /**
         * @return {?}
         */
        function () {
            // Logout user
            this.authService.logout();
        };
        /**
         * @protected
         * @return {?}
         */
        UserErrorHandlingService.prototype.handleExpiredToken = /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var oldToken;
            return this.authService.getUserToken().pipe(operators.tap((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                if (token.access_token && token.refresh_token && !oldToken) {
                    _this.authService.refreshUserToken(token);
                }
                else if (!token.access_token && !token.refresh_token) {
                    _this.routingService.go({ cxRoute: 'login' });
                }
                else if (!token.refresh_token) {
                    _this.authService.logout();
                    _this.routingService.go({ cxRoute: 'login' });
                }
                oldToken = oldToken || token;
            })), operators.filter((/**
             * @param {?} token
             * @return {?}
             */
            function (token) { return oldToken.access_token !== token.access_token; })), operators.take(1));
        };
        /**
         * @protected
         * @param {?} request
         * @param {?} token
         * @return {?}
         */
        UserErrorHandlingService.prototype.createNewRequestWithNewToken = /**
         * @protected
         * @param {?} request
         * @param {?} token
         * @return {?}
         */
        function (request, token) {
            request = request.clone({
                setHeaders: {
                    Authorization: token.token_type + " " + token.access_token,
                },
            });
            return request;
        };
        UserErrorHandlingService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserErrorHandlingService.ctorParameters = function () { return [
            { type: AuthService },
            { type: RoutingService }
        ]; };
        return UserErrorHandlingService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserErrorHandlingService.prototype.authService;
        /**
         * @type {?}
         * @protected
         */
        UserErrorHandlingService.prototype.routingService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OAUTH_ENDPOINT = '/authorizationserver/oauth/token';
    var AuthErrorInterceptor = /** @class */ (function () {
        function AuthErrorInterceptor(userErrorHandlingService, clientErrorHandlingService, authService) {
            this.userErrorHandlingService = userErrorHandlingService;
            this.clientErrorHandlingService = clientErrorHandlingService;
            this.authService = authService;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        AuthErrorInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            /** @type {?} */
            var isClientTokenRequest = this.isClientTokenRequest(request);
            if (isClientTokenRequest) {
                request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);
            }
            return next.handle(request).pipe(operators.catchError((/**
             * @param {?} errResponse
             * @return {?}
             */
            function (errResponse) {
                if (errResponse instanceof http.HttpErrorResponse) {
                    switch (errResponse.status) {
                        case 401: // Unauthorized
                            if (isClientTokenRequest) {
                                if (_this.isExpiredToken(errResponse)) {
                                    return _this.clientErrorHandlingService.handleExpiredClientToken(request, next);
                                }
                                // user token request
                            }
                            else {
                                if (_this.isExpiredToken(errResponse)) {
                                    return _this.userErrorHandlingService.handleExpiredUserToken(request, next);
                                }
                                else if (
                                // Refresh expired token
                                // Check that the OAUTH endpoint was called and the error is for refresh token is expired
                                errResponse.url.includes(OAUTH_ENDPOINT) &&
                                    errResponse.error.error === 'invalid_token') {
                                    _this.userErrorHandlingService.handleExpiredRefreshToken();
                                    return rxjs.of();
                                }
                            }
                            break;
                        case 400: // Bad Request
                            if (errResponse.url.includes(OAUTH_ENDPOINT) &&
                                errResponse.error.error === 'invalid_grant') {
                                if (request.body.get('grant_type') === 'refresh_token') {
                                    // refresh token fail, force user logout
                                    _this.authService.logout();
                                }
                            }
                            break;
                    }
                }
                return rxjs.throwError(errResponse);
            })));
        };
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        AuthErrorInterceptor.prototype.isClientTokenRequest = /**
         * @private
         * @param {?} request
         * @return {?}
         */
        function (request) {
            /** @type {?} */
            var isRequestMapping = InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers);
            return Boolean(isRequestMapping);
        };
        /**
         * @private
         * @param {?} resp
         * @return {?}
         */
        AuthErrorInterceptor.prototype.isExpiredToken = /**
         * @private
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            if (resp.error &&
                resp.error.errors &&
                resp.error.errors instanceof Array &&
                resp.error.errors[0]) {
                return resp.error.errors[0].type === 'InvalidTokenError';
            }
            return false;
        };
        AuthErrorInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        AuthErrorInterceptor.ctorParameters = function () { return [
            { type: UserErrorHandlingService },
            { type: ClientErrorHandlingService },
            { type: AuthService }
        ]; };
        /** @nocollapse */ AuthErrorInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AuthErrorInterceptor_Factory() { return new AuthErrorInterceptor(core.ɵɵinject(UserErrorHandlingService), core.ɵɵinject(ClientErrorHandlingService), core.ɵɵinject(AuthService)); }, token: AuthErrorInterceptor, providedIn: "root" });
        return AuthErrorInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AuthErrorInterceptor.prototype.userErrorHandlingService;
        /**
         * @type {?}
         * @private
         */
        AuthErrorInterceptor.prototype.clientErrorHandlingService;
        /**
         * @type {?}
         * @private
         */
        AuthErrorInterceptor.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicTemplate = /** @class */ (function () {
        function DynamicTemplate() {
        }
        /**
         * @param {?} templateString
         * @param {?} templateVariables
         * @return {?}
         */
        DynamicTemplate.resolve = /**
         * @param {?} templateString
         * @param {?} templateVariables
         * @return {?}
         */
        function (templateString, templateVariables) {
            var e_1, _a;
            try {
                for (var _b = __values(Object.keys(templateVariables)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var variableLabel = _c.value;
                    /** @type {?} */
                    var placeholder = new RegExp('\\${' + variableLabel + '}', 'g');
                    templateString = templateString.replace(placeholder, templateVariables[variableLabel]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return templateString;
        };
        return DynamicTemplate;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Helper function for safely getting context parameter config
     *
     * @param {?} config
     * @param {?} parameter
     * @return {?}
     */
    function getContextParameterValues(config, parameter) {
        return (config.context && config.context[parameter]) || [];
    }
    /**
     * Helper function for calculating default value for context parameter from config
     *
     * @param {?} config
     * @param {?} parameter
     * @return {?}
     */
    function getContextParameterDefault(config, parameter) {
        /** @type {?} */
        var param = getContextParameterValues(config, parameter);
        return param && param.length ? param[0] : undefined;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_BASE_SITE = '[Site-context] Load BaseSite';
    /** @type {?} */
    var LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';
    /** @type {?} */
    var LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';
    /** @type {?} */
    var SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';
    /** @type {?} */
    var BASE_SITE_CHANGE = '[Site-context] BaseSite Change';
    var LoadBaseSite = /** @class */ (function () {
        function LoadBaseSite() {
            this.type = LOAD_BASE_SITE;
        }
        return LoadBaseSite;
    }());
    if (false) {
        /** @type {?} */
        LoadBaseSite.prototype.type;
    }
    var LoadBaseSiteFail = /** @class */ (function () {
        function LoadBaseSiteFail(payload) {
            this.payload = payload;
            this.type = LOAD_BASE_SITE_FAIL;
        }
        return LoadBaseSiteFail;
    }());
    if (false) {
        /** @type {?} */
        LoadBaseSiteFail.prototype.type;
        /** @type {?} */
        LoadBaseSiteFail.prototype.payload;
    }
    var LoadBaseSiteSuccess = /** @class */ (function () {
        function LoadBaseSiteSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_BASE_SITE_SUCCESS;
        }
        return LoadBaseSiteSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadBaseSiteSuccess.prototype.type;
        /** @type {?} */
        LoadBaseSiteSuccess.prototype.payload;
    }
    var SetActiveBaseSite = /** @class */ (function () {
        function SetActiveBaseSite(payload) {
            this.payload = payload;
            this.type = SET_ACTIVE_BASE_SITE;
        }
        return SetActiveBaseSite;
    }());
    if (false) {
        /** @type {?} */
        SetActiveBaseSite.prototype.type;
        /** @type {?} */
        SetActiveBaseSite.prototype.payload;
    }
    var BaseSiteChange = /** @class */ (function () {
        function BaseSiteChange() {
            this.type = BASE_SITE_CHANGE;
        }
        return BaseSiteChange;
    }());
    if (false) {
        /** @type {?} */
        BaseSiteChange.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CURRENCIES = '[Site-context] Load Currencies';
    /** @type {?} */
    var LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';
    /** @type {?} */
    var LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';
    /** @type {?} */
    var SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';
    /** @type {?} */
    var CURRENCY_CHANGE = '[Site-context] Currency Change';
    var LoadCurrencies = /** @class */ (function () {
        function LoadCurrencies() {
            this.type = LOAD_CURRENCIES;
        }
        return LoadCurrencies;
    }());
    if (false) {
        /** @type {?} */
        LoadCurrencies.prototype.type;
    }
    var LoadCurrenciesFail = /** @class */ (function () {
        function LoadCurrenciesFail(payload) {
            this.payload = payload;
            this.type = LOAD_CURRENCIES_FAIL;
        }
        return LoadCurrenciesFail;
    }());
    if (false) {
        /** @type {?} */
        LoadCurrenciesFail.prototype.type;
        /** @type {?} */
        LoadCurrenciesFail.prototype.payload;
    }
    var LoadCurrenciesSuccess = /** @class */ (function () {
        function LoadCurrenciesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_CURRENCIES_SUCCESS;
        }
        return LoadCurrenciesSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadCurrenciesSuccess.prototype.type;
        /** @type {?} */
        LoadCurrenciesSuccess.prototype.payload;
    }
    var SetActiveCurrency = /** @class */ (function () {
        function SetActiveCurrency(payload) {
            this.payload = payload;
            this.type = SET_ACTIVE_CURRENCY;
        }
        return SetActiveCurrency;
    }());
    if (false) {
        /** @type {?} */
        SetActiveCurrency.prototype.type;
        /** @type {?} */
        SetActiveCurrency.prototype.payload;
    }
    var CurrencyChange = /** @class */ (function () {
        function CurrencyChange() {
            this.type = CURRENCY_CHANGE;
        }
        return CurrencyChange;
    }());
    if (false) {
        /** @type {?} */
        CurrencyChange.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_LANGUAGES = '[Site-context] Load Languages';
    /** @type {?} */
    var LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';
    /** @type {?} */
    var LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';
    /** @type {?} */
    var SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';
    /** @type {?} */
    var LANGUAGE_CHANGE = '[Site-context] Language Change';
    var LoadLanguages = /** @class */ (function () {
        function LoadLanguages() {
            this.type = LOAD_LANGUAGES;
        }
        return LoadLanguages;
    }());
    if (false) {
        /** @type {?} */
        LoadLanguages.prototype.type;
    }
    var LoadLanguagesFail = /** @class */ (function () {
        function LoadLanguagesFail(payload) {
            this.payload = payload;
            this.type = LOAD_LANGUAGES_FAIL;
        }
        return LoadLanguagesFail;
    }());
    if (false) {
        /** @type {?} */
        LoadLanguagesFail.prototype.type;
        /** @type {?} */
        LoadLanguagesFail.prototype.payload;
    }
    var LoadLanguagesSuccess = /** @class */ (function () {
        function LoadLanguagesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_LANGUAGES_SUCCESS;
        }
        return LoadLanguagesSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadLanguagesSuccess.prototype.type;
        /** @type {?} */
        LoadLanguagesSuccess.prototype.payload;
    }
    var SetActiveLanguage = /** @class */ (function () {
        function SetActiveLanguage(payload) {
            this.payload = payload;
            this.type = SET_ACTIVE_LANGUAGE;
        }
        return SetActiveLanguage;
    }());
    if (false) {
        /** @type {?} */
        SetActiveLanguage.prototype.type;
        /** @type {?} */
        SetActiveLanguage.prototype.payload;
    }
    var LanguageChange = /** @class */ (function () {
        function LanguageChange() {
            this.type = LANGUAGE_CHANGE;
        }
        return LanguageChange;
    }());
    if (false) {
        /** @type {?} */
        LanguageChange.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var siteContextGroup_actions = /*#__PURE__*/Object.freeze({
        LOAD_BASE_SITE: LOAD_BASE_SITE,
        LOAD_BASE_SITE_FAIL: LOAD_BASE_SITE_FAIL,
        LOAD_BASE_SITE_SUCCESS: LOAD_BASE_SITE_SUCCESS,
        SET_ACTIVE_BASE_SITE: SET_ACTIVE_BASE_SITE,
        BASE_SITE_CHANGE: BASE_SITE_CHANGE,
        LoadBaseSite: LoadBaseSite,
        LoadBaseSiteFail: LoadBaseSiteFail,
        LoadBaseSiteSuccess: LoadBaseSiteSuccess,
        SetActiveBaseSite: SetActiveBaseSite,
        BaseSiteChange: BaseSiteChange,
        LOAD_CURRENCIES: LOAD_CURRENCIES,
        LOAD_CURRENCIES_FAIL: LOAD_CURRENCIES_FAIL,
        LOAD_CURRENCIES_SUCCESS: LOAD_CURRENCIES_SUCCESS,
        SET_ACTIVE_CURRENCY: SET_ACTIVE_CURRENCY,
        CURRENCY_CHANGE: CURRENCY_CHANGE,
        LoadCurrencies: LoadCurrencies,
        LoadCurrenciesFail: LoadCurrenciesFail,
        LoadCurrenciesSuccess: LoadCurrenciesSuccess,
        SetActiveCurrency: SetActiveCurrency,
        CurrencyChange: CurrencyChange,
        LOAD_LANGUAGES: LOAD_LANGUAGES,
        LOAD_LANGUAGES_FAIL: LOAD_LANGUAGES_FAIL,
        LOAD_LANGUAGES_SUCCESS: LOAD_LANGUAGES_SUCCESS,
        SET_ACTIVE_LANGUAGE: SET_ACTIVE_LANGUAGE,
        LANGUAGE_CHANGE: LANGUAGE_CHANGE,
        LoadLanguages: LoadLanguages,
        LoadLanguagesFail: LoadLanguagesFail,
        LoadLanguagesSuccess: LoadLanguagesSuccess,
        SetActiveLanguage: SetActiveLanguage,
        LanguageChange: LanguageChange
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SITE_CONTEXT_FEATURE = 'siteContext';
    /**
     * @record
     */
    function StateWithSiteContext() { }
    if (false) {
        /* Skipping unnamed member:
        [SITE_CONTEXT_FEATURE]: SiteContextState;*/
    }
    /**
     * @record
     */
    function SiteContextState() { }
    if (false) {
        /** @type {?} */
        SiteContextState.prototype.languages;
        /** @type {?} */
        SiteContextState.prototype.currencies;
        /** @type {?} */
        SiteContextState.prototype.baseSite;
    }
    /**
     * @record
     */
    function CurrencyEntities() { }
    /**
     * @record
     */
    function CurrenciesState() { }
    if (false) {
        /** @type {?} */
        CurrenciesState.prototype.entities;
        /** @type {?} */
        CurrenciesState.prototype.activeCurrency;
    }
    /**
     * @record
     */
    function LanguagesEntities() { }
    /**
     * @record
     */
    function LanguagesState() { }
    if (false) {
        /** @type {?} */
        LanguagesState.prototype.entities;
        /** @type {?} */
        LanguagesState.prototype.activeLanguage;
    }
    /**
     * @record
     */
    function BaseSiteState() { }
    if (false) {
        /** @type {?} */
        BaseSiteState.prototype.activeSite;
        /** @type {?} */
        BaseSiteState.prototype.details;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getSiteContextState = store.createFeatureSelector(SITE_CONTEXT_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$3 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.baseSite && state.baseSite.activeSite;
    };
    /** @type {?} */
    var getActiveBaseSite = store.createSelector(getSiteContextState, (ɵ0$3));
    var ɵ1$2 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state && state.baseSite && state.baseSite.details; };
    /** @type {?} */
    var getBaseSiteData = store.createSelector(getSiteContextState, (ɵ1$2));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var currenciesEntitiesSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entities; });
    var ɵ0$4 = currenciesEntitiesSelector;
    /** @type {?} */
    var activeCurrencySelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.activeCurrency; });
    var ɵ1$3 = activeCurrencySelector;
    var ɵ2$1 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.currencies; };
    /** @type {?} */
    var getCurrenciesState = store.createSelector(getSiteContextState, (ɵ2$1));
    /** @type {?} */
    var getCurrenciesEntities = store.createSelector(getCurrenciesState, currenciesEntitiesSelector);
    /** @type {?} */
    var getActiveCurrency = store.createSelector(getCurrenciesState, activeCurrencySelector);
    var ɵ3$1 = /**
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        return entities
            ? Object.keys(entities).map((/**
             * @param {?} isocode
             * @return {?}
             */
            function (isocode) { return entities[isocode]; }))
            : null;
    };
    /** @type {?} */
    var getAllCurrencies = store.createSelector(getCurrenciesEntities, (ɵ3$1));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var activeLanguageSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.activeLanguage; });
    var ɵ0$5 = activeLanguageSelector;
    /** @type {?} */
    var languagesEntitiesSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entities; });
    var ɵ1$4 = languagesEntitiesSelector;
    var ɵ2$2 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.languages; };
    /** @type {?} */
    var getLanguagesState = store.createSelector(getSiteContextState, (ɵ2$2));
    /** @type {?} */
    var getLanguagesEntities = store.createSelector(getLanguagesState, languagesEntitiesSelector);
    /** @type {?} */
    var getActiveLanguage = store.createSelector(getLanguagesState, activeLanguageSelector);
    var ɵ3$2 = /**
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        return entities
            ? Object.keys(entities).map((/**
             * @param {?} isocode
             * @return {?}
             */
            function (isocode) { return entities[isocode]; }))
            : null;
    };
    /** @type {?} */
    var getAllLanguages = store.createSelector(getLanguagesEntities, (ɵ3$2));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var siteContextGroup_selectors = /*#__PURE__*/Object.freeze({
        getActiveBaseSite: getActiveBaseSite,
        getBaseSiteData: getBaseSiteData,
        getCurrenciesState: getCurrenciesState,
        getCurrenciesEntities: getCurrenciesEntities,
        getActiveCurrency: getActiveCurrency,
        getAllCurrencies: getAllCurrencies,
        getLanguagesState: getLanguagesState,
        getLanguagesEntities: getLanguagesEntities,
        getActiveLanguage: getActiveLanguage,
        getAllLanguages: getAllLanguages,
        getSiteContextState: getSiteContextState
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LANGUAGE_CONTEXT_ID = 'language';
    /** @type {?} */
    var CURRENCY_CONTEXT_ID = 'currency';
    /** @type {?} */
    var BASE_SITE_CONTEXT_ID = 'baseSite';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BaseSiteService = /** @class */ (function () {
        function BaseSiteService(store, config) {
            this.store = store;
            this.config = config;
        }
        /**
         * Represents the current baseSite uid.
         */
        /**
         * Represents the current baseSite uid.
         * @return {?}
         */
        BaseSiteService.prototype.getActive = /**
         * Represents the current baseSite uid.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getActiveBaseSite), operators.filter((/**
             * @param {?} active
             * @return {?}
             */
            function (active) { return Boolean(active); })));
        };
        /**
         * We currently don't support switching baseSite at run time
         */
        /**
         * We currently don't support switching baseSite at run time
         * @return {?}
         */
        BaseSiteService.prototype.getAll = /**
         * We currently don't support switching baseSite at run time
         * @return {?}
         */
        function () {
            return this.getActive().pipe(operators.map((/**
             * @param {?} baseSite
             * @return {?}
             */
            function (baseSite) { return [baseSite]; })));
        };
        /**
         * @param {?} baseSite
         * @return {?}
         */
        BaseSiteService.prototype.setActive = /**
         * @param {?} baseSite
         * @return {?}
         */
        function (baseSite) {
            var _this = this;
            return this.store
                .pipe(store.select(getActiveBaseSite), operators.take(1))
                .subscribe((/**
             * @param {?} activeBaseSite
             * @return {?}
             */
            function (activeBaseSite) {
                if (baseSite && activeBaseSite !== baseSite) {
                    _this.store.dispatch(new SetActiveBaseSite(baseSite));
                }
            }));
        };
        /**
         * Initializes the active baseSite.
         */
        /**
         * Initializes the active baseSite.
         * @return {?}
         */
        BaseSiteService.prototype.initialize = /**
         * Initializes the active baseSite.
         * @return {?}
         */
        function () {
            this.setActive(getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID));
        };
        /**
         * Get the base site details data
         */
        /**
         * Get the base site details data
         * @return {?}
         */
        BaseSiteService.prototype.getBaseSiteData = /**
         * Get the base site details data
         * @return {?}
         */
        function () {
            var _this = this;
            return this.store.pipe(store.select(getBaseSiteData), operators.tap((/**
             * @param {?} baseSite
             * @return {?}
             */
            function (baseSite) {
                if (Object.keys(baseSite).length === 0) {
                    _this.store.dispatch(new LoadBaseSite());
                }
            })));
        };
        BaseSiteService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BaseSiteService.ctorParameters = function () { return [
            { type: store.Store },
            { type: SiteContextConfig }
        ]; };
        return BaseSiteService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        BaseSiteService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        BaseSiteService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccEndpointsService = /** @class */ (function () {
        function OccEndpointsService(config, baseSiteService) {
            var _this = this;
            this.config = config;
            this.baseSiteService = baseSiteService;
            this.SCOPE_SUFFIX = '_scopes';
            this.activeBaseSite =
                getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';
            if (this.baseSiteService) {
                this.baseSiteService
                    .getActive()
                    .subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return (_this.activeBaseSite = value); }));
            }
        }
        /**
         * Returns and endpoint starting from the OCC baseUrl (no baseSite)
         * @param endpoint Endpoint suffix
         */
        /**
         * Returns and endpoint starting from the OCC baseUrl (no baseSite)
         * @param {?} endpoint Endpoint suffix
         * @return {?}
         */
        OccEndpointsService.prototype.getRawEndpoint = /**
         * Returns and endpoint starting from the OCC baseUrl (no baseSite)
         * @param {?} endpoint Endpoint suffix
         * @return {?}
         */
        function (endpoint) {
            if (!this.config || !this.config.backend || !this.config.backend.occ) {
                return '';
            }
            endpoint = this.config.backend.occ.endpoints[endpoint];
            if (!endpoint.startsWith('/')) {
                endpoint = '/' + endpoint;
            }
            return this.config.backend.occ.baseUrl + endpoint;
        };
        /**
         * Returns base OCC endpoint (baseUrl + prefix + baseSite)
         */
        /**
         * Returns base OCC endpoint (baseUrl + prefix + baseSite)
         * @return {?}
         */
        OccEndpointsService.prototype.getBaseEndpoint = /**
         * Returns base OCC endpoint (baseUrl + prefix + baseSite)
         * @return {?}
         */
        function () {
            if (!this.config || !this.config.backend || !this.config.backend.occ) {
                return '';
            }
            return ((this.config.backend.occ.baseUrl || '') +
                this.config.backend.occ.prefix +
                this.activeBaseSite);
        };
        /**
         * Returns an OCC endpoint including baseUrl and baseSite
         * @param endpoint Endpoint suffix
         */
        /**
         * Returns an OCC endpoint including baseUrl and baseSite
         * @param {?} endpoint Endpoint suffix
         * @return {?}
         */
        OccEndpointsService.prototype.getEndpoint = /**
         * Returns an OCC endpoint including baseUrl and baseSite
         * @param {?} endpoint Endpoint suffix
         * @return {?}
         */
        function (endpoint) {
            if (!endpoint.startsWith('/')) {
                endpoint = '/' + endpoint;
            }
            return this.getBaseEndpoint() + endpoint;
        };
        /**
         * Returns a fully qualified OCC Url (including baseUrl and baseSite)
         * @param endpoint Name of the OCC endpoint key config
         * @param urlParams  URL parameters
         * @param queryParams Query parameters
         * @param scope
         */
        /**
         * Returns a fully qualified OCC Url (including baseUrl and baseSite)
         * @param {?} endpoint Name of the OCC endpoint key config
         * @param {?=} urlParams  URL parameters
         * @param {?=} queryParams Query parameters
         * @param {?=} scope
         * @return {?}
         */
        OccEndpointsService.prototype.getUrl = /**
         * Returns a fully qualified OCC Url (including baseUrl and baseSite)
         * @param {?} endpoint Name of the OCC endpoint key config
         * @param {?=} urlParams  URL parameters
         * @param {?=} queryParams Query parameters
         * @param {?=} scope
         * @return {?}
         */
        function (endpoint, urlParams, queryParams, scope) {
            var _a;
            if (scope === void 0) { scope = ''; }
            endpoint = this.getEndpointForScope(endpoint, scope);
            if (urlParams) {
                Object.keys(urlParams).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    urlParams[key] = encodeURIComponent(urlParams[key]);
                }));
                endpoint = DynamicTemplate.resolve(endpoint, urlParams);
            }
            if (queryParams) {
                /** @type {?} */
                var httpParamsOptions = void 0;
                if (endpoint.includes('?')) {
                    /** @type {?} */
                    var queryParamsFromEndpoint = void 0;
                    _a = __read(endpoint.split('?'), 2), endpoint = _a[0], queryParamsFromEndpoint = _a[1];
                    httpParamsOptions = { fromString: queryParamsFromEndpoint };
                }
                /** @type {?} */
                var httpParams_1 = new http.HttpParams(httpParamsOptions);
                Object.keys(queryParams).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    /** @type {?} */
                    var value = queryParams[key];
                    if (value !== undefined) {
                        if (value === null) {
                            httpParams_1 = httpParams_1.delete(key);
                        }
                        else {
                            httpParams_1 = httpParams_1.set(key, value);
                        }
                    }
                }));
                /** @type {?} */
                var params = httpParams_1.toString();
                if (params.length) {
                    endpoint += '?' + params;
                }
            }
            return this.getEndpoint(endpoint);
        };
        /**
         * @private
         * @param {?} endpoint
         * @param {?} scope
         * @return {?}
         */
        OccEndpointsService.prototype.getEndpointForScope = /**
         * @private
         * @param {?} endpoint
         * @param {?} scope
         * @return {?}
         */
        function (endpoint, scope) {
            /** @type {?} */
            var endpointsConfig = this.config.backend &&
                this.config.backend.occ &&
                this.config.backend.occ.endpoints;
            if (scope) {
                /** @type {?} */
                var endpointConfig = endpointsConfig["" + endpoint + this.SCOPE_SUFFIX];
                if (endpointConfig && endpointConfig[scope]) {
                    return endpointConfig[scope];
                }
                if (core.isDevMode()) {
                    console.warn(endpoint + " endpoint configuration missing for scope \"" + scope + "\"");
                }
            }
            return endpointsConfig[endpoint] || endpoint;
        };
        OccEndpointsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        OccEndpointsService.ctorParameters = function () { return [
            { type: OccConfig },
            { type: BaseSiteService, decorators: [{ type: core.Optional }] }
        ]; };
        /** @nocollapse */ OccEndpointsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccEndpointsService_Factory() { return new OccEndpointsService(core.ɵɵinject(OccConfig), core.ɵɵinject(BaseSiteService, 8)); }, token: OccEndpointsService, providedIn: "root" });
        return OccEndpointsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccEndpointsService.prototype.activeBaseSite;
        /**
         * @type {?}
         * @private
         */
        OccEndpointsService.prototype.SCOPE_SUFFIX;
        /**
         * @type {?}
         * @private
         */
        OccEndpointsService.prototype.config;
        /**
         * @type {?}
         * @private
         */
        OccEndpointsService.prototype.baseSiteService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClientTokenInterceptor = /** @class */ (function () {
        function ClientTokenInterceptor(authService, occEndpoints) {
            this.authService = authService;
            this.occEndpoints = occEndpoints;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        ClientTokenInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            return this.getClientToken(request).pipe(operators.take(1), operators.switchMap((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                if (token &&
                    request.url.includes(_this.occEndpoints.getBaseEndpoint())) {
                    request = request.clone({
                        setHeaders: {
                            Authorization: token.token_type + " " + token.access_token,
                        },
                    });
                }
                return next.handle(request);
            })));
        };
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        ClientTokenInterceptor.prototype.getClientToken = /**
         * @private
         * @param {?} request
         * @return {?}
         */
        function (request) {
            if (InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)) {
                return this.authService.getClientToken();
            }
            return rxjs.of(null);
        };
        ClientTokenInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ClientTokenInterceptor.ctorParameters = function () { return [
            { type: AuthService },
            { type: OccEndpointsService }
        ]; };
        /** @nocollapse */ ClientTokenInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ClientTokenInterceptor_Factory() { return new ClientTokenInterceptor(core.ɵɵinject(AuthService), core.ɵɵinject(OccEndpointsService)); }, token: ClientTokenInterceptor, providedIn: "root" });
        return ClientTokenInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ClientTokenInterceptor.prototype.authService;
        /**
         * @type {?}
         * @private
         */
        ClientTokenInterceptor.prototype.occEndpoints;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserTokenInterceptor = /** @class */ (function () {
        function UserTokenInterceptor(authService, occEndpoints) {
            this.authService = authService;
            this.occEndpoints = occEndpoints;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        UserTokenInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            return this.authService.getUserToken().pipe(operators.take(1), operators.switchMap((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                if (token &&
                    _this.isOccUrl(request.url) &&
                    !request.headers.get('Authorization')) {
                    request = request.clone({
                        setHeaders: {
                            Authorization: token.token_type + " " + token.access_token,
                        },
                    });
                }
                return next.handle(request);
            })));
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        UserTokenInterceptor.prototype.isOccUrl = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return url.includes(this.occEndpoints.getBaseEndpoint());
        };
        UserTokenInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        UserTokenInterceptor.ctorParameters = function () { return [
            { type: AuthService },
            { type: OccEndpointsService }
        ]; };
        /** @nocollapse */ UserTokenInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserTokenInterceptor_Factory() { return new UserTokenInterceptor(core.ɵɵinject(AuthService), core.ɵɵinject(OccEndpointsService)); }, token: UserTokenInterceptor, providedIn: "root" });
        return UserTokenInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        UserTokenInterceptor.prototype.authService;
        /**
         * @type {?}
         * @private
         */
        UserTokenInterceptor.prototype.occEndpoints;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TokenRevocationInterceptor = /** @class */ (function () {
        function TokenRevocationInterceptor() {
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        TokenRevocationInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            /** @type {?} */
            var isTokenRevocationRequest = this.isTokenRevocationRequest(request);
            if (isTokenRevocationRequest) {
                request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);
            }
            return next.handle(request).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                if (isTokenRevocationRequest) {
                    return rxjs.EMPTY;
                }
                return rxjs.throwError(error);
            })));
        };
        /**
         * @protected
         * @param {?} request
         * @return {?}
         */
        TokenRevocationInterceptor.prototype.isTokenRevocationRequest = /**
         * @protected
         * @param {?} request
         * @return {?}
         */
        function (request) {
            /** @type {?} */
            var isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam(TOKEN_REVOCATION_HEADER, request.headers);
            return Boolean(isTokenRevocationHeaderPresent);
        };
        TokenRevocationInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        TokenRevocationInterceptor.ctorParameters = function () { return []; };
        /** @nocollapse */ TokenRevocationInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TokenRevocationInterceptor_Factory() { return new TokenRevocationInterceptor(); }, token: TokenRevocationInterceptor, providedIn: "root" });
        return TokenRevocationInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var interceptors = [
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: ClientTokenInterceptor,
            multi: true,
        },
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: UserTokenInterceptor,
            multi: true,
        },
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: AuthErrorInterceptor,
            multi: true,
        },
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: TokenRevocationInterceptor,
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClientAuthenticationTokenService = /** @class */ (function () {
        function ClientAuthenticationTokenService(config, http, occEndpointsService) {
            this.config = config;
            this.http = http;
            this.occEndpointsService = occEndpointsService;
        }
        /**
         * @return {?}
         */
        ClientAuthenticationTokenService.prototype.loadClientAuthenticationToken = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var url = this.occEndpointsService.getRawEndpoint('login');
            /** @type {?} */
            var params = new http.HttpParams()
                .set('client_id', encodeURIComponent(this.config.authentication.client_id))
                .set('client_secret', encodeURIComponent(this.config.authentication.client_secret))
                .set('grant_type', 'client_credentials');
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.post(url, params, { headers: headers });
        };
        ClientAuthenticationTokenService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ClientAuthenticationTokenService.ctorParameters = function () { return [
            { type: AuthConfig },
            { type: http.HttpClient },
            { type: OccEndpointsService }
        ]; };
        return ClientAuthenticationTokenService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ClientAuthenticationTokenService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        ClientAuthenticationTokenService.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        ClientAuthenticationTokenService.prototype.occEndpointsService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserAuthenticationTokenService = /** @class */ (function () {
        function UserAuthenticationTokenService(http, config, occEndpointsService) {
            this.http = http;
            this.config = config;
            this.occEndpointsService = occEndpointsService;
        }
        /**
         * @param {?} userId
         * @param {?} password
         * @return {?}
         */
        UserAuthenticationTokenService.prototype.loadToken = /**
         * @param {?} userId
         * @param {?} password
         * @return {?}
         */
        function (userId, password) {
            /** @type {?} */
            var url = this.occEndpointsService.getRawEndpoint('login');
            /** @type {?} */
            var params = new http.HttpParams()
                .set('client_id', this.config.authentication.client_id)
                .set('client_secret', this.config.authentication.client_secret)
                .set('grant_type', 'password')
                .set('username', userId)
                .set('password', password);
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http
                .post(url, params, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} refreshToken
         * @return {?}
         */
        UserAuthenticationTokenService.prototype.refreshToken = /**
         * @param {?} refreshToken
         * @return {?}
         */
        function (refreshToken) {
            /** @type {?} */
            var url = this.occEndpointsService.getRawEndpoint('login');
            /** @type {?} */
            var params = new http.HttpParams()
                .set('client_id', encodeURIComponent(this.config.authentication.client_id))
                .set('client_secret', encodeURIComponent(this.config.authentication.client_secret))
                .set('refresh_token', encodeURI(refreshToken))
                .set('grant_type', 'refresh_token');
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http
                .post(url, params, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} userToken
         * @return {?}
         */
        UserAuthenticationTokenService.prototype.revoke = /**
         * @param {?} userToken
         * @return {?}
         */
        function (userToken) {
            /** @type {?} */
            var url = this.occEndpointsService.getRawEndpoint('revoke');
            /** @type {?} */
            var headers = InterceptorUtil.createHeader(TOKEN_REVOCATION_HEADER, true, new http.HttpHeaders({
                Authorization: userToken.token_type + " " + userToken.access_token,
                'Content-Type': 'application/x-www-form-urlencoded',
            }));
            /** @type {?} */
            var params = new http.HttpParams().set('token', userToken.access_token);
            return this.http
                .post(url, params, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        UserAuthenticationTokenService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserAuthenticationTokenService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: AuthConfig },
            { type: OccEndpointsService }
        ]; };
        return UserAuthenticationTokenService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserAuthenticationTokenService.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        UserAuthenticationTokenService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        UserAuthenticationTokenService.prototype.occEndpointsService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var AuthServices = [
        ClientAuthenticationTokenService,
        ClientErrorHandlingService,
        UserAuthenticationTokenService,
        UserErrorHandlingService,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var StorageSyncType = {
        NO_STORAGE: 'NO_STORAGE',
        LOCAL_STORAGE: 'LOCAL_STORAGE',
        SESSION_STORAGE: 'SESSION_STORAGE',
    };
    /** @enum {string} */
    var StateTransferType = {
        TRANSFER_STATE: 'SSR',
    };
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    StateConfig = /** @class */ (function () {
        function StateConfig() {
        }
        return StateConfig;
    }());
    if (false) {
        /** @type {?} */
        StateConfig.prototype.state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';
    /** @type {?} */
    var DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';
    /** @type {?} */
    var defaultStateConfig = {
        state: {
            storageSync: {
                localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,
                sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,
                keys: {},
                excludeKeys: {},
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} winRef
     * @param {?=} config
     * @return {?}
     */
    function getStorageSyncReducer(winRef, config) {
        if (!winRef.nativeWindow ||
            !config ||
            !config.state ||
            !config.state.storageSync ||
            !config.state.storageSync.keys) {
            return (/**
             * @param {?} reducer
             * @return {?}
             */
            function (reducer) { return reducer; });
        }
        /** @type {?} */
        var storageSyncConfig = config.state.storageSync;
        return (/**
         * @param {?} reducer
         * @return {?}
         */
        function (reducer) {
            return (/**
             * @param {?} state
             * @param {?} action
             * @return {?}
             */
            function (state, action) {
                /** @type {?} */
                var newState = reducer(state, action);
                if (action.type === store.INIT || action.type === store.UPDATE) {
                    /** @type {?} */
                    var rehydratedState = rehydrate(config, winRef);
                    return deepMerge({}, newState, rehydratedState);
                }
                if (action.type !== store.INIT) {
                    // handle local storage
                    /** @type {?} */
                    var localStorageKeys = filterKeysByType(storageSyncConfig.keys, StorageSyncType.LOCAL_STORAGE);
                    /** @type {?} */
                    var localStorageExclusionKeys = filterKeysByType(storageSyncConfig.excludeKeys, StorageSyncType.LOCAL_STORAGE);
                    /** @type {?} */
                    var localStorageStateSlices = getStateSlice(localStorageKeys, localStorageExclusionKeys, newState);
                    persistToStorage(config.state.storageSync.localStorageKeyName, localStorageStateSlices, winRef.localStorage);
                    // handle session storage
                    /** @type {?} */
                    var sessionStorageKeys = filterKeysByType(storageSyncConfig.keys, StorageSyncType.SESSION_STORAGE);
                    /** @type {?} */
                    var sessionStorageExclusionKeys = filterKeysByType(storageSyncConfig.excludeKeys, StorageSyncType.SESSION_STORAGE);
                    /** @type {?} */
                    var sessionStorageStateSlices = getStateSlice(sessionStorageKeys, sessionStorageExclusionKeys, newState);
                    persistToStorage(config.state.storageSync.sessionStorageKeyName, sessionStorageStateSlices, winRef.sessionStorage);
                }
                return newState;
            });
        });
    }
    /**
     * @template T
     * @param {?} config
     * @param {?} winRef
     * @return {?}
     */
    function rehydrate(config, winRef) {
        /** @type {?} */
        var localStorageValue = readFromStorage(winRef.localStorage, config.state.storageSync.localStorageKeyName);
        /** @type {?} */
        var sessionStorageValue = readFromStorage(winRef.sessionStorage, config.state.storageSync.sessionStorageKeyName);
        return deepMerge(localStorageValue, sessionStorageValue);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function exists(value) {
        if (value != null) {
            if (typeof value === 'object') {
                return Object.keys(value).length !== 0;
            }
            return value !== '';
        }
        return false;
    }
    /**
     * @param {?} storageType
     * @param {?} winRef
     * @return {?}
     */
    function getStorage(storageType, winRef) {
        /** @type {?} */
        var storage;
        switch (storageType) {
            case StorageSyncType.LOCAL_STORAGE: {
                storage = winRef.localStorage;
                break;
            }
            case StorageSyncType.SESSION_STORAGE: {
                storage = winRef.sessionStorage;
                break;
            }
            case StorageSyncType.NO_STORAGE: {
                storage = undefined;
                break;
            }
            default: {
                storage = winRef.sessionStorage;
            }
        }
        return storage;
    }
    /**
     * @param {?} configKey
     * @param {?} value
     * @param {?} storage
     * @return {?}
     */
    function persistToStorage(configKey, value, storage) {
        if (!isSsr(storage) && value) {
            storage.setItem(configKey, JSON.stringify(value));
        }
    }
    /**
     * @param {?} storage
     * @param {?} key
     * @return {?}
     */
    function readFromStorage(storage, key) {
        if (isSsr(storage)) {
            return;
        }
        /** @type {?} */
        var storageValue = storage.getItem(key);
        if (!storageValue) {
            return;
        }
        return JSON.parse(storageValue);
    }
    /**
     * @param {?} storage
     * @return {?}
     */
    function isSsr(storage) {
        return !Boolean(storage);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CX_KEY = platformBrowser.makeStateKey('cx-state');
    /**
     * @param {?} platformId
     * @param {?=} transferState
     * @param {?=} config
     * @return {?}
     */
    function getTransferStateReducer(platformId, transferState, config) {
        if (transferState &&
            config &&
            config.state &&
            config.state.ssrTransfer &&
            config.state.ssrTransfer.keys) {
            if (common.isPlatformBrowser(platformId)) {
                return getBrowserTransferStateReducer(transferState, config.state.ssrTransfer.keys);
            }
            else if (common.isPlatformServer(platformId)) {
                return getServerTransferStateReducer(transferState, config.state.ssrTransfer.keys);
            }
        }
        return (/**
         * @param {?} reducer
         * @return {?}
         */
        function (reducer) { return reducer; });
    }
    /**
     * @param {?} transferState
     * @param {?} keys
     * @return {?}
     */
    function getServerTransferStateReducer(transferState, keys) {
        /** @type {?} */
        var transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
        return (/**
         * @param {?} reducer
         * @return {?}
         */
        function (reducer) {
            return (/**
             * @param {?} state
             * @param {?} action
             * @return {?}
             */
            function (state, action) {
                /** @type {?} */
                var newState = reducer(state, action);
                if (newState) {
                    /** @type {?} */
                    var stateSlice = getStateSlice(transferStateKeys, [], newState);
                    transferState.set(CX_KEY, stateSlice);
                }
                return newState;
            });
        });
    }
    /**
     * @param {?} transferState
     * @param {?} keys
     * @return {?}
     */
    function getBrowserTransferStateReducer(transferState, keys) {
        /** @type {?} */
        var transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
        return (/**
         * @param {?} reducer
         * @return {?}
         */
        function (reducer) {
            return (/**
             * @param {?} state
             * @param {?} action
             * @return {?}
             */
            function (state, action) {
                if (action.type === store.INIT) {
                    if (!state) {
                        state = reducer(state, action);
                    }
                    // we should not utilize transfer state if user is logged in
                    /** @type {?} */
                    var authState = ((/** @type {?} */ (state)))[AUTH_FEATURE];
                    /** @type {?} */
                    var isLoggedIn = authState && authState.userToken && authState.userToken.token;
                    if (!isLoggedIn && transferState.hasKey(CX_KEY)) {
                        /** @type {?} */
                        var cxKey = transferState.get(CX_KEY, {});
                        /** @type {?} */
                        var transferredStateSlice = getStateSlice(transferStateKeys, [], cxKey);
                        state = deepMerge({}, state, transferredStateSlice);
                    }
                    return state;
                }
                return reducer(state, action);
            });
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TRANSFER_STATE_META_REDUCER = new core.InjectionToken('TransferStateMetaReducer');
    /** @type {?} */
    var STORAGE_SYNC_META_REDUCER = new core.InjectionToken('StorageSyncMetaReducer');
    var ɵ0$6 = getTransferStateReducer, ɵ1$5 = getStorageSyncReducer;
    /** @type {?} */
    var stateMetaReducers = [
        {
            provide: TRANSFER_STATE_META_REDUCER,
            useFactory: ɵ0$6,
            deps: [
                core.PLATFORM_ID,
                [new core.Optional(), platformBrowser.TransferState],
                [new core.Optional(), Config],
            ],
        },
        {
            provide: STORAGE_SYNC_META_REDUCER,
            useFactory: ɵ1$5,
            deps: [WindowRef, [new core.Optional(), Config]],
        },
        {
            provide: store.META_REDUCERS,
            useExisting: TRANSFER_STATE_META_REDUCER,
            multi: true,
        },
        {
            provide: store.META_REDUCERS,
            useExisting: STORAGE_SYNC_META_REDUCER,
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StateModule = /** @class */ (function () {
        function StateModule() {
        }
        /**
         * @return {?}
         */
        StateModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: StateModule,
                providers: __spread(stateMetaReducers, [
                    provideConfig(defaultStateConfig),
                    { provide: StateConfig, useExisting: Config },
                ]),
            };
        };
        StateModule.decorators = [
            { type: core.NgModule, args: [{},] }
        ];
        return StateModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UNKNOWN_ERROR = {
        error: 'unknown error',
    };
    /** @type {?} */
    var circularReplacer = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var seen = new WeakSet();
        return (/**
         * @param {?} _key
         * @param {?} value
         * @return {?}
         */
        function (_key, value) {
            if (typeof value === 'object' && value !== null) {
                if (seen.has(value)) {
                    return;
                }
                seen.add(value);
            }
            return value;
        });
    });
    var ɵ0$7 = circularReplacer;
    /**
     * @param {?} error
     * @return {?}
     */
    function makeErrorSerializable(error) {
        if (error instanceof Error) {
            return (/** @type {?} */ ({
                message: error.message,
                type: error.name,
                reason: error.stack,
            }));
        }
        if (error instanceof http.HttpErrorResponse) {
            /** @type {?} */
            var serializableError = error.error;
            if (isObject(error.error)) {
                serializableError = JSON.stringify(error.error, circularReplacer());
            }
            return (/** @type {?} */ ({
                message: error.message,
                error: serializableError,
                status: error.status,
                statusText: error.statusText,
                url: error.url,
            }));
        }
        return isObject(error) ? UNKNOWN_ERROR : error;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClientTokenEffect = /** @class */ (function () {
        function ClientTokenEffect(actions$, clientAuthenticationTokenService) {
            var _this = this;
            this.actions$ = actions$;
            this.clientAuthenticationTokenService = clientAuthenticationTokenService;
            this.loadClientToken$ = this.actions$.pipe(effects$d.ofType(LOAD_CLIENT_TOKEN), operators.exhaustMap((/**
             * @return {?}
             */
            function () {
                return _this.clientAuthenticationTokenService
                    .loadClientAuthenticationToken()
                    .pipe(operators.map((/**
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    return new LoadClientTokenSuccess(token);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadClientTokenFail(makeErrorSerializable(error)));
                })));
            })));
        }
        ClientTokenEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ClientTokenEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: ClientAuthenticationTokenService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ClientTokenEffect.prototype, "loadClientToken$", void 0);
        return ClientTokenEffect;
    }());
    if (false) {
        /** @type {?} */
        ClientTokenEffect.prototype.loadClientToken$;
        /**
         * @type {?}
         * @private
         */
        ClientTokenEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ClientTokenEffect.prototype.clientAuthenticationTokenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserTokenEffects = /** @class */ (function () {
        function UserTokenEffects(actions$, userTokenService) {
            var _this = this;
            this.actions$ = actions$;
            this.userTokenService = userTokenService;
            this.loadUserToken$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_TOKEN), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var userId = _a.userId, password = _a.password;
                return _this.userTokenService.loadToken(userId, password).pipe(operators.map((/**
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    /** @type {?} */
                    var date = new Date();
                    date.setSeconds(date.getSeconds() + token.expires_in);
                    token.expiration_time = date.toJSON();
                    token.userId = OCC_USER_ID_CURRENT;
                    return new LoadUserTokenSuccess(token);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadUserTokenFail(makeErrorSerializable(error)));
                })));
            })));
            this.login$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_TOKEN_SUCCESS), operators.map((/**
             * @return {?}
             */
            function () { return new Login(); })));
            this.refreshUserToken$ = this.actions$.pipe(effects$d.ofType(REFRESH_USER_TOKEN), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.exhaustMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var refreshToken = _a.refreshToken;
                return _this.userTokenService.refreshToken(refreshToken).pipe(operators.map((/**
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    /** @type {?} */
                    var date = new Date();
                    date.setSeconds(date.getSeconds() + token.expires_in);
                    token.expiration_time = date.toJSON();
                    return new RefreshUserTokenSuccess(token);
                }), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return rxjs.of(new RefreshUserTokenFail(makeErrorSerializable(error))); }))));
            })));
            this.revokeUserToken$ = this.actions$.pipe(effects$d.ofType(REVOKE_USER_TOKEN), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return action.payload;
            })), operators.mergeMap((/**
             * @param {?} userToken
             * @return {?}
             */
            function (userToken) {
                return _this.userTokenService.revoke(userToken).pipe(operators.map((/**
                 * @return {?}
                 */
                function () { return new RevokeUserTokenSuccess(userToken); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return rxjs.of(new RevokeUserTokenFail(error)); })));
            })));
        }
        UserTokenEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserTokenEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserAuthenticationTokenService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserTokenEffects.prototype, "loadUserToken$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserTokenEffects.prototype, "login$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserTokenEffects.prototype, "refreshUserToken$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserTokenEffects.prototype, "revokeUserToken$", void 0);
        return UserTokenEffects;
    }());
    if (false) {
        /** @type {?} */
        UserTokenEffects.prototype.loadUserToken$;
        /** @type {?} */
        UserTokenEffects.prototype.login$;
        /** @type {?} */
        UserTokenEffects.prototype.refreshUserToken$;
        /** @type {?} */
        UserTokenEffects.prototype.revokeUserToken$;
        /**
         * @type {?}
         * @private
         */
        UserTokenEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UserTokenEffects.prototype.userTokenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects = [UserTokenEffects, ClientTokenEffect];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState = (/** @type {?} */ ({}));
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer(state, action) {
        if (state === void 0) { state = initialState; }
        switch (action.type) {
            case LOAD_USER_TOKEN:
            case REFRESH_USER_TOKEN: {
                return __assign({}, state);
            }
            case LOAD_USER_TOKEN_SUCCESS:
            case REFRESH_USER_TOKEN_SUCCESS: {
                return __assign({}, state, action.payload);
            }
            case LOAD_USER_TOKEN_FAIL:
            case REFRESH_USER_TOKEN_FAIL: {
                return __assign({}, state);
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers() {
        return {
            userToken: store.combineReducers({ token: reducer }),
            clientToken: loaderReducer(CLIENT_TOKEN_DATA),
        };
    }
    /** @type {?} */
    var reducerToken = new core.InjectionToken('AuthReducers');
    /** @type {?} */
    var reducerProvider = {
        provide: reducerToken,
        useFactory: getReducers,
    };
    /**
     * @param {?} reducer
     * @return {?}
     */
    function clearAuthState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LOGOUT) {
                state = __assign({}, state, { userToken: undefined });
            }
            return reducer(state, action);
        });
    }
    /** @type {?} */
    var metaReducers = [clearAuthState];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function authStoreConfigFactory() {
        // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object
        /** @type {?} */
        var config = {
            state: {
                storageSync: {
                    keys: {
                        'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,
                        'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,
                        'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,
                        'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,
                        'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,
                        'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,
                    },
                },
            },
        };
        return config;
    }
    var AuthStoreModule = /** @class */ (function () {
        function AuthStoreModule() {
        }
        AuthStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            StateModule,
                            store.StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers: metaReducers }),
                            effects$d.EffectsModule.forFeature(effects),
                            ConfigModule.withConfigFactory(authStoreConfigFactory),
                        ],
                        providers: [reducerProvider],
                    },] }
        ];
        return AuthStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthModule = /** @class */ (function () {
        function AuthModule() {
        }
        /**
         * @return {?}
         */
        AuthModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: AuthModule,
                providers: __spread(interceptors, AuthServices, [
                    { provide: AuthConfig, useExisting: Config },
                ]),
            };
        };
        AuthModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            AuthStoreModule,
                            ConfigModule.withConfig(defaultAuthConfig),
                        ],
                    },] }
        ];
        return AuthModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthRedirectService = /** @class */ (function () {
        /**
         * This service is responsible for redirecting to the last page before authorization. "The last page" can be:
         * 1. Just the previously opened page; or
         * 2. The page that we just tried to open, but AuthGuard cancelled it
         *
         * For example:
         * 1. The user opens the product page, then clicks /login link and signs in
         *    -> Then we should redirect to the product page; or
         * 2. The user opens the product page, then he clicks /my-account link,
         *    but is automatically redirected to the login page by the AuthGuard, and he signs in
         *    -> Then we should redirect to the my-account page, not the product page
         */
        function AuthRedirectService(routing, router) {
            this.routing = routing;
            this.router = router;
            this.ignoredUrls = new Set();
        }
        /**
         * @return {?}
         */
        AuthRedirectService.prototype.redirect = /**
         * @return {?}
         */
        function () {
            if (this.redirectUrl === undefined) {
                this.routing.go('/');
            }
            else {
                this.routing.goByUrl(this.redirectUrl);
            }
            this.redirectUrl = undefined;
            this.lastAuthGuardNavigation = undefined;
        };
        /**
         * @return {?}
         */
        AuthRedirectService.prototype.reportAuthGuard = /**
         * @return {?}
         */
        function () {
            var _a = this.getCurrentNavigation(), url = _a.url, navigationId = _a.navigationId;
            this.lastAuthGuardNavigation = { url: url, navigationId: navigationId };
            this.redirectUrl = url;
        };
        /**
         * @return {?}
         */
        AuthRedirectService.prototype.reportNotAuthGuard = /**
         * @return {?}
         */
        function () {
            var _a = this.getCurrentNavigation(), url = _a.url, initialUrl = _a.initialUrl, navigationId = _a.navigationId;
            this.ignoredUrls.add(url);
            // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)
            if (!this.ignoredUrls.has(initialUrl)) {
                // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent
                // than the last opened page
                if (!this.lastAuthGuardNavigation ||
                    this.lastAuthGuardNavigation.navigationId < navigationId - 1) {
                    this.redirectUrl = initialUrl;
                    this.lastAuthGuardNavigation = undefined;
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        AuthRedirectService.prototype.getCurrentNavigation = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var initialUrl = this.router.url;
            /** @type {?} */
            var navigation = this.router.getCurrentNavigation();
            /** @type {?} */
            var url = this.router.serializeUrl(navigation.finalUrl);
            return {
                navigationId: navigation.id,
                url: url,
                initialUrl: initialUrl,
            };
        };
        AuthRedirectService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AuthRedirectService.ctorParameters = function () { return [
            { type: RoutingService },
            { type: router.Router }
        ]; };
        /** @nocollapse */ AuthRedirectService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AuthRedirectService_Factory() { return new AuthRedirectService(core.ɵɵinject(RoutingService), core.ɵɵinject(router.Router)); }, token: AuthRedirectService, providedIn: "root" });
        return AuthRedirectService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AuthRedirectService.prototype.redirectUrl;
        /**
         * @type {?}
         * @private
         */
        AuthRedirectService.prototype.ignoredUrls;
        /**
         * @type {?}
         * @private
         */
        AuthRedirectService.prototype.lastAuthGuardNavigation;
        /**
         * @type {?}
         * @private
         */
        AuthRedirectService.prototype.routing;
        /**
         * @type {?}
         * @private
         */
        AuthRedirectService.prototype.router;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthGuard = /** @class */ (function () {
        function AuthGuard(routingService, authService, authRedirectService, router) {
            this.routingService = routingService;
            this.authService = authService;
            this.authRedirectService = authRedirectService;
            this.router = router;
        }
        /**
         * @return {?}
         */
        AuthGuard.prototype.canActivate = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.authService.getUserToken().pipe(operators.map((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                if (!token.access_token) {
                    _this.authRedirectService.reportAuthGuard();
                    _this.routingService.go({ cxRoute: 'login' });
                }
                return !!token.access_token;
            })));
        };
        AuthGuard.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AuthGuard.ctorParameters = function () { return [
            { type: RoutingService },
            { type: AuthService },
            { type: AuthRedirectService },
            { type: router.Router }
        ]; };
        /** @nocollapse */ AuthGuard.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(core.ɵɵinject(RoutingService), core.ɵɵinject(AuthService), core.ɵɵinject(AuthRedirectService), core.ɵɵinject(router.Router)); }, token: AuthGuard, providedIn: "root" });
        return AuthGuard;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        AuthGuard.prototype.routingService;
        /**
         * @type {?}
         * @protected
         */
        AuthGuard.prototype.authService;
        /**
         * @type {?}
         * @protected
         */
        AuthGuard.prototype.authRedirectService;
        /**
         * @type {?}
         * @protected
         */
        AuthGuard.prototype.router;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NotAuthGuard = /** @class */ (function () {
        function NotAuthGuard(routingService, authService, authRedirectService) {
            this.routingService = routingService;
            this.authService = authService;
            this.authRedirectService = authRedirectService;
        }
        /**
         * @return {?}
         */
        NotAuthGuard.prototype.canActivate = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.authRedirectService.reportNotAuthGuard();
            // redirect, if user is already logged in:
            return this.authService.getUserToken().pipe(operators.map((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                if (token.access_token) {
                    _this.routingService.go({ cxRoute: 'home' });
                }
                return !token.access_token;
            })));
        };
        NotAuthGuard.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        NotAuthGuard.ctorParameters = function () { return [
            { type: RoutingService },
            { type: AuthService },
            { type: AuthRedirectService }
        ]; };
        /** @nocollapse */ NotAuthGuard.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NotAuthGuard_Factory() { return new NotAuthGuard(core.ɵɵinject(RoutingService), core.ɵɵinject(AuthService), core.ɵɵinject(AuthRedirectService)); }, token: NotAuthGuard, providedIn: "root" });
        return NotAuthGuard;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        NotAuthGuard.prototype.routingService;
        /**
         * @type {?}
         * @protected
         */
        NotAuthGuard.prototype.authService;
        /**
         * @type {?}
         * @private
         */
        NotAuthGuard.prototype.authRedirectService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function UserToken() { }
    if (false) {
        /** @type {?} */
        UserToken.prototype.access_token;
        /** @type {?} */
        UserToken.prototype.token_type;
        /** @type {?} */
        UserToken.prototype.refresh_token;
        /** @type {?} */
        UserToken.prototype.expires_in;
        /** @type {?} */
        UserToken.prototype.scope;
        /** @type {?} */
        UserToken.prototype.userId;
        /** @type {?|undefined} */
        UserToken.prototype.expiration_time;
    }
    /**
     * @record
     */
    function ClientToken() { }
    if (false) {
        /** @type {?} */
        ClientToken.prototype.access_token;
        /** @type {?} */
        ClientToken.prototype.token_type;
        /** @type {?} */
        ClientToken.prototype.expires_in;
        /** @type {?} */
        ClientToken.prototype.scope;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Country() { }
    if (false) {
        /** @type {?|undefined} */
        Country.prototype.isocode;
        /** @type {?|undefined} */
        Country.prototype.name;
    }
    /** @enum {string} */
    var CountryType = {
        BILLING: 'BILLING',
        SHIPPING: 'SHIPPING',
    };
    /**
     * @record
     */
    function Region() { }
    if (false) {
        /** @type {?|undefined} */
        Region.prototype.countryIso;
        /** @type {?|undefined} */
        Region.prototype.isocode;
        /** @type {?|undefined} */
        Region.prototype.isocodeShort;
        /** @type {?|undefined} */
        Region.prototype.name;
    }
    /**
     * @record
     */
    function Address() { }
    if (false) {
        /** @type {?|undefined} */
        Address.prototype.companyName;
        /** @type {?|undefined} */
        Address.prototype.country;
        /** @type {?|undefined} */
        Address.prototype.defaultAddress;
        /** @type {?|undefined} */
        Address.prototype.email;
        /** @type {?|undefined} */
        Address.prototype.firstName;
        /** @type {?|undefined} */
        Address.prototype.formattedAddress;
        /** @type {?|undefined} */
        Address.prototype.id;
        /** @type {?|undefined} */
        Address.prototype.lastName;
        /** @type {?|undefined} */
        Address.prototype.line1;
        /** @type {?|undefined} */
        Address.prototype.line2;
        /** @type {?|undefined} */
        Address.prototype.phone;
        /** @type {?|undefined} */
        Address.prototype.postalCode;
        /** @type {?|undefined} */
        Address.prototype.region;
        /** @type {?|undefined} */
        Address.prototype.shippingAddress;
        /** @type {?|undefined} */
        Address.prototype.title;
        /** @type {?|undefined} */
        Address.prototype.titleCode;
        /** @type {?|undefined} */
        Address.prototype.town;
        /** @type {?|undefined} */
        Address.prototype.visibleInAddressBook;
    }
    /**
     * @record
     */
    function AddressValidation() { }
    if (false) {
        /** @type {?|undefined} */
        AddressValidation.prototype.decision;
        /** @type {?|undefined} */
        AddressValidation.prototype.errors;
        /** @type {?|undefined} */
        AddressValidation.prototype.suggestedAddresses;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function PromotionResult() { }
    if (false) {
        /** @type {?|undefined} */
        PromotionResult.prototype.consumedEntries;
        /** @type {?|undefined} */
        PromotionResult.prototype.description;
        /** @type {?|undefined} */
        PromotionResult.prototype.promotion;
    }
    /** @enum {string} */
    var PromotionLocation = {
        ActiveCart: 'CART',
        Checkout: 'CHECKOUT',
        Order: 'ORDER',
    };
    /**
     * @record
     */
    function Voucher() { }
    if (false) {
        /** @type {?|undefined} */
        Voucher.prototype.appliedValue;
        /** @type {?|undefined} */
        Voucher.prototype.code;
        /** @type {?|undefined} */
        Voucher.prototype.currency;
        /** @type {?|undefined} */
        Voucher.prototype.description;
        /** @type {?|undefined} */
        Voucher.prototype.freeShipping;
        /** @type {?|undefined} */
        Voucher.prototype.name;
        /** @type {?|undefined} */
        Voucher.prototype.value;
        /** @type {?|undefined} */
        Voucher.prototype.valueFormatted;
        /** @type {?|undefined} */
        Voucher.prototype.valueString;
        /** @type {?|undefined} */
        Voucher.prototype.voucherCode;
    }
    /**
     * @record
     */
    function DeliveryOrderEntryGroup() { }
    if (false) {
        /** @type {?|undefined} */
        DeliveryOrderEntryGroup.prototype.deliveryAddress;
        /** @type {?|undefined} */
        DeliveryOrderEntryGroup.prototype.entries;
        /** @type {?|undefined} */
        DeliveryOrderEntryGroup.prototype.quantity;
        /** @type {?|undefined} */
        DeliveryOrderEntryGroup.prototype.totalPriceWithTax;
    }
    /**
     * @record
     */
    function Principal() { }
    if (false) {
        /** @type {?|undefined} */
        Principal.prototype.name;
        /** @type {?|undefined} */
        Principal.prototype.uid;
    }
    /**
     * @record
     */
    function CardType() { }
    if (false) {
        /** @type {?|undefined} */
        CardType.prototype.code;
        /** @type {?|undefined} */
        CardType.prototype.name;
    }
    /**
     * @record
     */
    function PaymentDetails() { }
    if (false) {
        /** @type {?|undefined} */
        PaymentDetails.prototype.accountHolderName;
        /** @type {?|undefined} */
        PaymentDetails.prototype.billingAddress;
        /** @type {?|undefined} */
        PaymentDetails.prototype.cardNumber;
        /** @type {?|undefined} */
        PaymentDetails.prototype.cardType;
        /** @type {?|undefined} */
        PaymentDetails.prototype.cvn;
        /** @type {?|undefined} */
        PaymentDetails.prototype.defaultPayment;
        /** @type {?|undefined} */
        PaymentDetails.prototype.expiryMonth;
        /** @type {?|undefined} */
        PaymentDetails.prototype.expiryYear;
        /** @type {?|undefined} */
        PaymentDetails.prototype.id;
        /** @type {?|undefined} */
        PaymentDetails.prototype.issueNumber;
        /** @type {?|undefined} */
        PaymentDetails.prototype.saved;
        /** @type {?|undefined} */
        PaymentDetails.prototype.startMonth;
        /** @type {?|undefined} */
        PaymentDetails.prototype.startYear;
        /** @type {?|undefined} */
        PaymentDetails.prototype.subscriptionId;
    }
    /**
     * @record
     */
    function SaveCartResult() { }
    if (false) {
        /** @type {?|undefined} */
        SaveCartResult.prototype.savedCartData;
    }
    /**
     * @record
     */
    function Cart() { }
    if (false) {
        /** @type {?|undefined} */
        Cart.prototype.appliedOrderPromotions;
        /** @type {?|undefined} */
        Cart.prototype.appliedProductPromotions;
        /** @type {?|undefined} */
        Cart.prototype.appliedVouchers;
        /** @type {?|undefined} */
        Cart.prototype.calculated;
        /** @type {?|undefined} */
        Cart.prototype.code;
        /** @type {?|undefined} */
        Cart.prototype.deliveryAddress;
        /** @type {?|undefined} */
        Cart.prototype.deliveryCost;
        /** @type {?|undefined} */
        Cart.prototype.deliveryItemsQuantity;
        /** @type {?|undefined} */
        Cart.prototype.deliveryMode;
        /** @type {?|undefined} */
        Cart.prototype.deliveryOrderGroups;
        /** @type {?|undefined} */
        Cart.prototype.description;
        /** @type {?|undefined} */
        Cart.prototype.entries;
        /** @type {?|undefined} */
        Cart.prototype.expirationTime;
        /** @type {?|undefined} */
        Cart.prototype.guid;
        /** @type {?|undefined} */
        Cart.prototype.name;
        /** @type {?|undefined} */
        Cart.prototype.net;
        /** @type {?|undefined} */
        Cart.prototype.orderDiscounts;
        /** @type {?|undefined} */
        Cart.prototype.paymentInfo;
        /** @type {?|undefined} */
        Cart.prototype.pickupItemsQuantity;
        /** @type {?|undefined} */
        Cart.prototype.pickupOrderGroups;
        /** @type {?|undefined} */
        Cart.prototype.potentialOrderPromotions;
        /** @type {?|undefined} */
        Cart.prototype.potentialProductPromotions;
        /** @type {?|undefined} */
        Cart.prototype.productDiscounts;
        /** @type {?|undefined} */
        Cart.prototype.saveTime;
        /** @type {?|undefined} */
        Cart.prototype.savedBy;
        /** @type {?|undefined} */
        Cart.prototype.site;
        /** @type {?|undefined} */
        Cart.prototype.store;
        /** @type {?|undefined} */
        Cart.prototype.subTotal;
        /** @type {?|undefined} */
        Cart.prototype.totalDiscounts;
        /** @type {?|undefined} */
        Cart.prototype.totalItems;
        /** @type {?|undefined} */
        Cart.prototype.totalPrice;
        /** @type {?|undefined} */
        Cart.prototype.totalPriceWithTax;
        /** @type {?|undefined} */
        Cart.prototype.totalTax;
        /** @type {?|undefined} */
        Cart.prototype.totalUnitCount;
        /** @type {?|undefined} */
        Cart.prototype.user;
    }
    /**
     * @record
     */
    function CartModification() { }
    if (false) {
        /** @type {?|undefined} */
        CartModification.prototype.deliveryModeChanged;
        /** @type {?|undefined} */
        CartModification.prototype.entry;
        /** @type {?|undefined} */
        CartModification.prototype.quantity;
        /** @type {?|undefined} */
        CartModification.prototype.quantityAdded;
        /** @type {?|undefined} */
        CartModification.prototype.statusCode;
        /** @type {?|undefined} */
        CartModification.prototype.statusMessage;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function CmsComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsComponent.prototype.modifiedTime;
        /** @type {?|undefined} */
        CmsComponent.prototype.name;
        /** @type {?|undefined} */
        CmsComponent.prototype.otherProperties;
        /** @type {?|undefined} */
        CmsComponent.prototype.typeCode;
        /** @type {?|undefined} */
        CmsComponent.prototype.uid;
    }
    /** @enum {string} */
    var PageType = {
        CONTENT_PAGE: 'ContentPage',
        PRODUCT_PAGE: 'ProductPage',
        CATEGORY_PAGE: 'CategoryPage',
        CATALOG_PAGE: 'CatalogPage',
    };
    /**
     * @record
     */
    function CmsLinkComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsLinkComponent.prototype.url;
        /** @type {?|undefined} */
        CmsLinkComponent.prototype.container;
        /** @type {?|undefined} */
        CmsLinkComponent.prototype.external;
        /** @type {?|undefined} */
        CmsLinkComponent.prototype.contentPage;
        /** @type {?|undefined} */
        CmsLinkComponent.prototype.contentPageLabelOrId;
        /** @type {?|undefined} */
        CmsLinkComponent.prototype.linkName;
        /** @type {?|undefined} */
        CmsLinkComponent.prototype.target;
    }
    /**
     * @record
     */
    function CmsSiteContextSelectorComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsSiteContextSelectorComponent.prototype.context;
    }
    /**
     * @record
     */
    function CmsSearchBoxComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.container;
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.maxSuggestions;
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.maxProducts;
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.displaySuggestions;
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.displayProducts;
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.displayProductImages;
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.waitTimeBeforeRequest;
        /** @type {?|undefined} */
        CmsSearchBoxComponent.prototype.minCharactersBeforeRequest;
    }
    /**
     * @record
     */
    function CmsParagraphComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsParagraphComponent.prototype.content;
        /** @type {?|undefined} */
        CmsParagraphComponent.prototype.container;
        /** @type {?|undefined} */
        CmsParagraphComponent.prototype.title;
    }
    /**
     * @record
     */
    function CMSTabParagraphContainer() { }
    if (false) {
        /** @type {?|undefined} */
        CMSTabParagraphContainer.prototype.container;
        /** @type {?|undefined} */
        CMSTabParagraphContainer.prototype.components;
    }
    /**
     * @record
     */
    function CmsBannerComponentMedia() { }
    if (false) {
        /** @type {?|undefined} */
        CmsBannerComponentMedia.prototype.altText;
        /** @type {?|undefined} */
        CmsBannerComponentMedia.prototype.code;
        /** @type {?|undefined} */
        CmsBannerComponentMedia.prototype.mime;
        /** @type {?|undefined} */
        CmsBannerComponentMedia.prototype.url;
    }
    /**
     * @record
     */
    function CmsResponsiveBannerComponentMedia() { }
    if (false) {
        /** @type {?|undefined} */
        CmsResponsiveBannerComponentMedia.prototype.desktop;
        /** @type {?|undefined} */
        CmsResponsiveBannerComponentMedia.prototype.mobile;
        /** @type {?|undefined} */
        CmsResponsiveBannerComponentMedia.prototype.tablet;
        /** @type {?|undefined} */
        CmsResponsiveBannerComponentMedia.prototype.widescreen;
    }
    /**
     * @record
     */
    function CmsBannerComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsBannerComponent.prototype.headline;
        /** @type {?|undefined} */
        CmsBannerComponent.prototype.content;
        /** @type {?|undefined} */
        CmsBannerComponent.prototype.container;
        /** @type {?|undefined} */
        CmsBannerComponent.prototype.media;
        /** @type {?|undefined} */
        CmsBannerComponent.prototype.urlLink;
        /** @type {?|undefined} */
        CmsBannerComponent.prototype.external;
    }
    /** @enum {string} */
    var CmsBannerCarouselEffect = {
        FADE: 'FADE',
        ZOOM: 'ZOOM',
        CURTAIN: 'CURTAINX',
        TURNDOWN: 'TURNDOWN',
    };
    /**
     * @record
     */
    function CmsBannerCarouselComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsBannerCarouselComponent.prototype.banners;
        /** @type {?|undefined} */
        CmsBannerCarouselComponent.prototype.effect;
    }
    /**
     * @record
     */
    function CmsProductCarouselComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsProductCarouselComponent.prototype.title;
        /** @type {?|undefined} */
        CmsProductCarouselComponent.prototype.productCodes;
        /** @type {?|undefined} */
        CmsProductCarouselComponent.prototype.container;
        /** @type {?|undefined} */
        CmsProductCarouselComponent.prototype.popup;
        /** @type {?|undefined} */
        CmsProductCarouselComponent.prototype.scroll;
    }
    /**
     * @record
     */
    function CmsProductReferencesComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsProductReferencesComponent.prototype.title;
        /** @type {?|undefined} */
        CmsProductReferencesComponent.prototype.displayProductTitles;
        /** @type {?|undefined} */
        CmsProductReferencesComponent.prototype.displayProductPrices;
        /** @type {?|undefined} */
        CmsProductReferencesComponent.prototype.maximumNumberProducts;
        /** @type {?|undefined} */
        CmsProductReferencesComponent.prototype.productReferenceTypes;
        /** @type {?|undefined} */
        CmsProductReferencesComponent.prototype.container;
    }
    /**
     * @record
     */
    function CmsMiniCartComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsMiniCartComponent.prototype.container;
        /** @type {?|undefined} */
        CmsMiniCartComponent.prototype.shownProductCount;
        /** @type {?|undefined} */
        CmsMiniCartComponent.prototype.title;
        /** @type {?|undefined} */
        CmsMiniCartComponent.prototype.totalDisplay;
        /** @type {?|undefined} */
        CmsMiniCartComponent.prototype.lightboxBannerComponent;
    }
    /**
     * @record
     */
    function CmsBreadcrumbsComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsBreadcrumbsComponent.prototype.container;
    }
    /**
     * @record
     */
    function CmsNavigationNode() { }
    if (false) {
        /** @type {?|undefined} */
        CmsNavigationNode.prototype.uid;
        /** @type {?|undefined} */
        CmsNavigationNode.prototype.title;
        /** @type {?|undefined} */
        CmsNavigationNode.prototype.children;
        /** @type {?|undefined} */
        CmsNavigationNode.prototype.entries;
    }
    /**
     * @record
     */
    function CmsNavigationEntry() { }
    if (false) {
        /** @type {?|undefined} */
        CmsNavigationEntry.prototype.itemId;
        /** @type {?|undefined} */
        CmsNavigationEntry.prototype.itemSuperType;
        /** @type {?|undefined} */
        CmsNavigationEntry.prototype.itemType;
    }
    /**
     * @record
     */
    function CmsNavigationComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsNavigationComponent.prototype.container;
        /** @type {?|undefined} */
        CmsNavigationComponent.prototype.styleClass;
        /** @type {?|undefined} */
        CmsNavigationComponent.prototype.wrapAfter;
        /** @type {?|undefined} */
        CmsNavigationComponent.prototype.notice;
        /** @type {?|undefined} */
        CmsNavigationComponent.prototype.showLanguageCurrency;
        /** @type {?|undefined} */
        CmsNavigationComponent.prototype.navigationNode;
    }
    /**
     * @record
     */
    function CmsProductFacetNavigationComponent() { }
    if (false) {
        /** @type {?|undefined} */
        CmsProductFacetNavigationComponent.prototype.container;
        /** @type {?|undefined} */
        CmsProductFacetNavigationComponent.prototype.activeFacetValueCode;
        /** @type {?|undefined} */
        CmsProductFacetNavigationComponent.prototype.searchResult;
        /** @type {?|undefined} */
        CmsProductFacetNavigationComponent.prototype.minPerFacet;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ConsentTemplate() { }
    if (false) {
        /** @type {?|undefined} */
        ConsentTemplate.prototype.id;
        /** @type {?|undefined} */
        ConsentTemplate.prototype.name;
        /** @type {?|undefined} */
        ConsentTemplate.prototype.description;
        /** @type {?|undefined} */
        ConsentTemplate.prototype.version;
        /** @type {?|undefined} */
        ConsentTemplate.prototype.currentConsent;
    }
    /**
     * @record
     */
    function Consent() { }
    if (false) {
        /** @type {?|undefined} */
        Consent.prototype.code;
        /** @type {?|undefined} */
        Consent.prototype.consentGivenDate;
        /** @type {?|undefined} */
        Consent.prototype.consentWithdrawnDate;
    }
    /**
     * @record
     */
    function AnonymousConsent() { }
    if (false) {
        /** @type {?|undefined} */
        AnonymousConsent.prototype.templateCode;
        /** @type {?|undefined} */
        AnonymousConsent.prototype.version;
        /** @type {?|undefined} */
        AnonymousConsent.prototype.consentState;
    }
    /** @enum {string} */
    var ANONYMOUS_CONSENT_STATUS = {
        GIVEN: 'GIVEN',
        WITHDRAWN: 'WITHDRAWN',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ConsignmentTrackingEvent() { }
    if (false) {
        /** @type {?|undefined} */
        ConsignmentTrackingEvent.prototype.eventDate;
        /** @type {?|undefined} */
        ConsignmentTrackingEvent.prototype.detail;
        /** @type {?|undefined} */
        ConsignmentTrackingEvent.prototype.location;
        /** @type {?|undefined} */
        ConsignmentTrackingEvent.prototype.referenceCode;
    }
    /**
     * @record
     */
    function Carrier() { }
    if (false) {
        /** @type {?|undefined} */
        Carrier.prototype.code;
        /** @type {?|undefined} */
        Carrier.prototype.name;
    }
    /**
     * @record
     */
    function ConsignmentTracking() { }
    if (false) {
        /** @type {?|undefined} */
        ConsignmentTracking.prototype.statusDisplay;
        /** @type {?|undefined} */
        ConsignmentTracking.prototype.carrierDetails;
        /** @type {?|undefined} */
        ConsignmentTracking.prototype.trackingID;
        /** @type {?|undefined} */
        ConsignmentTracking.prototype.trackingUrl;
        /** @type {?|undefined} */
        ConsignmentTracking.prototype.targetArrivalDate;
        /** @type {?|undefined} */
        ConsignmentTracking.prototype.trackingEvents;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Images() { }
    /**
     * @record
     */
    function Image() { }
    if (false) {
        /** @type {?|undefined} */
        Image.prototype.altText;
        /** @type {?|undefined} */
        Image.prototype.format;
        /** @type {?|undefined} */
        Image.prototype.galleryIndex;
        /** @type {?|undefined} */
        Image.prototype.imageType;
        /** @type {?|undefined} */
        Image.prototype.url;
    }
    /** @enum {string} */
    var ImageType = {
        PRIMARY: 'PRIMARY',
        GALLERY: 'GALLERY',
    };
    /**
     * @record
     */
    function ImageGroup() { }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Currency() { }
    if (false) {
        /** @type {?|undefined} */
        Currency.prototype.active;
        /** @type {?|undefined} */
        Currency.prototype.isocode;
        /** @type {?|undefined} */
        Currency.prototype.name;
        /** @type {?|undefined} */
        Currency.prototype.symbol;
    }
    /**
     * @record
     */
    function Time() { }
    if (false) {
        /** @type {?|undefined} */
        Time.prototype.formattedHour;
        /** @type {?|undefined} */
        Time.prototype.hour;
        /** @type {?|undefined} */
        Time.prototype.minute;
    }
    /**
     * @record
     */
    function GeoPoint() { }
    if (false) {
        /** @type {?|undefined} */
        GeoPoint.prototype.latitude;
        /** @type {?|undefined} */
        GeoPoint.prototype.longitude;
    }
    /**
     * @record
     */
    function Language() { }
    if (false) {
        /** @type {?|undefined} */
        Language.prototype.active;
        /** @type {?|undefined} */
        Language.prototype.isocode;
        /** @type {?|undefined} */
        Language.prototype.name;
        /** @type {?|undefined} */
        Language.prototype.nativeName;
    }
    /**
     * @record
     */
    function User() { }
    if (false) {
        /** @type {?|undefined} */
        User.prototype.currency;
        /** @type {?|undefined} */
        User.prototype.customerId;
        /** @type {?|undefined} */
        User.prototype.deactivationDate;
        /** @type {?|undefined} */
        User.prototype.defaultAddress;
        /** @type {?|undefined} */
        User.prototype.displayUid;
        /** @type {?|undefined} */
        User.prototype.firstName;
        /** @type {?|undefined} */
        User.prototype.language;
        /** @type {?|undefined} */
        User.prototype.lastName;
        /** @type {?|undefined} */
        User.prototype.name;
        /** @type {?|undefined} */
        User.prototype.title;
        /** @type {?|undefined} */
        User.prototype.titleCode;
        /** @type {?|undefined} */
        User.prototype.uid;
    }
    /**
     * @record
     */
    function PaginationModel() { }
    if (false) {
        /** @type {?|undefined} */
        PaginationModel.prototype.currentPage;
        /** @type {?|undefined} */
        PaginationModel.prototype.pageSize;
        /** @type {?|undefined} */
        PaginationModel.prototype.sort;
        /** @type {?|undefined} */
        PaginationModel.prototype.totalPages;
        /** @type {?|undefined} */
        PaginationModel.prototype.totalResults;
    }
    /**
     * @record
     */
    function SortModel() { }
    if (false) {
        /** @type {?|undefined} */
        SortModel.prototype.code;
        /** @type {?|undefined} */
        SortModel.prototype.name;
        /** @type {?|undefined} */
        SortModel.prototype.selected;
    }
    /**
     * @record
     */
    function Title() { }
    if (false) {
        /** @type {?|undefined} */
        Title.prototype.code;
        /** @type {?|undefined} */
        Title.prototype.name;
    }
    /**
     * @record
     */
    function ErrorModel() { }
    if (false) {
        /** @type {?|undefined} */
        ErrorModel.prototype.message;
        /** @type {?|undefined} */
        ErrorModel.prototype.reason;
        /** @type {?|undefined} */
        ErrorModel.prototype.subject;
        /** @type {?|undefined} */
        ErrorModel.prototype.subjectType;
        /** @type {?|undefined} */
        ErrorModel.prototype.type;
    }
    /**
     * @record
     */
    function HttpErrorModel() { }
    if (false) {
        /** @type {?|undefined} */
        HttpErrorModel.prototype.message;
        /** @type {?|undefined} */
        HttpErrorModel.prototype.error;
        /** @type {?|undefined} */
        HttpErrorModel.prototype.status;
        /** @type {?|undefined} */
        HttpErrorModel.prototype.statusText;
        /** @type {?|undefined} */
        HttpErrorModel.prototype.url;
    }
    /**
     * @record
     */
    function BaseStore() { }
    if (false) {
        /** @type {?|undefined} */
        BaseStore.prototype.currencies;
        /** @type {?|undefined} */
        BaseStore.prototype.defaultCurrency;
        /** @type {?|undefined} */
        BaseStore.prototype.languages;
        /** @type {?|undefined} */
        BaseStore.prototype.defaultLanguage;
    }
    /**
     * @record
     */
    function BaseSite() { }
    if (false) {
        /** @type {?|undefined} */
        BaseSite.prototype.channel;
        /** @type {?|undefined} */
        BaseSite.prototype.defaultLanguage;
        /** @type {?|undefined} */
        BaseSite.prototype.defaultPreviewCatalogId;
        /** @type {?|undefined} */
        BaseSite.prototype.defaultPreviewCategoryCode;
        /** @type {?|undefined} */
        BaseSite.prototype.defaultPreviewProductCode;
        /** @type {?|undefined} */
        BaseSite.prototype.locale;
        /** @type {?|undefined} */
        BaseSite.prototype.name;
        /** @type {?|undefined} */
        BaseSite.prototype.theme;
        /** @type {?|undefined} */
        BaseSite.prototype.uid;
        /** @type {?|undefined} */
        BaseSite.prototype.stores;
        /** @type {?|undefined} */
        BaseSite.prototype.urlPatterns;
        /** @type {?|undefined} */
        BaseSite.prototype.urlEncodingAttributes;
    }
    /**
     * @record
     */
    function UserSignUp() { }
    if (false) {
        /** @type {?|undefined} */
        UserSignUp.prototype.firstName;
        /** @type {?|undefined} */
        UserSignUp.prototype.lastName;
        /** @type {?|undefined} */
        UserSignUp.prototype.password;
        /** @type {?|undefined} */
        UserSignUp.prototype.titleCode;
        /** @type {?|undefined} */
        UserSignUp.prototype.uid;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function DeliveryMode() { }
    if (false) {
        /** @type {?|undefined} */
        DeliveryMode.prototype.code;
        /** @type {?|undefined} */
        DeliveryMode.prototype.deliveryCost;
        /** @type {?|undefined} */
        DeliveryMode.prototype.description;
        /** @type {?|undefined} */
        DeliveryMode.prototype.name;
    }
    /**
     * @record
     */
    function OrderEntry() { }
    if (false) {
        /** @type {?|undefined} */
        OrderEntry.prototype.basePrice;
        /** @type {?|undefined} */
        OrderEntry.prototype.deliveryMode;
        /** @type {?|undefined} */
        OrderEntry.prototype.deliveryPointOfService;
        /** @type {?|undefined} */
        OrderEntry.prototype.entryNumber;
        /** @type {?|undefined} */
        OrderEntry.prototype.product;
        /** @type {?|undefined} */
        OrderEntry.prototype.quantity;
        /** @type {?|undefined} */
        OrderEntry.prototype.totalPrice;
        /** @type {?|undefined} */
        OrderEntry.prototype.updateable;
        /** @type {?|undefined} */
        OrderEntry.prototype.returnedItemsPrice;
        /** @type {?|undefined} */
        OrderEntry.prototype.returnableQuantity;
        /** @type {?|undefined} */
        OrderEntry.prototype.cancelledItemsPrice;
        /** @type {?|undefined} */
        OrderEntry.prototype.cancellableQuantity;
    }
    /**
     * @record
     */
    function CancelOrReturnRequestEntryInput() { }
    if (false) {
        /** @type {?|undefined} */
        CancelOrReturnRequestEntryInput.prototype.orderEntryNumber;
        /** @type {?|undefined} */
        CancelOrReturnRequestEntryInput.prototype.quantity;
    }
    /**
     * @record
     */
    function ReturnRequestEntryInputList() { }
    if (false) {
        /** @type {?|undefined} */
        ReturnRequestEntryInputList.prototype.orderCode;
        /** @type {?|undefined} */
        ReturnRequestEntryInputList.prototype.returnRequestEntryInputs;
    }
    /**
     * @record
     */
    function CancellationRequestEntryInputList() { }
    if (false) {
        /** @type {?|undefined} */
        CancellationRequestEntryInputList.prototype.cancellationRequestEntryInputs;
    }
    /**
     * @record
     */
    function ReturnRequestEntry() { }
    if (false) {
        /** @type {?|undefined} */
        ReturnRequestEntry.prototype.orderEntry;
        /** @type {?|undefined} */
        ReturnRequestEntry.prototype.expectedQuantity;
        /** @type {?|undefined} */
        ReturnRequestEntry.prototype.refundAmount;
    }
    /**
     * @record
     */
    function ReturnRequest() { }
    if (false) {
        /** @type {?|undefined} */
        ReturnRequest.prototype.cancellable;
        /** @type {?|undefined} */
        ReturnRequest.prototype.code;
        /** @type {?|undefined} */
        ReturnRequest.prototype.creationTime;
        /** @type {?|undefined} */
        ReturnRequest.prototype.deliveryCost;
        /** @type {?|undefined} */
        ReturnRequest.prototype.order;
        /** @type {?|undefined} */
        ReturnRequest.prototype.refundDeliveryCost;
        /** @type {?|undefined} */
        ReturnRequest.prototype.returnEntries;
        /** @type {?|undefined} */
        ReturnRequest.prototype.returnLabelDownloadUrl;
        /** @type {?|undefined} */
        ReturnRequest.prototype.rma;
        /** @type {?|undefined} */
        ReturnRequest.prototype.status;
        /** @type {?|undefined} */
        ReturnRequest.prototype.subTotal;
        /** @type {?|undefined} */
        ReturnRequest.prototype.totalPrice;
    }
    /**
     * @record
     */
    function ReturnRequestList() { }
    if (false) {
        /** @type {?|undefined} */
        ReturnRequestList.prototype.returnRequests;
        /** @type {?|undefined} */
        ReturnRequestList.prototype.pagination;
        /** @type {?|undefined} */
        ReturnRequestList.prototype.sorts;
    }
    /**
     * @record
     */
    function ReturnRequestModification() { }
    if (false) {
        /** @type {?|undefined} */
        ReturnRequestModification.prototype.status;
    }
    /**
     * @record
     */
    function PickupOrderEntryGroup() { }
    if (false) {
        /** @type {?|undefined} */
        PickupOrderEntryGroup.prototype.deliveryPointOfService;
        /** @type {?|undefined} */
        PickupOrderEntryGroup.prototype.distance;
        /** @type {?|undefined} */
        PickupOrderEntryGroup.prototype.entries;
        /** @type {?|undefined} */
        PickupOrderEntryGroup.prototype.quantity;
        /** @type {?|undefined} */
        PickupOrderEntryGroup.prototype.totalPriceWithTax;
    }
    /**
     * @record
     */
    function PromotionOrderEntryConsumed() { }
    if (false) {
        /** @type {?|undefined} */
        PromotionOrderEntryConsumed.prototype.adjustedUnitPrice;
        /** @type {?|undefined} */
        PromotionOrderEntryConsumed.prototype.code;
        /** @type {?|undefined} */
        PromotionOrderEntryConsumed.prototype.orderEntryNumber;
        /** @type {?|undefined} */
        PromotionOrderEntryConsumed.prototype.quantity;
    }
    /**
     * @record
     */
    function ConsignmentEntry() { }
    if (false) {
        /** @type {?|undefined} */
        ConsignmentEntry.prototype.orderEntry;
        /** @type {?|undefined} */
        ConsignmentEntry.prototype.quantity;
        /** @type {?|undefined} */
        ConsignmentEntry.prototype.shippedQuantity;
    }
    /**
     * @record
     */
    function Consignment() { }
    if (false) {
        /** @type {?|undefined} */
        Consignment.prototype.code;
        /** @type {?|undefined} */
        Consignment.prototype.deliveryPointOfService;
        /** @type {?|undefined} */
        Consignment.prototype.entries;
        /** @type {?|undefined} */
        Consignment.prototype.shippingAddress;
        /** @type {?|undefined} */
        Consignment.prototype.status;
        /** @type {?|undefined} */
        Consignment.prototype.statusDate;
        /** @type {?|undefined} */
        Consignment.prototype.trackingID;
    }
    /**
     * @record
     */
    function OrderHistory() { }
    if (false) {
        /** @type {?|undefined} */
        OrderHistory.prototype.code;
        /** @type {?|undefined} */
        OrderHistory.prototype.guid;
        /** @type {?|undefined} */
        OrderHistory.prototype.placed;
        /** @type {?|undefined} */
        OrderHistory.prototype.status;
        /** @type {?|undefined} */
        OrderHistory.prototype.statusDisplay;
        /** @type {?|undefined} */
        OrderHistory.prototype.total;
    }
    /**
     * @record
     */
    function OrderHistoryList() { }
    if (false) {
        /** @type {?|undefined} */
        OrderHistoryList.prototype.orders;
        /** @type {?|undefined} */
        OrderHistoryList.prototype.pagination;
        /** @type {?|undefined} */
        OrderHistoryList.prototype.sorts;
    }
    /**
     * @record
     */
    function Order() { }
    if (false) {
        /** @type {?|undefined} */
        Order.prototype.appliedOrderPromotions;
        /** @type {?|undefined} */
        Order.prototype.appliedProductPromotions;
        /** @type {?|undefined} */
        Order.prototype.appliedVouchers;
        /** @type {?|undefined} */
        Order.prototype.calculated;
        /** @type {?|undefined} */
        Order.prototype.code;
        /** @type {?|undefined} */
        Order.prototype.consignments;
        /** @type {?|undefined} */
        Order.prototype.created;
        /** @type {?|undefined} */
        Order.prototype.deliveryAddress;
        /** @type {?|undefined} */
        Order.prototype.deliveryCost;
        /** @type {?|undefined} */
        Order.prototype.deliveryItemsQuantity;
        /** @type {?|undefined} */
        Order.prototype.deliveryMode;
        /** @type {?|undefined} */
        Order.prototype.deliveryOrderGroups;
        /** @type {?|undefined} */
        Order.prototype.deliveryStatus;
        /** @type {?|undefined} */
        Order.prototype.deliveryStatusDisplay;
        /** @type {?|undefined} */
        Order.prototype.entries;
        /** @type {?|undefined} */
        Order.prototype.guestCustomer;
        /** @type {?|undefined} */
        Order.prototype.guid;
        /** @type {?|undefined} */
        Order.prototype.net;
        /** @type {?|undefined} */
        Order.prototype.orderDiscounts;
        /** @type {?|undefined} */
        Order.prototype.paymentInfo;
        /** @type {?|undefined} */
        Order.prototype.pickupItemsQuantity;
        /** @type {?|undefined} */
        Order.prototype.pickupOrderGroups;
        /** @type {?|undefined} */
        Order.prototype.productDiscounts;
        /** @type {?|undefined} */
        Order.prototype.site;
        /** @type {?|undefined} */
        Order.prototype.status;
        /** @type {?|undefined} */
        Order.prototype.statusDisplay;
        /** @type {?|undefined} */
        Order.prototype.store;
        /** @type {?|undefined} */
        Order.prototype.subTotal;
        /** @type {?|undefined} */
        Order.prototype.totalDiscounts;
        /** @type {?|undefined} */
        Order.prototype.totalItems;
        /** @type {?|undefined} */
        Order.prototype.totalPrice;
        /** @type {?|undefined} */
        Order.prototype.totalPriceWithTax;
        /** @type {?|undefined} */
        Order.prototype.totalTax;
        /** @type {?|undefined} */
        Order.prototype.unconsignedEntries;
        /** @type {?|undefined} */
        Order.prototype.user;
        /** @type {?|undefined} */
        Order.prototype.returnable;
        /** @type {?|undefined} */
        Order.prototype.cancellable;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function PointOfService() { }
    if (false) {
        /** @type {?|undefined} */
        PointOfService.prototype.address;
        /** @type {?|undefined} */
        PointOfService.prototype.description;
        /** @type {?|undefined} */
        PointOfService.prototype.displayName;
        /** @type {?|undefined} */
        PointOfService.prototype.distanceKm;
        /** @type {?|undefined} */
        PointOfService.prototype.features;
        /** @type {?|undefined} */
        PointOfService.prototype.formattedDistance;
        /** @type {?|undefined} */
        PointOfService.prototype.geoPoint;
        /** @type {?|undefined} */
        PointOfService.prototype.mapIcon;
        /** @type {?|undefined} */
        PointOfService.prototype.name;
        /** @type {?|undefined} */
        PointOfService.prototype.openingHours;
        /** @type {?|undefined} */
        PointOfService.prototype.storeContent;
        /** @type {?|undefined} */
        PointOfService.prototype.storeImages;
        /** @type {?|undefined} */
        PointOfService.prototype.url;
    }
    /**
     * @record
     */
    function SpecialOpeningDay() { }
    if (false) {
        /** @type {?|undefined} */
        SpecialOpeningDay.prototype.closed;
        /** @type {?|undefined} */
        SpecialOpeningDay.prototype.closingTime;
        /** @type {?|undefined} */
        SpecialOpeningDay.prototype.comment;
        /** @type {?|undefined} */
        SpecialOpeningDay.prototype.date;
        /** @type {?|undefined} */
        SpecialOpeningDay.prototype.formattedDate;
        /** @type {?|undefined} */
        SpecialOpeningDay.prototype.name;
        /** @type {?|undefined} */
        SpecialOpeningDay.prototype.openingTime;
    }
    /**
     * @record
     */
    function WeekdayOpeningDay() { }
    if (false) {
        /** @type {?|undefined} */
        WeekdayOpeningDay.prototype.closed;
        /** @type {?|undefined} */
        WeekdayOpeningDay.prototype.closingTime;
        /** @type {?|undefined} */
        WeekdayOpeningDay.prototype.openingTime;
        /** @type {?|undefined} */
        WeekdayOpeningDay.prototype.weekDay;
    }
    /**
     * @record
     */
    function OpeningSchedule() { }
    if (false) {
        /** @type {?|undefined} */
        OpeningSchedule.prototype.code;
        /** @type {?|undefined} */
        OpeningSchedule.prototype.name;
        /** @type {?|undefined} */
        OpeningSchedule.prototype.specialDayOpeningList;
        /** @type {?|undefined} */
        OpeningSchedule.prototype.weekDayOpeningList;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function SearchQuery() { }
    if (false) {
        /** @type {?|undefined} */
        SearchQuery.prototype.value;
    }
    /**
     * @record
     */
    function SearchState() { }
    if (false) {
        /** @type {?|undefined} */
        SearchState.prototype.query;
        /** @type {?|undefined} */
        SearchState.prototype.url;
    }
    /**
     * @record
     */
    function FacetValue() { }
    if (false) {
        /** @type {?|undefined} */
        FacetValue.prototype.count;
        /** @type {?|undefined} */
        FacetValue.prototype.name;
        /** @type {?|undefined} */
        FacetValue.prototype.query;
        /** @type {?|undefined} */
        FacetValue.prototype.selected;
    }
    /**
     * @record
     */
    function Breadcrumb() { }
    if (false) {
        /** @type {?|undefined} */
        Breadcrumb.prototype.facetCode;
        /** @type {?|undefined} */
        Breadcrumb.prototype.facetName;
        /** @type {?|undefined} */
        Breadcrumb.prototype.facetValueCode;
        /** @type {?|undefined} */
        Breadcrumb.prototype.facetValueName;
        /** @type {?|undefined} */
        Breadcrumb.prototype.removeQuery;
        /** @type {?|undefined} */
        Breadcrumb.prototype.truncateQuery;
    }
    /**
     * @record
     */
    function Facet() { }
    if (false) {
        /** @type {?|undefined} */
        Facet.prototype.category;
        /** @type {?|undefined} */
        Facet.prototype.multiSelect;
        /** @type {?|undefined} */
        Facet.prototype.name;
        /** @type {?|undefined} */
        Facet.prototype.priority;
        /** @type {?|undefined} */
        Facet.prototype.topValues;
        /** @type {?|undefined} */
        Facet.prototype.values;
        /** @type {?|undefined} */
        Facet.prototype.visible;
    }
    /**
     * @record
     */
    function SpellingSuggestion() { }
    if (false) {
        /** @type {?|undefined} */
        SpellingSuggestion.prototype.query;
        /** @type {?|undefined} */
        SpellingSuggestion.prototype.suggestion;
    }
    /**
     * @record
     */
    function ProductSearchPage() { }
    if (false) {
        /** @type {?|undefined} */
        ProductSearchPage.prototype.breadcrumbs;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.categoryCode;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.currentQuery;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.facets;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.freeTextSearch;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.keywordRedirectUrl;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.pagination;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.products;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.sorts;
        /** @type {?|undefined} */
        ProductSearchPage.prototype.spellingSuggestion;
    }
    /**
     * @record
     */
    function Suggestion() { }
    if (false) {
        /** @type {?|undefined} */
        Suggestion.prototype.value;
    }
    /**
     * @record
     */
    function ClearSearch() { }
    if (false) {
        /** @type {?|undefined} */
        ClearSearch.prototype.clearPageResults;
        /** @type {?|undefined} */
        ClearSearch.prototype.clearSearchboxResults;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function VariantOptionQualifier() { }
    if (false) {
        /** @type {?|undefined} */
        VariantOptionQualifier.prototype.image;
        /** @type {?|undefined} */
        VariantOptionQualifier.prototype.name;
        /** @type {?|undefined} */
        VariantOptionQualifier.prototype.qualifier;
        /** @type {?|undefined} */
        VariantOptionQualifier.prototype.value;
    }
    /**
     * @record
     */
    function PromotionRestriction() { }
    if (false) {
        /** @type {?|undefined} */
        PromotionRestriction.prototype.description;
        /** @type {?|undefined} */
        PromotionRestriction.prototype.restrictionType;
    }
    /**
     * @record
     */
    function FeatureUnit() { }
    if (false) {
        /** @type {?|undefined} */
        FeatureUnit.prototype.name;
        /** @type {?|undefined} */
        FeatureUnit.prototype.symbol;
        /** @type {?|undefined} */
        FeatureUnit.prototype.unitType;
    }
    /**
     * @record
     */
    function FeatureValue() { }
    if (false) {
        /** @type {?|undefined} */
        FeatureValue.prototype.value;
    }
    /**
     * @record
     */
    function Feature() { }
    if (false) {
        /** @type {?|undefined} */
        Feature.prototype.code;
        /** @type {?|undefined} */
        Feature.prototype.comparable;
        /** @type {?|undefined} */
        Feature.prototype.description;
        /** @type {?|undefined} */
        Feature.prototype.featureUnit;
        /** @type {?|undefined} */
        Feature.prototype.featureValues;
        /** @type {?|undefined} */
        Feature.prototype.name;
        /** @type {?|undefined} */
        Feature.prototype.range;
        /** @type {?|undefined} */
        Feature.prototype.type;
    }
    /**
     * @record
     */
    function VariantCategory() { }
    if (false) {
        /** @type {?|undefined} */
        VariantCategory.prototype.hasImage;
        /** @type {?|undefined} */
        VariantCategory.prototype.name;
        /** @type {?|undefined} */
        VariantCategory.prototype.priority;
    }
    /**
     * @record
     */
    function VariantValueCategory() { }
    if (false) {
        /** @type {?|undefined} */
        VariantValueCategory.prototype.name;
        /** @type {?|undefined} */
        VariantValueCategory.prototype.sequence;
        /** @type {?|undefined} */
        VariantValueCategory.prototype.superCategories;
    }
    /** @enum {string} */
    var VariantType = {
        SIZE: 'ApparelSizeVariantProduct',
        STYLE: 'ApparelStyleVariantProduct',
        COLOR: 'ElectronicsColorVariantProduct',
    };
    /** @enum {string} */
    var PriceType = {
        BUY: 'BUY',
        FROM: 'FROM',
    };
    /**
     * @record
     */
    function Price() { }
    if (false) {
        /** @type {?|undefined} */
        Price.prototype.currencyIso;
        /** @type {?|undefined} */
        Price.prototype.formattedValue;
        /** @type {?|undefined} */
        Price.prototype.maxQuantity;
        /** @type {?|undefined} */
        Price.prototype.minQuantity;
        /** @type {?|undefined} */
        Price.prototype.priceType;
        /** @type {?|undefined} */
        Price.prototype.value;
    }
    /**
     * @record
     */
    function Stock() { }
    if (false) {
        /** @type {?|undefined} */
        Stock.prototype.stockLevel;
        /** @type {?|undefined} */
        Stock.prototype.stockLevelStatus;
    }
    /**
     * @record
     */
    function VariantOption() { }
    if (false) {
        /** @type {?|undefined} */
        VariantOption.prototype.code;
        /** @type {?|undefined} */
        VariantOption.prototype.priceData;
        /** @type {?|undefined} */
        VariantOption.prototype.stock;
        /** @type {?|undefined} */
        VariantOption.prototype.url;
        /** @type {?|undefined} */
        VariantOption.prototype.variantOptionQualifiers;
    }
    /**
     * @record
     */
    function Promotion() { }
    if (false) {
        /** @type {?|undefined} */
        Promotion.prototype.code;
        /** @type {?|undefined} */
        Promotion.prototype.couldFireMessages;
        /** @type {?|undefined} */
        Promotion.prototype.description;
        /** @type {?|undefined} */
        Promotion.prototype.enabled;
        /** @type {?|undefined} */
        Promotion.prototype.endDate;
        /** @type {?|undefined} */
        Promotion.prototype.firedMessages;
        /** @type {?|undefined} */
        Promotion.prototype.priority;
        /** @type {?|undefined} */
        Promotion.prototype.productBanner;
        /** @type {?|undefined} */
        Promotion.prototype.promotionGroup;
        /** @type {?|undefined} */
        Promotion.prototype.promotionType;
        /** @type {?|undefined} */
        Promotion.prototype.restrictions;
        /** @type {?|undefined} */
        Promotion.prototype.startDate;
        /** @type {?|undefined} */
        Promotion.prototype.title;
    }
    /**
     * @record
     */
    function Category() { }
    if (false) {
        /** @type {?|undefined} */
        Category.prototype.code;
        /** @type {?|undefined} */
        Category.prototype.name;
        /** @type {?|undefined} */
        Category.prototype.image;
        /** @type {?|undefined} */
        Category.prototype.url;
    }
    /**
     * @record
     */
    function Classification() { }
    if (false) {
        /** @type {?|undefined} */
        Classification.prototype.code;
        /** @type {?|undefined} */
        Classification.prototype.features;
        /** @type {?|undefined} */
        Classification.prototype.name;
    }
    /**
     * @record
     */
    function FutureStock() { }
    if (false) {
        /** @type {?|undefined} */
        FutureStock.prototype.date;
        /** @type {?|undefined} */
        FutureStock.prototype.formattedDate;
        /** @type {?|undefined} */
        FutureStock.prototype.stock;
    }
    /**
     * @record
     */
    function PriceRange() { }
    if (false) {
        /** @type {?|undefined} */
        PriceRange.prototype.maxPrice;
        /** @type {?|undefined} */
        PriceRange.prototype.minPrice;
    }
    /**
     * @record
     */
    function ProductReference() { }
    if (false) {
        /** @type {?|undefined} */
        ProductReference.prototype.description;
        /** @type {?|undefined} */
        ProductReference.prototype.preselected;
        /** @type {?|undefined} */
        ProductReference.prototype.quantity;
        /** @type {?|undefined} */
        ProductReference.prototype.referenceType;
        /** @type {?|undefined} */
        ProductReference.prototype.target;
    }
    /**
     * @record
     */
    function Review() { }
    if (false) {
        /** @type {?|undefined} */
        Review.prototype.alias;
        /** @type {?|undefined} */
        Review.prototype.comment;
        /** @type {?|undefined} */
        Review.prototype.date;
        /** @type {?|undefined} */
        Review.prototype.headline;
        /** @type {?|undefined} */
        Review.prototype.id;
        /** @type {?|undefined} */
        Review.prototype.principal;
        /** @type {?|undefined} */
        Review.prototype.rating;
    }
    /**
     * @record
     */
    function VariantMatrixElement() { }
    if (false) {
        /** @type {?|undefined} */
        VariantMatrixElement.prototype.elements;
        /** @type {?|undefined} */
        VariantMatrixElement.prototype.isLeaf;
        /** @type {?|undefined} */
        VariantMatrixElement.prototype.parentVariantCategory;
        /** @type {?|undefined} */
        VariantMatrixElement.prototype.variantOption;
        /** @type {?|undefined} */
        VariantMatrixElement.prototype.variantValueCategory;
    }
    /**
     * @record
     */
    function ProductReferences() { }
    /**
     * @record
     */
    function BaseOption() { }
    if (false) {
        /** @type {?|undefined} */
        BaseOption.prototype.options;
        /** @type {?|undefined} */
        BaseOption.prototype.selected;
        /** @type {?|undefined} */
        BaseOption.prototype.variantType;
    }
    /**
     * @record
     */
    function Product() { }
    if (false) {
        /** @type {?|undefined} */
        Product.prototype.availableForPickup;
        /** @type {?|undefined} */
        Product.prototype.averageRating;
        /** @type {?|undefined} */
        Product.prototype.baseOptions;
        /** @type {?|undefined} */
        Product.prototype.baseProduct;
        /** @type {?|undefined} */
        Product.prototype.categories;
        /** @type {?|undefined} */
        Product.prototype.classifications;
        /** @type {?|undefined} */
        Product.prototype.code;
        /** @type {?|undefined} */
        Product.prototype.description;
        /** @type {?|undefined} */
        Product.prototype.futureStocks;
        /** @type {?|undefined} */
        Product.prototype.images;
        /** @type {?|undefined} */
        Product.prototype.manufacturer;
        /** @type {?|undefined} */
        Product.prototype.multidimensional;
        /** @type {?|undefined} */
        Product.prototype.name;
        /** @type {?|undefined} */
        Product.prototype.nameHtml;
        /** @type {?|undefined} */
        Product.prototype.numberOfReviews;
        /** @type {?|undefined} */
        Product.prototype.potentialPromotions;
        /** @type {?|undefined} */
        Product.prototype.price;
        /** @type {?|undefined} */
        Product.prototype.priceRange;
        /** @type {?|undefined} */
        Product.prototype.productReferences;
        /** @type {?|undefined} */
        Product.prototype.purchasable;
        /** @type {?|undefined} */
        Product.prototype.reviews;
        /** @type {?|undefined} */
        Product.prototype.stock;
        /** @type {?|undefined} */
        Product.prototype.summary;
        /** @type {?|undefined} */
        Product.prototype.url;
        /** @type {?|undefined} */
        Product.prototype.variantMatrix;
        /** @type {?|undefined} */
        Product.prototype.variantOptions;
        /** @type {?|undefined} */
        Product.prototype.variantType;
        /** @type {?|undefined} */
        Product.prototype.volumePrices;
        /** @type {?|undefined} */
        Product.prototype.volumePricesFlag;
    }
    /** @enum {string} */
    var VariantQualifier = {
        SIZE: 'size',
        STYLE: 'style',
        COLOR: 'color',
        THUMBNAIL: 'thumbnail',
        PRODUCT: 'product',
        ROLLUP_PROPERTY: 'rollupProperty',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var testestsd = 'sare';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function StoreFinderSearchPage() { }
    if (false) {
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.boundEastLongitude;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.boundNorthLatitude;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.boundSouthLatitude;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.boundWestLongitude;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.locationText;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.pagination;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.sorts;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.sourceLatitude;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.sourceLongitude;
        /** @type {?|undefined} */
        StoreFinderSearchPage.prototype.stores;
    }
    /**
     * @record
     */
    function StoreCount() { }
    if (false) {
        /** @type {?|undefined} */
        StoreCount.prototype.count;
        /** @type {?|undefined} */
        StoreCount.prototype.isoCode;
        /** @type {?|undefined} */
        StoreCount.prototype.name;
        /** @type {?|undefined} */
        StoreCount.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function CustomerCoupon() { }
    if (false) {
        /** @type {?|undefined} */
        CustomerCoupon.prototype.couponId;
        /** @type {?|undefined} */
        CustomerCoupon.prototype.name;
        /** @type {?|undefined} */
        CustomerCoupon.prototype.startDate;
        /** @type {?|undefined} */
        CustomerCoupon.prototype.endDate;
        /** @type {?|undefined} */
        CustomerCoupon.prototype.status;
        /** @type {?|undefined} */
        CustomerCoupon.prototype.description;
        /** @type {?|undefined} */
        CustomerCoupon.prototype.notificationOn;
        /** @type {?|undefined} */
        CustomerCoupon.prototype.allProductsApplicable;
    }
    /**
     * @record
     */
    function CustomerCouponNotification() { }
    if (false) {
        /** @type {?|undefined} */
        CustomerCouponNotification.prototype.coupon;
        /** @type {?|undefined} */
        CustomerCouponNotification.prototype.customer;
        /** @type {?|undefined} */
        CustomerCouponNotification.prototype.status;
    }
    /**
     * @record
     */
    function CustomerCouponSearchResult() { }
    if (false) {
        /** @type {?|undefined} */
        CustomerCouponSearchResult.prototype.coupons;
        /** @type {?|undefined} */
        CustomerCouponSearchResult.prototype.sorts;
        /** @type {?|undefined} */
        CustomerCouponSearchResult.prototype.pagination;
    }
    /**
     * @record
     */
    function CustomerCoupon2Customer() { }
    if (false) {
        /** @type {?|undefined} */
        CustomerCoupon2Customer.prototype.coupon;
        /** @type {?|undefined} */
        CustomerCoupon2Customer.prototype.customer;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Used to envelope data observable together with specified scope
     * @record
     * @template T
     */
    function ScopedData() { }
    if (false) {
        /** @type {?} */
        ScopedData.prototype.scope;
        /** @type {?|undefined} */
        ScopedData.prototype.data$;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function NotificationPreference() { }
    if (false) {
        /** @type {?|undefined} */
        NotificationPreference.prototype.channel;
        /** @type {?|undefined} */
        NotificationPreference.prototype.value;
        /** @type {?|undefined} */
        NotificationPreference.prototype.enabled;
        /** @type {?|undefined} */
        NotificationPreference.prototype.visible;
    }
    /**
     * @record
     */
    function NotificationPreferenceList() { }
    if (false) {
        /** @type {?|undefined} */
        NotificationPreferenceList.prototype.preferences;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ProductInterestEntry() { }
    if (false) {
        /** @type {?|undefined} */
        ProductInterestEntry.prototype.interestType;
        /** @type {?|undefined} */
        ProductInterestEntry.prototype.dateAdded;
        /** @type {?|undefined} */
        ProductInterestEntry.prototype.expirationDate;
    }
    /**
     * @record
     */
    function ProductInterestEntryRelation() { }
    if (false) {
        /** @type {?|undefined} */
        ProductInterestEntryRelation.prototype.product;
        /** @type {?|undefined} */
        ProductInterestEntryRelation.prototype.productInterestEntry;
    }
    /**
     * @record
     */
    function ProductInterestSearchResult() { }
    if (false) {
        /** @type {?|undefined} */
        ProductInterestSearchResult.prototype.results;
        /** @type {?|undefined} */
        ProductInterestSearchResult.prototype.sorts;
        /** @type {?|undefined} */
        ProductInterestSearchResult.prototype.pagination;
    }
    /** @enum {string} */
    var NotificationType = {
        BACK_IN_STOCK: 'BACK_IN_STOCK',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';
    /** @type {?} */
    var ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';
    /**
     * @record
     */
    function StateWithAnonymousConsents() { }
    if (false) {
        /* Skipping unnamed member:
        [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;*/
    }
    /**
     * @record
     */
    function AnonymousConsentsState() { }
    if (false) {
        /** @type {?} */
        AnonymousConsentsState.prototype.templates;
        /** @type {?} */
        AnonymousConsentsState.prototype.consents;
        /** @type {?} */
        AnonymousConsentsState.prototype.ui;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Load Anonymous Consent Templates';
    /** @type {?} */
    var LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS = '[Anonymous Consents] Load Anonymous Consent Templates Success';
    /** @type {?} */
    var LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL = '[Anonymous Consents] Load Anonymous Consent Templates Fail';
    /** @type {?} */
    var RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Reset Load Anonymous Consent Templates';
    /** @type {?} */
    var GET_ALL_ANONYMOUS_CONSENTS = '[Anonymous Consents] Get All Anonymous Consents';
    /** @type {?} */
    var GET_ANONYMOUS_CONSENT = '[Anonymous Consents] Get Anonymous Consent';
    /** @type {?} */
    var SET_ANONYMOUS_CONSENTS = '[Anonymous Consents] Set Anonymous Consents';
    /** @type {?} */
    var GIVE_ANONYMOUS_CONSENT = '[Anonymous Consents] Give Anonymous Consent';
    /** @type {?} */
    var WITHDRAW_ANONYMOUS_CONSENT = '[Anonymous Consents] Withdraw Anonymous Consent';
    /** @type {?} */
    var TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED = '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';
    /** @type {?} */
    var TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED = '[Anonymous Consents] Anonymous Consent Templates Updated';
    var LoadAnonymousConsentTemplates = /** @class */ (function (_super) {
        __extends(LoadAnonymousConsentTemplates, _super);
        function LoadAnonymousConsentTemplates() {
            var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
            _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;
            return _this;
        }
        return LoadAnonymousConsentTemplates;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadAnonymousConsentTemplates.prototype.type;
    }
    var LoadAnonymousConsentTemplatesSuccess = /** @class */ (function (_super) {
        __extends(LoadAnonymousConsentTemplatesSuccess, _super);
        function LoadAnonymousConsentTemplatesSuccess(payload) {
            var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
            _this.payload = payload;
            _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;
            return _this;
        }
        return LoadAnonymousConsentTemplatesSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadAnonymousConsentTemplatesSuccess.prototype.type;
        /** @type {?} */
        LoadAnonymousConsentTemplatesSuccess.prototype.payload;
    }
    var LoadAnonymousConsentTemplatesFail = /** @class */ (function (_super) {
        __extends(LoadAnonymousConsentTemplatesFail, _super);
        function LoadAnonymousConsentTemplatesFail(payload) {
            var _this = _super.call(this, ANONYMOUS_CONSENTS, payload) || this;
            _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;
            return _this;
        }
        return LoadAnonymousConsentTemplatesFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadAnonymousConsentTemplatesFail.prototype.type;
    }
    var ResetLoadAnonymousConsentTemplates = /** @class */ (function (_super) {
        __extends(ResetLoadAnonymousConsentTemplates, _super);
        function ResetLoadAnonymousConsentTemplates() {
            var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
            _this.type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;
            return _this;
        }
        return ResetLoadAnonymousConsentTemplates;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ResetLoadAnonymousConsentTemplates.prototype.type;
    }
    var GetAllAnonymousConsents = /** @class */ (function () {
        function GetAllAnonymousConsents() {
            this.type = GET_ALL_ANONYMOUS_CONSENTS;
        }
        return GetAllAnonymousConsents;
    }());
    if (false) {
        /** @type {?} */
        GetAllAnonymousConsents.prototype.type;
    }
    var GetAnonymousConsent = /** @class */ (function () {
        function GetAnonymousConsent(templateCode) {
            this.templateCode = templateCode;
            this.type = GET_ANONYMOUS_CONSENT;
        }
        return GetAnonymousConsent;
    }());
    if (false) {
        /** @type {?} */
        GetAnonymousConsent.prototype.type;
        /** @type {?} */
        GetAnonymousConsent.prototype.templateCode;
    }
    var SetAnonymousConsents = /** @class */ (function () {
        function SetAnonymousConsents(payload) {
            this.payload = payload;
            this.type = SET_ANONYMOUS_CONSENTS;
        }
        return SetAnonymousConsents;
    }());
    if (false) {
        /** @type {?} */
        SetAnonymousConsents.prototype.type;
        /** @type {?} */
        SetAnonymousConsents.prototype.payload;
    }
    var GiveAnonymousConsent = /** @class */ (function () {
        function GiveAnonymousConsent(templateCode) {
            this.templateCode = templateCode;
            this.type = GIVE_ANONYMOUS_CONSENT;
        }
        return GiveAnonymousConsent;
    }());
    if (false) {
        /** @type {?} */
        GiveAnonymousConsent.prototype.type;
        /** @type {?} */
        GiveAnonymousConsent.prototype.templateCode;
    }
    var WithdrawAnonymousConsent = /** @class */ (function () {
        function WithdrawAnonymousConsent(templateCode) {
            this.templateCode = templateCode;
            this.type = WITHDRAW_ANONYMOUS_CONSENT;
        }
        return WithdrawAnonymousConsent;
    }());
    if (false) {
        /** @type {?} */
        WithdrawAnonymousConsent.prototype.type;
        /** @type {?} */
        WithdrawAnonymousConsent.prototype.templateCode;
    }
    var ToggleAnonymousConsentsBannerDissmissed = /** @class */ (function () {
        function ToggleAnonymousConsentsBannerDissmissed(dismissed) {
            this.dismissed = dismissed;
            this.type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;
        }
        return ToggleAnonymousConsentsBannerDissmissed;
    }());
    if (false) {
        /** @type {?} */
        ToggleAnonymousConsentsBannerDissmissed.prototype.type;
        /** @type {?} */
        ToggleAnonymousConsentsBannerDissmissed.prototype.dismissed;
    }
    var ToggleAnonymousConsentTemplatesUpdated = /** @class */ (function () {
        function ToggleAnonymousConsentTemplatesUpdated(updated) {
            this.updated = updated;
            this.type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;
        }
        return ToggleAnonymousConsentTemplatesUpdated;
    }());
    if (false) {
        /** @type {?} */
        ToggleAnonymousConsentTemplatesUpdated.prototype.type;
        /** @type {?} */
        ToggleAnonymousConsentTemplatesUpdated.prototype.updated;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var anonymousConsentsGroup = /*#__PURE__*/Object.freeze({
        LOAD_ANONYMOUS_CONSENT_TEMPLATES: LOAD_ANONYMOUS_CONSENT_TEMPLATES,
        LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS: LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS,
        LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL: LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL,
        RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES: RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES,
        GET_ALL_ANONYMOUS_CONSENTS: GET_ALL_ANONYMOUS_CONSENTS,
        GET_ANONYMOUS_CONSENT: GET_ANONYMOUS_CONSENT,
        SET_ANONYMOUS_CONSENTS: SET_ANONYMOUS_CONSENTS,
        GIVE_ANONYMOUS_CONSENT: GIVE_ANONYMOUS_CONSENT,
        WITHDRAW_ANONYMOUS_CONSENT: WITHDRAW_ANONYMOUS_CONSENT,
        TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED,
        TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED,
        LoadAnonymousConsentTemplates: LoadAnonymousConsentTemplates,
        LoadAnonymousConsentTemplatesSuccess: LoadAnonymousConsentTemplatesSuccess,
        LoadAnonymousConsentTemplatesFail: LoadAnonymousConsentTemplatesFail,
        ResetLoadAnonymousConsentTemplates: ResetLoadAnonymousConsentTemplates,
        GetAllAnonymousConsents: GetAllAnonymousConsents,
        GetAnonymousConsent: GetAnonymousConsent,
        SetAnonymousConsents: SetAnonymousConsents,
        GiveAnonymousConsent: GiveAnonymousConsent,
        WithdrawAnonymousConsent: WithdrawAnonymousConsent,
        ToggleAnonymousConsentsBannerDissmissed: ToggleAnonymousConsentsBannerDissmissed,
        ToggleAnonymousConsentTemplatesUpdated: ToggleAnonymousConsentTemplatesUpdated
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getAnonymousConsentState = store.createFeatureSelector(ANONYMOUS_CONSENTS_STORE_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$8 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.templates; };
    /** @type {?} */
    var getAnonymousConsentTemplatesState = store.createSelector(getAnonymousConsentState, (ɵ0$8));
    /** @type {?} */
    var getAnonymousConsentTemplatesValue = store.createSelector(getAnonymousConsentTemplatesState, loaderValueSelector);
    /** @type {?} */
    var getAnonymousConsentTemplatesLoading = store.createSelector(getAnonymousConsentTemplatesState, loaderLoadingSelector);
    /** @type {?} */
    var getAnonymousConsentTemplatesSuccess = store.createSelector(getAnonymousConsentTemplatesState, loaderSuccessSelector);
    /** @type {?} */
    var getAnonymousConsentTemplatesError = store.createSelector(getAnonymousConsentTemplatesState, loaderErrorSelector);
    /** @type {?} */
    var getAnonymousConsentTemplate = (/**
     * @param {?} templateCode
     * @return {?}
     */
    function (templateCode) {
        return store.createSelector(getAnonymousConsentTemplatesValue, (/**
         * @param {?} templates
         * @return {?}
         */
        function (templates) {
            return templates
                ? templates.find((/**
                 * @param {?} template
                 * @return {?}
                 */
                function (template) { return template.id === templateCode; }))
                : null;
        }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$9 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.ui.updated; };
    /** @type {?} */
    var getAnonymousConsentTemplatesUpdate = store.createSelector(getAnonymousConsentState, (ɵ0$9));
    var ɵ1$6 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.ui.bannerDismissed; };
    /** @type {?} */
    var getAnonymousConsentsBannerDismissed = store.createSelector(getAnonymousConsentState, (ɵ1$6));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$a = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.consents; };
    /** @type {?} */
    var getAnonymousConsents = store.createSelector(getAnonymousConsentState, (ɵ0$a));
    /** @type {?} */
    var getAnonymousConsentByTemplateCode = (/**
     * @param {?} templateCode
     * @return {?}
     */
    function (templateCode) {
        return store.createSelector(getAnonymousConsents, (/**
         * @param {?} consents
         * @return {?}
         */
        function (consents) { return consents.find((/**
         * @param {?} consent
         * @return {?}
         */
        function (consent) { return consent.templateCode === templateCode; })); }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var anonymousConsentsGroup_selectors = /*#__PURE__*/Object.freeze({
        getAnonymousConsentTemplatesState: getAnonymousConsentTemplatesState,
        getAnonymousConsentTemplatesValue: getAnonymousConsentTemplatesValue,
        getAnonymousConsentTemplatesLoading: getAnonymousConsentTemplatesLoading,
        getAnonymousConsentTemplatesSuccess: getAnonymousConsentTemplatesSuccess,
        getAnonymousConsentTemplatesError: getAnonymousConsentTemplatesError,
        getAnonymousConsentTemplate: getAnonymousConsentTemplate,
        getAnonymousConsentTemplatesUpdate: getAnonymousConsentTemplatesUpdate,
        getAnonymousConsentsBannerDismissed: getAnonymousConsentsBannerDismissed,
        getAnonymousConsents: getAnonymousConsents,
        getAnonymousConsentByTemplateCode: getAnonymousConsentByTemplateCode,
        getAnonymousConsentState: getAnonymousConsentState
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AnonymousConsentsService = /** @class */ (function () {
        function AnonymousConsentsService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Retrieves the anonymous consent templates.
         */
        /**
         * Retrieves the anonymous consent templates.
         * @return {?}
         */
        AnonymousConsentsService.prototype.loadTemplates = /**
         * Retrieves the anonymous consent templates.
         * @return {?}
         */
        function () {
            this.store.dispatch(new LoadAnonymousConsentTemplates());
        };
        /**
         * Conditionally triggers the load of the anonymous consent templates if:
         *   - `loadIfMissing` parameter is set to `true`
         *   - the `templates` in the store are `undefined`
         *
         * Othewise it just returns the value from the store.
         *
         * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`
         */
        /**
         * Conditionally triggers the load of the anonymous consent templates if:
         *   - `loadIfMissing` parameter is set to `true`
         *   - the `templates` in the store are `undefined`
         *
         * Othewise it just returns the value from the store.
         *
         * @param {?=} loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`
         * @return {?}
         */
        AnonymousConsentsService.prototype.getTemplates = /**
         * Conditionally triggers the load of the anonymous consent templates if:
         *   - `loadIfMissing` parameter is set to `true`
         *   - the `templates` in the store are `undefined`
         *
         * Othewise it just returns the value from the store.
         *
         * @param {?=} loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`
         * @return {?}
         */
        function (loadIfMissing) {
            var _this = this;
            if (loadIfMissing === void 0) { loadIfMissing = false; }
            return rxjs.iif((/**
             * @return {?}
             */
            function () { return loadIfMissing; }), this.store.pipe(store.select(getAnonymousConsentTemplatesValue), operators.withLatestFrom(this.getLoadTemplatesLoading()), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), _templates = _b[0], loading = _b[1];
                return !loading;
            })), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                if (!Boolean(templates)) {
                    _this.loadTemplates();
                }
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return Boolean(templates);
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return templates;
            }))), this.store.pipe(store.select(getAnonymousConsentTemplatesValue)));
        };
        /**
         * Returns the anonymous consent templates with the given template code.
         * @param templateCode a template code by which to filter anonymous consent templates.
         */
        /**
         * Returns the anonymous consent templates with the given template code.
         * @param {?} templateCode a template code by which to filter anonymous consent templates.
         * @return {?}
         */
        AnonymousConsentsService.prototype.getTemplate = /**
         * Returns the anonymous consent templates with the given template code.
         * @param {?} templateCode a template code by which to filter anonymous consent templates.
         * @return {?}
         */
        function (templateCode) {
            return this.store.pipe(store.select(getAnonymousConsentTemplate(templateCode)));
        };
        /**
         * Returns an indicator for the loading status for the anonymous consent templates.
         */
        /**
         * Returns an indicator for the loading status for the anonymous consent templates.
         * @return {?}
         */
        AnonymousConsentsService.prototype.getLoadTemplatesLoading = /**
         * Returns an indicator for the loading status for the anonymous consent templates.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAnonymousConsentTemplatesLoading));
        };
        /**
         * Returns an indicator for the success status for the anonymous consent templates.
         */
        /**
         * Returns an indicator for the success status for the anonymous consent templates.
         * @return {?}
         */
        AnonymousConsentsService.prototype.getLoadTemplatesSuccess = /**
         * Returns an indicator for the success status for the anonymous consent templates.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAnonymousConsentTemplatesSuccess));
        };
        /**
         * Returns an indicator for the error status for the anonymous consent templates.
         */
        /**
         * Returns an indicator for the error status for the anonymous consent templates.
         * @return {?}
         */
        AnonymousConsentsService.prototype.getLoadTemplatesError = /**
         * Returns an indicator for the error status for the anonymous consent templates.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAnonymousConsentTemplatesError));
        };
        /**
         * Resets the loading, success and error indicators for the anonymous consent templates.
         */
        /**
         * Resets the loading, success and error indicators for the anonymous consent templates.
         * @return {?}
         */
        AnonymousConsentsService.prototype.resetLoadTemplatesState = /**
         * Resets the loading, success and error indicators for the anonymous consent templates.
         * @return {?}
         */
        function () {
            this.store.dispatch(new ResetLoadAnonymousConsentTemplates());
        };
        /**
         * Returns all the anonymous consents.
         */
        /**
         * Returns all the anonymous consents.
         * @return {?}
         */
        AnonymousConsentsService.prototype.getConsents = /**
         * Returns all the anonymous consents.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAnonymousConsents));
        };
        /**
         * Puts the provided anonymous consents into the store.
         */
        /**
         * Puts the provided anonymous consents into the store.
         * @param {?} consents
         * @return {?}
         */
        AnonymousConsentsService.prototype.setConsents = /**
         * Puts the provided anonymous consents into the store.
         * @param {?} consents
         * @return {?}
         */
        function (consents) {
            return this.store.dispatch(new SetAnonymousConsents(consents));
        };
        /**
         * Returns the anonymous consent for the given template ID.
         *
         * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.
         *
         * @param templateId a template ID by which to filter anonymous consent templates.
         */
        /**
         * Returns the anonymous consent for the given template ID.
         *
         * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.
         *
         * @param {?} templateId a template ID by which to filter anonymous consent templates.
         * @return {?}
         */
        AnonymousConsentsService.prototype.getConsent = /**
         * Returns the anonymous consent for the given template ID.
         *
         * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.
         *
         * @param {?} templateId a template ID by which to filter anonymous consent templates.
         * @return {?}
         */
        function (templateId) {
            var _this = this;
            return this.authService.isUserLoggedIn().pipe(operators.filter((/**
             * @param {?} authenticated
             * @return {?}
             */
            function (authenticated) { return !authenticated; })), operators.tap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) { return _this.getTemplates(true); })), operators.switchMap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                return _this.store.pipe(store.select(getAnonymousConsentByTemplateCode(templateId)));
            })));
        };
        /**
         * Give a consent for the given `templateCode`
         * @param templateCode for which to give the consent
         */
        /**
         * Give a consent for the given `templateCode`
         * @param {?} templateCode for which to give the consent
         * @return {?}
         */
        AnonymousConsentsService.prototype.giveConsent = /**
         * Give a consent for the given `templateCode`
         * @param {?} templateCode for which to give the consent
         * @return {?}
         */
        function (templateCode) {
            this.store.dispatch(new GiveAnonymousConsent(templateCode));
        };
        /**
         * Sets all the anonymous consents' state to given.
         */
        /**
         * Sets all the anonymous consents' state to given.
         * @return {?}
         */
        AnonymousConsentsService.prototype.giveAllConsents = /**
         * Sets all the anonymous consents' state to given.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.getTemplates(true).pipe(operators.tap((/**
             * @param {?} templates
             * @return {?}
             */
            function (templates) {
                return templates.forEach((/**
                 * @param {?} template
                 * @return {?}
                 */
                function (template) { return _this.giveConsent(template.id); }));
            })));
        };
        /**
         * Returns `true` if the provided `consent` is given.
         * @param consent a consent to test
         */
        /**
         * Returns `true` if the provided `consent` is given.
         * @param {?} consent a consent to test
         * @return {?}
         */
        AnonymousConsentsService.prototype.isConsentGiven = /**
         * Returns `true` if the provided `consent` is given.
         * @param {?} consent a consent to test
         * @return {?}
         */
        function (consent) {
            return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;
        };
        /**
         * Withdraw a consent for the given `templateCode`
         * @param templateCode for which to withdraw the consent
         */
        /**
         * Withdraw a consent for the given `templateCode`
         * @param {?} templateCode for which to withdraw the consent
         * @return {?}
         */
        AnonymousConsentsService.prototype.withdrawConsent = /**
         * Withdraw a consent for the given `templateCode`
         * @param {?} templateCode for which to withdraw the consent
         * @return {?}
         */
        function (templateCode) {
            this.store.dispatch(new WithdrawAnonymousConsent(templateCode));
        };
        /**
         * Sets all the anonymous consents' state to withdrawn.
         */
        /**
         * Sets all the anonymous consents' state to withdrawn.
         * @return {?}
         */
        AnonymousConsentsService.prototype.withdrawAllConsents = /**
         * Sets all the anonymous consents' state to withdrawn.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.getTemplates(true).pipe(operators.tap((/**
             * @param {?} templates
             * @return {?}
             */
            function (templates) {
                return templates.forEach((/**
                 * @param {?} template
                 * @return {?}
                 */
                function (template) { return _this.withdrawConsent(template.id); }));
            })));
        };
        /**
         * Returns `true` if the provided `consent` is withdrawn.
         * @param consent a consent to test
         */
        /**
         * Returns `true` if the provided `consent` is withdrawn.
         * @param {?} consent a consent to test
         * @return {?}
         */
        AnonymousConsentsService.prototype.isConsentWithdrawn = /**
         * Returns `true` if the provided `consent` is withdrawn.
         * @param {?} consent a consent to test
         * @return {?}
         */
        function (consent) {
            return (consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN);
        };
        /**
         * Toggles the dismissed state of the anonymous consents banner.
         * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.
         */
        /**
         * Toggles the dismissed state of the anonymous consents banner.
         * @param {?} dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.
         * @return {?}
         */
        AnonymousConsentsService.prototype.toggleBannerDismissed = /**
         * Toggles the dismissed state of the anonymous consents banner.
         * @param {?} dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.
         * @return {?}
         */
        function (dismissed) {
            this.store.dispatch(new ToggleAnonymousConsentsBannerDissmissed(dismissed));
            if (dismissed) {
                this.toggleTemplatesUpdated(false);
            }
        };
        /**
         * Returns `true` if the banner was dismissed, `false` otherwise.
         */
        /**
         * Returns `true` if the banner was dismissed, `false` otherwise.
         * @return {?}
         */
        AnonymousConsentsService.prototype.isBannerDismissed = /**
         * Returns `true` if the banner was dismissed, `false` otherwise.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAnonymousConsentsBannerDismissed));
        };
        /**
         * Returns `true` if the consent templates were updated on the back-end.
         * If the templates are not present in the store, it triggers the load.
         */
        /**
         * Returns `true` if the consent templates were updated on the back-end.
         * If the templates are not present in the store, it triggers the load.
         * @return {?}
         */
        AnonymousConsentsService.prototype.getTemplatesUpdated = /**
         * Returns `true` if the consent templates were updated on the back-end.
         * If the templates are not present in the store, it triggers the load.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.getTemplates(true).pipe(operators.switchMap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                return _this.store.pipe(store.select(getAnonymousConsentTemplatesUpdate));
            })));
        };
        /**
         * Toggles the `updated` slice of the state
         * @param updated
         */
        /**
         * Toggles the `updated` slice of the state
         * @param {?} updated
         * @return {?}
         */
        AnonymousConsentsService.prototype.toggleTemplatesUpdated = /**
         * Toggles the `updated` slice of the state
         * @param {?} updated
         * @return {?}
         */
        function (updated) {
            this.store.dispatch(new ToggleAnonymousConsentTemplatesUpdated(updated));
        };
        /**
         * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.
         * Otherwise, it returns `false`.
         */
        /**
         * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.
         * Otherwise, it returns `false`.
         * @return {?}
         */
        AnonymousConsentsService.prototype.isBannerVisible = /**
         * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.
         * Otherwise, it returns `false`.
         * @return {?}
         */
        function () {
            return rxjs.combineLatest([
                this.isBannerDismissed(),
                this.getTemplatesUpdated(),
            ]).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), dismissed = _b[0], updated = _b[1];
                return !dismissed || updated;
            })));
        };
        /**
         * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`
         * @param currentTemplates current templates to check
         * @param newTemplates new templates to check
         */
        /**
         * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`
         * @param {?} currentTemplates current templates to check
         * @param {?} newTemplates new templates to check
         * @return {?}
         */
        AnonymousConsentsService.prototype.detectUpdatedTemplates = /**
         * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`
         * @param {?} currentTemplates current templates to check
         * @param {?} newTemplates new templates to check
         * @return {?}
         */
        function (currentTemplates, newTemplates) {
            if (newTemplates.length !== currentTemplates.length) {
                return true;
            }
            for (var i = 0; i < newTemplates.length; i++) {
                /** @type {?} */
                var newTemplate = newTemplates[i];
                /** @type {?} */
                var currentTemplate = currentTemplates[i];
                if (newTemplate.version !== currentTemplate.version) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods
         * @param consents to serialize and encode
         */
        /**
         * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods
         * @param {?} consents to serialize and encode
         * @return {?}
         */
        AnonymousConsentsService.prototype.serializeAndEncode = /**
         * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods
         * @param {?} consents to serialize and encode
         * @return {?}
         */
        function (consents) {
            if (!consents) {
                return '';
            }
            /** @type {?} */
            var serialized = JSON.stringify(consents);
            /** @type {?} */
            var encoded = encodeURIComponent(serialized);
            return encoded;
        };
        /**
         * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`
         * @param rawConsents to decode an deserialize
         */
        /**
         * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`
         * @param {?} rawConsents to decode an deserialize
         * @return {?}
         */
        AnonymousConsentsService.prototype.decodeAndDeserialize = /**
         * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`
         * @param {?} rawConsents to decode an deserialize
         * @return {?}
         */
        function (rawConsents) {
            /** @type {?} */
            var decoded = decodeURIComponent(rawConsents);
            /** @type {?} */
            var unserialized = (/** @type {?} */ (JSON.parse(decoded)));
            return unserialized;
        };
        /**
         *
         * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).
         * Otherwise it returns `false`.
         *
         * @param newConsents new consents to compare
         * @param previousConsents old consents to compare
         */
        /**
         *
         * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).
         * Otherwise it returns `false`.
         *
         * @param {?} newConsents new consents to compare
         * @param {?} previousConsents old consents to compare
         * @return {?}
         */
        AnonymousConsentsService.prototype.consentsUpdated = /**
         *
         * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).
         * Otherwise it returns `false`.
         *
         * @param {?} newConsents new consents to compare
         * @param {?} previousConsents old consents to compare
         * @return {?}
         */
        function (newConsents, previousConsents) {
            /** @type {?} */
            var newRawConsents = this.serializeAndEncode(newConsents);
            /** @type {?} */
            var previousRawConsents = this.serializeAndEncode(previousConsents);
            return newRawConsents !== previousRawConsents;
        };
        AnonymousConsentsService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        AnonymousConsentsService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        /** @nocollapse */ AnonymousConsentsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AnonymousConsentsService_Factory() { return new AnonymousConsentsService(core.ɵɵinject(store.Store), core.ɵɵinject(AuthService)); }, token: AnonymousConsentsService, providedIn: "root" });
        return AnonymousConsentsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        AnonymousConsentsService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        AnonymousConsentsService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    FeaturesConfig = /** @class */ (function () {
        function FeaturesConfig() {
        }
        return FeaturesConfig;
    }());
    if (false) {
        /** @type {?} */
        FeaturesConfig.prototype.features;
    }
    /** @type {?} */
    var ANONYMOUS_CONSENTS_FEATURE = 'anonymousConsents';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function isFeatureConfig(config) {
        return typeof config === 'object' && config.features;
    }
    /**
     * @param {?} level
     * @param {?} version
     * @return {?}
     */
    function isInLevel(level, version) {
        if (level === '*') {
            return true;
        }
        /** @type {?} */
        var levelParts = level.split('.');
        /** @type {?} */
        var versionParts = version.split('.');
        for (var i = 0; i < versionParts.length; i++) {
            /** @type {?} */
            var versionNumberPart = Number(versionParts[i]);
            /** @type {?} */
            var levelNumberPart = Number(levelParts[i]) || 0;
            if (versionNumberPart !== levelNumberPart) {
                return levelNumberPart > versionNumberPart;
            }
        }
        return true;
    }
    /**
     * @param {?} config
     * @param {?} level
     * @return {?}
     */
    function isFeatureLevel(config, level) {
        if (isFeatureConfig(config)) {
            return level[0] === '!'
                ? !isInLevel(config.features.level, level.substr(1, level.length))
                : isInLevel(config.features.level, level);
        }
    }
    /**
     * @param {?} config
     * @param {?} feature
     * @return {?}
     */
    function isFeatureEnabled(config, feature) {
        if (isFeatureConfig(config)) {
            /** @type {?} */
            var featureConfig = feature[0] === '!'
                ? config.features[feature.substr(1, feature.length)]
                : config.features[feature];
            /** @type {?} */
            var result = typeof featureConfig === 'string'
                ? isFeatureLevel(config, featureConfig)
                : featureConfig;
            return feature[0] === '!' ? !result : result;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeatureConfigService = /** @class */ (function () {
        function FeatureConfigService(config) {
            this.config = config;
        }
        /**
         * @param {?} version
         * @return {?}
         */
        FeatureConfigService.prototype.isLevel = /**
         * @param {?} version
         * @return {?}
         */
        function (version) {
            return isFeatureLevel(this.config, version);
        };
        /**
         * @param {?} feature
         * @return {?}
         */
        FeatureConfigService.prototype.isEnabled = /**
         * @param {?} feature
         * @return {?}
         */
        function (feature) {
            return isFeatureEnabled(this.config, feature);
        };
        FeatureConfigService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        FeatureConfigService.ctorParameters = function () { return [
            { type: FeaturesConfig }
        ]; };
        /** @nocollapse */ FeatureConfigService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function FeatureConfigService_Factory() { return new FeatureConfigService(core.ɵɵinject(FeaturesConfig)); }, token: FeatureConfigService, providedIn: "root" });
        return FeatureConfigService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        FeatureConfigService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeatureLevelDirective = /** @class */ (function () {
        function FeatureLevelDirective(templateRef, viewContainer, featureConfig) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.featureConfig = featureConfig;
            this.hasView = false;
        }
        Object.defineProperty(FeatureLevelDirective.prototype, "cxFeatureLevel", {
            set: /**
             * @param {?} level
             * @return {?}
             */
            function (level) {
                if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {
                    this.viewContainer.createEmbeddedView(this.templateRef);
                    this.hasView = true;
                }
                else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {
                    this.viewContainer.clear();
                    this.hasView = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        FeatureLevelDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[cxFeatureLevel]',
                    },] }
        ];
        /** @nocollapse */
        FeatureLevelDirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef },
            { type: FeatureConfigService }
        ]; };
        FeatureLevelDirective.propDecorators = {
            cxFeatureLevel: [{ type: core.Input }]
        };
        return FeatureLevelDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        FeatureLevelDirective.prototype.hasView;
        /**
         * @type {?}
         * @protected
         */
        FeatureLevelDirective.prototype.templateRef;
        /**
         * @type {?}
         * @protected
         */
        FeatureLevelDirective.prototype.viewContainer;
        /**
         * @type {?}
         * @protected
         */
        FeatureLevelDirective.prototype.featureConfig;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeatureDirective = /** @class */ (function () {
        function FeatureDirective(templateRef, viewContainer, featureConfig) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.featureConfig = featureConfig;
            this.hasView = false;
        }
        Object.defineProperty(FeatureDirective.prototype, "cxFeature", {
            set: /**
             * @param {?} feature
             * @return {?}
             */
            function (feature) {
                if (this.featureConfig.isEnabled(feature) && !this.hasView) {
                    this.viewContainer.createEmbeddedView(this.templateRef);
                    this.hasView = true;
                }
                else if (!this.featureConfig.isEnabled(feature) && this.hasView) {
                    this.viewContainer.clear();
                    this.hasView = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        FeatureDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[cxFeature]',
                    },] }
        ];
        /** @nocollapse */
        FeatureDirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef },
            { type: FeatureConfigService }
        ]; };
        FeatureDirective.propDecorators = {
            cxFeature: [{ type: core.Input }]
        };
        return FeatureDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        FeatureDirective.prototype.hasView;
        /**
         * @type {?}
         * @protected
         */
        FeatureDirective.prototype.templateRef;
        /**
         * @type {?}
         * @protected
         */
        FeatureDirective.prototype.viewContainer;
        /**
         * @type {?}
         * @protected
         */
        FeatureDirective.prototype.featureConfig;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeaturesConfigModule = /** @class */ (function () {
        function FeaturesConfigModule() {
        }
        /**
         * @param {?=} defaultLevel
         * @return {?}
         */
        FeaturesConfigModule.forRoot = /**
         * @param {?=} defaultLevel
         * @return {?}
         */
        function (defaultLevel) {
            return {
                ngModule: FeaturesConfigModule,
                providers: [
                    provideConfig((/** @type {?} */ ({
                        features: {
                            level: defaultLevel || '*',
                        },
                    }))),
                    {
                        provide: FeaturesConfig,
                        useExisting: Config,
                    },
                ],
            };
        };
        FeaturesConfigModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FeatureLevelDirective, FeatureDirective],
                        exports: [FeatureLevelDirective, FeatureDirective],
                    },] }
        ];
        return FeaturesConfigModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    AsmAdapter = /** @class */ (function () {
        function AsmAdapter() {
        }
        return AsmAdapter;
    }());
    if (false) {
        /**
         * Abstract function used to search for customers.
         * @abstract
         * @param {?} options
         * @return {?}
         */
        AsmAdapter.prototype.customerSearch = function (options) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultOccAsmConfig = {
        backend: {
            occ: {
                endpoints: {
                    asmCustomerSearch: '/assistedservicewebservices/customers/search',
                },
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    AsmConfig = /** @class */ (function (_super) {
        __extends(AsmConfig, _super);
        function AsmConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AsmConfig;
    }(OccConfig));
    if (false) {
        /** @type {?} */
        AsmConfig.prototype.asm;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CUSTOMER_SEARCH_PAGE_NORMALIZER = new core.InjectionToken('CustomerSearchPageNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Converter is used to convert source data model to target data model.
     * By convention, we distinguish two flows:
     *   - *Normalize* is the conversion from backend models to UI models
     *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).
     *
     * Converters can be stacked together to to apply decoupled customizations
     * @record
     * @template S, T
     */
    function Converter() { }
    if (false) {
        /**
         * Convert converts source model to target model. Can use optional target parameter,
         * used in case of stacking multiple converters (for example, to implement populator pattern).
         *
         * @param {?} source Source data model
         * @param {?=} target Optional, partially converted target model
         * @return {?}
         */
        Converter.prototype.convert = function (source, target) { };
    }
    var ConverterService = /** @class */ (function () {
        function ConverterService(injector) {
            this.injector = injector;
            this.converters = new Map();
        }
        /**
         * @private
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        ConverterService.prototype.getConverters = /**
         * @private
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        function (injectionToken) {
            if (!this.converters.has(injectionToken)) {
                /** @type {?} */
                var converters = this.injector.get(injectionToken, []);
                if (!Array.isArray(converters)) {
                    console.warn('Converter must be multi-provided, please use "multi: true" for', injectionToken.toString());
                }
                this.converters.set(injectionToken, converters);
            }
            return this.converters.get(injectionToken);
        };
        /**
         * Will return true if converters for specified token were provided
         */
        /**
         * Will return true if converters for specified token were provided
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        ConverterService.prototype.hasConverters = /**
         * Will return true if converters for specified token were provided
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        function (injectionToken) {
            /** @type {?} */
            var converters = this.getConverters(injectionToken);
            return Array.isArray(converters) && converters.length > 0;
        };
        /**
         * Pipeable operator to apply converter logic in a observable stream
         */
        /**
         * Pipeable operator to apply converter logic in a observable stream
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        ConverterService.prototype.pipeable = /**
         * Pipeable operator to apply converter logic in a observable stream
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        function (injectionToken) {
            var _this = this;
            if (this.hasConverters(injectionToken)) {
                return operators.map((/**
                 * @param {?} model
                 * @return {?}
                 */
                function (model) { return _this.convertSource(model, injectionToken); }));
            }
            else {
                return (/**
                 * @param {?} observable
                 * @return {?}
                 */
                function (observable) { return (/** @type {?} */ (observable)); });
            }
        };
        /**
         * Pipeable operator to apply converter logic in a observable stream to collection of items
         */
        /**
         * Pipeable operator to apply converter logic in a observable stream to collection of items
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        ConverterService.prototype.pipeableMany = /**
         * Pipeable operator to apply converter logic in a observable stream to collection of items
         * @template S, T
         * @param {?} injectionToken
         * @return {?}
         */
        function (injectionToken) {
            var _this = this;
            if (this.hasConverters(injectionToken)) {
                return operators.map((/**
                 * @param {?} model
                 * @return {?}
                 */
                function (model) { return _this.convertMany(model, injectionToken); }));
            }
            else {
                return (/**
                 * @param {?} observable
                 * @return {?}
                 */
                function (observable) { return (/** @type {?} */ (observable)); });
            }
        };
        /**
         * Apply converter logic specified by injection token to source data
         */
        /**
         * Apply converter logic specified by injection token to source data
         * @template S, T
         * @param {?} source
         * @param {?} injectionToken
         * @return {?}
         */
        ConverterService.prototype.convert = /**
         * Apply converter logic specified by injection token to source data
         * @template S, T
         * @param {?} source
         * @param {?} injectionToken
         * @return {?}
         */
        function (source, injectionToken) {
            if (this.hasConverters(injectionToken)) {
                return this.convertSource(source, injectionToken);
            }
            else {
                return (/** @type {?} */ (source));
            }
        };
        /**
         * Apply converter logic specified by injection token to a collection
         */
        /**
         * Apply converter logic specified by injection token to a collection
         * @template S, T
         * @param {?} sources
         * @param {?} injectionToken
         * @return {?}
         */
        ConverterService.prototype.convertMany = /**
         * Apply converter logic specified by injection token to a collection
         * @template S, T
         * @param {?} sources
         * @param {?} injectionToken
         * @return {?}
         */
        function (sources, injectionToken) {
            var _this = this;
            if (this.hasConverters(injectionToken) && Array.isArray(sources)) {
                return sources.map((/**
                 * @param {?} source
                 * @return {?}
                 */
                function (source) { return _this.convertSource(source, injectionToken); }));
            }
            else {
                return (/** @type {?} */ (sources));
            }
        };
        /**
         * @private
         * @template S, T
         * @param {?} source
         * @param {?} injectionToken
         * @return {?}
         */
        ConverterService.prototype.convertSource = /**
         * @private
         * @template S, T
         * @param {?} source
         * @param {?} injectionToken
         * @return {?}
         */
        function (source, injectionToken) {
            return this.getConverters(injectionToken).reduce((/**
             * @param {?} target
             * @param {?} converter
             * @return {?}
             */
            function (target, converter) {
                return converter.convert(source, target);
            }), (/** @type {?} */ (undefined)));
        };
        ConverterService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ConverterService.ctorParameters = function () { return [
            { type: core.Injector }
        ]; };
        /** @nocollapse */ ConverterService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ConverterService_Factory() { return new ConverterService(core.ɵɵinject(core.INJECTOR)); }, token: ConverterService, providedIn: "root" });
        return ConverterService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ConverterService.prototype.converters;
        /**
         * @type {?}
         * @protected
         */
        ConverterService.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccAsmAdapter = /** @class */ (function () {
        function OccAsmAdapter(http, occEndpointsService, converterService, config, baseSiteService) {
            var _this = this;
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
            this.config = config;
            this.baseSiteService = baseSiteService;
            this.baseSiteService
                .getActive()
                .subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return (_this.activeBaseSite = value); }));
        }
        /**
         * @param {?} options
         * @return {?}
         */
        OccAsmAdapter.prototype.customerSearch = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            /** @type {?} */
            var headers = InterceptorUtil.createHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, true, new http.HttpHeaders());
            /** @type {?} */
            var params = new http.HttpParams()
                .set('baseSite', this.activeBaseSite)
                .set('sort', 'byNameAsc');
            if (typeof options['query'] !== 'undefined') {
                params = params.set('query', '' + options.query);
            }
            if (typeof options['pageSize'] !== 'undefined') {
                params = params.set('pageSize', '' + options.pageSize);
            }
            /** @type {?} */
            var url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');
            return this.http
                .get(url, { headers: headers, params: params })
                .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));
        };
        OccAsmAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccAsmAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService },
            { type: AsmConfig },
            { type: BaseSiteService }
        ]; };
        return OccAsmAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccAsmAdapter.prototype.activeBaseSite;
        /**
         * @type {?}
         * @protected
         */
        OccAsmAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccAsmAdapter.prototype.occEndpointsService;
        /**
         * @type {?}
         * @protected
         */
        OccAsmAdapter.prototype.converterService;
        /**
         * @type {?}
         * @protected
         */
        OccAsmAdapter.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        OccAsmAdapter.prototype.baseSiteService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AsmOccModule = /** @class */ (function () {
        function AsmOccModule() {
        }
        AsmOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            ConfigModule.withConfig(defaultOccAsmConfig),
                        ],
                        providers: [
                            {
                                provide: AsmAdapter,
                                useClass: OccAsmAdapter,
                            },
                        ],
                    },] }
        ];
        return AsmOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CartAdapter = /** @class */ (function () {
        function CartAdapter() {
        }
        return CartAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load all carts
         *
         * @abstract
         * @param {?} userId
         * @return {?}
         */
        CartAdapter.prototype.loadAll = function (userId) { };
        /**
         * Abstract method used to load cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CartAdapter.prototype.load = function (userId, cartId) { };
        /**
         * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one
         *
         * @abstract
         * @param {?} userId
         * @param {?=} oldCartId
         * @param {?=} toMergeCartGuid
         * @return {?}
         */
        CartAdapter.prototype.create = function (userId, oldCartId, toMergeCartGuid) { };
        /**
         * Abstract method used to delete cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CartAdapter.prototype.delete = function (userId, cartId) { };
        /**
         * Abstract method to assign an email to the cart. This step is required to make a guest checkout
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} email
         * @return {?}
         */
        CartAdapter.prototype.addEmail = function (userId, cartId, email) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CART_NORMALIZER = new core.InjectionToken('CartNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CartEntryAdapter = /** @class */ (function () {
        function CartEntryAdapter() {
        }
        return CartEntryAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to add entry to cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?=} quantity
         * @return {?}
         */
        CartEntryAdapter.prototype.add = function (userId, cartId, productCode, quantity) { };
        /**
         * Abstract method used to update entry in cart
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} qty
         * @param {?=} pickupStore
         * @return {?}
         */
        CartEntryAdapter.prototype.update = function (userId, cartId, entryNumber, qty, pickupStore) { };
        /**
         * Abstract method used to remove entry from cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        CartEntryAdapter.prototype.remove = function (userId, cartId, entryNumber) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    SaveCartAdapter = /** @class */ (function () {
        function SaveCartAdapter() {
        }
        return SaveCartAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to save a cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?=} saveCartName
         * @param {?=} saveCartDescription
         * @return {?}
         */
        SaveCartAdapter.prototype.saveCart = function (userId, cartId, saveCartName, saveCartDescription) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CartVoucherAdapter = /** @class */ (function () {
        function CartVoucherAdapter() {
        }
        return CartVoucherAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to apply voucher to cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        CartVoucherAdapter.prototype.add = function (userId, cartId, voucherId) { };
        /**
         * Abstract method used to remove voucher from cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        CartVoucherAdapter.prototype.remove = function (userId, cartId, voucherId) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PRODUCT_NORMALIZER = new core.InjectionToken('ProductNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCartNormalizer = /** @class */ (function () {
        function OccCartNormalizer(converter) {
            this.converter = converter;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        OccCartNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source && source.entries) {
                target.entries = source.entries.map((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) { return (__assign({}, entry, { product: _this.converter.convert(entry.product, PRODUCT_NORMALIZER) })); }));
            }
            this.removeDuplicatePromotions(source, target);
            return target;
        };
        /**
         * Remove all duplicate promotions
         */
        /**
         * Remove all duplicate promotions
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        OccCartNormalizer.prototype.removeDuplicatePromotions = /**
         * Remove all duplicate promotions
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        function (source, target) {
            if (source && source.potentialOrderPromotions) {
                target.potentialOrderPromotions = this.removeDuplicateItems(source.potentialOrderPromotions);
            }
            if (source && source.potentialProductPromotions) {
                target.potentialProductPromotions = this.removeDuplicateItems(source.potentialProductPromotions);
            }
            if (source && source.appliedOrderPromotions) {
                target.appliedOrderPromotions = this.removeDuplicateItems(source.appliedOrderPromotions);
            }
            if (source && source.appliedProductPromotions) {
                target.appliedProductPromotions = this.removeDuplicateItems(source.appliedProductPromotions);
            }
        };
        /**
         * @private
         * @param {?} itemList
         * @return {?}
         */
        OccCartNormalizer.prototype.removeDuplicateItems = /**
         * @private
         * @param {?} itemList
         * @return {?}
         */
        function (itemList) {
            return itemList.filter((/**
             * @param {?} p
             * @param {?} i
             * @param {?} a
             * @return {?}
             */
            function (p, i, a) {
                /** @type {?} */
                var b = a.map((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) { return JSON.stringify(el); }));
                return i === b.indexOf(JSON.stringify(p));
            }));
        };
        OccCartNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccCartNormalizer.ctorParameters = function () { return [
            { type: ConverterService }
        ]; };
        /** @nocollapse */ OccCartNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccCartNormalizer_Factory() { return new OccCartNormalizer(core.ɵɵinject(ConverterService)); }, token: OccCartNormalizer, providedIn: "root" });
        return OccCartNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccCartNormalizer.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultOccCartConfig = {
        backend: {
            occ: {
                endpoints: {
                    // tslint:disable:max-line-length
                    carts: 'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',
                    cart: 'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',
                    createCart: 'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',
                    addEntries: 'users/${userId}/carts/${cartId}/entries',
                    updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',
                    removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',
                    addEmail: 'users/${userId}/carts/${cartId}/email',
                    deleteCart: 'users/${userId}/carts/${cartId}',
                    cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',
                    saveCart: 'users/${userId}/carts/${cartId}/save',
                },
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CART_MODIFICATION_NORMALIZER = new core.InjectionToken('CartModificationNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCartEntryAdapter = /** @class */ (function () {
        function OccCartEntryAdapter(http, occEndpointsService, converterService, featureConfigService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
            this.featureConfigService = featureConfigService;
        }
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @protected
         * @param {?} userId
         * @return {?}
         */
        OccCartEntryAdapter.prototype.getCartEndpoint = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @protected
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var cartEndpoint = 'users/' + userId + '/carts/';
            return this.occEndpointsService.getEndpoint(cartEndpoint);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?=} quantity
         * @return {?}
         */
        OccCartEntryAdapter.prototype.add = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?=} quantity
         * @return {?}
         */
        function (userId, cartId, productCode, quantity) {
            if (quantity === void 0) { quantity = 1; }
            /** @type {?} */
            var toAdd = JSON.stringify({});
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            // TODO: Deprecated, remove Issue: #4125
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyAdd(userId, cartId, productCode, quantity);
            }
            /** @type {?} */
            var url = this.occEndpointsService.getUrl('addEntries', {
                userId: userId,
                cartId: cartId,
            }, { code: productCode, qty: quantity });
            return this.http
                .post(url, toAdd, { headers: headers })
                .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} qty
         * @param {?=} pickupStore
         * @return {?}
         */
        OccCartEntryAdapter.prototype.update = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} qty
         * @param {?=} pickupStore
         * @return {?}
         */
        function (userId, cartId, entryNumber, qty, pickupStore) {
            /** @type {?} */
            var params = {};
            if (pickupStore) {
                params = { pickupStore: pickupStore };
            }
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            // TODO: Deprecated, remove Issue: #4125
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyUpdate(userId, cartId, entryNumber, qty, pickupStore);
            }
            /** @type {?} */
            var url = this.occEndpointsService.getUrl('updateEntries', { userId: userId, cartId: cartId, entryNumber: entryNumber }, __assign({ qty: qty }, params));
            return this.http
                .patch(url, {}, { headers: headers })
                .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        OccCartEntryAdapter.prototype.remove = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        function (userId, cartId, entryNumber) {
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            // TODO: Deprecated, remove Issue: #4125
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyRemove(userId, cartId, entryNumber);
            }
            /** @type {?} */
            var url = this.occEndpointsService.getUrl('removeEntries', {
                userId: userId,
                cartId: cartId,
                entryNumber: entryNumber,
            });
            return this.http.delete(url, { headers: headers });
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?=} quantity
         * @return {?}
         */
        OccCartEntryAdapter.prototype.legacyAdd = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?=} quantity
         * @return {?}
         */
        function (userId, cartId, productCode, quantity) {
            if (quantity === void 0) { quantity = 1; }
            /** @type {?} */
            var url = this.getCartEndpoint(userId) + cartId + '/entries';
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: 'code=' + productCode + '&qty=' + quantity,
            });
            /** @type {?} */
            var toAdd = JSON.stringify({});
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http
                .post(url, toAdd, { headers: headers, params: params })
                .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} qty
         * @param {?=} pickupStore
         * @return {?}
         */
        OccCartEntryAdapter.prototype.legacyUpdate = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} qty
         * @param {?=} pickupStore
         * @return {?}
         */
        function (userId, cartId, entryNumber, qty, pickupStore) {
            /** @type {?} */
            var url = this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;
            /** @type {?} */
            var queryString = 'qty=' + qty;
            if (pickupStore) {
                queryString = queryString + '&pickupStore=' + pickupStore;
            }
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: queryString,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http
                .patch(url, {}, { headers: headers, params: params })
                .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        OccCartEntryAdapter.prototype.legacyRemove = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        function (userId, cartId, entryNumber) {
            /** @type {?} */
            var url = this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.delete(url, { headers: headers });
        };
        OccCartEntryAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCartEntryAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService },
            { type: FeatureConfigService }
        ]; };
        return OccCartEntryAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCartEntryAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccCartEntryAdapter.prototype.occEndpointsService;
        /**
         * @type {?}
         * @protected
         */
        OccCartEntryAdapter.prototype.converterService;
        /**
         * @type {?}
         * @protected
         */
        OccCartEntryAdapter.prototype.featureConfigService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CART_VOUCHER_NORMALIZER = new core.InjectionToken('CartVoucherNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCartVoucherAdapter = /** @class */ (function () {
        function OccCartVoucherAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @protected
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCartVoucherAdapter.prototype.getCartVoucherEndpoint = /**
         * @protected
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.occEndpoints.getUrl('cartVoucher', { userId: userId, cartId: cartId });
        };
        /**
         * @protected
         * @param {?} userId
         * @return {?}
         */
        OccCartVoucherAdapter.prototype.getHeaders = /**
         * @protected
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            return headers;
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        OccCartVoucherAdapter.prototype.add = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        function (userId, cartId, voucherId) {
            /** @type {?} */
            var url = this.getCartVoucherEndpoint(userId, cartId);
            /** @type {?} */
            var toAdd = JSON.stringify({});
            /** @type {?} */
            var params = new http.HttpParams().set('voucherId', voucherId);
            /** @type {?} */
            var headers = this.getHeaders(userId);
            return this.http.post(url, toAdd, { headers: headers, params: params }).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error.json()); })), this.converter.pipeable(CART_VOUCHER_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        OccCartVoucherAdapter.prototype.remove = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        function (userId, cartId, voucherId) {
            /** @type {?} */
            var url = this.getCartVoucherEndpoint(userId, cartId) +
                '/' +
                encodeURIComponent(voucherId);
            /** @type {?} */
            var headers = this.getHeaders(userId);
            return this.http
                .delete(url, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        OccCartVoucherAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCartVoucherAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccCartVoucherAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCartVoucherAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccCartVoucherAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccCartVoucherAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO: Deprecated, remove Issue: #4125. Use configurable endpoints.
    /** @type {?} */
    var DETAILS_PARAMS = 'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +
        'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue),updateable),' +
        'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),' +
        'deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue),pickupItemsQuantity,net,' +
        'appliedVouchers,productDiscounts(formattedValue),user';
    var OccCartAdapter = /** @class */ (function () {
        function OccCartAdapter(http, occEndpointsService, converterService, featureConfigService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
            this.featureConfigService = featureConfigService;
        }
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @protected
         * @param {?} userId
         * @return {?}
         */
        OccCartAdapter.prototype.getCartEndpoint = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @protected
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var cartEndpoint = "users/" + userId + "/carts/";
            return this.occEndpointsService.getEndpoint(cartEndpoint);
        };
        /**
         * @param {?} userId
         * @return {?}
         */
        OccCartAdapter.prototype.loadAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            // TODO: Deprecated, remove Issue: #4125.
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyLoadAll(userId);
            }
            return this.http
                .get(this.occEndpointsService.getUrl('carts', { userId: userId }))
                .pipe(operators.pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCartAdapter.prototype.load = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            if (cartId === OCC_CART_ID_CURRENT) {
                return this.loadAll(userId).pipe(operators.map((/**
                 * @param {?} carts
                 * @return {?}
                 */
                function (carts) {
                    if (carts) {
                        /** @type {?} */
                        var activeCart = carts.find((/**
                         * @param {?} cart
                         * @return {?}
                         */
                        function (cart) {
                            return cart['saveTime'] === undefined;
                        }));
                        return activeCart;
                    }
                    else {
                        return null;
                    }
                })));
            }
            else {
                // TODO: Deprecated, remove Issue: #4125.
                if (!this.featureConfigService.isLevel('1.1')) {
                    return this.legacyLoad(userId, cartId);
                }
                return this.http
                    .get(this.occEndpointsService.getUrl('cart', { userId: userId, cartId: cartId }))
                    .pipe(this.converterService.pipeable(CART_NORMALIZER));
            }
        };
        /**
         * @param {?} userId
         * @param {?=} oldCartId
         * @param {?=} toMergeCartGuid
         * @return {?}
         */
        OccCartAdapter.prototype.create = /**
         * @param {?} userId
         * @param {?=} oldCartId
         * @param {?=} toMergeCartGuid
         * @return {?}
         */
        function (userId, oldCartId, toMergeCartGuid) {
            /** @type {?} */
            var toAdd = JSON.stringify({});
            // TODO: Deprecated, remove Issue: #4125.
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyCreate(userId, toAdd, oldCartId, toMergeCartGuid);
            }
            /** @type {?} */
            var params = {};
            if (oldCartId) {
                params = { oldCartId: oldCartId };
            }
            if (toMergeCartGuid) {
                params['toMergeCartGuid'] = toMergeCartGuid;
            }
            return this.http
                .post(this.occEndpointsService.getUrl('createCart', { userId: userId }, params), toAdd)
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCartAdapter.prototype.delete = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            /** @type {?} */
            var headers = new http.HttpHeaders();
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            return this.http.delete(this.occEndpointsService.getUrl('deleteCart', { userId: userId, cartId: cartId }), { headers: headers });
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @return {?}
         */
        OccCartAdapter.prototype.legacyLoadAll = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var url = this.getCartEndpoint(userId);
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: "fields=carts(" + DETAILS_PARAMS + ",saveTime)",
            });
            return this.http.get(url, { params: params }).pipe(operators.pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCartAdapter.prototype.legacyLoad = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            /** @type {?} */
            var url = this.getCartEndpoint(userId) + cartId;
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: "fields=" + DETAILS_PARAMS,
            });
            return this.http
                .get(url, { params: params })
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} toAdd
         * @param {?=} oldCartId
         * @param {?=} toMergeCartGuid
         * @return {?}
         */
        OccCartAdapter.prototype.legacyCreate = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} toAdd
         * @param {?=} oldCartId
         * @param {?=} toMergeCartGuid
         * @return {?}
         */
        function (userId, toAdd, oldCartId, toMergeCartGuid) {
            /** @type {?} */
            var url = this.getCartEndpoint(userId);
            /** @type {?} */
            var queryString = "fields=" + DETAILS_PARAMS;
            if (oldCartId) {
                queryString = queryString + "&oldCartId=" + oldCartId;
            }
            if (toMergeCartGuid) {
                queryString = queryString + "&toMergeCartGuid=" + toMergeCartGuid;
            }
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: queryString,
            });
            return this.http
                .post(url, toAdd, { params: params })
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} email
         * @return {?}
         */
        OccCartAdapter.prototype.addEmail = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} email
         * @return {?}
         */
        function (userId, cartId, email) {
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            /** @type {?} */
            var httpParams = new http.HttpParams().set('email', email);
            /** @type {?} */
            var url = this.occEndpointsService.getUrl('addEmail', {
                userId: userId,
                cartId: cartId,
            });
            return this.http.put(url, httpParams, { headers: headers });
        };
        OccCartAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCartAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService },
            { type: FeatureConfigService }
        ]; };
        return OccCartAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCartAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccCartAdapter.prototype.occEndpointsService;
        /**
         * @type {?}
         * @protected
         */
        OccCartAdapter.prototype.converterService;
        /**
         * @type {?}
         * @protected
         */
        OccCartAdapter.prototype.featureConfigService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SAVE_CART_NORMALIZER = new core.InjectionToken('SaveCartNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccSaveCartAdapter = /** @class */ (function () {
        function OccSaveCartAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?=} saveCartName
         * @param {?=} saveCartDescription
         * @return {?}
         */
        OccSaveCartAdapter.prototype.saveCart = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?=} saveCartName
         * @param {?=} saveCartDescription
         * @return {?}
         */
        function (userId, cartId, saveCartName, saveCartDescription) {
            /** @type {?} */
            var httpParams = new http.HttpParams();
            if (Boolean(saveCartName)) {
                httpParams = httpParams.set('saveCartName', saveCartName);
            }
            if (Boolean(saveCartDescription)) {
                httpParams = httpParams.set('saveCartDescription', saveCartDescription);
            }
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http
                .patch(this.occEndpointsService.getUrl('saveCart', { userId: userId, cartId: cartId }), httpParams, { headers: headers })
                .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));
        };
        OccSaveCartAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccSaveCartAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccSaveCartAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccSaveCartAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccSaveCartAdapter.prototype.occEndpointsService;
        /**
         * @type {?}
         * @protected
         */
        OccSaveCartAdapter.prototype.converterService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CartOccModule = /** @class */ (function () {
        function CartOccModule() {
        }
        CartOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            ConfigModule.withConfig(defaultOccCartConfig),
                        ],
                        providers: [
                            {
                                provide: CartAdapter,
                                useClass: OccCartAdapter,
                            },
                            {
                                provide: CART_NORMALIZER,
                                useExisting: OccCartNormalizer,
                                multi: true,
                            },
                            {
                                provide: CartEntryAdapter,
                                useClass: OccCartEntryAdapter,
                            },
                            {
                                provide: CartVoucherAdapter,
                                useClass: OccCartVoucherAdapter,
                            },
                            {
                                provide: SaveCartAdapter,
                                useClass: OccSaveCartAdapter,
                            },
                        ],
                    },] }
        ];
        return CartOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ORDER_NORMALIZER = new core.InjectionToken('OrderNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // To be changed to a more optimised params after ticket: C3PO-1076
    /** @type {?} */
    var FULL_PARAMS = 'fields=FULL';
    /** @type {?} */
    var CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';
    /** @type {?} */
    var ORDERS_ENDPOINT = '/orders';
    /** @type {?} */
    var CARTS_ENDPOINT = '/carts/';
    var OccCheckoutAdapter = /** @class */ (function () {
        function OccCheckoutAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @protected
         * @param {?} userId
         * @param {?} subEndpoint
         * @return {?}
         */
        OccCheckoutAdapter.prototype.getEndpoint = /**
         * @protected
         * @param {?} userId
         * @param {?} subEndpoint
         * @return {?}
         */
        function (userId, subEndpoint) {
            /** @type {?} */
            var orderEndpoint = 'users/' + userId + subEndpoint;
            return this.occEndpoints.getEndpoint(orderEndpoint);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCheckoutAdapter.prototype.placeOrder = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            /** @type {?} */
            var url = this.getEndpoint(userId, ORDERS_ENDPOINT);
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            return this.http
                .post(url, {}, { headers: headers, params: params })
                .pipe(this.converter.pipeable(ORDER_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCheckoutAdapter.prototype.loadCheckoutDetails = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            /** @type {?} */
            var url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: "fields=" + CHECKOUT_PARAMS,
            });
            return this.http.get(url, { params: params });
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCheckoutAdapter.prototype.clearCheckoutDeliveryAddress = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            /** @type {?} */
            var url = "" + this.getEndpoint(userId, CARTS_ENDPOINT) + cartId + "/addresses/delivery";
            return this.http.delete(url);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCheckoutAdapter.prototype.clearCheckoutDeliveryMode = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            /** @type {?} */
            var url = "" + this.getEndpoint(userId, CARTS_ENDPOINT) + cartId + "/deliverymode";
            return this.http.delete(url);
        };
        OccCheckoutAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCheckoutAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccCheckoutAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DELIVERY_MODE_NORMALIZER = new core.InjectionToken('DeliveryModeNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ADDRESS_NORMALIZER = new core.InjectionToken('AddressNormalizer');
    /** @type {?} */
    var ADDRESS_SERIALIZER = new core.InjectionToken('AddressSerializer');
    /** @type {?} */
    var ADDRESS_VALIDATION_NORMALIZER = new core.InjectionToken('AddressValidationNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCheckoutDeliveryAdapter = /** @class */ (function () {
        function OccCheckoutDeliveryAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @protected
         * @param {?} userId
         * @return {?}
         */
        OccCheckoutDeliveryAdapter.prototype.getCartEndpoint = /**
         * @protected
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var cartEndpoint = 'users/' + userId + '/carts/';
            return this.occEndpoints.getEndpoint(cartEndpoint);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} address
         * @return {?}
         */
        OccCheckoutDeliveryAdapter.prototype.createAddress = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} address
         * @return {?}
         */
        function (userId, cartId, address) {
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http
                .post(this.getCartEndpoint(userId) + cartId + '/addresses/delivery', address, {
                headers: new http.HttpHeaders().set('Content-Type', 'application/json'),
            })
                .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} addressId
         * @return {?}
         */
        OccCheckoutDeliveryAdapter.prototype.setAddress = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} addressId
         * @return {?}
         */
        function (userId, cartId, addressId) {
            return this.http.put(this.getCartEndpoint(userId) + cartId + '/addresses/delivery', {}, {
                params: { addressId: addressId },
            });
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} deliveryModeId
         * @return {?}
         */
        OccCheckoutDeliveryAdapter.prototype.setMode = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} deliveryModeId
         * @return {?}
         */
        function (userId, cartId, deliveryModeId) {
            return this.http.put(this.getCartEndpoint(userId) + cartId + '/deliverymode', {}, {
                params: { deliveryModeId: deliveryModeId },
            });
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCheckoutDeliveryAdapter.prototype.getMode = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.http
                .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')
                .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCheckoutDeliveryAdapter.prototype.getSupportedModes = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.http
                .get(this.getCartEndpoint(userId) + cartId + '/deliverymodes')
                .pipe(operators.pluck('deliveryModes'), this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER));
        };
        OccCheckoutDeliveryAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCheckoutDeliveryAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccCheckoutDeliveryAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutDeliveryAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutDeliveryAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutDeliveryAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PAYMENT_DETAILS_NORMALIZER = new core.InjectionToken('PaymentDetailsNormalizer');
    /** @type {?} */
    var PAYMENT_DETAILS_SERIALIZER = new core.InjectionToken('PaymentDetailsSerializer');
    /** @type {?} */
    var CARD_TYPE_NORMALIZER = new core.InjectionToken('CardTypeNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomEncoder = /** @class */ (function () {
        function CustomEncoder() {
        }
        /**
         * @param {?} key
         * @return {?}
         */
        CustomEncoder.prototype.encodeKey = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return encodeURIComponent(key);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        CustomEncoder.prototype.encodeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return encodeURIComponent(value);
        };
        /**
         * @param {?} key
         * @return {?}
         */
        CustomEncoder.prototype.decodeKey = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return decodeURIComponent(key);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        CustomEncoder.prototype.decodeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return decodeURIComponent(value);
        };
        return CustomEncoder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ENDPOINT_CARD_TYPES = 'cardtypes';
    var OccCheckoutPaymentAdapter = /** @class */ (function () {
        function OccCheckoutPaymentAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            if (typeof DOMParser !== 'undefined') {
                this.domparser = new DOMParser();
            }
        }
        /**
         * @protected
         * @param {?} userId
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.getCartEndpoint = /**
         * @protected
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var cartEndpoint = 'users/' + userId + '/carts/';
            return this.occEndpoints.getEndpoint(cartEndpoint);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetails
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.create = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetails
         * @return {?}
         */
        function (userId, cartId, paymentDetails) {
            var _this = this;
            paymentDetails = this.converter.convert(paymentDetails, PAYMENT_DETAILS_SERIALIZER);
            return this.getProviderSubInfo(userId, cartId).pipe(operators.map((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var labelsMap = _this.convertToMap(data.mappingLabels.entry);
                return {
                    url: data.postUrl,
                    parameters: _this.getParamsForPaymentProvider(paymentDetails, data.parameters.entry, labelsMap),
                    mappingLabels: labelsMap,
                };
            })), operators.mergeMap((/**
             * @param {?} sub
             * @return {?}
             */
            function (sub) {
                // create a subscription directly with payment provider
                return _this.createSubWithProvider(sub.url, sub.parameters).pipe(operators.map((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) { return _this.extractPaymentDetailsFromHtml(response); })), operators.mergeMap((/**
                 * @param {?} fromPaymentProvider
                 * @return {?}
                 */
                function (fromPaymentProvider) {
                    fromPaymentProvider['defaultPayment'] =
                        paymentDetails.defaultPayment;
                    fromPaymentProvider['savePaymentInfo'] = true;
                    return _this.createDetailsWithParameters(userId, cartId, fromPaymentProvider).pipe(_this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));
                })));
            })));
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetailsId
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.set = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetailsId
         * @return {?}
         */
        function (userId, cartId, paymentDetailsId) {
            return this.http.put(this.getCartEndpoint(userId) + cartId + '/paymentdetails', {}, {
                params: { paymentDetailsId: paymentDetailsId },
            });
        };
        /**
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.loadCardTypes = /**
         * @return {?}
         */
        function () {
            return this.http
                .get(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))
                .pipe(operators.map((/**
             * @param {?} cardTypeList
             * @return {?}
             */
            function (cardTypeList) { return cardTypeList.cardTypes; })), this.converter.pipeableMany(CARD_TYPE_NORMALIZER));
        };
        /**
         * @protected
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.getProviderSubInfo = /**
         * @protected
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.http.get(this.getCartEndpoint(userId) +
                cartId +
                '/payment/sop/request?responseUrl=sampleUrl');
        };
        /**
         * @protected
         * @param {?} postUrl
         * @param {?} parameters
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.createSubWithProvider = /**
         * @protected
         * @param {?} postUrl
         * @param {?} parameters
         * @return {?}
         */
        function (postUrl, parameters) {
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
                Accept: 'text/html',
            });
            /** @type {?} */
            var httpParams = new http.HttpParams({ encoder: new CustomEncoder() });
            Object.keys(parameters).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                httpParams = httpParams.append(key, parameters[key]);
            }));
            return this.http.post(postUrl, httpParams, {
                headers: headers,
                responseType: 'text',
            });
        };
        /**
         * @protected
         * @param {?} userId
         * @param {?} cartId
         * @param {?} parameters
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.createDetailsWithParameters = /**
         * @protected
         * @param {?} userId
         * @param {?} cartId
         * @param {?} parameters
         * @return {?}
         */
        function (userId, cartId, parameters) {
            /** @type {?} */
            var httpParams = new http.HttpParams({ encoder: new CustomEncoder() });
            Object.keys(parameters).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                httpParams = httpParams.append(key, parameters[key]);
            }));
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.post(this.getCartEndpoint(userId) + cartId + '/payment/sop/response', httpParams, { headers: headers });
        };
        /**
         * @private
         * @param {?} paymentDetails
         * @param {?} parameters
         * @param {?} mappingLabels
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.getParamsForPaymentProvider = /**
         * @private
         * @param {?} paymentDetails
         * @param {?} parameters
         * @param {?} mappingLabels
         * @return {?}
         */
        function (paymentDetails, parameters, mappingLabels) {
            /** @type {?} */
            var params = this.convertToMap(parameters);
            params[mappingLabels['hybris_account_holder_name']] =
                paymentDetails.accountHolderName;
            params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;
            params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;
            if (mappingLabels['hybris_combined_expiry_date'] === 'true') {
                params[mappingLabels['hybris_card_expiry_date']] =
                    paymentDetails.expiryMonth +
                        mappingLabels['hybris_separator_expiry_date'] +
                        paymentDetails.expiryYear;
            }
            else {
                params[mappingLabels['hybris_card_expiration_month']] =
                    paymentDetails.expiryMonth;
                params[mappingLabels['hybris_card_expiration_year']] =
                    paymentDetails.expiryYear;
            }
            params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;
            // billing address
            params[mappingLabels['hybris_billTo_country']] =
                paymentDetails.billingAddress.country.isocode;
            params[mappingLabels['hybris_billTo_firstname']] =
                paymentDetails.billingAddress.firstName;
            params[mappingLabels['hybris_billTo_lastname']] =
                paymentDetails.billingAddress.lastName;
            params[mappingLabels['hybris_billTo_street1']] =
                paymentDetails.billingAddress.line1 +
                    ' ' +
                    paymentDetails.billingAddress.line2;
            params[mappingLabels['hybris_billTo_city']] =
                paymentDetails.billingAddress.town;
            if (paymentDetails.billingAddress.region) {
                params[mappingLabels['hybris_billTo_region']] =
                    paymentDetails.billingAddress.region.isocodeShort;
            }
            else {
                params[mappingLabels['hybris_billTo_region']] = '';
            }
            params[mappingLabels['hybris_billTo_postalcode']] =
                paymentDetails.billingAddress.postalCode;
            return params;
        };
        /**
         * @private
         * @param {?} html
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.extractPaymentDetailsFromHtml = /**
         * @private
         * @param {?} html
         * @return {?}
         */
        function (html) {
            /** @type {?} */
            var domdoc = this.domparser.parseFromString(html, 'text/xml');
            /** @type {?} */
            var responseForm = domdoc.getElementsByTagName('form')[0];
            /** @type {?} */
            var inputs = responseForm.getElementsByTagName('input');
            /** @type {?} */
            var values = {};
            for (var i = 0; inputs[i]; i++) {
                /** @type {?} */
                var input = inputs[i];
                if (input.getAttribute('name') !== '{}' &&
                    input.getAttribute('value') !== '') {
                    values[input.getAttribute('name')] = input.getAttribute('value');
                }
            }
            return values;
        };
        /**
         * @private
         * @param {?} paramList
         * @return {?}
         */
        OccCheckoutPaymentAdapter.prototype.convertToMap = /**
         * @private
         * @param {?} paramList
         * @return {?}
         */
        function (paramList) {
            return paramList.reduce((/**
             * @param {?} result
             * @param {?} item
             * @return {?}
             */
            function (result, item) {
                /** @type {?} */
                var key = item.key;
                result[key] = item.value;
                return result;
            }), {});
        };
        OccCheckoutPaymentAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCheckoutPaymentAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccCheckoutPaymentAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccCheckoutPaymentAdapter.prototype.domparser;
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutPaymentAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutPaymentAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccCheckoutPaymentAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CheckoutAdapter = /** @class */ (function () {
        function CheckoutAdapter() {
        }
        return CheckoutAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to place an order.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?} cartId The `cartId` for cart used for placing order
         * @return {?}
         */
        CheckoutAdapter.prototype.placeOrder = function (userId, cartId) { };
        /**
         * Abstract method used to load checkout details
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutAdapter.prototype.loadCheckoutDetails = function (userId, cartId) { };
        /**
         * Abstract method used to clear checkout delivery address
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutAdapter.prototype.clearCheckoutDeliveryAddress = function (userId, cartId) { };
        /**
         * Abstract method used to clear checkout delivery mode
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutAdapter.prototype.clearCheckoutDeliveryMode = function (userId, cartId) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccOrderNormalizer = /** @class */ (function () {
        function OccOrderNormalizer(converter) {
            this.converter = converter;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        OccOrderNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source.entries) {
                target.entries = source.entries.map((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) {
                    return _this.convertOrderEntry(entry);
                }));
            }
            if (source.consignments) {
                target.consignments = source.consignments.map((/**
                 * @param {?} consignment
                 * @return {?}
                 */
                function (consignment) { return (__assign({}, consignment, { entries: consignment.entries.map((/**
                     * @param {?} entry
                     * @return {?}
                     */
                    function (entry) { return (__assign({}, entry, { orderEntry: _this.convertOrderEntry(entry.orderEntry) })); })) })); }));
            }
            if (source.unconsignedEntries) {
                target.unconsignedEntries = source.unconsignedEntries.map((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) {
                    return _this.convertOrderEntry(entry);
                }));
            }
            return target;
        };
        /**
         * @private
         * @param {?} source
         * @return {?}
         */
        OccOrderNormalizer.prototype.convertOrderEntry = /**
         * @private
         * @param {?} source
         * @return {?}
         */
        function (source) {
            return __assign({}, source, { product: this.converter.convert(source.product, PRODUCT_NORMALIZER) });
        };
        OccOrderNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccOrderNormalizer.ctorParameters = function () { return [
            { type: ConverterService }
        ]; };
        /** @nocollapse */ OccOrderNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccOrderNormalizer_Factory() { return new OccOrderNormalizer(core.ɵɵinject(ConverterService)); }, token: OccOrderNormalizer, providedIn: "root" });
        return OccOrderNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccOrderNormalizer.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CheckoutDeliveryAdapter = /** @class */ (function () {
        function CheckoutDeliveryAdapter() {
        }
        return CheckoutDeliveryAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to create address in cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} address
         * @return {?}
         */
        CheckoutDeliveryAdapter.prototype.createAddress = function (userId, cartId, address) { };
        /**
         * Abstract method used to set adress for delivery
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} addressId
         * @return {?}
         */
        CheckoutDeliveryAdapter.prototype.setAddress = function (userId, cartId, addressId) { };
        /**
         * Abstract method used to set delivery mode on cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} deliveryModeId
         * @return {?}
         */
        CheckoutDeliveryAdapter.prototype.setMode = function (userId, cartId, deliveryModeId) { };
        /**
         * Abstract method used to get current delivery mode from cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutDeliveryAdapter.prototype.getMode = function (userId, cartId) { };
        /**
         * Abstract method used to get supported delivery modes for cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutDeliveryAdapter.prototype.getSupportedModes = function (userId, cartId) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CheckoutPaymentAdapter = /** @class */ (function () {
        function CheckoutPaymentAdapter() {
        }
        return CheckoutPaymentAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to create payment details on cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetails
         * @return {?}
         */
        CheckoutPaymentAdapter.prototype.create = function (userId, cartId, paymentDetails) { };
        /**
         * Abstract method used to set payment details on cart
         *
         * @abstract
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetailsId
         * @return {?}
         */
        CheckoutPaymentAdapter.prototype.set = function (userId, cartId, paymentDetailsId) { };
        /**
         * Abstract method used to get available cart types
         * @abstract
         * @return {?}
         */
        CheckoutPaymentAdapter.prototype.loadCardTypes = function () { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutOccModule = /** @class */ (function () {
        function CheckoutOccModule() {
        }
        CheckoutOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, http.HttpClientModule],
                        providers: [
                            {
                                provide: CheckoutAdapter,
                                useClass: OccCheckoutAdapter,
                            },
                            { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },
                            {
                                provide: CheckoutDeliveryAdapter,
                                useClass: OccCheckoutDeliveryAdapter,
                            },
                            {
                                provide: CheckoutPaymentAdapter,
                                useClass: OccCheckoutPaymentAdapter,
                            },
                        ],
                    },] }
        ];
        return CheckoutOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CMS_PAGE_NORMALIZER = new core.InjectionToken('CmsPageNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCmsPageAdapter = /** @class */ (function () {
        function OccCmsPageAdapter(http$1, occEndpoints, converter) {
            this.http = http$1;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            this.headers = new http.HttpHeaders().set('Content-Type', 'application/json');
        }
        /**
         * @param {?} pageContext
         * @param {?=} fields
         * @return {?}
         */
        OccCmsPageAdapter.prototype.load = /**
         * @param {?} pageContext
         * @param {?=} fields
         * @return {?}
         */
        function (pageContext, fields) {
            // load page by Id
            if (pageContext.type === undefined) {
                return this.http
                    .get(this.occEndpoints.getUrl('page', {
                    id: pageContext.id,
                }, { fields: fields ? fields : 'DEFAULT' }), {
                    headers: this.headers,
                })
                    .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));
            }
            // load page by PageContext
            /** @type {?} */
            var httpParams = this.getPagesRequestParams(pageContext);
            return this.http
                .get(this.getPagesEndpoint(httpParams, fields), {
                headers: this.headers,
            })
                .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));
        };
        /**
         * @private
         * @param {?} params
         * @param {?=} fields
         * @return {?}
         */
        OccCmsPageAdapter.prototype.getPagesEndpoint = /**
         * @private
         * @param {?} params
         * @param {?=} fields
         * @return {?}
         */
        function (params, fields) {
            fields = fields ? fields : 'DEFAULT';
            return this.occEndpoints.getUrl('pages', {}, __assign({ fields: fields }, params));
        };
        /**
         * @private
         * @param {?} pageContext
         * @return {?}
         */
        OccCmsPageAdapter.prototype.getPagesRequestParams = /**
         * @private
         * @param {?} pageContext
         * @return {?}
         */
        function (pageContext) {
            /** @type {?} */
            var httpParams = {};
            // smartedit preview page is loaded by previewToken which added by interceptor
            if (pageContext.id !== 'smartedit-preview') {
                httpParams = { pageType: pageContext.type };
                if (pageContext.type === PageType.CONTENT_PAGE) {
                    httpParams['pageLabelOrId'] = pageContext.id;
                }
                else {
                    httpParams['code'] = pageContext.id;
                }
            }
            return httpParams;
        };
        OccCmsPageAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCmsPageAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccCmsPageAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCmsPageAdapter.prototype.headers;
        /**
         * @type {?}
         * @private
         */
        OccCmsPageAdapter.prototype.http;
        /**
         * @type {?}
         * @private
         */
        OccCmsPageAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccCmsPageAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CMS_COMPONENT_NORMALIZER = new core.InjectionToken('CmsComponentNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCmsComponentAdapter = /** @class */ (function () {
        function OccCmsComponentAdapter(http$1, occEndpoints, converter) {
            this.http = http$1;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            this.headers = new http.HttpHeaders().set('Content-Type', 'application/json');
        }
        /**
         * @template T
         * @param {?} id
         * @param {?} pageContext
         * @return {?}
         */
        OccCmsComponentAdapter.prototype.load = /**
         * @template T
         * @param {?} id
         * @param {?} pageContext
         * @return {?}
         */
        function (id, pageContext) {
            return this.http
                .get(this.getComponentEndPoint(id, pageContext), {
                headers: this.headers,
            })
                .pipe(this.converter.pipeable(CMS_COMPONENT_NORMALIZER));
        };
        /**
         * @param {?} ids
         * @param {?} pageContext
         * @param {?=} fields
         * @param {?=} currentPage
         * @param {?=} pageSize
         * @param {?=} sort
         * @return {?}
         */
        OccCmsComponentAdapter.prototype.findComponentsByIds = /**
         * @param {?} ids
         * @param {?} pageContext
         * @param {?=} fields
         * @param {?=} currentPage
         * @param {?=} pageSize
         * @param {?=} sort
         * @return {?}
         */
        function (ids, pageContext, fields, currentPage, pageSize, sort) {
            if (fields === void 0) { fields = 'DEFAULT'; }
            if (currentPage === void 0) { currentPage = 0; }
            if (pageSize === void 0) { pageSize = ids.length; }
            /** @type {?} */
            var requestParams = __assign({}, this.getContextParams(pageContext), this.getPaginationParams(currentPage, pageSize, sort));
            requestParams['componentIds'] = ids.toString();
            return this.http
                .get(this.getComponentsEndpoint(requestParams, fields), {
                headers: this.headers,
            })
                .pipe(operators.pluck('component'), this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER));
        };
        /**
         * @param {?} ids
         * @param {?} pageContext
         * @param {?=} fields
         * @param {?=} currentPage
         * @param {?=} pageSize
         * @param {?=} sort
         * @return {?}
         */
        OccCmsComponentAdapter.prototype.findComponentsByIdsLegacy = /**
         * @param {?} ids
         * @param {?} pageContext
         * @param {?=} fields
         * @param {?=} currentPage
         * @param {?=} pageSize
         * @param {?=} sort
         * @return {?}
         */
        function (ids, pageContext, fields, currentPage, pageSize, sort) {
            if (fields === void 0) { fields = 'DEFAULT'; }
            if (currentPage === void 0) { currentPage = 0; }
            if (pageSize === void 0) { pageSize = ids.length; }
            /** @type {?} */
            var idList = { idList: ids };
            /** @type {?} */
            var requestParams = __assign({}, this.getContextParams(pageContext), this.getPaginationParams(currentPage, pageSize, sort));
            return this.http
                .post(this.getComponentsEndpoint(requestParams, fields), idList, {
                headers: this.headers,
            })
                .pipe(operators.pluck('component'), this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER));
        };
        /**
         * @protected
         * @param {?} id
         * @param {?} pageContext
         * @return {?}
         */
        OccCmsComponentAdapter.prototype.getComponentEndPoint = /**
         * @protected
         * @param {?} id
         * @param {?} pageContext
         * @return {?}
         */
        function (id, pageContext) {
            return this.occEndpoints.getUrl('component', { id: id }, this.getContextParams(pageContext));
        };
        /**
         * @protected
         * @param {?} requestParams
         * @param {?} fields
         * @return {?}
         */
        OccCmsComponentAdapter.prototype.getComponentsEndpoint = /**
         * @protected
         * @param {?} requestParams
         * @param {?} fields
         * @return {?}
         */
        function (requestParams, fields) {
            return this.occEndpoints.getUrl('components', {}, __assign({ fields: fields }, requestParams));
        };
        /**
         * @private
         * @param {?=} currentPage
         * @param {?=} pageSize
         * @param {?=} sort
         * @return {?}
         */
        OccCmsComponentAdapter.prototype.getPaginationParams = /**
         * @private
         * @param {?=} currentPage
         * @param {?=} pageSize
         * @param {?=} sort
         * @return {?}
         */
        function (currentPage, pageSize, sort) {
            /** @type {?} */
            var requestParams = {};
            if (currentPage !== undefined) {
                requestParams['currentPage'] = currentPage.toString();
            }
            if (pageSize !== undefined) {
                requestParams['pageSize'] = pageSize.toString();
            }
            if (sort !== undefined) {
                requestParams['sort'] = sort;
            }
            return requestParams;
        };
        /**
         * @private
         * @param {?} pageContext
         * @return {?}
         */
        OccCmsComponentAdapter.prototype.getContextParams = /**
         * @private
         * @param {?} pageContext
         * @return {?}
         */
        function (pageContext) {
            /** @type {?} */
            var requestParams = {};
            switch (pageContext.type) {
                case PageType.PRODUCT_PAGE: {
                    requestParams = { productCode: pageContext.id };
                    break;
                }
                case PageType.CATEGORY_PAGE: {
                    requestParams = { categoryCode: pageContext.id };
                    break;
                }
                case PageType.CATALOG_PAGE: {
                    requestParams = { catalogCode: pageContext.id };
                    break;
                }
            }
            return requestParams;
        };
        OccCmsComponentAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCmsComponentAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccCmsComponentAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCmsComponentAdapter.prototype.headers;
        /**
         * @type {?}
         * @private
         */
        OccCmsComponentAdapter.prototype.http;
        /**
         * @type {?}
         * @private
         */
        OccCmsComponentAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccCmsComponentAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function StandardCmsComponentConfig() { }
    if (false) {
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.CMSSiteContextComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.CMSLinkComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.SimpleResponsiveBannerComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.SimpleBannerComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.BannerComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.CMSParagraphComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.BreadcrumbComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.NavigationComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.FooterNavigationComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.CategoryNavigationComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.ProductAddToCartComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.MiniCartComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.ProductCarouselComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.SearchBoxComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.ProductReferencesComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.CMSTabParagraphComponent;
        /** @type {?|undefined} */
        StandardCmsComponentConfig.prototype.LoginComponent;
    }
    /**
     * @record
     */
    function JspIncludeCmsComponentConfig() { }
    if (false) {
        /** @type {?|undefined} */
        JspIncludeCmsComponentConfig.prototype.AccountAddressBookComponent;
        /** @type {?|undefined} */
        JspIncludeCmsComponentConfig.prototype.ForgotPasswordComponent;
        /** @type {?|undefined} */
        JspIncludeCmsComponentConfig.prototype.ResetPasswordComponent;
        /** @type {?|undefined} */
        JspIncludeCmsComponentConfig.prototype.ProductDetailsTabComponent;
        /** @type {?|undefined} */
        JspIncludeCmsComponentConfig.prototype.ProductSpecsTabComponent;
        /** @type {?|undefined} */
        JspIncludeCmsComponentConfig.prototype.ProductReviewsTabComponent;
    }
    /** @type {?} */
    var JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
    /** @type {?} */
    var CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
    /**
     * @record
     */
    function CmsComponentMapping() { }
    if (false) {
        /** @type {?|undefined} */
        CmsComponentMapping.prototype.component;
        /** @type {?|undefined} */
        CmsComponentMapping.prototype.providers;
        /** @type {?|undefined} */
        CmsComponentMapping.prototype.childRoutes;
        /** @type {?|undefined} */
        CmsComponentMapping.prototype.disableSSR;
        /** @type {?|undefined} */
        CmsComponentMapping.prototype.i18nKeys;
        /** @type {?|undefined} */
        CmsComponentMapping.prototype.guards;
        /**
         * DeferLoading can be specified globally, but also per component.
         * Some components require direct loading while it's not initially
         * in the viewport.
         * @type {?|undefined}
         */
        CmsComponentMapping.prototype.deferLoading;
    }
    /** @enum {string} */
    var DeferLoadingStrategy = {
        /** Defers loading of DOM elements until element is near/in the users view port */
        DEFER: 'DEFERRED-LOADING',
        /** Renders the DOM instantly without being concerned with the view port */
        INSTANT: 'INSTANT-LOADING',
    };
    /**
     * @record
     */
    function CMSComponentConfig() { }
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CmsConfig = /** @class */ (function (_super) {
        __extends(CmsConfig, _super);
        function CmsConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CmsConfig;
    }(OccConfig));
    if (false) {
        /** @type {?} */
        CmsConfig.prototype.authentication;
        /** @type {?} */
        CmsConfig.prototype.cmsComponents;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCmsPageNormalizer = /** @class */ (function () {
        function OccCmsPageNormalizer() {
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        OccCmsPageNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            if (target === void 0) { target = {}; }
            this.normalizePageData(source, target);
            this.normalizePageSlotData(source, target);
            this.normalizePageComponentData(source, target);
            this.normalizeComponentData(source, target);
            return target;
        };
        /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        OccCmsPageNormalizer.prototype.normalizePageData = /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        function (source, target) {
            target.page = {
                loadTime: Date.now(),
                name: source.name,
                type: source.typeCode,
                title: source.title,
                pageId: source.uid,
                template: source.template,
                slots: {},
                properties: source.properties,
                label: source.label,
            };
        };
        /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        OccCmsPageNormalizer.prototype.normalizePageSlotData = /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        function (source, target) {
            var e_1, _a;
            try {
                for (var _b = __values(source.contentSlots.contentSlot), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var slot = _c.value;
                    target.page.slots[slot.position] = (/** @type {?} */ ({
                        components: [],
                        properties: slot.properties,
                    }));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        OccCmsPageNormalizer.prototype.normalizePageComponentData = /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        function (source, target) {
            var e_2, _a, e_3, _b;
            try {
                for (var _c = __values(source.contentSlots.contentSlot), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var slot = _d.value;
                    if (slot.components.component &&
                        Array.isArray(slot.components.component)) {
                        try {
                            for (var _e = (e_3 = void 0, __values(slot.components.component)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var component = _f.value;
                                /** @type {?} */
                                var comp = {
                                    uid: component.uid,
                                    typeCode: component.typeCode,
                                    properties: component.properties,
                                };
                                if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {
                                    comp.flexType = component.flexType;
                                }
                                else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {
                                    comp.flexType = component.uid;
                                }
                                else {
                                    comp.flexType = component.typeCode;
                                }
                                target.page.slots[slot.position].components.push(comp);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        OccCmsPageNormalizer.prototype.normalizeComponentData = /**
         * @private
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        function (source, target) {
            var e_4, _a, e_5, _b;
            target.components = [];
            try {
                for (var _c = __values(source.contentSlots.contentSlot), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var slot = _d.value;
                    if (slot.components.component &&
                        Array.isArray(slot.components.component)) {
                        try {
                            for (var _e = (e_5 = void 0, __values((/** @type {?} */ (slot.components.component)))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var component = _f.value;
                                // we dont put properties into component state
                                if (component.properties) {
                                    component.properties = undefined;
                                }
                                target.components.push(component);
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_4) throw e_4.error; }
            }
        };
        OccCmsPageNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ OccCmsPageNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccCmsPageNormalizer_Factory() { return new OccCmsPageNormalizer(); }, token: OccCmsPageNormalizer, providedIn: "root" });
        return OccCmsPageNormalizer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Abstract class that can be used to implement custom loader logic
     * in order to load CMS structure from third-party CMS system.
     * @abstract
     */
    var   /**
     * Abstract class that can be used to implement custom loader logic
     * in order to load CMS structure from third-party CMS system.
     * @abstract
     */
    CmsPageAdapter = /** @class */ (function () {
        function CmsPageAdapter() {
        }
        return CmsPageAdapter;
    }());
    if (false) {
        /**
         * Abstract method must be used to load the page structure for a given `PageContext`.
         * The page can be loaded from alternative sources, as long as the structure
         * converts to the `CmsStructureModel`.
         *
         * @abstract
         * @param {?} pageContext The `PageContext` holding the page Id.
         * @return {?}
         */
        CmsPageAdapter.prototype.load = function (pageContext) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CmsComponentAdapter = /** @class */ (function () {
        function CmsComponentAdapter() {
        }
        return CmsComponentAdapter;
    }());
    if (false) {
        /**
         * Abstract method must be used to load the component for a given `id` and `PageContext`.
         * The component can be loaded from alternative backend, as long as the structure
         * converts to the `CmsStructureModel`.
         *
         * @abstract
         * @template T
         * @param {?} id
         * @param {?} pageContext The `PageContext` holding the page Id.
         * @param {?=} fields
         * @return {?}
         */
        CmsComponentAdapter.prototype.load = function (id, pageContext, fields) { };
        /**
         * @abstract
         * @param {?} ids
         * @param {?} pageContext
         * @return {?}
         */
        CmsComponentAdapter.prototype.findComponentsByIds = function (ids, pageContext) { };
        /**
         * @abstract
         * @param {?} ids
         * @param {?} pageContext
         * @return {?}
         */
        CmsComponentAdapter.prototype.findComponentsByIdsLegacy = function (ids, pageContext) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmsOccModule = /** @class */ (function () {
        function CmsOccModule() {
        }
        CmsOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, http.HttpClientModule],
                        providers: [
                            {
                                provide: CmsPageAdapter,
                                useClass: OccCmsPageAdapter,
                            },
                            {
                                provide: CMS_PAGE_NORMALIZER,
                                useExisting: OccCmsPageNormalizer,
                                multi: true,
                            },
                            {
                                provide: CmsComponentAdapter,
                                useClass: OccCmsComponentAdapter,
                            },
                        ],
                    },] }
        ];
        return CmsOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductImageNormalizer = /** @class */ (function () {
        function ProductImageNormalizer(config) {
            this.config = config;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        ProductImageNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source.images) {
                target.images = this.normalize(source.images);
            }
            return target;
        };
        /**
         * @desc
         * Creates the image structure we'd like to have. Instead of
         * having a single list with all images despite type and format
         * we create a proper structure. With that we can do:
         * - images.primary.thumnail.url
         * - images.GALLERY[0].thumnail.url
         */
        /**
         * @desc
         * Creates the image structure we'd like to have. Instead of
         * having a single list with all images despite type and format
         * we create a proper structure. With that we can do:
         * - images.primary.thumnail.url
         * - images.GALLERY[0].thumnail.url
         * @param {?} source
         * @return {?}
         */
        ProductImageNormalizer.prototype.normalize = /**
         * @desc
         * Creates the image structure we'd like to have. Instead of
         * having a single list with all images despite type and format
         * we create a proper structure. With that we can do:
         * - images.primary.thumnail.url
         * - images.GALLERY[0].thumnail.url
         * @param {?} source
         * @return {?}
         */
        function (source) {
            var e_1, _a;
            /** @type {?} */
            var images = {};
            if (source) {
                try {
                    for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
                        var image = source_1_1.value;
                        /** @type {?} */
                        var isList = image.hasOwnProperty('galleryIndex');
                        if (!images.hasOwnProperty(image.imageType)) {
                            images[image.imageType] = isList ? [] : {};
                        }
                        /** @type {?} */
                        var imageContainer = void 0;
                        if (isList && !images[image.imageType][image.galleryIndex]) {
                            images[image.imageType][image.galleryIndex] = {};
                        }
                        if (isList) {
                            imageContainer = images[image.imageType][image.galleryIndex];
                        }
                        else {
                            imageContainer = images[image.imageType];
                        }
                        /** @type {?} */
                        var targetImage = __assign({}, image);
                        targetImage.url = this.normalizeImageUrl(targetImage.url);
                        imageContainer[image.format] = targetImage;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return images;
        };
        /**
         * Traditionally, in an on-prem world, medias and other backend related calls
         * are hosted at the same platform, but in a cloud setup, applications are are
         * typically distributed cross different environments. For media, we use the
         * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`
         * if none provided.
         */
        /**
         * Traditionally, in an on-prem world, medias and other backend related calls
         * are hosted at the same platform, but in a cloud setup, applications are are
         * typically distributed cross different environments. For media, we use the
         * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`
         * if none provided.
         * @private
         * @param {?} url
         * @return {?}
         */
        ProductImageNormalizer.prototype.normalizeImageUrl = /**
         * Traditionally, in an on-prem world, medias and other backend related calls
         * are hosted at the same platform, but in a cloud setup, applications are are
         * typically distributed cross different environments. For media, we use the
         * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`
         * if none provided.
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (new RegExp(/^(http|data:image|\/\/)/i).test(url)) {
                return url;
            }
            return ((this.config.backend.media.baseUrl ||
                this.config.backend.occ.baseUrl ||
                '') + url);
        };
        ProductImageNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ProductImageNormalizer.ctorParameters = function () { return [
            { type: OccConfig }
        ]; };
        /** @nocollapse */ ProductImageNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductImageNormalizer_Factory() { return new ProductImageNormalizer(core.ɵɵinject(OccConfig)); }, token: ProductImageNormalizer, providedIn: "root" });
        return ProductImageNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductImageNormalizer.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductReferenceNormalizer = /** @class */ (function () {
        function ProductReferenceNormalizer() {
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        ProductReferenceNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source.productReferences) {
                target.productReferences = this.normalize(source.productReferences);
            }
            return target;
        };
        /**
         * @desc
         * Creates the reference structure we'd like to have. Instead of
         * having a single list with all references we create a proper structure.
         * With that we have a semantic API for the clients
         * - product.references.SIMILAR[0].code
         */
        /**
         * @desc
         * Creates the reference structure we'd like to have. Instead of
         * having a single list with all references we create a proper structure.
         * With that we have a semantic API for the clients
         * - product.references.SIMILAR[0].code
         * @protected
         * @param {?} source
         * @return {?}
         */
        ProductReferenceNormalizer.prototype.normalize = /**
         * @desc
         * Creates the reference structure we'd like to have. Instead of
         * having a single list with all references we create a proper structure.
         * With that we have a semantic API for the clients
         * - product.references.SIMILAR[0].code
         * @protected
         * @param {?} source
         * @return {?}
         */
        function (source) {
            var e_1, _a;
            /** @type {?} */
            var references = {};
            if (source) {
                try {
                    for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
                        var reference = source_1_1.value;
                        if (!references.hasOwnProperty(reference.referenceType)) {
                            references[reference.referenceType] = [];
                        }
                        references[reference.referenceType].push(reference);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return references;
        };
        ProductReferenceNormalizer.decorators = [
            { type: core.Injectable }
        ];
        return ProductReferenceNormalizer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccProductSearchPageNormalizer = /** @class */ (function () {
        function OccProductSearchPageNormalizer(converterService) {
            this.converterService = converterService;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        OccProductSearchPageNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            var _this = this;
            if (target === void 0) { target = {}; }
            target = __assign({}, target, ((/** @type {?} */ (source))));
            if (source.products) {
                target.products = source.products.map((/**
                 * @param {?} product
                 * @return {?}
                 */
                function (product) {
                    return _this.converterService.convert(product, PRODUCT_NORMALIZER);
                }));
            }
            return target;
        };
        OccProductSearchPageNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccProductSearchPageNormalizer.ctorParameters = function () { return [
            { type: ConverterService }
        ]; };
        /** @nocollapse */ OccProductSearchPageNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccProductSearchPageNormalizer_Factory() { return new OccProductSearchPageNormalizer(core.ɵɵinject(ConverterService)); }, token: OccProductSearchPageNormalizer, providedIn: "root" });
        return OccProductSearchPageNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccProductSearchPageNormalizer.prototype.converterService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccProductReferencesListNormalizer = /** @class */ (function () {
        function OccProductReferencesListNormalizer(converter) {
            this.converter = converter;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        OccProductReferencesListNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            var _this = this;
            if (target === void 0) { target = []; }
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source && source.references) {
                target = source.references.map((/**
                 * @param {?} reference
                 * @return {?}
                 */
                function (reference) { return (__assign({}, reference, { target: _this.converter.convert(reference.target, PRODUCT_NORMALIZER) })); }));
                return target;
            }
        };
        OccProductReferencesListNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccProductReferencesListNormalizer.ctorParameters = function () { return [
            { type: ConverterService }
        ]; };
        /** @nocollapse */ OccProductReferencesListNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccProductReferencesListNormalizer_Factory() { return new OccProductReferencesListNormalizer(core.ɵɵinject(ConverterService)); }, token: OccProductReferencesListNormalizer, providedIn: "root" });
        return OccProductReferencesListNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccProductReferencesListNormalizer.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductNameNormalizer = /** @class */ (function () {
        function ProductNameNormalizer(config) {
            this.config = config;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        ProductNameNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source.name) {
                target.name = this.normalize(source.name);
                target.nameHtml = source.name;
            }
            return target;
        };
        /**
         * @protected
         * @param {?} name
         * @return {?}
         */
        ProductNameNormalizer.prototype.normalize = /**
         * @protected
         * @param {?} name
         * @return {?}
         */
        function (name) {
            return name.replace(/<[^>]*>/g, '');
        };
        ProductNameNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ProductNameNormalizer.ctorParameters = function () { return [
            { type: OccConfig }
        ]; };
        /** @nocollapse */ ProductNameNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductNameNormalizer_Factory() { return new ProductNameNormalizer(core.ɵɵinject(OccConfig)); }, token: ProductNameNormalizer, providedIn: "root" });
        return ProductNameNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductNameNormalizer.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PRODUCT_REFERENCES_NORMALIZER = new core.InjectionToken('ProductReferencesListNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccProductReferencesAdapter = /** @class */ (function () {
        function OccProductReferencesAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} productCode
         * @param {?=} referenceType
         * @param {?=} pageSize
         * @return {?}
         */
        OccProductReferencesAdapter.prototype.load = /**
         * @param {?} productCode
         * @param {?=} referenceType
         * @param {?=} pageSize
         * @return {?}
         */
        function (productCode, referenceType, pageSize) {
            return this.http
                .get(this.getEndpoint(productCode, referenceType, pageSize))
                .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));
        };
        /**
         * @protected
         * @param {?} code
         * @param {?=} reference
         * @param {?=} pageSize
         * @return {?}
         */
        OccProductReferencesAdapter.prototype.getEndpoint = /**
         * @protected
         * @param {?} code
         * @param {?=} reference
         * @param {?=} pageSize
         * @return {?}
         */
        function (code, reference, pageSize) {
            return this.occEndpoints.getUrl('productReferences', {
                productCode: code,
            }, { referenceType: reference, pageSize: pageSize });
        };
        OccProductReferencesAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccProductReferencesAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccProductReferencesAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccProductReferencesAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccProductReferencesAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccProductReferencesAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PRODUCT_REVIEW_NORMALIZER = new core.InjectionToken('ProductReviewNormalizer');
    /** @type {?} */
    var PRODUCT_REVIEW_SERIALIZER = new core.InjectionToken('ProductReviewSerializer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccProductReviewsAdapter = /** @class */ (function () {
        function OccProductReviewsAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} productCode
         * @param {?=} maxCount
         * @return {?}
         */
        OccProductReviewsAdapter.prototype.load = /**
         * @param {?} productCode
         * @param {?=} maxCount
         * @return {?}
         */
        function (productCode, maxCount) {
            return this.http.get(this.getEndpoint(productCode, maxCount)).pipe(operators.pluck('reviews'), this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER));
        };
        /**
         * @param {?} productCode
         * @param {?} review
         * @return {?}
         */
        OccProductReviewsAdapter.prototype.post = /**
         * @param {?} productCode
         * @param {?} review
         * @return {?}
         */
        function (productCode, review) {
            review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            /** @type {?} */
            var body = new URLSearchParams();
            body.append('headline', review.headline);
            body.append('comment', review.comment);
            body.append('rating', review.rating.toString());
            body.append('alias', review.alias);
            return this.http.post(this.getEndpoint(productCode), body.toString(), {
                headers: headers,
            });
        };
        /**
         * @protected
         * @param {?} code
         * @param {?=} maxCount
         * @return {?}
         */
        OccProductReviewsAdapter.prototype.getEndpoint = /**
         * @protected
         * @param {?} code
         * @param {?=} maxCount
         * @return {?}
         */
        function (code, maxCount) {
            return this.occEndpoints.getUrl('productReviews', {
                productCode: code,
            }, { maxCount: maxCount });
        };
        OccProductReviewsAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccProductReviewsAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccProductReviewsAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccProductReviewsAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccProductReviewsAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccProductReviewsAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PRODUCT_SEARCH_PAGE_NORMALIZER = new core.InjectionToken('ProductSearchPageNormalizer');
    /** @type {?} */
    var PRODUCT_SUGGESTION_NORMALIZER = new core.InjectionToken('ProductSuggestionNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_SEARCH_CONFIG = {
        pageSize: 20,
    };
    var OccProductSearchAdapter = /** @class */ (function () {
        function OccProductSearchAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        OccProductSearchAdapter.prototype.search = /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        function (query, searchConfig) {
            if (searchConfig === void 0) { searchConfig = DEFAULT_SEARCH_CONFIG; }
            return this.http
                .get(this.getSearchEndpoint(query, searchConfig))
                .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));
        };
        /**
         * @param {?} term
         * @param {?=} pageSize
         * @return {?}
         */
        OccProductSearchAdapter.prototype.loadSuggestions = /**
         * @param {?} term
         * @param {?=} pageSize
         * @return {?}
         */
        function (term, pageSize) {
            if (pageSize === void 0) { pageSize = 3; }
            return this.http
                .get(this.getSuggestionEndpoint(term, pageSize.toString()))
                .pipe(operators.pluck('suggestions'), this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER));
        };
        /**
         * @protected
         * @param {?} query
         * @param {?} searchConfig
         * @return {?}
         */
        OccProductSearchAdapter.prototype.getSearchEndpoint = /**
         * @protected
         * @param {?} query
         * @param {?} searchConfig
         * @return {?}
         */
        function (query, searchConfig) {
            return this.occEndpoints.getUrl('productSearch', {}, {
                query: query,
                pageSize: searchConfig.pageSize,
                currentPage: searchConfig.currentPage,
                sort: searchConfig.sortCode,
            });
        };
        /**
         * @protected
         * @param {?} term
         * @param {?} max
         * @return {?}
         */
        OccProductSearchAdapter.prototype.getSuggestionEndpoint = /**
         * @protected
         * @param {?} term
         * @param {?} max
         * @return {?}
         */
        function (term, max) {
            return this.occEndpoints.getUrl('productSuggestions', {}, { term: term, max: max });
        };
        OccProductSearchAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccProductSearchAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccProductSearchAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccProductSearchAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccProductSearchAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccProductSearchAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Merge occ fields parameters
     *
     * @param {?} fields Fields definition as string or object
     * @return {?}
     */
    function mergeFields(fields) {
        /** @type {?} */
        var parsedFields = fields.map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            return typeof f === 'string' ? parseFields(f) : f;
        }));
        /** @type {?} */
        var mergedFields = optimizeFields(deepMerge.apply(void 0, __spread([{}], parsedFields)));
        return stringifyFields(mergedFields);
    }
    /**
     * Optimize fields definition by removing not needed groups
     *
     * @param {?=} fields
     * @return {?}
     */
    function optimizeFields(fields) {
        if (fields === void 0) { fields = {}; }
        /** @type {?} */
        var keys = Object.keys(fields);
        if (keys.includes('FULL')) {
            delete fields['DEFAULT'];
            delete fields['BASIC'];
        }
        else if (keys.includes('DEFAULT')) {
            delete fields['BASIC'];
        }
        Object.keys(fields).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            fields[key] = optimizeFields(fields[key]);
        }));
        return fields;
    }
    /**
     * Parse string field definition to an AST object
     *
     * @param {?} fields Fields string definition
     * @param {?=} startIndex Used for recurrence
     * @return {?}
     */
    function parseFields(fields, startIndex) {
        if (startIndex === void 0) { startIndex = 0; }
        /** @type {?} */
        var parsedFields = {};
        /** @type {?} */
        var i = startIndex;
        while (i < fields.length) {
            if (fields[i] === ',') {
                if (i > startIndex) {
                    parsedFields[fields.substr(startIndex, i - startIndex)] = {};
                }
                startIndex = i + 1;
            }
            else if (fields[i] === '(') {
                /** @type {?} */
                var subFields = parseFields(fields, i + 1);
                if (Array.isArray(subFields)) {
                    parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];
                    startIndex = subFields[1];
                    i = startIndex - 1;
                }
                else {
                    return parsedFields;
                }
            }
            else if (fields[i] === ')') {
                if (i > startIndex) {
                    parsedFields[fields.substr(startIndex, i - startIndex)] = {};
                }
                return [parsedFields, i + 1];
            }
            i++;
        }
        if (startIndex < fields.length) {
            parsedFields[fields.substr(startIndex, i - startIndex)] = {};
        }
        return parsedFields;
    }
    /**
     * Convert AST object fields definition to string representation
     *
     * @param {?} fields
     * @return {?}
     */
    function stringifyFields(fields) {
        return Object.keys(fields)
            .map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var subFields = stringifyFields(fields[key]);
            return subFields ? key + "(" + subFields + ")" : key;
        }))
            .join(',');
    }
    /**
     * Extract part of the object described by fields definition
     *
     * @template T
     * @param {?} data
     * @param {?} fields
     * @return {?}
     */
    function extractFields(data, fields) {
        /** @type {?} */
        var parsedFields = typeof fields === 'string' ? parseFields(fields) : fields;
        return getObjectPart(data, parsedFields);
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} fields
     * @return {?}
     */
    function getObjectPart(data, fields) {
        if (!isObject(data)) {
            return data;
        }
        /** @type {?} */
        var keys = Object.keys(fields);
        if (keys.length === 0 ||
            // we should not extract parts of the object with ambiguous fields definitions
            keys.find((/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return el === 'BASIC' || el === 'DEFAULT' || el === 'FULL'; }))) {
            return data;
        }
        /** @type {?} */
        var result = (/** @type {?} */ ({}));
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (data.hasOwnProperty(key)) {
                result[key] = getObjectPart(data[key], fields[key]);
            }
        }));
        return result;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ScopedDataWithUrl() { }
    if (false) {
        /**
         * Url (with fields) to load scoped data
         * @type {?|undefined}
         */
        ScopedDataWithUrl.prototype.url;
        /**
         * scoped data model
         * @type {?}
         */
        ScopedDataWithUrl.prototype.scopedData;
    }
    /**
     * Intermediate model to accommodate all data needed to perform occ fields optimizations
     * wrapping ScopedData with url and fields
     * @record
     */
    function OccFieldsModel() { }
    if (false) {
        /**
         * extracted fields object, used to extract data from broader model
         * @type {?|undefined}
         */
        OccFieldsModel.prototype.fields;
    }
    /**
     * Grouped rest calls with optimal urls
     *
     * One url groups all scopes it covers with related occFieldsModels
     * @record
     */
    function OccOptimimalUrlGroups() { }
    /**
     * Helper service for optimizing endpoint calls to occ backend
     */
    var OccFieldsService = /** @class */ (function () {
        function OccFieldsService(http) {
            this.http = http;
            this.FIELDS_PARAM = 'fields';
        }
        /**
         * Merge similar occ endpoints calls by merging fields parameter
         *
         * We assume that different scopes are defined by different fields parameters,
         * so we are grouping all requests with the same urls (except fields definition)
         * and merging into one request with fields that will satisfy all separate ones.
         *
         * @param models
         */
        /**
         * Merge similar occ endpoints calls by merging fields parameter
         *
         * We assume that different scopes are defined by different fields parameters,
         * so we are grouping all requests with the same urls (except fields definition)
         * and merging into one request with fields that will satisfy all separate ones.
         *
         * @param {?} models
         * @return {?}
         */
        OccFieldsService.prototype.getOptimalUrlGroups = /**
         * Merge similar occ endpoints calls by merging fields parameter
         *
         * We assume that different scopes are defined by different fields parameters,
         * so we are grouping all requests with the same urls (except fields definition)
         * and merging into one request with fields that will satisfy all separate ones.
         *
         * @param {?} models
         * @return {?}
         */
        function (models) {
            var e_1, _a, e_2, _b;
            /** @type {?} */
            var groupedByUrls = {};
            try {
                for (var _c = __values((/** @type {?} */ (models))), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var model = _d.value;
                    var _e = __read(this.splitFields(model.url), 2), urlPart = _e[0], fields = _e[1];
                    if (!groupedByUrls[urlPart]) {
                        groupedByUrls[urlPart] = {};
                    }
                    model.fields = fields ? parseFields(fields) : {};
                    groupedByUrls[urlPart][model.scopedData.scope] = model;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            /** @type {?} */
            var mergedUrls = {};
            try {
                for (var _f = __values(Object.entries(groupedByUrls)), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read(_g.value, 2), url = _h[0], group = _h[1];
                    /** @type {?} */
                    var urlWithFields = this.getUrlWithFields(url, Object.values(group).map((/**
                     * @param {?} lo
                     * @return {?}
                     */
                    function (lo) { return lo.fields; })));
                    mergedUrls[urlWithFields] = group;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return mergedUrls;
        };
        /**
         * Extract fields parameter from occ endpoint url
         *
         * @param urlWithFields
         */
        /**
         * Extract fields parameter from occ endpoint url
         *
         * @private
         * @param {?} urlWithFields
         * @return {?}
         */
        OccFieldsService.prototype.splitFields = /**
         * Extract fields parameter from occ endpoint url
         *
         * @private
         * @param {?} urlWithFields
         * @return {?}
         */
        function (urlWithFields) {
            var _this = this;
            var _a = __read(urlWithFields.split('?'), 2), url = _a[0], params = _a[1];
            /** @type {?} */
            var paramsMap = {};
            if (params) {
                params.split('&').map((/**
                 * @param {?} param
                 * @return {?}
                 */
                function (param) {
                    /** @type {?} */
                    var keyValue = param.split('=');
                    paramsMap[keyValue[0]] = keyValue[1];
                }));
            }
            /** @type {?} */
            var nonFieldsParams = Object.keys(paramsMap)
                .sort()
                .reduce((/**
             * @param {?} id
             * @param {?} par
             * @return {?}
             */
            function (id, par) {
                if (par !== _this.FIELDS_PARAM) {
                    id.push(paramsMap[par] ? par + "=" + paramsMap[par] : par);
                }
                return id;
            }), []);
            /** @type {?} */
            var nonFields = nonFieldsParams.join('&');
            return [
                nonFields ? url + "?" + nonFields : url,
                paramsMap[this.FIELDS_PARAM],
            ];
        };
        /**
         * Combine url with field parameters
         *
         * @param url
         * @param fields
         */
        /**
         * Combine url with field parameters
         *
         * @private
         * @param {?} url
         * @param {?} fields
         * @return {?}
         */
        OccFieldsService.prototype.getUrlWithFields = /**
         * Combine url with field parameters
         *
         * @private
         * @param {?} url
         * @param {?} fields
         * @return {?}
         */
        function (url, fields) {
            /** @type {?} */
            var mergedFields = mergeFields(fields);
            if (mergedFields) {
                url += url.includes('?') ? '&' : '?';
                url += this.FIELDS_PARAM + "=" + mergedFields;
            }
            return url;
        };
        OccFieldsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        OccFieldsService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ OccFieldsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccFieldsService_Factory() { return new OccFieldsService(core.ɵɵinject(http.HttpClient)); }, token: OccFieldsService, providedIn: "root" });
        return OccFieldsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccFieldsService.prototype.FIELDS_PARAM;
        /**
         * @type {?}
         * @protected
         */
        OccFieldsService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccRequestsOptimizerService = /** @class */ (function () {
        function OccRequestsOptimizerService(http, occFields) {
            this.http = http;
            this.occFields = occFields;
        }
        /**
         * Optimize occ endpoint calls merging requests to the same url by merging field parameters
         *
         * @param scopedDataWithUrls
         * @param dataFactory
         */
        /**
         * Optimize occ endpoint calls merging requests to the same url by merging field parameters
         *
         * @template T
         * @param {?} scopedDataWithUrls
         * @param {?=} dataFactory
         * @return {?}
         */
        OccRequestsOptimizerService.prototype.scopedDataLoad = /**
         * Optimize occ endpoint calls merging requests to the same url by merging field parameters
         *
         * @template T
         * @param {?} scopedDataWithUrls
         * @param {?=} dataFactory
         * @return {?}
         */
        function (scopedDataWithUrls, dataFactory) {
            var _this = this;
            /** @type {?} */
            var result = [];
            if (!dataFactory) {
                dataFactory = (/**
                 * @param {?} url
                 * @return {?}
                 */
                function (url) { return _this.http.get(url); });
            }
            /** @type {?} */
            var mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);
            Object.entries(mergedUrls).forEach((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), url = _b[0], groupedModelsSet = _b[1];
                /** @type {?} */
                var groupedModels = Object.values(groupedModelsSet);
                if (groupedModels.length === 1) {
                    // only one scope for url, we can pass the data straightaway
                    result.push(__assign({}, groupedModels[0].scopedData, { data$: dataFactory(url) }));
                }
                else {
                    // multiple scopes per url
                    // we have to split the model per each scope
                    /** @type {?} */
                    var data$_1 = dataFactory(url).pipe(operators.shareReplay(1), 
                    // TODO deprecated since 1.4, remove
                    operators.map((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) { return JSON.parse(JSON.stringify(data)); })));
                    groupedModels.forEach((/**
                     * @param {?} modelData
                     * @return {?}
                     */
                    function (modelData) {
                        result.push(__assign({}, modelData.scopedData, { data$: data$_1.pipe(operators.map((/**
                             * @param {?} data
                             * @return {?}
                             */
                            function (data) { return extractFields(data, modelData.fields); }))) }));
                    }));
                }
            }));
            return result;
        };
        OccRequestsOptimizerService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        OccRequestsOptimizerService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccFieldsService }
        ]; };
        /** @nocollapse */ OccRequestsOptimizerService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccRequestsOptimizerService_Factory() { return new OccRequestsOptimizerService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(OccFieldsService)); }, token: OccRequestsOptimizerService, providedIn: "root" });
        return OccRequestsOptimizerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccRequestsOptimizerService.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccRequestsOptimizerService.prototype.occFields;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccProductAdapter = /** @class */ (function () {
        function OccProductAdapter(http, occEndpoints, converter, requestsOptimizer) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            this.requestsOptimizer = requestsOptimizer;
        }
        /**
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        OccProductAdapter.prototype.load = /**
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        function (productCode, scope) {
            return this.http
                .get(this.getEndpoint(productCode, scope))
                .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));
        };
        /**
         * @param {?} products
         * @return {?}
         */
        OccProductAdapter.prototype.loadMany = /**
         * @param {?} products
         * @return {?}
         */
        function (products) {
            var _this = this;
            /** @type {?} */
            var scopedDataWithUrls = products.map((/**
             * @param {?} model
             * @return {?}
             */
            function (model) { return ({
                scopedData: model,
                url: _this.getEndpoint(model.code, model.scope),
            }); }));
            return this.requestsOptimizer
                .scopedDataLoad(scopedDataWithUrls)
                .map((/**
             * @param {?} scopedProduct
             * @return {?}
             */
            function (scopedProduct) {
                return ((/** @type {?} */ (__assign({}, scopedProduct, { data$: scopedProduct.data$.pipe(_this.converter.pipeable(PRODUCT_NORMALIZER)) }))));
            }));
        };
        /**
         * @protected
         * @param {?} code
         * @param {?=} scope
         * @return {?}
         */
        OccProductAdapter.prototype.getEndpoint = /**
         * @protected
         * @param {?} code
         * @param {?=} scope
         * @return {?}
         */
        function (code, scope) {
            return this.occEndpoints.getUrl('product', {
                productCode: code,
            }, undefined, scope);
        };
        OccProductAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccProductAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService },
            { type: OccRequestsOptimizerService }
        ]; };
        return OccProductAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccProductAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccProductAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccProductAdapter.prototype.converter;
        /**
         * @type {?}
         * @protected
         */
        OccProductAdapter.prototype.requestsOptimizer;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    ProductAdapter = /** @class */ (function () {
        function ProductAdapter() {
        }
        return ProductAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load product's details data.
         * Product's data can be loaded from alternative sources, as long as the structure
         * converts to the `Product`.
         *
         * @abstract
         * @param {?} productCode The `productCode` for given product
         * @param {?=} scope The product scope to load
         * @return {?}
         */
        ProductAdapter.prototype.load = function (productCode, scope) { };
        /**
         * Abstract method used to load data for multiple product and scopes
         * Adapter is able to optimize necessary backend calls and load
         * products in the most efficient way possible.
         *
         * @abstract
         * @param {?} products
         * @return {?}
         */
        ProductAdapter.prototype.loadMany = function (products) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    ProductReferencesAdapter = /** @class */ (function () {
        function ProductReferencesAdapter() {
        }
        return ProductReferencesAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load product references for a given product.
         * References can be loaded from alternative sources, as long as the structure
         * converts to the `ProductReference[]`.
         *
         * @abstract
         * @param {?} productCode The `productCode` for given product
         * @param {?=} referenceType Reference type according to enum ProductReferenceTypeEnum
         * @param {?=} pageSize Maximum number of product refrence to load
         * @return {?}
         */
        ProductReferencesAdapter.prototype.load = function (productCode, referenceType, pageSize) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    ProductReviewsAdapter = /** @class */ (function () {
        function ProductReviewsAdapter() {
        }
        return ProductReviewsAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load reviews for a given product.
         * Reviews can be loaded from alternative sources, as long as the structure
         * converts to the `Review[]`.
         *
         * @abstract
         * @param {?} productCode The `productCode` for given product
         * @param {?=} maxCount Maximum number of review to load
         * @return {?}
         */
        ProductReviewsAdapter.prototype.load = function (productCode, maxCount) { };
        /**
         * Abstract method used to post review for a given product.
         *
         * @abstract
         * @param {?} productCode The `productCode` for given product
         * @param {?} review Review to post
         * @return {?}
         */
        ProductReviewsAdapter.prototype.post = function (productCode, review) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    ProductSearchAdapter = /** @class */ (function () {
        function ProductSearchAdapter() {
        }
        return ProductSearchAdapter;
    }());
    if (false) {
        /**
         * @abstract
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        ProductSearchAdapter.prototype.search = function (query, searchConfig) { };
        /**
         * @abstract
         * @param {?} term
         * @param {?=} pageSize
         * @return {?}
         */
        ProductSearchAdapter.prototype.loadSuggestions = function (term, pageSize) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ProductScope = {
        LIST: 'list',
        DETAILS: 'details',
        ATTRIBUTES: 'attributes',
        VARIANTS: 'variants',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultOccProductConfig = {
        backend: {
            occ: {
                endpoints: {
                    product: 'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',
                    product_scopes: {
                        list: 'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',
                        details: 'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',
                        attributes: 'products/${productCode}?fields=classifications',
                        variants: 'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',
                    },
                    productReviews: 'products/${productCode}/reviews',
                    // Uncomment this when occ gets configured
                    // productReferences:
                    //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',
                    productReferences: 'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',
                    // tslint:disable:max-line-length
                    productSearch: 'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch',
                    // tslint:enable
                    productSuggestions: 'products/suggestions',
                },
            },
            loadingScopes: {
                product: {
                    details: {
                        include: [ProductScope.LIST, ProductScope.VARIANTS],
                    },
                },
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ProductScopesConfig() { }
    if (false) {
        /** @type {?|undefined} */
        ProductScopesConfig.prototype.list;
        /** @type {?|undefined} */
        ProductScopesConfig.prototype.details;
        /** @type {?|undefined} */
        ProductScopesConfig.prototype.attributes;
        /** @type {?|undefined} */
        ProductScopesConfig.prototype.variants;
        /* Skipping unhandled member: [scope: string]: ProductLoadingScopeConfig;*/
    }
    /**
     * @record
     */
    function ProductLoadingScopeConfig() { }
    if (false) {
        /** @type {?|undefined} */
        ProductLoadingScopeConfig.prototype.include;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductOccModule = /** @class */ (function () {
        function ProductOccModule() {
        }
        ProductOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            ConfigModule.withConfig(defaultOccProductConfig),
                        ],
                        providers: [
                            {
                                provide: ProductAdapter,
                                useClass: OccProductAdapter,
                            },
                            {
                                provide: PRODUCT_NORMALIZER,
                                useExisting: ProductImageNormalizer,
                                multi: true,
                            },
                            {
                                provide: PRODUCT_NORMALIZER,
                                useExisting: ProductNameNormalizer,
                                multi: true,
                            },
                            {
                                provide: ProductReferencesAdapter,
                                useClass: OccProductReferencesAdapter,
                            },
                            {
                                provide: PRODUCT_REFERENCES_NORMALIZER,
                                useExisting: OccProductReferencesListNormalizer,
                                multi: true,
                            },
                            {
                                provide: ProductSearchAdapter,
                                useClass: OccProductSearchAdapter,
                            },
                            {
                                provide: PRODUCT_SEARCH_PAGE_NORMALIZER,
                                useExisting: OccProductSearchPageNormalizer,
                                multi: true,
                            },
                            {
                                provide: ProductReviewsAdapter,
                                useClass: OccProductReviewsAdapter,
                            },
                        ],
                    },] }
        ];
        return ProductOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LANGUAGE_NORMALIZER = new core.InjectionToken('LanguageNormalizer');
    /** @type {?} */
    var CURRENCY_NORMALIZER = new core.InjectionToken('CurrencyNormalizer');
    /** @type {?} */
    var COUNTRY_NORMALIZER = new core.InjectionToken('CountryNormalizer');
    /** @type {?} */
    var REGION_NORMALIZER = new core.InjectionToken('RegionNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccSiteAdapter = /** @class */ (function () {
        function OccSiteAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        /**
         * @return {?}
         */
        OccSiteAdapter.prototype.loadLanguages = /**
         * @return {?}
         */
        function () {
            return this.http
                .get(this.occEndpointsService.getUrl('languages'))
                .pipe(operators.map((/**
             * @param {?} languageList
             * @return {?}
             */
            function (languageList) { return languageList.languages; })), this.converterService.pipeableMany(LANGUAGE_NORMALIZER));
        };
        /**
         * @return {?}
         */
        OccSiteAdapter.prototype.loadCurrencies = /**
         * @return {?}
         */
        function () {
            return this.http
                .get(this.occEndpointsService.getUrl('currencies'))
                .pipe(operators.map((/**
             * @param {?} currencyList
             * @return {?}
             */
            function (currencyList) { return currencyList.currencies; })), this.converterService.pipeableMany(CURRENCY_NORMALIZER));
        };
        /**
         * @param {?=} type
         * @return {?}
         */
        OccSiteAdapter.prototype.loadCountries = /**
         * @param {?=} type
         * @return {?}
         */
        function (type) {
            return this.http
                .get(this.occEndpointsService.getUrl('countries', undefined, type ? { type: type } : undefined))
                .pipe(operators.map((/**
             * @param {?} countryList
             * @return {?}
             */
            function (countryList) { return countryList.countries; })), this.converterService.pipeableMany(COUNTRY_NORMALIZER));
        };
        /**
         * @param {?} countryIsoCode
         * @return {?}
         */
        OccSiteAdapter.prototype.loadRegions = /**
         * @param {?} countryIsoCode
         * @return {?}
         */
        function (countryIsoCode) {
            return this.http
                .get(this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode }))
                .pipe(operators.map((/**
             * @param {?} regionList
             * @return {?}
             */
            function (regionList) { return regionList.regions; })), this.converterService.pipeableMany(REGION_NORMALIZER));
        };
        /**
         * @return {?}
         */
        OccSiteAdapter.prototype.loadBaseSite = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var baseUrl = this.occEndpointsService.getBaseEndpoint();
            /** @type {?} */
            var urlSplits = baseUrl.split('/');
            /** @type {?} */
            var activeSite = urlSplits.pop();
            /** @type {?} */
            var url = urlSplits.join('/') + '/basesites';
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: 'fields=FULL',
            });
            return this.http
                .get(url, { params: params })
                .pipe(operators.map((/**
             * @param {?} siteList
             * @return {?}
             */
            function (siteList) {
                return siteList.baseSites.find((/**
                 * @param {?} site
                 * @return {?}
                 */
                function (site) { return site.uid === activeSite; }));
            })));
        };
        OccSiteAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccSiteAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccSiteAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccSiteAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccSiteAdapter.prototype.occEndpointsService;
        /**
         * @type {?}
         * @protected
         */
        OccSiteAdapter.prototype.converterService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    SiteAdapter = /** @class */ (function () {
        function SiteAdapter() {
        }
        return SiteAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load languages.
         * @abstract
         * @return {?}
         */
        SiteAdapter.prototype.loadLanguages = function () { };
        /**
         * Abstract method used to load currencies.
         * @abstract
         * @return {?}
         */
        SiteAdapter.prototype.loadCurrencies = function () { };
        /**
         * Abstract method used to get countries with optional type.
         * @abstract
         * @param {?=} type
         * @return {?}
         */
        SiteAdapter.prototype.loadCountries = function (type) { };
        /**
         * Abstract method used to get regions for a country.
         * @abstract
         * @param {?} countryIsoCode
         * @return {?}
         */
        SiteAdapter.prototype.loadRegions = function (countryIsoCode) { };
        /**
         * Abstract method used to get base site data.
         * @abstract
         * @return {?}
         */
        SiteAdapter.prototype.loadBaseSite = function () { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultOccSiteContextConfig = {
        backend: {
            occ: {
                endpoints: {
                    languages: 'languages',
                    currencies: 'currencies',
                    countries: 'countries',
                    regions: 'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',
                },
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Facade that provides easy access to curreny state, actions and selectors.
     */
    var CurrencyService = /** @class */ (function () {
        function CurrencyService(store, winRef, config) {
            this.store = store;
            this.config = config;
            this.sessionStorage = winRef.sessionStorage;
        }
        /**
         * Represents all the currencies supported by the current store.
         */
        /**
         * Represents all the currencies supported by the current store.
         * @return {?}
         */
        CurrencyService.prototype.getAll = /**
         * Represents all the currencies supported by the current store.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.store.pipe(store.select(getAllCurrencies), operators.tap((/**
             * @param {?} currencies
             * @return {?}
             */
            function (currencies) {
                if (!currencies) {
                    _this.store.dispatch(new LoadCurrencies());
                }
            })), operators.filter((/**
             * @param {?} currenies
             * @return {?}
             */
            function (currenies) { return Boolean(currenies); })));
        };
        /**
         * Represents the isocode of the active currency.
         */
        /**
         * Represents the isocode of the active currency.
         * @return {?}
         */
        CurrencyService.prototype.getActive = /**
         * Represents the isocode of the active currency.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getActiveCurrency), operators.filter((/**
             * @param {?} active
             * @return {?}
             */
            function (active) { return Boolean(active); })));
        };
        /**
         * Sets the active language.
         */
        /**
         * Sets the active language.
         * @param {?} isocode
         * @return {?}
         */
        CurrencyService.prototype.setActive = /**
         * Sets the active language.
         * @param {?} isocode
         * @return {?}
         */
        function (isocode) {
            var _this = this;
            return this.store
                .pipe(store.select(getActiveCurrency), operators.take(1))
                .subscribe((/**
             * @param {?} activeCurrency
             * @return {?}
             */
            function (activeCurrency) {
                if (activeCurrency !== isocode) {
                    _this.store.dispatch(new SetActiveCurrency(isocode));
                }
            }));
        };
        /**
         * Initials the active currency. The active currency is either given
         * by the last visit (stored in session storage) or by the
         * default session currency of the store.
         */
        /**
         * Initials the active currency. The active currency is either given
         * by the last visit (stored in session storage) or by the
         * default session currency of the store.
         * @return {?}
         */
        CurrencyService.prototype.initialize = /**
         * Initials the active currency. The active currency is either given
         * by the last visit (stored in session storage) or by the
         * default session currency of the store.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var sessionCurrency = this.sessionStorage && this.sessionStorage.getItem('currency');
            if (sessionCurrency &&
                getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(sessionCurrency)) {
                this.setActive(sessionCurrency);
            }
            else {
                this.setActive(getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID));
            }
        };
        CurrencyService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CurrencyService.ctorParameters = function () { return [
            { type: store.Store },
            { type: WindowRef },
            { type: SiteContextConfig }
        ]; };
        return CurrencyService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CurrencyService.prototype.sessionStorage;
        /**
         * @type {?}
         * @protected
         */
        CurrencyService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        CurrencyService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Facade that provides easy access to language state, actions and selectors.
     */
    var LanguageService = /** @class */ (function () {
        function LanguageService(store, winRef, config) {
            this.store = store;
            this.config = config;
            this.sessionStorage = winRef.sessionStorage;
        }
        /**
         * Represents all the languages supported by the current store.
         */
        /**
         * Represents all the languages supported by the current store.
         * @return {?}
         */
        LanguageService.prototype.getAll = /**
         * Represents all the languages supported by the current store.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.store.pipe(store.select(getAllLanguages), operators.tap((/**
             * @param {?} languages
             * @return {?}
             */
            function (languages) {
                if (!languages) {
                    _this.store.dispatch(new LoadLanguages());
                }
            })), operators.filter((/**
             * @param {?} languages
             * @return {?}
             */
            function (languages) { return Boolean(languages); })));
        };
        /**
         * Represents the isocode of the active language.
         */
        /**
         * Represents the isocode of the active language.
         * @return {?}
         */
        LanguageService.prototype.getActive = /**
         * Represents the isocode of the active language.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getActiveLanguage), operators.filter((/**
             * @param {?} active
             * @return {?}
             */
            function (active) { return Boolean(active); })));
        };
        /**
         * Sets the active language.
         */
        /**
         * Sets the active language.
         * @param {?} isocode
         * @return {?}
         */
        LanguageService.prototype.setActive = /**
         * Sets the active language.
         * @param {?} isocode
         * @return {?}
         */
        function (isocode) {
            var _this = this;
            return this.store
                .pipe(store.select(getActiveLanguage), operators.take(1))
                .subscribe((/**
             * @param {?} activeLanguage
             * @return {?}
             */
            function (activeLanguage) {
                if (activeLanguage !== isocode) {
                    _this.store.dispatch(new SetActiveLanguage(isocode));
                }
            }));
        };
        /**
         * Initials the active language. The active language is either given
         * by the last visit (stored in session storage) or by the
         * default session language of the store.
         */
        /**
         * Initials the active language. The active language is either given
         * by the last visit (stored in session storage) or by the
         * default session language of the store.
         * @return {?}
         */
        LanguageService.prototype.initialize = /**
         * Initials the active language. The active language is either given
         * by the last visit (stored in session storage) or by the
         * default session language of the store.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var sessionLanguage = this.sessionStorage && this.sessionStorage.getItem('language');
            if (sessionLanguage &&
                getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(sessionLanguage)) {
                this.setActive(sessionLanguage);
            }
            else {
                this.setActive(getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID));
            }
        };
        LanguageService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LanguageService.ctorParameters = function () { return [
            { type: store.Store },
            { type: WindowRef },
            { type: SiteContextConfig }
        ]; };
        return LanguageService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        LanguageService.prototype.sessionStorage;
        /**
         * @type {?}
         * @protected
         */
        LanguageService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        LanguageService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SiteContextInterceptor = /** @class */ (function () {
        function SiteContextInterceptor(languageService, currencyService, occEndpoints, config) {
            var _this = this;
            this.languageService = languageService;
            this.currencyService = currencyService;
            this.occEndpoints = occEndpoints;
            this.config = config;
            this.activeLang = getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID);
            this.activeCurr = getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID);
            this.languageService
                .getActive()
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return (_this.activeLang = data); }));
            this.currencyService.getActive().subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.activeCurr = data;
            }));
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        SiteContextInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {
                request = request.clone({
                    setParams: {
                        lang: this.activeLang,
                        curr: this.activeCurr,
                    },
                });
            }
            return next.handle(request);
        };
        SiteContextInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        SiteContextInterceptor.ctorParameters = function () { return [
            { type: LanguageService },
            { type: CurrencyService },
            { type: OccEndpointsService },
            { type: SiteContextConfig }
        ]; };
        /** @nocollapse */ SiteContextInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SiteContextInterceptor_Factory() { return new SiteContextInterceptor(core.ɵɵinject(LanguageService), core.ɵɵinject(CurrencyService), core.ɵɵinject(OccEndpointsService), core.ɵɵinject(SiteContextConfig)); }, token: SiteContextInterceptor, providedIn: "root" });
        return SiteContextInterceptor;
    }());
    if (false) {
        /** @type {?} */
        SiteContextInterceptor.prototype.activeLang;
        /** @type {?} */
        SiteContextInterceptor.prototype.activeCurr;
        /**
         * @type {?}
         * @private
         */
        SiteContextInterceptor.prototype.languageService;
        /**
         * @type {?}
         * @private
         */
        SiteContextInterceptor.prototype.currencyService;
        /**
         * @type {?}
         * @private
         */
        SiteContextInterceptor.prototype.occEndpoints;
        /**
         * @type {?}
         * @private
         */
        SiteContextInterceptor.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SiteContextOccModule = /** @class */ (function () {
        function SiteContextOccModule() {
        }
        SiteContextOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            ConfigModule.withConfig(defaultOccSiteContextConfig),
                        ],
                        providers: [
                            {
                                provide: SiteAdapter,
                                useClass: OccSiteAdapter,
                            },
                            {
                                provide: http.HTTP_INTERCEPTORS,
                                useExisting: SiteContextInterceptor,
                                multi: true,
                            },
                        ],
                    },] }
        ];
        return SiteContextOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    StoreFinderAdapter = /** @class */ (function () {
        function StoreFinderAdapter() {
        }
        return StoreFinderAdapter;
    }());
    if (false) {
        /**
         * @abstract
         * @param {?} query
         * @param {?} searchConfig
         * @param {?=} longitudeLatitude
         * @return {?}
         */
        StoreFinderAdapter.prototype.search = function (query, searchConfig, longitudeLatitude) { };
        /**
         * @abstract
         * @return {?}
         */
        StoreFinderAdapter.prototype.loadCounts = function () { };
        /**
         * @abstract
         * @param {?} storeId
         * @return {?}
         */
        StoreFinderAdapter.prototype.load = function (storeId) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultOccStoreFinderConfig = {
        backend: {
            occ: {
                endpoints: {
                    store: 'stores/${storeId}?fields=FULL',
                    stores: 'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',
                    storescounts: 'stores/storescounts',
                },
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StoreFinderConnector = /** @class */ (function () {
        function StoreFinderConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} query
         * @param {?} searchConfig
         * @param {?=} longitudeLatitude
         * @return {?}
         */
        StoreFinderConnector.prototype.search = /**
         * @param {?} query
         * @param {?} searchConfig
         * @param {?=} longitudeLatitude
         * @return {?}
         */
        function (query, searchConfig, longitudeLatitude) {
            return this.adapter.search(query, searchConfig, longitudeLatitude);
        };
        /**
         * @return {?}
         */
        StoreFinderConnector.prototype.getCounts = /**
         * @return {?}
         */
        function () {
            return this.adapter.loadCounts();
        };
        /**
         * @param {?} storeId
         * @return {?}
         */
        StoreFinderConnector.prototype.get = /**
         * @param {?} storeId
         * @return {?}
         */
        function (storeId) {
            return this.adapter.load(storeId);
        };
        StoreFinderConnector.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        StoreFinderConnector.ctorParameters = function () { return [
            { type: StoreFinderAdapter }
        ]; };
        /** @nocollapse */ StoreFinderConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function StoreFinderConnector_Factory() { return new StoreFinderConnector(core.ɵɵinject(StoreFinderAdapter)); }, token: StoreFinderConnector, providedIn: "root" });
        return StoreFinderConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        StoreFinderConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var POINT_OF_SERVICE_NORMALIZER = new core.InjectionToken('PointOfServiceNormalizer');
    /** @type {?} */
    var STORE_FINDER_SEARCH_PAGE_NORMALIZER = new core.InjectionToken('StoreFinderSearchPageNormalizer');
    /** @type {?} */
    var STORE_COUNT_NORMALIZER = new core.InjectionToken('StoreCountNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccStoreFinderAdapter = /** @class */ (function () {
        function OccStoreFinderAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        /**
         * @param {?} query
         * @param {?} searchConfig
         * @param {?=} longitudeLatitude
         * @return {?}
         */
        OccStoreFinderAdapter.prototype.search = /**
         * @param {?} query
         * @param {?} searchConfig
         * @param {?=} longitudeLatitude
         * @return {?}
         */
        function (query, searchConfig, longitudeLatitude) {
            return this.callOccFindStores(query, searchConfig, longitudeLatitude).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));
        };
        /**
         * @return {?}
         */
        OccStoreFinderAdapter.prototype.loadCounts = /**
         * @return {?}
         */
        function () {
            return this.http
                .get(this.occEndpointsService.getUrl('storescounts'))
                .pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var countriesAndRegionsStoreCount = _a.countriesAndRegionsStoreCount;
                return countriesAndRegionsStoreCount;
            })), this.converterService.pipeableMany(STORE_COUNT_NORMALIZER));
        };
        /**
         * @param {?} storeId
         * @return {?}
         */
        OccStoreFinderAdapter.prototype.load = /**
         * @param {?} storeId
         * @return {?}
         */
        function (storeId) {
            return this.http
                .get(this.occEndpointsService.getUrl('store', { storeId: storeId }))
                .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));
        };
        /**
         * @protected
         * @param {?} query
         * @param {?} searchConfig
         * @param {?=} longitudeLatitude
         * @return {?}
         */
        OccStoreFinderAdapter.prototype.callOccFindStores = /**
         * @protected
         * @param {?} query
         * @param {?} searchConfig
         * @param {?=} longitudeLatitude
         * @return {?}
         */
        function (query, searchConfig, longitudeLatitude) {
            /** @type {?} */
            var params = {};
            if (longitudeLatitude) {
                params['longitude'] = String(longitudeLatitude.longitude);
                params['latitude'] = String(longitudeLatitude.latitude);
                params['radius'] = String('10000000');
            }
            else {
                params['query'] = query;
            }
            if (searchConfig.pageSize) {
                params['pageSize'] = String(searchConfig.pageSize);
            }
            if (searchConfig.currentPage) {
                params['currentPage'] = String(searchConfig.currentPage);
            }
            if (searchConfig.sort) {
                params['sort'] = searchConfig.sort;
            }
            return this.http.get(this.occEndpointsService.getUrl('stores', undefined, params));
        };
        OccStoreFinderAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccStoreFinderAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccStoreFinderAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccStoreFinderAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccStoreFinderAdapter.prototype.occEndpointsService;
        /**
         * @type {?}
         * @protected
         */
        OccStoreFinderAdapter.prototype.converterService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StoreFinderOccModule = /** @class */ (function () {
        function StoreFinderOccModule() {
        }
        StoreFinderOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [ConfigModule.withConfig(defaultOccStoreFinderConfig)],
                        providers: [{ provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter }],
                    },] }
        ];
        return StoreFinderOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CONSENT_TEMPLATE_NORMALIZER = new core.InjectionToken('ConsentTemplateNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccAnonymousConsentTemplatesAdapter = /** @class */ (function () {
        function OccAnonymousConsentTemplatesAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @return {?}
         */
        OccAnonymousConsentTemplatesAdapter.prototype.loadAnonymousConsentTemplates = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('anonymousConsentTemplates');
            return this.http.get(url).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })), operators.map((/**
             * @param {?} consentList
             * @return {?}
             */
            function (consentList) { return consentList.consentTemplates; })), this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER));
        };
        OccAnonymousConsentTemplatesAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccAnonymousConsentTemplatesAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccAnonymousConsentTemplatesAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccAnonymousConsentTemplatesAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccAnonymousConsentTemplatesAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccAnonymousConsentTemplatesAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccUserAddressAdapter = /** @class */ (function () {
        function OccUserAddressAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        OccUserAddressAdapter.prototype.loadAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('addresses', { userId: userId });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http.get(url, { headers: headers }).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })), operators.map((/**
             * @param {?} addressList
             * @return {?}
             */
            function (addressList) { return addressList.addresses; })), this.converter.pipeableMany(ADDRESS_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        OccUserAddressAdapter.prototype.add = /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        function (userId, address) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('addresses', { userId: userId });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http
                .post(url, address, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} userId
         * @param {?} addressId
         * @param {?} address
         * @return {?}
         */
        OccUserAddressAdapter.prototype.update = /**
         * @param {?} userId
         * @param {?} addressId
         * @param {?} address
         * @return {?}
         */
        function (userId, addressId, address) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('addressDetail', {
                userId: userId,
                addressId: addressId,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http
                .patch(url, address, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        OccUserAddressAdapter.prototype.verify = /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        function (userId, address) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('addressVerification', { userId: userId });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http.post(url, address, { headers: headers }).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })), this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} addressId
         * @return {?}
         */
        OccUserAddressAdapter.prototype.delete = /**
         * @param {?} userId
         * @param {?} addressId
         * @return {?}
         */
        function (userId, addressId) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('addressDetail', {
                userId: userId,
                addressId: addressId,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .delete(url, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        OccUserAddressAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccUserAddressAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccUserAddressAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccUserAddressAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccUserAddressAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccUserAddressAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccUserConsentAdapter = /** @class */ (function () {
        function OccUserConsentAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        OccUserConsentAdapter.prototype.loadConsents = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('consentTemplates', { userId: userId });
            /** @type {?} */
            var headers = new http.HttpHeaders({ 'Cache-Control': 'no-cache' });
            return this.http.get(url, { headers: headers }).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })), operators.map((/**
             * @param {?} consentList
             * @return {?}
             */
            function (consentList) { return consentList.consentTemplates; })), this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} consentTemplateId
         * @param {?} consentTemplateVersion
         * @return {?}
         */
        OccUserConsentAdapter.prototype.giveConsent = /**
         * @param {?} userId
         * @param {?} consentTemplateId
         * @param {?} consentTemplateVersion
         * @return {?}
         */
        function (userId, consentTemplateId, consentTemplateVersion) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('consents', { userId: userId });
            /** @type {?} */
            var httpParams = new http.HttpParams()
                .set('consentTemplateId', consentTemplateId)
                .set('consentTemplateVersion', consentTemplateVersion.toString());
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cache-Control': 'no-cache',
            });
            return this.http
                .post(url, httpParams, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })), this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} consentCode
         * @return {?}
         */
        OccUserConsentAdapter.prototype.withdrawConsent = /**
         * @param {?} userId
         * @param {?} consentCode
         * @return {?}
         */
        function (userId, consentCode) {
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Cache-Control': 'no-cache',
            });
            /** @type {?} */
            var url = this.occEndpoints.getUrl('consentDetail', {
                userId: userId,
                consentId: consentCode,
            });
            return this.http.delete(url, { headers: headers });
        };
        OccUserConsentAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccUserConsentAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccUserConsentAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccUserConsentAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccUserConsentAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccUserConsentAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ORDER_HISTORY_NORMALIZER = new core.InjectionToken('OrderHistoryNormalizer');
    /** @type {?} */
    var CONSIGNMENT_TRACKING_NORMALIZER = new core.InjectionToken('ConsignmentTrackingNormalizer');
    /** @type {?} */
    var ORDER_RETURN_REQUEST_NORMALIZER = new core.InjectionToken('OrderReturnRequestNormalizer');
    /** @type {?} */
    var ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new core.InjectionToken('OrderReturnRequestInputSerializer');
    /** @type {?} */
    var ORDER_RETURNS_NORMALIZER = new core.InjectionToken('OrderReturnsNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccUserOrderAdapter = /** @class */ (function () {
        function OccUserOrderAdapter(http, occEndpoints, converter, featureConfigService) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            this.featureConfigService = featureConfigService;
        }
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @protected
         * @param {?} userId
         * @return {?}
         */
        OccUserOrderAdapter.prototype.getOrderEndpoint = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @protected
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var orderEndpoint = 'users/' + userId + '/orders';
            return this.occEndpoints.getEndpoint(orderEndpoint);
        };
        /**
         * @param {?} userId
         * @param {?} orderCode
         * @return {?}
         */
        OccUserOrderAdapter.prototype.load = /**
         * @param {?} userId
         * @param {?} orderCode
         * @return {?}
         */
        function (userId, orderCode) {
            // TODO: Deprecated, remove Issue #4125
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyLoad(userId, orderCode);
            }
            /** @type {?} */
            var url = this.occEndpoints.getUrl('orderDetail', {
                userId: userId,
                orderId: orderCode,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders();
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            return this.http
                .get(url, { headers: headers })
                .pipe(this.converter.pipeable(ORDER_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        OccUserOrderAdapter.prototype.loadHistory = /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort) {
            // TODO: Deprecated, remove Issue #4125
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyLoadHistory(userId, pageSize, currentPage, sort);
            }
            /** @type {?} */
            var params = {};
            if (pageSize) {
                params['pageSize'] = pageSize.toString();
            }
            if (currentPage) {
                params['currentPage'] = currentPage.toString();
            }
            if (sort) {
                params['sort'] = sort.toString();
            }
            /** @type {?} */
            var url = this.occEndpoints.getUrl('orderHistory', { userId: userId }, params);
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} orderCode
         * @return {?}
         */
        OccUserOrderAdapter.prototype.legacyLoad = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?} orderCode
         * @return {?}
         */
        function (userId, orderCode) {
            /** @type {?} */
            var url = this.getOrderEndpoint(userId) + '/' + orderCode;
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: 'fields=FULL',
            });
            return this.http
                .get(url, {
                params: params,
            })
                .pipe(this.converter.pipeable(ORDER_NORMALIZER));
        };
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         */
        /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        OccUserOrderAdapter.prototype.legacyLoadHistory = /**
         * @deprecated Since 1.1
         * Use configurable endpoints.
         * Remove issue: #4125
         * @private
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort) {
            /** @type {?} */
            var url = this.getOrderEndpoint(userId);
            /** @type {?} */
            var params = new http.HttpParams();
            if (pageSize) {
                params = params.set('pageSize', pageSize.toString());
            }
            if (currentPage) {
                params = params.set('currentPage', currentPage.toString());
            }
            if (sort) {
                params = params.set('sort', sort);
            }
            return this.http
                .get(url, { params: params })
                .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));
        };
        /**
         * @param {?} orderCode
         * @param {?} consignmentCode
         * @param {?=} userId
         * @return {?}
         */
        OccUserOrderAdapter.prototype.getConsignmentTracking = /**
         * @param {?} orderCode
         * @param {?} consignmentCode
         * @param {?=} userId
         * @return {?}
         */
        function (orderCode, consignmentCode, userId) {
            if (userId === void 0) { userId = OCC_USER_ID_CURRENT; }
            /** @type {?} */
            var url = this.occEndpoints.getUrl('consignmentTracking', {
                userId: userId,
                orderCode: orderCode,
                consignmentCode: consignmentCode,
            });
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} orderCode
         * @param {?} cancelRequestInput
         * @return {?}
         */
        OccUserOrderAdapter.prototype.cancel = /**
         * @param {?} userId
         * @param {?} orderCode
         * @param {?} cancelRequestInput
         * @return {?}
         */
        function (userId, orderCode, cancelRequestInput) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('cancelOrder', {
                userId: userId,
                orderId: orderCode,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .post(url, cancelRequestInput, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} userId
         * @param {?} returnRequestInput
         * @return {?}
         */
        OccUserOrderAdapter.prototype.createReturnRequest = /**
         * @param {?} userId
         * @param {?} returnRequestInput
         * @return {?}
         */
        function (userId, returnRequestInput) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('returnOrder', {
                userId: userId,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            returnRequestInput = this.converter.convert(returnRequestInput, ORDER_RETURN_REQUEST_INPUT_SERIALIZER);
            return this.http.post(url, returnRequestInput, { headers: headers }).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })), this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        OccUserOrderAdapter.prototype.loadReturnRequestList = /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort) {
            /** @type {?} */
            var params = {};
            if (pageSize) {
                params['pageSize'] = pageSize.toString();
            }
            if (currentPage) {
                params['currentPage'] = currentPage.toString();
            }
            if (sort) {
                params['sort'] = sort.toString();
            }
            /** @type {?} */
            var url = this.occEndpoints.getUrl('orderReturns', { userId: userId }, params);
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @return {?}
         */
        OccUserOrderAdapter.prototype.loadReturnRequestDetail = /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @return {?}
         */
        function (userId, returnRequestCode) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('orderReturnDetail', {
                userId: userId,
                returnRequestCode: returnRequestCode,
            });
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @param {?} returnRequestModification
         * @return {?}
         */
        OccUserOrderAdapter.prototype.cancelReturnRequest = /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @param {?} returnRequestModification
         * @return {?}
         */
        function (userId, returnRequestCode, returnRequestModification) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('cancelReturn', {
                userId: userId,
                returnRequestCode: returnRequestCode,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .patch(url, returnRequestModification, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        OccUserOrderAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccUserOrderAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService },
            { type: FeatureConfigService }
        ]; };
        return OccUserOrderAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccUserOrderAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccUserOrderAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccUserOrderAdapter.prototype.converter;
        /**
         * @type {?}
         * @protected
         */
        OccUserOrderAdapter.prototype.featureConfigService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccUserPaymentAdapter = /** @class */ (function () {
        function OccUserPaymentAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        OccUserPaymentAdapter.prototype.loadAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('paymentDetailsAll', { userId: userId }) + '?saved=true';
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http.get(url, { headers: headers }).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })), operators.map((/**
             * @param {?} methodList
             * @return {?}
             */
            function (methodList) { return methodList.payments; })), this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        OccUserPaymentAdapter.prototype.delete = /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        function (userId, paymentMethodID) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('paymentDetail', {
                userId: userId,
                paymentDetailId: paymentMethodID,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .delete(url, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        OccUserPaymentAdapter.prototype.setDefault = /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        function (userId, paymentMethodID) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('paymentDetail', {
                userId: userId,
                paymentDetailId: paymentMethodID,
            });
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .patch(url, 
            // TODO: Remove billingAddress property
            { billingAddress: { titleCode: 'mr' }, defaultPayment: true }, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        OccUserPaymentAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccUserPaymentAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccUserPaymentAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccUserPaymentAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccUserPaymentAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccUserPaymentAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var USER_NORMALIZER = new core.InjectionToken('UserNormalizer');
    /** @type {?} */
    var USER_SERIALIZER = new core.InjectionToken('UserSerializer');
    /** @type {?} */
    var USER_SIGN_UP_SERIALIZER = new core.InjectionToken('UserSignUpSerializer');
    /** @type {?} */
    var TITLE_NORMALIZER = new core.InjectionToken('TitleNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccUserAdapter = /** @class */ (function () {
        function OccUserAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        OccUserAdapter.prototype.load = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('user', { userId: userId });
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(USER_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} user
         * @return {?}
         */
        OccUserAdapter.prototype.update = /**
         * @param {?} userId
         * @param {?} user
         * @return {?}
         */
        function (userId, user) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('user', { userId: userId });
            user = this.converter.convert(user, USER_SERIALIZER);
            return this.http.patch(url, user);
        };
        /**
         * @param {?} user
         * @return {?}
         */
        OccUserAdapter.prototype.register = /**
         * @param {?} user
         * @return {?}
         */
        function (user) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('userRegister');
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);
            return this.http
                .post(url, user, { headers: headers })
                .pipe(this.converter.pipeable(USER_NORMALIZER));
        };
        /**
         * @param {?} guid
         * @param {?} password
         * @return {?}
         */
        OccUserAdapter.prototype.registerGuest = /**
         * @param {?} guid
         * @param {?} password
         * @return {?}
         */
        function (guid, password) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('userRegister');
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            /** @type {?} */
            var httpParams = new http.HttpParams()
                .set('guid', guid)
                .set('password', password);
            return this.http
                .post(url, httpParams, { headers: headers })
                .pipe(this.converter.pipeable(USER_NORMALIZER));
        };
        /**
         * @param {?} userEmailAddress
         * @return {?}
         */
        OccUserAdapter.prototype.requestForgotPasswordEmail = /**
         * @param {?} userEmailAddress
         * @return {?}
         */
        function (userEmailAddress) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('userForgotPassword');
            /** @type {?} */
            var httpParams = new http.HttpParams().set('userId', userEmailAddress);
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            return this.http.post(url, httpParams, { headers: headers });
        };
        /**
         * @param {?} token
         * @param {?} newPassword
         * @return {?}
         */
        OccUserAdapter.prototype.resetPassword = /**
         * @param {?} token
         * @param {?} newPassword
         * @return {?}
         */
        function (token, newPassword) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('userResetPassword');
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            return this.http.post(url, { token: token, newPassword: newPassword }, { headers: headers });
        };
        /**
         * @param {?} userId
         * @param {?} currentPassword
         * @param {?} newUserId
         * @return {?}
         */
        OccUserAdapter.prototype.updateEmail = /**
         * @param {?} userId
         * @param {?} currentPassword
         * @param {?} newUserId
         * @return {?}
         */
        function (userId, currentPassword, newUserId) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('userUpdateLoginId', { userId: userId });
            /** @type {?} */
            var httpParams = new http.HttpParams()
                .set('password', currentPassword)
                .set('newLogin', newUserId);
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.put(url, httpParams, { headers: headers });
        };
        /**
         * @param {?} userId
         * @param {?} oldPassword
         * @param {?} newPassword
         * @return {?}
         */
        OccUserAdapter.prototype.updatePassword = /**
         * @param {?} userId
         * @param {?} oldPassword
         * @param {?} newPassword
         * @return {?}
         */
        function (userId, oldPassword, newPassword) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('userUpdatePassword', { userId: userId });
            /** @type {?} */
            var httpParams = new http.HttpParams()
                .set('old', oldPassword)
                .set('new', newPassword);
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.put(url, httpParams, { headers: headers });
        };
        /**
         * @param {?} userId
         * @return {?}
         */
        OccUserAdapter.prototype.remove = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('user', { userId: userId });
            return this.http.delete(url);
        };
        /**
         * @return {?}
         */
        OccUserAdapter.prototype.loadTitles = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('titles');
            return this.http.get(url).pipe(operators.map((/**
             * @param {?} titleList
             * @return {?}
             */
            function (titleList) { return titleList.titles; })), this.converter.pipeableMany(TITLE_NORMALIZER));
        };
        OccUserAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccUserAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccUserAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccUserAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccUserAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccUserAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    AnonymousConsentTemplatesAdapter = /** @class */ (function () {
        function AnonymousConsentTemplatesAdapter() {
        }
        return AnonymousConsentTemplatesAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load anonymous consents.
         * @abstract
         * @return {?}
         */
        AnonymousConsentTemplatesAdapter.prototype.loadAnonymousConsentTemplates = function () { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    UserAddressAdapter = /** @class */ (function () {
        function UserAddressAdapter() {
        }
        return UserAddressAdapter;
    }());
    if (false) {
        /**
         * @abstract
         * @param {?} userId
         * @return {?}
         */
        UserAddressAdapter.prototype.loadAll = function (userId) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        UserAddressAdapter.prototype.add = function (userId, address) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} addressId
         * @param {?} address
         * @return {?}
         */
        UserAddressAdapter.prototype.update = function (userId, addressId, address) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        UserAddressAdapter.prototype.verify = function (userId, address) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} addressId
         * @return {?}
         */
        UserAddressAdapter.prototype.delete = function (userId, addressId) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    UserConsentAdapter = /** @class */ (function () {
        function UserConsentAdapter() {
        }
        return UserConsentAdapter;
    }());
    if (false) {
        /**
         * @abstract
         * @param {?} userId
         * @return {?}
         */
        UserConsentAdapter.prototype.loadConsents = function (userId) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} consentTemplateId
         * @param {?} consentTemplateVersion
         * @return {?}
         */
        UserConsentAdapter.prototype.giveConsent = function (userId, consentTemplateId, consentTemplateVersion) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} consentCode
         * @return {?}
         */
        UserConsentAdapter.prototype.withdrawConsent = function (userId, consentCode) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    UserOrderAdapter = /** @class */ (function () {
        function UserOrderAdapter() {
        }
        return UserOrderAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load order data.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?} orderCode The `orderCode` for given order
         * @return {?}
         */
        UserOrderAdapter.prototype.load = function (userId, orderCode) { };
        /**
         * Abstract method used to load order history for an user.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?} pageSize
         * @param {?} currentPage
         * @param {?} sort Sorting method
         * @return {?}
         */
        UserOrderAdapter.prototype.loadHistory = function (userId, pageSize, currentPage, sort) { };
        /**
         * Abstract method used to get consignment tracking details
         * @abstract
         * @param {?} orderCode an order code
         * @param {?} consignmentCode a consignment code
         * @param {?=} userId user id related to order
         * @return {?}
         */
        UserOrderAdapter.prototype.getConsignmentTracking = function (orderCode, consignmentCode, userId) { };
        /**
         * Abstract method used to create return request
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?} returnRequestInput Return request entry input list
         * @return {?}
         */
        UserOrderAdapter.prototype.createReturnRequest = function (userId, returnRequestInput) { };
        /**
         * Abstract method used to load order return request details
         * @abstract
         * @param {?} userId
         * @param {?} returnRequestCode
         * @return {?}
         */
        UserOrderAdapter.prototype.loadReturnRequestDetail = function (userId, returnRequestCode) { };
        /**
         * Abstract method used to load order return request list for an user.
         * @abstract
         * @param {?} userId
         * @param {?} pageSize
         * @param {?} currentPage
         * @param {?} sort
         * @return {?}
         */
        UserOrderAdapter.prototype.loadReturnRequestList = function (userId, pageSize, currentPage, sort) { };
        /**
         * Abstract method used to cancel order
         * @abstract
         * @param {?} userId
         * @param {?} orderCode
         * @param {?} cancelRequestInput Cancel request entry input list
         * @return {?}
         */
        UserOrderAdapter.prototype.cancel = function (userId, orderCode, cancelRequestInput) { };
        /**
         * Abstract method used to cancel one return request
         * @abstract
         * @param {?} userId
         * @param {?} returnRequestCode
         * @param {?} returnRequestModification
         * @return {?}
         */
        UserOrderAdapter.prototype.cancelReturnRequest = function (userId, returnRequestCode, returnRequestModification) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    UserPaymentAdapter = /** @class */ (function () {
        function UserPaymentAdapter() {
        }
        return UserPaymentAdapter;
    }());
    if (false) {
        /**
         * @abstract
         * @param {?} userId
         * @return {?}
         */
        UserPaymentAdapter.prototype.loadAll = function (userId) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        UserPaymentAdapter.prototype.delete = function (userId, paymentMethodID) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        UserPaymentAdapter.prototype.setDefault = function (userId, paymentMethodID) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    UserAdapter = /** @class */ (function () {
        function UserAdapter() {
        }
        return UserAdapter;
    }());
    if (false) {
        /**
         * @abstract
         * @param {?} userId
         * @return {?}
         */
        UserAdapter.prototype.load = function (userId) { };
        /**
         * @abstract
         * @param {?} username
         * @param {?} user
         * @return {?}
         */
        UserAdapter.prototype.update = function (username, user) { };
        /**
         * @abstract
         * @param {?} user
         * @return {?}
         */
        UserAdapter.prototype.register = function (user) { };
        /**
         * @abstract
         * @param {?} guid
         * @param {?} password
         * @return {?}
         */
        UserAdapter.prototype.registerGuest = function (guid, password) { };
        /**
         * @abstract
         * @param {?} userEmailAddress
         * @return {?}
         */
        UserAdapter.prototype.requestForgotPasswordEmail = function (userEmailAddress) { };
        /**
         * @abstract
         * @param {?} token
         * @param {?} newPassword
         * @return {?}
         */
        UserAdapter.prototype.resetPassword = function (token, newPassword) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} currentPassword
         * @param {?} newUserId
         * @return {?}
         */
        UserAdapter.prototype.updateEmail = function (userId, currentPassword, newUserId) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} oldPassword
         * @param {?} newPassword
         * @return {?}
         */
        UserAdapter.prototype.updatePassword = function (userId, oldPassword, newPassword) { };
        /**
         * @abstract
         * @param {?} userId
         * @return {?}
         */
        UserAdapter.prototype.remove = function (userId) { };
        /**
         * @abstract
         * @return {?}
         */
        UserAdapter.prototype.loadTitles = function () { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultOccUserConfig = {
        backend: {
            occ: {
                endpoints: {
                    // tslint:disable:max-line-length
                    user: 'users/${userId}',
                    userRegister: 'users',
                    userForgotPassword: 'forgottenpasswordtokens',
                    userResetPassword: 'resetpassword',
                    userUpdateLoginId: 'users/${userId}/login',
                    userUpdatePassword: 'users/${userId}/password',
                    titles: 'titles',
                    paymentDetailsAll: 'users/${userId}/paymentdetails',
                    paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',
                    orderHistory: 'users/${userId}/orders',
                    orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',
                    anonymousConsentTemplates: 'users/anonymous/consenttemplates',
                    consentTemplates: 'users/${userId}/consenttemplates',
                    consents: 'users/${userId}/consents',
                    consentDetail: 'users/${userId}/consents/${consentId}',
                    addresses: 'users/${userId}/addresses',
                    addressDetail: 'users/${userId}/addresses/${addressId}',
                    addressVerification: 'users/${userId}/addresses/verification',
                    consignmentTracking: 'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',
                    customerCoupons: 'users/${userId}/customercoupons',
                    claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',
                    couponNotification: 'users/${userId}/customercoupons/${couponCode}/notification',
                    notificationPreference: 'users/${userId}/notificationpreferences',
                    productInterests: 'users/${userId}/productinterests',
                    getProductInterests: 'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',
                    cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',
                    returnOrder: 'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',
                    orderReturns: 'users/${userId}/orderReturns?fields=BASIC',
                    orderReturnDetail: 'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',
                    cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',
                },
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    CustomerCouponAdapter = /** @class */ (function () {
        function CustomerCouponAdapter() {
        }
        return CustomerCouponAdapter;
    }());
    if (false) {
        /**
         * @abstract
         * @param {?} userId
         * @param {?} pageSize
         * @param {?} currentPage
         * @param {?} sort
         * @return {?}
         */
        CustomerCouponAdapter.prototype.getCustomerCoupons = function (userId, pageSize, currentPage, sort) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        CustomerCouponAdapter.prototype.turnOnNotification = function (userId, couponCode) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        CustomerCouponAdapter.prototype.turnOffNotification = function (userId, couponCode) { };
        /**
         * @abstract
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        CustomerCouponAdapter.prototype.claimCustomerCoupon = function (userId, couponCode) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new core.InjectionToken('CustomerCouponSearchResultNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccCustomerCouponAdapter = /** @class */ (function () {
        function OccCustomerCouponAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        /**
         * @param {?} userId
         * @param {?} pageSize
         * @param {?} currentPage
         * @param {?} sort
         * @return {?}
         */
        OccCustomerCouponAdapter.prototype.getCustomerCoupons = /**
         * @param {?} userId
         * @param {?} pageSize
         * @param {?} currentPage
         * @param {?} sort
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('customerCoupons', { userId: userId });
            /** @type {?} */
            var params = new http.HttpParams().set('sort', sort ? sort : 'startDate:asc');
            if (pageSize) {
                params = params.set('pageSize', pageSize.toString());
            }
            if (currentPage) {
                params = params.set('currentPage', currentPage.toString());
            }
            /** @type {?} */
            var headers = this.newHttpHeader();
            return this.http
                .get(url, { headers: headers, params: params })
                .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));
        };
        /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        OccCustomerCouponAdapter.prototype.turnOffNotification = /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        function (userId, couponCode) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('couponNotification', {
                userId: userId,
                couponCode: couponCode,
            });
            /** @type {?} */
            var headers = this.newHttpHeader();
            return this.http.delete(url, { headers: headers });
        };
        /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        OccCustomerCouponAdapter.prototype.turnOnNotification = /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        function (userId, couponCode) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('couponNotification', {
                userId: userId,
                couponCode: couponCode,
            });
            /** @type {?} */
            var headers = this.newHttpHeader();
            return this.http.post(url, { headers: headers });
        };
        /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        OccCustomerCouponAdapter.prototype.claimCustomerCoupon = /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        function (userId, couponCode) {
            /** @type {?} */
            var url = this.occEndpoints.getUrl('claimCoupon', {
                userId: userId,
                couponCode: couponCode,
            });
            /** @type {?} */
            var headers = this.newHttpHeader();
            return this.http.post(url, { headers: headers });
        };
        /**
         * @private
         * @return {?}
         */
        OccCustomerCouponAdapter.prototype.newHttpHeader = /**
         * @private
         * @return {?}
         */
        function () {
            return new http.HttpHeaders({
                'Content-Type': 'application/json',
            });
        };
        OccCustomerCouponAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccCustomerCouponAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: ConverterService }
        ]; };
        return OccCustomerCouponAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccCustomerCouponAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccCustomerCouponAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccCustomerCouponAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    UserNotificationPreferenceAdapter = /** @class */ (function () {
        function UserNotificationPreferenceAdapter() {
        }
        return UserNotificationPreferenceAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load notification preferences for an user.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @return {?}
         */
        UserNotificationPreferenceAdapter.prototype.loadAll = function (userId) { };
        /**
         * Abstract method used to update notification preferences for an user.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?} preferences The notification preferences to be updated.
         * @return {?}
         */
        UserNotificationPreferenceAdapter.prototype.update = function (userId, preferences) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NOTIFICATION_PREFERENCE_SERIALIZER = new core.InjectionToken('NotificationPreferenceSerializer');
    /** @type {?} */
    var NOTIFICATION_PREFERENCE_NORMALIZER = new core.InjectionToken('NotificationPreferenceNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserNotificationPreferenceConnector = /** @class */ (function () {
        function UserNotificationPreferenceConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        UserNotificationPreferenceConnector.prototype.loadAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.adapter.loadAll(userId);
        };
        /**
         * @param {?} userId
         * @param {?} preferences
         * @return {?}
         */
        UserNotificationPreferenceConnector.prototype.update = /**
         * @param {?} userId
         * @param {?} preferences
         * @return {?}
         */
        function (userId, preferences) {
            return this.adapter.update(userId, preferences);
        };
        UserNotificationPreferenceConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserNotificationPreferenceConnector.ctorParameters = function () { return [
            { type: UserNotificationPreferenceAdapter }
        ]; };
        /** @nocollapse */ UserNotificationPreferenceConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserNotificationPreferenceConnector_Factory() { return new UserNotificationPreferenceConnector(core.ɵɵinject(UserNotificationPreferenceAdapter)); }, token: UserNotificationPreferenceConnector, providedIn: "root" });
        return UserNotificationPreferenceConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserNotificationPreferenceConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var headers = new http.HttpHeaders({
        'Content-Type': 'application/json',
    });
    var OccUserNotificationPreferenceAdapter = /** @class */ (function () {
        function OccUserNotificationPreferenceAdapter(http, converter, occEndpoints) {
            this.http = http;
            this.converter = converter;
            this.occEndpoints = occEndpoints;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        OccUserNotificationPreferenceAdapter.prototype.loadAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.http
                .get(this.occEndpoints.getUrl('notificationPreference', { userId: userId }), {
                headers: headers,
            })
                .pipe(operators.map((/**
             * @param {?} list
             * @return {?}
             */
            function (list) { return list.preferences; })), this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} userId
         * @param {?} preferences
         * @return {?}
         */
        OccUserNotificationPreferenceAdapter.prototype.update = /**
         * @param {?} userId
         * @param {?} preferences
         * @return {?}
         */
        function (userId, preferences) {
            preferences = this.converter.convert(preferences, NOTIFICATION_PREFERENCE_SERIALIZER);
            return this.http
                .patch(this.occEndpoints.getUrl('notificationPreference', { userId: userId }), { preferences: preferences }, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        OccUserNotificationPreferenceAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccUserNotificationPreferenceAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: ConverterService },
            { type: OccEndpointsService }
        ]; };
        return OccUserNotificationPreferenceAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccUserNotificationPreferenceAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccUserNotificationPreferenceAdapter.prototype.converter;
        /**
         * @type {?}
         * @protected
         */
        OccUserNotificationPreferenceAdapter.prototype.occEndpoints;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PRODUCT_INTERESTS_NORMALIZER = new core.InjectionToken('ProductInterestsNormalizer');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var headers$1 = new http.HttpHeaders({
        'Content-Type': 'application/json',
    });
    var OccUserInterestsAdapter = /** @class */ (function () {
        function OccUserInterestsAdapter(http, occEndpoints, config, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.config = config;
            this.converter = converter;
        }
        /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @param {?=} productCode
         * @param {?=} notificationType
         * @return {?}
         */
        OccUserInterestsAdapter.prototype.getInterests = /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @param {?=} productCode
         * @param {?=} notificationType
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort, productCode, notificationType) {
            /** @type {?} */
            var params = new http.HttpParams().set('sort', sort ? sort : 'name:asc');
            if (pageSize) {
                params = params.set('pageSize', pageSize.toString());
            }
            if (currentPage) {
                params = params.set('currentPage', currentPage.toString());
            }
            if (productCode) {
                params = params.set('productCode', productCode);
            }
            if (notificationType) {
                params = params.set('notificationType', notificationType.toString());
            }
            return this.http
                .get(this.occEndpoints.getUrl('getProductInterests', { userId: userId }), {
                headers: headers$1,
                params: params,
            })
                .pipe(this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @param {?} userId
         * @param {?} item
         * @return {?}
         */
        OccUserInterestsAdapter.prototype.removeInterest = /**
         * @param {?} userId
         * @param {?} item
         * @return {?}
         */
        function (userId, item) {
            var _this = this;
            /** @type {?} */
            var r = [];
            item.productInterestEntry.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) {
                /** @type {?} */
                var params = new http.HttpParams()
                    .set('productCode', item.product.code)
                    .set('notificationType', entry.interestType);
                r.push(_this.http
                    .delete(_this.occEndpoints.getUrl('productInterests', { userId: userId }), {
                    params: params,
                })
                    .pipe(operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return rxjs.throwError(error); }))));
            }));
            return rxjs.forkJoin(r);
        };
        /**
         * @param {?} userId
         * @param {?} productCode
         * @param {?} notificationType
         * @return {?}
         */
        OccUserInterestsAdapter.prototype.addInterest = /**
         * @param {?} userId
         * @param {?} productCode
         * @param {?} notificationType
         * @return {?}
         */
        function (userId, productCode, notificationType) {
            /** @type {?} */
            var params = new http.HttpParams()
                .set('productCode', productCode)
                .set('notificationType', notificationType.toString());
            return this.http
                .post(this.occEndpoints.getUrl('productInterests', { userId: userId }), {}, {
                headers: headers$1,
                params: params,
            })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        OccUserInterestsAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OccUserInterestsAdapter.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: OccEndpointsService },
            { type: OccConfig },
            { type: ConverterService }
        ]; };
        return OccUserInterestsAdapter;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccUserInterestsAdapter.prototype.http;
        /**
         * @type {?}
         * @protected
         */
        OccUserInterestsAdapter.prototype.occEndpoints;
        /**
         * @type {?}
         * @protected
         */
        OccUserInterestsAdapter.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        OccUserInterestsAdapter.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    UserInterestsAdapter = /** @class */ (function () {
        function UserInterestsAdapter() {
        }
        return UserInterestsAdapter;
    }());
    if (false) {
        /**
         * Abstract method used to load product interests for an user.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort Sorting method
         * @param {?=} productCode The product code
         * @param {?=} notificationType The notification type
         * @return {?}
         */
        UserInterestsAdapter.prototype.getInterests = function (userId, pageSize, currentPage, sort, productCode, notificationType) { };
        /**
         * Abstract method used to remove product interest for an user.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?} item
         * @return {?}
         */
        UserInterestsAdapter.prototype.removeInterest = function (userId, item) { };
        /**
         * Abstract method to add a product interest for an user.
         *
         * @abstract
         * @param {?} userId The `userId` for given user
         * @param {?} productCode The product code
         * @param {?} notificationType The notification type
         * @return {?}
         */
        UserInterestsAdapter.prototype.addInterest = function (userId, productCode, notificationType) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccUserInterestsNormalizer = /** @class */ (function () {
        function OccUserInterestsNormalizer(converter) {
            this.converter = converter;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        OccUserInterestsNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source && source.results) {
                target.results = source.results.map((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) { return (__assign({}, result, { product: _this.converter.convert(result.product, PRODUCT_NORMALIZER) })); }));
            }
            return target;
        };
        OccUserInterestsNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccUserInterestsNormalizer.ctorParameters = function () { return [
            { type: ConverterService }
        ]; };
        /** @nocollapse */ OccUserInterestsNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccUserInterestsNormalizer_Factory() { return new OccUserInterestsNormalizer(core.ɵɵinject(ConverterService)); }, token: OccUserInterestsNormalizer, providedIn: "root" });
        return OccUserInterestsNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccUserInterestsNormalizer.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccReturnRequestNormalizer = /** @class */ (function () {
        function OccReturnRequestNormalizer(converter) {
            this.converter = converter;
        }
        /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        OccReturnRequestNormalizer.prototype.convert = /**
         * @param {?} source
         * @param {?=} target
         * @return {?}
         */
        function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = __assign({}, ((/** @type {?} */ (source))));
            }
            if (source.returnEntries) {
                target.returnEntries = source.returnEntries.map((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) { return (__assign({}, entry, { orderEntry: _this.convertOrderEntry(entry.orderEntry) })); }));
            }
            return target;
        };
        /**
         * @private
         * @param {?} source
         * @return {?}
         */
        OccReturnRequestNormalizer.prototype.convertOrderEntry = /**
         * @private
         * @param {?} source
         * @return {?}
         */
        function (source) {
            return __assign({}, source, { product: this.converter.convert(source.product, PRODUCT_NORMALIZER) });
        };
        OccReturnRequestNormalizer.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccReturnRequestNormalizer.ctorParameters = function () { return [
            { type: ConverterService }
        ]; };
        /** @nocollapse */ OccReturnRequestNormalizer.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccReturnRequestNormalizer_Factory() { return new OccReturnRequestNormalizer(core.ɵɵinject(ConverterService)); }, token: OccReturnRequestNormalizer, providedIn: "root" });
        return OccReturnRequestNormalizer;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccReturnRequestNormalizer.prototype.converter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserOccModule = /** @class */ (function () {
        function UserOccModule() {
        }
        UserOccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            ConfigModule.withConfig(defaultOccUserConfig),
                        ],
                        providers: [
                            { provide: UserAdapter, useClass: OccUserAdapter },
                            { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },
                            { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },
                            {
                                provide: AnonymousConsentTemplatesAdapter,
                                useClass: OccAnonymousConsentTemplatesAdapter,
                            },
                            {
                                provide: UserPaymentAdapter,
                                useClass: OccUserPaymentAdapter,
                            },
                            { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },
                            { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },
                            {
                                provide: UserNotificationPreferenceAdapter,
                                useClass: OccUserNotificationPreferenceAdapter,
                            },
                            { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },
                            {
                                provide: PRODUCT_INTERESTS_NORMALIZER,
                                useExisting: OccUserInterestsNormalizer,
                                multi: true,
                            },
                            {
                                provide: ORDER_RETURN_REQUEST_NORMALIZER,
                                useExisting: OccReturnRequestNormalizer,
                                multi: true,
                            },
                        ],
                    },] }
        ];
        return UserOccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var JavaRegExpConverter = /** @class */ (function () {
        function JavaRegExpConverter() {
            /**
             * Pattern that extracts modifiers from the Java regexp.
             *
             * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:
             * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`
             * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`
             * - or multiple combined:  `(?iu)PATTERN`
             * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)
             *
             * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:
             *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)
             *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)
             *    3. the rest of the regexp, i.e. `PATTERN`
             */
            this.EXTRACT_JAVA_REGEXP_MODIFIERS = /^(\(\?([a-z]+)\))?(.*)/;
        }
        /**
         * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers
         * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)
         *
         * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!
         * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.
         *
         * See differences between Java and Javascript regexps:
         * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax
         * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features
         */
        /**
         * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers
         * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)
         *
         * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!
         * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.
         *
         * See differences between Java and Javascript regexps:
         * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax
         * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features
         * @param {?} javaSyntax
         * @return {?}
         */
        JavaRegExpConverter.prototype.toJsRegExp = /**
         * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers
         * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)
         *
         * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!
         * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.
         *
         * See differences between Java and Javascript regexps:
         * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax
         * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features
         * @param {?} javaSyntax
         * @return {?}
         */
        function (javaSyntax) {
            /** @type {?} */
            var parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);
            if (!parts) {
                return null;
            }
            var _a = __read(parts, 4), modifiers = _a[2], jsSyntax = _a[3];
            try {
                return new RegExp(jsSyntax, modifiers);
            }
            catch (error) {
                if (core.isDevMode()) {
                    console.warn("WARNING: Could not convert Java regexp into Javascript. Original regexp: " + javaSyntax + " \nMessage: " + error);
                }
                return null;
            }
        };
        JavaRegExpConverter.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ JavaRegExpConverter.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function JavaRegExpConverter_Factory() { return new JavaRegExpConverter(); }, token: JavaRegExpConverter, providedIn: "root" });
        return JavaRegExpConverter;
    }());
    if (false) {
        /**
         * Pattern that extracts modifiers from the Java regexp.
         *
         * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:
         * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`
         * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`
         * - or multiple combined:  `(?iu)PATTERN`
         * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)
         *
         * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:
         *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)
         *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)
         *    3. the rest of the regexp, i.e. `PATTERN`
         * @type {?}
         * @private
         */
        JavaRegExpConverter.prototype.EXTRACT_JAVA_REGEXP_MODIFIERS;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * The url of the server request when running SSR
     *
     * @type {?}
     */
    var SERVER_REQUEST_URL = new core.InjectionToken('SERVER_REQUEST_URL');
    /**
     * The url of the server request host when running SSR
     *
     * @type {?}
     */
    var SERVER_REQUEST_ORIGIN = new core.InjectionToken('SERVER_REQUEST_ORIGIN');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccLoadedConfigConverter = /** @class */ (function () {
        function OccLoadedConfigConverter(javaRegExpConverter) {
            this.javaRegExpConverter = javaRegExpConverter;
        }
        /**
         * @param {?} baseSites
         * @param {?} currentUrl
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.fromOccBaseSites = /**
         * @param {?} baseSites
         * @param {?} currentUrl
         * @return {?}
         */
        function (baseSites, currentUrl) {
            var _this = this;
            /** @type {?} */
            var baseSite = baseSites.find((/**
             * @param {?} site
             * @return {?}
             */
            function (site) {
                return _this.isCurrentBaseSite(site, currentUrl);
            }));
            if (!baseSite) {
                throw this.getError("Current url (" + currentUrl + ") doesn't match with any of url patterns of any base site.");
            }
            // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.
            /** @type {?} */
            var baseStore = baseSite.stores && baseSite.stores[0];
            if (!baseStore) {
                throw this.getError("Current base site (" + baseSite.uid + ") doesn't have any base store.");
            }
            return {
                baseSite: baseSite.uid,
                languages: this.getIsoCodes(baseStore.languages, baseSite.defaultLanguage || baseStore.defaultLanguage),
                currencies: this.getIsoCodes(baseStore.currencies, baseStore.defaultCurrency),
                urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),
            };
        };
        /**
         * @param {?} __0
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.toSiteContextConfig = /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b;
            var baseSite = _a.baseSite, languages = _a.languages, currencies = _a.currencies, urlEncodingAttributes = _a.urlParameters;
            /** @type {?} */
            var result = {
                context: (_b = {
                        urlParameters: urlEncodingAttributes
                    },
                    _b[BASE_SITE_CONTEXT_ID] = [baseSite],
                    _b[LANGUAGE_CONTEXT_ID] = languages,
                    _b[CURRENCY_CONTEXT_ID] = currencies,
                    _b),
            };
            return result;
        };
        /**
         * @param {?} __0
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.toI18nConfig = /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var languages = _a.languages;
            return { i18n: { fallbackLang: languages[0] } };
        };
        /**
         * @private
         * @param {?} site
         * @param {?} currentUrl
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.isCurrentBaseSite = /**
         * @private
         * @param {?} site
         * @param {?} currentUrl
         * @return {?}
         */
        function (site, currentUrl) {
            var _this = this;
            /** @type {?} */
            var index = (site.urlPatterns || []).findIndex((/**
             * @param {?} javaRegexp
             * @return {?}
             */
            function (javaRegexp) {
                /** @type {?} */
                var jsRegexp = _this.javaRegExpConverter.toJsRegExp(javaRegexp);
                if (jsRegexp) {
                    /** @type {?} */
                    var result = jsRegexp.test(currentUrl);
                    return result;
                }
            }));
            return index !== -1;
        };
        /**
         * Returns an array of url encoded site context parameters.
         *
         * It maps the string "storefront" (used in OCC) to the "baseSite" (used in Spartacus)
         */
        /**
         * Returns an array of url encoded site context parameters.
         *
         * It maps the string "storefront" (used in OCC) to the "baseSite" (used in Spartacus)
         * @private
         * @param {?} params
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.getUrlParams = /**
         * Returns an array of url encoded site context parameters.
         *
         * It maps the string "storefront" (used in OCC) to the "baseSite" (used in Spartacus)
         * @private
         * @param {?} params
         * @return {?}
         */
        function (params) {
            /** @type {?} */
            var STOREFRONT_PARAM = 'storefront';
            return (params || []).map((/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                return param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param;
            }));
        };
        /**
         * Returns iso codes in a array, where the first element is the default iso code.
         */
        /**
         * Returns iso codes in a array, where the first element is the default iso code.
         * @private
         * @param {?} elements
         * @param {?} defaultElement
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.getIsoCodes = /**
         * Returns iso codes in a array, where the first element is the default iso code.
         * @private
         * @param {?} elements
         * @param {?} defaultElement
         * @return {?}
         */
        function (elements, defaultElement) {
            /** @type {?} */
            var result = this.moveToFirst(elements, (/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return el.isocode === defaultElement.isocode; })).map((/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return el.isocode; }));
            return result;
        };
        /**
         * Moves to the start of the array the first element that satisfies the given predicate.
         *
         * @param array array to modify
         * @param predicate function called on elements
         */
        /**
         * Moves to the start of the array the first element that satisfies the given predicate.
         *
         * @private
         * @param {?} array array to modify
         * @param {?} predicate function called on elements
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.moveToFirst = /**
         * Moves to the start of the array the first element that satisfies the given predicate.
         *
         * @private
         * @param {?} array array to modify
         * @param {?} predicate function called on elements
         * @return {?}
         */
        function (array, predicate) {
            array = __spread(array);
            /** @type {?} */
            var index = array.findIndex(predicate);
            if (index !== -1) {
                var _a = __read(array.splice(index, 1), 1), el = _a[0];
                array.unshift(el);
            }
            return array;
        };
        /**
         * @private
         * @param {?} message
         * @return {?}
         */
        OccLoadedConfigConverter.prototype.getError = /**
         * @private
         * @param {?} message
         * @return {?}
         */
        function (message) {
            return new Error("Error: Cannot get base site config! " + message);
        };
        OccLoadedConfigConverter.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccLoadedConfigConverter.ctorParameters = function () { return [
            { type: JavaRegExpConverter }
        ]; };
        /** @nocollapse */ OccLoadedConfigConverter.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccLoadedConfigConverter_Factory() { return new OccLoadedConfigConverter(core.ɵɵinject(JavaRegExpConverter)); }, token: OccLoadedConfigConverter, providedIn: "root" });
        return OccLoadedConfigConverter;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccLoadedConfigConverter.prototype.javaRegExpConverter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccSitesConfigLoader = /** @class */ (function () {
        function OccSitesConfigLoader(config, http) {
            this.config = config;
            this.http = http;
            this.endpoint = 'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';
        }
        Object.defineProperty(OccSitesConfigLoader.prototype, "baseEndpoint", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return ((this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OccSitesConfigLoader.prototype, "url", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return "" + this.baseEndpoint + this.endpoint;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        OccSitesConfigLoader.prototype.load = /**
         * @return {?}
         */
        function () {
            if (!this.config || !this.config.backend || !this.config.backend.occ) {
                return rxjs.throwError(new Error("Missing config for OCC backend!"));
            }
            return this.http
                .get(this.url)
                .pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var baseSites = _a.baseSites;
                return baseSites;
            })));
        };
        OccSitesConfigLoader.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccSitesConfigLoader.ctorParameters = function () { return [
            { type: OccConfig },
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ OccSitesConfigLoader.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccSitesConfigLoader_Factory() { return new OccSitesConfigLoader(core.ɵɵinject(OccConfig), core.ɵɵinject(http.HttpClient)); }, token: OccSitesConfigLoader, providedIn: "root" });
        return OccSitesConfigLoader;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccSitesConfigLoader.prototype.endpoint;
        /**
         * @type {?}
         * @protected
         */
        OccSitesConfigLoader.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        OccSitesConfigLoader.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EXTERNAL_CONFIG_TRANSFER_ID = platformBrowser.makeStateKey('cx-external-config');
    var OccConfigLoaderService = /** @class */ (function () {
        function OccConfigLoaderService(platform, document, config, sitesConfigLoader, converter, transferState, serverRequestUrl) {
            this.platform = platform;
            this.document = document;
            this.config = config;
            this.sitesConfigLoader = sitesConfigLoader;
            this.converter = converter;
            this.transferState = transferState;
            this.serverRequestUrl = serverRequestUrl;
        }
        Object.defineProperty(OccConfigLoaderService.prototype, "currentUrl", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                if (common.isPlatformBrowser(this.platform)) {
                    return this.document.location.href;
                }
                if (this.serverRequestUrl) {
                    return this.serverRequestUrl;
                }
                if (core.isDevMode()) {
                    console.error("Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR");
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Initializes the Spartacus config asynchronously basing on the external config
         */
        /**
         * Initializes the Spartacus config asynchronously basing on the external config
         * @return {?}
         */
        OccConfigLoaderService.prototype.loadConfig = /**
         * Initializes the Spartacus config asynchronously basing on the external config
         * @return {?}
         */
        function () {
            var _this = this;
            return this.get()
                .pipe(operators.tap((/**
             * @param {?} externalConfig
             * @return {?}
             */
            function (externalConfig) { return _this.transfer(externalConfig); })), operators.map((/**
             * @param {?} externalConfig
             * @return {?}
             */
            function (externalConfig) {
                return deepMerge.apply(void 0, __spread([{}], _this.getConfigChunks(externalConfig)));
            })))
                .toPromise();
        };
        /**
         * Returns the external config
         */
        /**
         * Returns the external config
         * @protected
         * @return {?}
         */
        OccConfigLoaderService.prototype.get = /**
         * Returns the external config
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var rehydratedExternalConfig = this.rehydrate();
            return rehydratedExternalConfig
                ? rxjs.of(rehydratedExternalConfig)
                : this.load();
        };
        /**
         * Loads the external config from backend
         */
        /**
         * Loads the external config from backend
         * @protected
         * @return {?}
         */
        OccConfigLoaderService.prototype.load = /**
         * Loads the external config from backend
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            return this.sitesConfigLoader
                .load()
                .pipe(operators.map((/**
             * @param {?} baseSites
             * @return {?}
             */
            function (baseSites) {
                return _this.converter.fromOccBaseSites(baseSites, _this.currentUrl);
            })));
        };
        /**
         * Tries to rehydrate external config in the browser from SSR
         */
        /**
         * Tries to rehydrate external config in the browser from SSR
         * @protected
         * @return {?}
         */
        OccConfigLoaderService.prototype.rehydrate = /**
         * Tries to rehydrate external config in the browser from SSR
         * @protected
         * @return {?}
         */
        function () {
            if (this.transferState && common.isPlatformBrowser(this.platform)) {
                return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);
            }
        };
        /**
         * Transfers the given external config in SSR to the browser
         *
         * @param externalConfig
         */
        /**
         * Transfers the given external config in SSR to the browser
         *
         * @protected
         * @param {?} externalConfig
         * @return {?}
         */
        OccConfigLoaderService.prototype.transfer = /**
         * Transfers the given external config in SSR to the browser
         *
         * @protected
         * @param {?} externalConfig
         * @return {?}
         */
        function (externalConfig) {
            if (this.transferState &&
                common.isPlatformServer(this.platform) &&
                externalConfig) {
                this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);
            }
        };
        /**
         * @protected
         * @param {?} externalConfig
         * @return {?}
         */
        OccConfigLoaderService.prototype.getConfigChunks = /**
         * @protected
         * @param {?} externalConfig
         * @return {?}
         */
        function (externalConfig) {
            /** @type {?} */
            var chunks = [this.converter.toSiteContextConfig(externalConfig)];
            if (this.shouldReturnI18nChunk()) {
                chunks.push(this.converter.toI18nConfig(externalConfig));
            }
            return chunks;
        };
        /**
         * @private
         * @return {?}
         */
        OccConfigLoaderService.prototype.shouldReturnI18nChunk = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var fallbackLangExists = typeof (this.config &&
                this.config.i18n &&
                this.config.i18n.fallbackLang) !== 'undefined';
            if (fallbackLangExists && core.isDevMode()) {
                console.warn("There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.");
            }
            return !fallbackLangExists;
        };
        OccConfigLoaderService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccConfigLoaderService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [Config,] }] },
            { type: OccSitesConfigLoader },
            { type: OccLoadedConfigConverter },
            { type: platformBrowser.TransferState, decorators: [{ type: core.Optional }] },
            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [SERVER_REQUEST_URL,] }] }
        ]; };
        /** @nocollapse */ OccConfigLoaderService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccConfigLoaderService_Factory() { return new OccConfigLoaderService(core.ɵɵinject(core.PLATFORM_ID), core.ɵɵinject(common.DOCUMENT), core.ɵɵinject(Config), core.ɵɵinject(OccSitesConfigLoader), core.ɵɵinject(OccLoadedConfigConverter), core.ɵɵinject(platformBrowser.TransferState, 8), core.ɵɵinject(SERVER_REQUEST_URL, 8)); }, token: OccConfigLoaderService, providedIn: "root" });
        return OccConfigLoaderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OccConfigLoaderService.prototype.platform;
        /**
         * @type {?}
         * @protected
         */
        OccConfigLoaderService.prototype.document;
        /**
         * @type {?}
         * @protected
         */
        OccConfigLoaderService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        OccConfigLoaderService.prototype.sitesConfigLoader;
        /**
         * @type {?}
         * @protected
         */
        OccConfigLoaderService.prototype.converter;
        /**
         * @type {?}
         * @protected
         */
        OccConfigLoaderService.prototype.transferState;
        /**
         * @type {?}
         * @protected
         */
        OccConfigLoaderService.prototype.serverRequestUrl;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Initializes the Spartacus config asynchronously basing on the external config
     * @param {?} configLoader
     * @param {?} config
     * @return {?}
     */
    function initConfig(configLoader, config) {
        /**
         * Load config for `context` from backend only when there is no static config for `context.baseSite`
         */
        if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {
            return {
                scopes: ['context', 'i18n.fallbackLang'],
                configFactory: (/**
                 * @return {?}
                 */
                function () { return configLoader.loadConfig(); }),
            };
        }
        return null;
    }
    /**
     * Re-provides the external config chunk given before Angular bootstrap
     */
    var OccConfigLoaderModule = /** @class */ (function () {
        function OccConfigLoaderModule() {
        }
        /**
         * @return {?}
         */
        OccConfigLoaderModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: OccConfigLoaderModule,
                providers: [
                    {
                        provide: CONFIG_INITIALIZER,
                        useFactory: initConfig,
                        deps: [OccConfigLoaderService, SiteContextConfig],
                        multi: true,
                    },
                ],
            };
        };
        OccConfigLoaderModule.decorators = [
            { type: core.NgModule }
        ];
        return OccConfigLoaderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function OccLoadedConfig() { }
    if (false) {
        /**
         * Uid of the base site
         * @type {?|undefined}
         */
        OccLoadedConfig.prototype.baseSite;
        /**
         * List of languages, where the first language is the default one
         * @type {?|undefined}
         */
        OccLoadedConfig.prototype.languages;
        /**
         * List of currencies, where the first currency is the default one
         * @type {?|undefined}
         */
        OccLoadedConfig.prototype.currencies;
        /**
         * Site context parameters to persist in the route
         * @type {?|undefined}
         */
        OccLoadedConfig.prototype.urlParameters;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';
    /** @type {?} */
    var OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';
    /** @type {?} */
    var MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';
    /** @type {?} */
    var MEDIA_BASE_URL_META_TAG_PLACEHOLDER = 'MEDIA_BACKEND_BASE_URL_VALUE';
    /**
     * @param {?} meta
     * @return {?}
     */
    function occServerConfigFromMetaTagFactory(meta) {
        /** @type {?} */
        var baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);
        return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER
            ? { backend: { occ: { baseUrl: baseUrl } } }
            : {};
    }
    /**
     * @param {?} meta
     * @return {?}
     */
    function mediaServerConfigFromMetaTagFactory(meta) {
        /** @type {?} */
        var baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);
        return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER
            ? { backend: { media: { baseUrl: baseUrl } } }
            : {};
    }
    /**
     * @param {?} name
     * @param {?} meta
     * @return {?}
     */
    function getMetaTagContent(name, meta) {
        /** @type {?} */
        var metaTag = meta.getTag("name=\"" + name + "\"");
        return metaTag && metaTag.content;
    }
    /**
     * @return {?}
     */
    function provideConfigFromMetaTags() {
        return [
            provideConfigFactory(occServerConfigFromMetaTagFactory, [platformBrowser.Meta]),
            provideConfigFactory(mediaServerConfigFromMetaTagFactory, [platformBrowser.Meta]),
        ];
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultOccConfig = {
        backend: {
            occ: {
                prefix: '/rest/v2/',
            },
            media: {},
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function occConfigValidator(config) {
        if (config.backend === undefined ||
            config.backend.occ === undefined ||
            config.backend.occ.baseUrl === undefined) {
            return 'Please configure backend.occ.baseUrl before using storefront library!';
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Http interceptor to add cookies to all cross-site requests.
     */
    var WithCredentialsInterceptor = /** @class */ (function () {
        function WithCredentialsInterceptor(config) {
            this.config = config;
        }
        /**
         * Intercepts each request and adds the `withCredential` flag to it
         * if it hasn't been added already.
         */
        /**
         * Intercepts each request and adds the `withCredential` flag to it
         * if it hasn't been added already.
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        WithCredentialsInterceptor.prototype.intercept = /**
         * Intercepts each request and adds the `withCredential` flag to it
         * if it hasn't been added already.
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            if (this.requiresWithCredentials(request)) {
                request = request.clone({
                    withCredentials: true,
                });
            }
            return next.handle(request);
        };
        /**
         * Indicates whether this is an OCC request.
         */
        /**
         * Indicates whether this is an OCC request.
         * @protected
         * @param {?} request
         * @return {?}
         */
        WithCredentialsInterceptor.prototype.requiresWithCredentials = /**
         * Indicates whether this is an OCC request.
         * @protected
         * @param {?} request
         * @return {?}
         */
        function (request) {
            return (
            /**
             * This `occConfig?.useWithCredentials` flag has only been introduced in
             * version 2.0. Customers must provide this interceptors manually in their
             * app to opt-in to use this feature, as we don't backport the configuration.
             */
            // this.occConfig?.useWithCredentials &&
            request.url.indexOf(this.occConfig.prefix) > -1);
        };
        Object.defineProperty(WithCredentialsInterceptor.prototype, "occConfig", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return this.config && this.config.backend && this.config.backend.occ
                    ? this.config.backend.occ
                    : {};
            },
            enumerable: true,
            configurable: true
        });
        WithCredentialsInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        WithCredentialsInterceptor.ctorParameters = function () { return [
            { type: OccConfig }
        ]; };
        /** @nocollapse */ WithCredentialsInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function WithCredentialsInterceptor_Factory() { return new WithCredentialsInterceptor(core.ɵɵinject(OccConfig)); }, token: WithCredentialsInterceptor, providedIn: "root" });
        return WithCredentialsInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        WithCredentialsInterceptor.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since 1.4.0
     *
     * In version 2.0 this provider will be removed, as you no longer need to
     * manually provide this interceptor as it will be provided in the `OccModule`.
     * @type {?}
     */
    var withCredentialsInterceptorProvider = {
        provide: http.HTTP_INTERCEPTORS,
        useExisting: WithCredentialsInterceptor,
        multi: true,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function OccEndpoints() { }
    if (false) {
        /**
         * Client login (get authorization token)
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.login;
        /**
         * Client logout (revoke authorization token)
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.revoke;
        /**
         * Get product details
         *
         * \@member string
         * @type {?|undefined}
         */
        OccEndpoints.prototype.product;
        /**
         * Get product details for scope
         *
         * \@member Object
         * @type {?|undefined}
         */
        OccEndpoints.prototype.product_scopes;
        /**
         * Get reviews for a product
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.productReviews;
        /**
         * Get a list of product references
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.productReferences;
        /**
         * Get a list of products and additional data
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.productSearch;
        /**
         * Get a list of available suggestions
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.productSuggestions;
        /**
         * Get CMS component details
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.component;
        /**
         * Get a list of CMS component details
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.components;
        /**
         * Get page data with list of cms content slots
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.pages;
        /**
         * Get page data with list of cms content slots
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.page;
        /**
         * Get all carts
         *
         * \@member {string} [carts]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.carts;
        /**
         * Get a cart with a given identifier
         *
         * \@member {string} [cart]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.cart;
        /**
         * Creates or restore a cart for a user
         *
         * \@member {string} [createCart]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.createCart;
        /**
         * Deletes a cart with a given cart id
         *
         * \@member {string} [deleteCart]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.deleteCart;
        /**
         * Adds a product to the cart
         *
         * \@member {string} [addEntries]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.addEntries;
        /**
         * Update quantity and store the details of a cart entry
         *
         * \@member {string} [updateEntries]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.updateEntries;
        /**
         * Deletes cart entry
         *
         * \@member {string} [removeEntries]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.removeEntries;
        /**
         * Assign email to cart
         *
         * \@member {string} [addEmail]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.addEmail;
        /**
         * Get a store location
         *
         * \@member {string} [page]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.store;
        /**
         * Get a list of store locations
         *
         * \@member {string} [page]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.stores;
        /**
         * Gets a store location count per country and regions
         *
         * \@member {string} [page]
         * @type {?|undefined}
         */
        OccEndpoints.prototype.storescounts;
        /**
         * Get a list of available languages
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.languages;
        /**
         * Get a list of available currencies
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.currencies;
        /**
         * Get a list of countries
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.countries;
        /**
         * Fetch the list of regions for the provided country
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.regions;
        /**
         * Titles used for user's personal info.
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.titles;
        /**
         * Get user details
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.user;
        /**
         * Register a new user.
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.userRegister;
        /**
         * Request an email to reset the password
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.userForgotPassword;
        /**
         * Reset the password once the email is recieved.
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.userResetPassword;
        /**
         * Update the user id with which the user authenticates.
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.userUpdateLoginId;
        /**
         * Update the user's password
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.userUpdatePassword;
        /**
         * Payment details root endpoint.
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.paymentDetailsAll;
        /**
         * Endpoint for a specific payment method.
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.paymentDetail;
        /**
         * Endpoint for the list of one user's orders
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.orderHistory;
        /**
         * Endpoint for the details of one user's order
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.orderDetail;
        /**
         * Endpoint for anonymous consent templates
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.anonymousConsentTemplates;
        /**
         * Endpoint for consent templates
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.consentTemplates;
        /**
         * Endpoint for a user's consents
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.consents;
        /**
         * Endpoint for a user's specific previously given consent.
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.consentDetail;
        /**
         * Endpoint for a user's addresses
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.addresses;
        /**
         * Endpoint for a user's specific address
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.addressDetail;
        /**
         * Endpoint for address verification
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.addressVerification;
        /**
         * Endpoint for consignment tracking
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.consignmentTracking;
        /**
         * Endpoint for asm customer search
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.asmCustomerSearch;
        /**
         * Endpoint for cart voucher
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.cartVoucher;
        /**
         * Endpoint for coupons
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.customerCoupons;
        /**
         * Endpoint for claiming coupon
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.claimCoupon;
        /**
         * Endpoint for coupons
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.couponNotification;
        /**
         * Explicitly saves a cart
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.saveCart;
        /**
         * Endpoint for notification preference
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.notificationPreference;
        /**
         * Endpoint for product interests
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.productInterests;
        /**
         * Endpoint for getting product interests
         *
         * \@member {string}
         * @type {?|undefined}
         */
        OccEndpoints.prototype.getProductInterests;
        /**
         * Endpoint for cancel an order
         * @type {?|undefined}
         */
        OccEndpoints.prototype.cancelOrder;
        /**
         * Endpoint for creating order return request
         * @type {?|undefined}
         */
        OccEndpoints.prototype.returnOrder;
        /**
         * Endpoint for user's order return requests
         * @type {?|undefined}
         */
        OccEndpoints.prototype.orderReturns;
        /**
         * Endpoint for order return request details
         * @type {?|undefined}
         */
        OccEndpoints.prototype.orderReturnDetail;
        /**
         * Endpoint for cancelling return request
         * @type {?|undefined}
         */
        OccEndpoints.prototype.cancelReturn;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    (function (Occ) {
        /**
         *
         * An interface representing Country.
         * @record
         */
        function Country() { }
        Occ.Country = Country;
        if (false) {
            /**
             * \@member {string} [isocode]
             * @type {?|undefined}
             */
            Country.prototype.isocode;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Country.prototype.name;
        }
        /**
         *
         * An interface representing Region.
         * @record
         */
        function Region() { }
        Occ.Region = Region;
        if (false) {
            /**
             * \@member {string} [countryIso]
             * @type {?|undefined}
             */
            Region.prototype.countryIso;
            /**
             * \@member {string} [isocode]
             * @type {?|undefined}
             */
            Region.prototype.isocode;
            /**
             * \@member {string} [isocodeShort]
             * @type {?|undefined}
             */
            Region.prototype.isocodeShort;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Region.prototype.name;
        }
        /**
         *
         * An interface representing RegionList.
         * @record
         */
        function RegionList() { }
        Occ.RegionList = RegionList;
        if (false) {
            /**
             * \@member {Region[]} [regions]
             * @type {?|undefined}
             */
            RegionList.prototype.regions;
        }
        /**
         *
         * An interface representing Address.
         * @record
         */
        function Address() { }
        Occ.Address = Address;
        if (false) {
            /**
             * \@member {string} [companyName]
             * @type {?|undefined}
             */
            Address.prototype.companyName;
            /**
             * \@member {Country} [country]
             * @type {?|undefined}
             */
            Address.prototype.country;
            /**
             * \@member {boolean} [defaultAddress]
             * @type {?|undefined}
             */
            Address.prototype.defaultAddress;
            /**
             * \@member {string} [email]
             * @type {?|undefined}
             */
            Address.prototype.email;
            /**
             * \@member {string} [firstName]
             * @type {?|undefined}
             */
            Address.prototype.firstName;
            /**
             * \@member {string} [formattedAddress]
             * @type {?|undefined}
             */
            Address.prototype.formattedAddress;
            /**
             * \@member {string} [id]
             * @type {?|undefined}
             */
            Address.prototype.id;
            /**
             * \@member {string} [lastName]
             * @type {?|undefined}
             */
            Address.prototype.lastName;
            /**
             * \@member {string} [line1]
             * @type {?|undefined}
             */
            Address.prototype.line1;
            /**
             * \@member {string} [line2]
             * @type {?|undefined}
             */
            Address.prototype.line2;
            /**
             * \@member {string} [phone]
             * @type {?|undefined}
             */
            Address.prototype.phone;
            /**
             * \@member {string} [postalCode]
             * @type {?|undefined}
             */
            Address.prototype.postalCode;
            /**
             * \@member {Region} [region]
             * @type {?|undefined}
             */
            Address.prototype.region;
            /**
             * \@member {boolean} [shippingAddress]
             * @type {?|undefined}
             */
            Address.prototype.shippingAddress;
            /**
             * \@member {string} [title]
             * @type {?|undefined}
             */
            Address.prototype.title;
            /**
             * \@member {string} [titleCode]
             * @type {?|undefined}
             */
            Address.prototype.titleCode;
            /**
             * \@member {string} [town]
             * @type {?|undefined}
             */
            Address.prototype.town;
            /**
             * \@member {boolean} [visibleInAddressBook]
             * @type {?|undefined}
             */
            Address.prototype.visibleInAddressBook;
        }
        /**
         *
         * An interface representing AddressList.
         * @record
         */
        function AddressList() { }
        Occ.AddressList = AddressList;
        if (false) {
            /**
             * \@member {Address[]} [addresses]
             * @type {?|undefined}
             */
            AddressList.prototype.addresses;
        }
        /**
         *
         * An interface representing ErrorModel.
         * Error message
         *
         * @record
         */
        function ErrorModel() { }
        Occ.ErrorModel = ErrorModel;
        if (false) {
            /**
             * \@member {string} [message] Descriptive, human readable error message.
             * @type {?|undefined}
             */
            ErrorModel.prototype.message;
            /**
             * \@member {string} [reason] Additional classification specific for each
             * error type e.g. 'noStock'.
             * @type {?|undefined}
             */
            ErrorModel.prototype.reason;
            /**
             * \@member {string} [subject] Identifier of the related object e.g. '1'.
             * @type {?|undefined}
             */
            ErrorModel.prototype.subject;
            /**
             * \@member {string} [subjectType] Type of the object related to the error
             * e.g. 'entry'.
             * @type {?|undefined}
             */
            ErrorModel.prototype.subjectType;
            /**
             * \@member {string} [type] Type of the error e.g. 'LowStockError'.
             * @type {?|undefined}
             */
            ErrorModel.prototype.type;
        }
        /**
         *
         * An interface representing ErrorList.
         * List of errors
         *
         * @record
         */
        function ErrorList() { }
        Occ.ErrorList = ErrorList;
        if (false) {
            /**
             * \@member {ErrorModel[]} [errors]
             * @type {?|undefined}
             */
            ErrorList.prototype.errors;
        }
        /**
         *
         * An interface representing AddressValidation.
         * @record
         */
        function AddressValidation() { }
        Occ.AddressValidation = AddressValidation;
        if (false) {
            /**
             * \@member {string} [decision]
             * @type {?|undefined}
             */
            AddressValidation.prototype.decision;
            /**
             * \@member {ErrorList} [errors]
             * @type {?|undefined}
             */
            AddressValidation.prototype.errors;
            /**
             * \@member {Address[]} [suggestedAddresses]
             * @type {?|undefined}
             */
            AddressValidation.prototype.suggestedAddresses;
        }
        /**
         *
         * An interface representing Price.
         * @record
         */
        function Price() { }
        Occ.Price = Price;
        if (false) {
            /**
             * \@member {string} [currencyIso]
             * @type {?|undefined}
             */
            Price.prototype.currencyIso;
            /**
             * \@member {string} [formattedValue]
             * @type {?|undefined}
             */
            Price.prototype.formattedValue;
            /**
             * \@member {number} [maxQuantity]
             * @type {?|undefined}
             */
            Price.prototype.maxQuantity;
            /**
             * \@member {number} [minQuantity]
             * @type {?|undefined}
             */
            Price.prototype.minQuantity;
            /**
             * \@member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'
             * @type {?|undefined}
             */
            Price.prototype.priceType;
            /**
             * \@member {number} [value]
             * @type {?|undefined}
             */
            Price.prototype.value;
        }
        /**
         *
         * An interface representing Stock.
         * @record
         */
        function Stock() { }
        Occ.Stock = Stock;
        if (false) {
            /**
             * \@member {number} [stockLevel]
             * @type {?|undefined}
             */
            Stock.prototype.stockLevel;
            /**
             * \@member {string} [stockLevelStatus]
             * @type {?|undefined}
             */
            Stock.prototype.stockLevelStatus;
        }
        /**
         *
         * An interface representing Image.
         * @record
         */
        function Image() { }
        Occ.Image = Image;
        if (false) {
            /**
             * \@member {string} [altText]
             * @type {?|undefined}
             */
            Image.prototype.altText;
            /**
             * \@member {string} [format]
             * @type {?|undefined}
             */
            Image.prototype.format;
            /**
             * \@member {number} [galleryIndex]
             * @type {?|undefined}
             */
            Image.prototype.galleryIndex;
            /**
             * \@member {ImageType} [imageType] Possible values include: 'PRIMARY',
             * 'GALLERY'
             * @type {?|undefined}
             */
            Image.prototype.imageType;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            Image.prototype.url;
        }
        /**
         *
         * An interface representing VariantOptionQualifier.
         * @record
         */
        function VariantOptionQualifier() { }
        Occ.VariantOptionQualifier = VariantOptionQualifier;
        if (false) {
            /**
             * \@member {Image} [image]
             * @type {?|undefined}
             */
            VariantOptionQualifier.prototype.image;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            VariantOptionQualifier.prototype.name;
            /**
             * \@member {string} [qualifier]
             * @type {?|undefined}
             */
            VariantOptionQualifier.prototype.qualifier;
            /**
             * \@member {string} [value]
             * @type {?|undefined}
             */
            VariantOptionQualifier.prototype.value;
        }
        /**
         *
         * An interface representing VariantOption.
         * @record
         */
        function VariantOption() { }
        Occ.VariantOption = VariantOption;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            VariantOption.prototype.code;
            /**
             * \@member {Price} [priceData]
             * @type {?|undefined}
             */
            VariantOption.prototype.priceData;
            /**
             * \@member {Stock} [stock]
             * @type {?|undefined}
             */
            VariantOption.prototype.stock;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            VariantOption.prototype.url;
            /**
             * \@member {VariantOptionQualifier[]} [variantOptionQualifiers]
             * @type {?|undefined}
             */
            VariantOption.prototype.variantOptionQualifiers;
        }
        /**
         *
         * An interface representing BaseOption.
         * @record
         */
        function BaseOption() { }
        Occ.BaseOption = BaseOption;
        if (false) {
            /**
             * \@member {VariantOption[]} [options]
             * @type {?|undefined}
             */
            BaseOption.prototype.options;
            /**
             * \@member {VariantOption} [selected]
             * @type {?|undefined}
             */
            BaseOption.prototype.selected;
            /**
             * \@member {string} [variantType]
             * @type {?|undefined}
             */
            BaseOption.prototype.variantType;
        }
        /**
         *
         * An interface representing SearchQuery.
         * @record
         */
        function SearchQuery() { }
        Occ.SearchQuery = SearchQuery;
        if (false) {
            /**
             * \@member {string} [value]
             * @type {?|undefined}
             */
            SearchQuery.prototype.value;
        }
        /**
         *
         * An interface representing SearchState.
         * @record
         */
        function SearchState() { }
        Occ.SearchState = SearchState;
        if (false) {
            /**
             * \@member {SearchQuery} [query]
             * @type {?|undefined}
             */
            SearchState.prototype.query;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            SearchState.prototype.url;
        }
        /**
         *
         * An interface representing Breadcrumb.
         * @record
         */
        function Breadcrumb() { }
        Occ.Breadcrumb = Breadcrumb;
        if (false) {
            /**
             * \@member {string} [facetCode]
             * @type {?|undefined}
             */
            Breadcrumb.prototype.facetCode;
            /**
             * \@member {string} [facetName]
             * @type {?|undefined}
             */
            Breadcrumb.prototype.facetName;
            /**
             * \@member {string} [facetValueCode]
             * @type {?|undefined}
             */
            Breadcrumb.prototype.facetValueCode;
            /**
             * \@member {string} [facetValueName]
             * @type {?|undefined}
             */
            Breadcrumb.prototype.facetValueName;
            /**
             * \@member {SearchState} [removeQuery]
             * @type {?|undefined}
             */
            Breadcrumb.prototype.removeQuery;
            /**
             * \@member {SearchState} [truncateQuery]
             * @type {?|undefined}
             */
            Breadcrumb.prototype.truncateQuery;
        }
        /**
         *
         * An interface representing Component.
         * @record
         */
        function Component() { }
        Occ.Component = Component;
        if (false) {
            /**
             * \@member {Date} [modifiedTime]
             * @type {?|undefined}
             */
            Component.prototype.modifiedTime;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Component.prototype.name;
            /**
             * \@member {any} [otherProperties]
             * @type {?|undefined}
             */
            Component.prototype.otherProperties;
            /**
             * \@member {string} [typeCode]
             * @type {?|undefined}
             */
            Component.prototype.typeCode;
            /**
             * \@member {string} [uid]
             * @type {?|undefined}
             */
            Component.prototype.uid;
        }
        /**
         *
         * An interface representing ComponentList.
         * @record
         */
        function ComponentList() { }
        Occ.ComponentList = ComponentList;
        if (false) {
            /**
             * \@member {Component[]} [component]
             * @type {?|undefined}
             */
            ComponentList.prototype.component;
        }
        /**
         *
         * An interface representing ContentSlot.
         * @record
         */
        function ContentSlot() { }
        Occ.ContentSlot = ContentSlot;
        if (false) {
            /**
             * \@member {ComponentList} [components]
             * @type {?|undefined}
             */
            ContentSlot.prototype.components;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            ContentSlot.prototype.name;
            /**
             * \@member {string} [position]
             * @type {?|undefined}
             */
            ContentSlot.prototype.position;
            /**
             * \@member {string} [slotId]
             * @type {?|undefined}
             */
            ContentSlot.prototype.slotId;
            /**
             * \@member {boolean} [slotShared]
             * @type {?|undefined}
             */
            ContentSlot.prototype.slotShared;
            /**
             * \@member {string} [slotStatus]
             * @type {?|undefined}
             */
            ContentSlot.prototype.slotStatus;
        }
        /**
         *
         * An interface representing ContentSlotList.
         * @record
         */
        function ContentSlotList() { }
        Occ.ContentSlotList = ContentSlotList;
        if (false) {
            /**
             * \@member {ContentSlot[]} [contentSlot]
             * @type {?|undefined}
             */
            ContentSlotList.prototype.contentSlot;
        }
        /**
         *
         * An interface representing CMSPage.
         * @record
         */
        function CMSPage() { }
        Occ.CMSPage = CMSPage;
        if (false) {
            /**
             * \@member {ContentSlotList} [contentSlots]
             * @type {?|undefined}
             */
            CMSPage.prototype.contentSlots;
            /**
             * \@member {boolean} [defaultPage]
             * @type {?|undefined}
             */
            CMSPage.prototype.defaultPage;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            CMSPage.prototype.name;
            /**
             * \@member {string} [template]
             * @type {?|undefined}
             */
            CMSPage.prototype.template;
            /**
             * \@member {string} [title]
             * @type {?|undefined}
             */
            CMSPage.prototype.title;
            /**
             * \@member {string} [typeCode]
             * @type {?|undefined}
             */
            CMSPage.prototype.typeCode;
            /**
             * \@member {string} [uid]
             * @type {?|undefined}
             */
            CMSPage.prototype.uid;
        }
        /**
         *
         * An interface representing CardType.
         * @record
         */
        function CardType() { }
        Occ.CardType = CardType;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            CardType.prototype.code;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            CardType.prototype.name;
        }
        /**
         *
         * An interface representing CardTypeList.
         * @record
         */
        function CardTypeList() { }
        Occ.CardTypeList = CardTypeList;
        if (false) {
            /**
             * \@member {CardType[]} [cardTypes]
             * @type {?|undefined}
             */
            CardTypeList.prototype.cardTypes;
        }
        /**
         *
         * An interface representing PromotionOrderEntryConsumed.
         * @record
         */
        function PromotionOrderEntryConsumed() { }
        Occ.PromotionOrderEntryConsumed = PromotionOrderEntryConsumed;
        if (false) {
            /**
             * \@member {number} [adjustedUnitPrice]
             * @type {?|undefined}
             */
            PromotionOrderEntryConsumed.prototype.adjustedUnitPrice;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            PromotionOrderEntryConsumed.prototype.code;
            /**
             * \@member {number} [orderEntryNumber]
             * @type {?|undefined}
             */
            PromotionOrderEntryConsumed.prototype.orderEntryNumber;
            /**
             * \@member {number} [quantity]
             * @type {?|undefined}
             */
            PromotionOrderEntryConsumed.prototype.quantity;
        }
        /**
         *
         * An interface representing PromotionRestriction.
         * @record
         */
        function PromotionRestriction() { }
        Occ.PromotionRestriction = PromotionRestriction;
        if (false) {
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            PromotionRestriction.prototype.description;
            /**
             * \@member {string} [restrictionType]
             * @type {?|undefined}
             */
            PromotionRestriction.prototype.restrictionType;
        }
        /**
         *
         * An interface representing Promotion.
         * @record
         */
        function Promotion() { }
        Occ.Promotion = Promotion;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Promotion.prototype.code;
            /**
             * \@member {string[]} [couldFireMessages]
             * @type {?|undefined}
             */
            Promotion.prototype.couldFireMessages;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            Promotion.prototype.description;
            /**
             * \@member {boolean} [enabled]
             * @type {?|undefined}
             */
            Promotion.prototype.enabled;
            /**
             * \@member {Date} [endDate]
             * @type {?|undefined}
             */
            Promotion.prototype.endDate;
            /**
             * \@member {string[]} [firedMessages]
             * @type {?|undefined}
             */
            Promotion.prototype.firedMessages;
            /**
             * \@member {number} [priority]
             * @type {?|undefined}
             */
            Promotion.prototype.priority;
            /**
             * \@member {Image} [productBanner]
             * @type {?|undefined}
             */
            Promotion.prototype.productBanner;
            /**
             * \@member {string} [promotionGroup]
             * @type {?|undefined}
             */
            Promotion.prototype.promotionGroup;
            /**
             * \@member {string} [promotionType]
             * @type {?|undefined}
             */
            Promotion.prototype.promotionType;
            /**
             * \@member {PromotionRestriction[]} [restrictions]
             * @type {?|undefined}
             */
            Promotion.prototype.restrictions;
            /**
             * \@member {Date} [startDate]
             * @type {?|undefined}
             */
            Promotion.prototype.startDate;
            /**
             * \@member {string} [title]
             * @type {?|undefined}
             */
            Promotion.prototype.title;
        }
        /**
         *
         * An interface representing PromotionResult.
         * @record
         */
        function PromotionResult() { }
        Occ.PromotionResult = PromotionResult;
        if (false) {
            /**
             * \@member {PromotionOrderEntryConsumed[]} [consumedEntries]
             * @type {?|undefined}
             */
            PromotionResult.prototype.consumedEntries;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            PromotionResult.prototype.description;
            /**
             * \@member {Promotion} [promotion]
             * @type {?|undefined}
             */
            PromotionResult.prototype.promotion;
        }
        /**
         *
         * An interface representing Currency.
         * @record
         */
        function Currency() { }
        Occ.Currency = Currency;
        if (false) {
            /**
             * \@member {boolean} [active]
             * @type {?|undefined}
             */
            Currency.prototype.active;
            /**
             * \@member {string} [isocode]
             * @type {?|undefined}
             */
            Currency.prototype.isocode;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Currency.prototype.name;
            /**
             * \@member {string} [symbol]
             * @type {?|undefined}
             */
            Currency.prototype.symbol;
        }
        /**
         *
         * An interface representing Voucher.
         * @record
         */
        function Voucher() { }
        Occ.Voucher = Voucher;
        if (false) {
            /**
             * \@member {Price} [appliedValue]
             * @type {?|undefined}
             */
            Voucher.prototype.appliedValue;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Voucher.prototype.code;
            /**
             * \@member {Currency} [currency]
             * @type {?|undefined}
             */
            Voucher.prototype.currency;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            Voucher.prototype.description;
            /**
             * \@member {boolean} [freeShipping]
             * @type {?|undefined}
             */
            Voucher.prototype.freeShipping;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Voucher.prototype.name;
            /**
             * \@member {number} [value]
             * @type {?|undefined}
             */
            Voucher.prototype.value;
            /**
             * \@member {string} [valueFormatted]
             * @type {?|undefined}
             */
            Voucher.prototype.valueFormatted;
            /**
             * \@member {string} [valueString]
             * @type {?|undefined}
             */
            Voucher.prototype.valueString;
            /**
             * \@member {string} [voucherCode]
             * @type {?|undefined}
             */
            Voucher.prototype.voucherCode;
        }
        /**
         *
         * An interface representing DeliveryMode.
         * @record
         */
        function DeliveryMode() { }
        Occ.DeliveryMode = DeliveryMode;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            DeliveryMode.prototype.code;
            /**
             * \@member {Price} [deliveryCost]
             * @type {?|undefined}
             */
            DeliveryMode.prototype.deliveryCost;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            DeliveryMode.prototype.description;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            DeliveryMode.prototype.name;
        }
        /**
         *
         * An interface representing GeoPoint.
         * @record
         */
        function GeoPoint() { }
        Occ.GeoPoint = GeoPoint;
        if (false) {
            /**
             * \@member {number} [latitude]
             * @type {?|undefined}
             */
            GeoPoint.prototype.latitude;
            /**
             * \@member {number} [longitude]
             * @type {?|undefined}
             */
            GeoPoint.prototype.longitude;
        }
        /**
         *
         * An interface representing Time.
         * @record
         */
        function Time() { }
        Occ.Time = Time;
        if (false) {
            /**
             * \@member {string} [formattedHour]
             * @type {?|undefined}
             */
            Time.prototype.formattedHour;
            /**
             * \@member {number} [hour]
             * @type {?|undefined}
             */
            Time.prototype.hour;
            /**
             * \@member {number} [minute]
             * @type {?|undefined}
             */
            Time.prototype.minute;
        }
        /**
         *
         * An interface representing SpecialOpeningDay.
         * @record
         */
        function SpecialOpeningDay() { }
        Occ.SpecialOpeningDay = SpecialOpeningDay;
        if (false) {
            /**
             * \@member {boolean} [closed]
             * @type {?|undefined}
             */
            SpecialOpeningDay.prototype.closed;
            /**
             * \@member {Time} [closingTime]
             * @type {?|undefined}
             */
            SpecialOpeningDay.prototype.closingTime;
            /**
             * \@member {string} [comment]
             * @type {?|undefined}
             */
            SpecialOpeningDay.prototype.comment;
            /**
             * \@member {Date} [date]
             * @type {?|undefined}
             */
            SpecialOpeningDay.prototype.date;
            /**
             * \@member {string} [formattedDate]
             * @type {?|undefined}
             */
            SpecialOpeningDay.prototype.formattedDate;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            SpecialOpeningDay.prototype.name;
            /**
             * \@member {Time} [openingTime]
             * @type {?|undefined}
             */
            SpecialOpeningDay.prototype.openingTime;
        }
        /**
         *
         * An interface representing WeekdayOpeningDay.
         * @record
         */
        function WeekdayOpeningDay() { }
        Occ.WeekdayOpeningDay = WeekdayOpeningDay;
        if (false) {
            /**
             * \@member {boolean} [closed]
             * @type {?|undefined}
             */
            WeekdayOpeningDay.prototype.closed;
            /**
             * \@member {Time} [closingTime]
             * @type {?|undefined}
             */
            WeekdayOpeningDay.prototype.closingTime;
            /**
             * \@member {Time} [openingTime]
             * @type {?|undefined}
             */
            WeekdayOpeningDay.prototype.openingTime;
            /**
             * \@member {string} [weekDay]
             * @type {?|undefined}
             */
            WeekdayOpeningDay.prototype.weekDay;
        }
        /**
         *
         * An interface representing OpeningSchedule.
         * @record
         */
        function OpeningSchedule() { }
        Occ.OpeningSchedule = OpeningSchedule;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            OpeningSchedule.prototype.code;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            OpeningSchedule.prototype.name;
            /**
             * \@member {SpecialOpeningDay[]} [specialDayOpeningList]
             * @type {?|undefined}
             */
            OpeningSchedule.prototype.specialDayOpeningList;
            /**
             * \@member {WeekdayOpeningDay[]} [weekDayOpeningList]
             * @type {?|undefined}
             */
            OpeningSchedule.prototype.weekDayOpeningList;
        }
        /**
         *
         * An interface representing PointOfService.
         * @record
         */
        function PointOfService() { }
        Occ.PointOfService = PointOfService;
        if (false) {
            /**
             * \@member {Address} [address]
             * @type {?|undefined}
             */
            PointOfService.prototype.address;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            PointOfService.prototype.description;
            /**
             * \@member {string} [displayName]
             * @type {?|undefined}
             */
            PointOfService.prototype.displayName;
            /**
             * \@member {number} [distanceKm]
             * @type {?|undefined}
             */
            PointOfService.prototype.distanceKm;
            /**
             * \@member {{ [propertyName: string]: string }} [features]
             * @type {?|undefined}
             */
            PointOfService.prototype.features;
            /**
             * \@member {string} [formattedDistance]
             * @type {?|undefined}
             */
            PointOfService.prototype.formattedDistance;
            /**
             * \@member {GeoPoint} [geoPoint]
             * @type {?|undefined}
             */
            PointOfService.prototype.geoPoint;
            /**
             * \@member {Image} [mapIcon]
             * @type {?|undefined}
             */
            PointOfService.prototype.mapIcon;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            PointOfService.prototype.name;
            /**
             * \@member {OpeningSchedule} [openingHours]
             * @type {?|undefined}
             */
            PointOfService.prototype.openingHours;
            /**
             * \@member {string} [storeContent]
             * @type {?|undefined}
             */
            PointOfService.prototype.storeContent;
            /**
             * \@member {Image[]} [storeImages]
             * @type {?|undefined}
             */
            PointOfService.prototype.storeImages;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            PointOfService.prototype.url;
        }
        /**
         *
         * An interface representing Category.
         * @record
         */
        function Category() { }
        Occ.Category = Category;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Category.prototype.code;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Category.prototype.name;
            /**
             * \@member {Image} [image]
             * @type {?|undefined}
             */
            Category.prototype.image;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            Category.prototype.url;
        }
        /**
         *
         * An interface representing FeatureUnit.
         * @record
         */
        function FeatureUnit() { }
        Occ.FeatureUnit = FeatureUnit;
        if (false) {
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            FeatureUnit.prototype.name;
            /**
             * \@member {string} [symbol]
             * @type {?|undefined}
             */
            FeatureUnit.prototype.symbol;
            /**
             * \@member {string} [unitType]
             * @type {?|undefined}
             */
            FeatureUnit.prototype.unitType;
        }
        /**
         *
         * An interface representing FeatureValue.
         * @record
         */
        function FeatureValue() { }
        Occ.FeatureValue = FeatureValue;
        if (false) {
            /**
             * \@member {string} [value]
             * @type {?|undefined}
             */
            FeatureValue.prototype.value;
        }
        /**
         *
         * An interface representing Feature.
         * @record
         */
        function Feature() { }
        Occ.Feature = Feature;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Feature.prototype.code;
            /**
             * \@member {boolean} [comparable]
             * @type {?|undefined}
             */
            Feature.prototype.comparable;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            Feature.prototype.description;
            /**
             * \@member {FeatureUnit} [featureUnit]
             * @type {?|undefined}
             */
            Feature.prototype.featureUnit;
            /**
             * \@member {FeatureValue[]} [featureValues]
             * @type {?|undefined}
             */
            Feature.prototype.featureValues;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Feature.prototype.name;
            /**
             * \@member {boolean} [range]
             * @type {?|undefined}
             */
            Feature.prototype.range;
            /**
             * \@member {string} [type]
             * @type {?|undefined}
             */
            Feature.prototype.type;
        }
        /**
         *
         * An interface representing Classification.
         * @record
         */
        function Classification() { }
        Occ.Classification = Classification;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Classification.prototype.code;
            /**
             * \@member {Feature[]} [features]
             * @type {?|undefined}
             */
            Classification.prototype.features;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Classification.prototype.name;
        }
        /**
         *
         * An interface representing FutureStock.
         * @record
         */
        function FutureStock() { }
        Occ.FutureStock = FutureStock;
        if (false) {
            /**
             * \@member {Date} [date]
             * @type {?|undefined}
             */
            FutureStock.prototype.date;
            /**
             * \@member {string} [formattedDate]
             * @type {?|undefined}
             */
            FutureStock.prototype.formattedDate;
            /**
             * \@member {Stock} [stock]
             * @type {?|undefined}
             */
            FutureStock.prototype.stock;
        }
        /**
         *
         * An interface representing PriceRange.
         * @record
         */
        function PriceRange() { }
        Occ.PriceRange = PriceRange;
        if (false) {
            /**
             * \@member {Price} [maxPrice]
             * @type {?|undefined}
             */
            PriceRange.prototype.maxPrice;
            /**
             * \@member {Price} [minPrice]
             * @type {?|undefined}
             */
            PriceRange.prototype.minPrice;
        }
        /**
         *
         * An interface representing ProductReference.
         * @record
         */
        function ProductReference() { }
        Occ.ProductReference = ProductReference;
        if (false) {
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            ProductReference.prototype.description;
            /**
             * \@member {boolean} [preselected]
             * @type {?|undefined}
             */
            ProductReference.prototype.preselected;
            /**
             * \@member {number} [quantity]
             * @type {?|undefined}
             */
            ProductReference.prototype.quantity;
            /**
             * \@member {string} [referenceType]
             * @type {?|undefined}
             */
            ProductReference.prototype.referenceType;
            /**
             * \@member {Product} [target]
             * @type {?|undefined}
             */
            ProductReference.prototype.target;
        }
        /**
         *
         * An interface representing Language.
         * @record
         */
        function Language() { }
        Occ.Language = Language;
        if (false) {
            /**
             * \@member {boolean} [active]
             * @type {?|undefined}
             */
            Language.prototype.active;
            /**
             * \@member {string} [isocode]
             * @type {?|undefined}
             */
            Language.prototype.isocode;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Language.prototype.name;
            /**
             * \@member {string} [nativeName]
             * @type {?|undefined}
             */
            Language.prototype.nativeName;
        }
        /**
         *
         * An interface representing User.
         * @record
         */
        function User() { }
        Occ.User = User;
        if (false) {
            /**
             * \@member {Currency} [currency]
             * @type {?|undefined}
             */
            User.prototype.currency;
            /**
             * \@member {string} [customerId]
             * @type {?|undefined}
             */
            User.prototype.customerId;
            /**
             * \@member {Date} [deactivationDate]
             * @type {?|undefined}
             */
            User.prototype.deactivationDate;
            /**
             * \@member {Address} [defaultAddress]
             * @type {?|undefined}
             */
            User.prototype.defaultAddress;
            /**
             * \@member {string} [displayUid]
             * @type {?|undefined}
             */
            User.prototype.displayUid;
            /**
             * \@member {string} [firstName]
             * @type {?|undefined}
             */
            User.prototype.firstName;
            /**
             * \@member {Language} [language]
             * @type {?|undefined}
             */
            User.prototype.language;
            /**
             * \@member {string} [lastName]
             * @type {?|undefined}
             */
            User.prototype.lastName;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            User.prototype.name;
            /**
             * \@member {string} [title]
             * @type {?|undefined}
             */
            User.prototype.title;
            /**
             * \@member {string} [titleCode]
             * @type {?|undefined}
             */
            User.prototype.titleCode;
            /**
             * \@member {string} [uid]
             * @type {?|undefined}
             */
            User.prototype.uid;
        }
        /**
         *
         * An interface representing Review.
         * @record
         */
        function Review() { }
        Occ.Review = Review;
        if (false) {
            /**
             * \@member {string} [alias]
             * @type {?|undefined}
             */
            Review.prototype.alias;
            /**
             * \@member {string} [comment]
             * @type {?|undefined}
             */
            Review.prototype.comment;
            /**
             * \@member {Date} [date]
             * @type {?|undefined}
             */
            Review.prototype.date;
            /**
             * \@member {string} [headline]
             * @type {?|undefined}
             */
            Review.prototype.headline;
            /**
             * \@member {string} [id]
             * @type {?|undefined}
             */
            Review.prototype.id;
            /**
             * \@member {User} [principal]
             * @type {?|undefined}
             */
            Review.prototype.principal;
            /**
             * \@member {number} [rating]
             * @type {?|undefined}
             */
            Review.prototype.rating;
        }
        /**
         *
         * An interface representing VariantCategory.
         * @record
         */
        function VariantCategory() { }
        Occ.VariantCategory = VariantCategory;
        if (false) {
            /**
             * \@member {boolean} [hasImage]
             * @type {?|undefined}
             */
            VariantCategory.prototype.hasImage;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            VariantCategory.prototype.name;
            /**
             * \@member {number} [priority]
             * @type {?|undefined}
             */
            VariantCategory.prototype.priority;
        }
        /**
         *
         * An interface representing VariantValueCategory.
         * @record
         */
        function VariantValueCategory() { }
        Occ.VariantValueCategory = VariantValueCategory;
        if (false) {
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            VariantValueCategory.prototype.name;
            /**
             * \@member {number} [sequence]
             * @type {?|undefined}
             */
            VariantValueCategory.prototype.sequence;
            /**
             * \@member {VariantCategory[]} [superCategories]
             * @type {?|undefined}
             */
            VariantValueCategory.prototype.superCategories;
        }
        /**
         *
         * An interface representing VariantMatrixElement.
         * @record
         */
        function VariantMatrixElement() { }
        Occ.VariantMatrixElement = VariantMatrixElement;
        if (false) {
            /**
             * \@member {VariantMatrixElement[]} [elements]
             * @type {?|undefined}
             */
            VariantMatrixElement.prototype.elements;
            /**
             * \@member {boolean} [isLeaf]
             * @type {?|undefined}
             */
            VariantMatrixElement.prototype.isLeaf;
            /**
             * \@member {VariantCategory} [parentVariantCategory]
             * @type {?|undefined}
             */
            VariantMatrixElement.prototype.parentVariantCategory;
            /**
             * \@member {VariantOption} [variantOption]
             * @type {?|undefined}
             */
            VariantMatrixElement.prototype.variantOption;
            /**
             * \@member {VariantValueCategory} [variantValueCategory]
             * @type {?|undefined}
             */
            VariantMatrixElement.prototype.variantValueCategory;
        }
        /**
         *
         * An interface representing Product.
         * @record
         */
        function Product() { }
        Occ.Product = Product;
        if (false) {
            /**
             * \@member {boolean} [availableForPickup]
             * @type {?|undefined}
             */
            Product.prototype.availableForPickup;
            /**
             * \@member {number} [averageRating]
             * @type {?|undefined}
             */
            Product.prototype.averageRating;
            /**
             * \@member {BaseOption[]} [baseOptions]
             * @type {?|undefined}
             */
            Product.prototype.baseOptions;
            /**
             * \@member {string} [baseProduct]
             * @type {?|undefined}
             */
            Product.prototype.baseProduct;
            /**
             * \@member {Category[]} [categories]
             * @type {?|undefined}
             */
            Product.prototype.categories;
            /**
             * \@member {Classification[]} [classifications]
             * @type {?|undefined}
             */
            Product.prototype.classifications;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Product.prototype.code;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            Product.prototype.description;
            /**
             * \@member {FutureStock[]} [futureStocks]
             * @type {?|undefined}
             */
            Product.prototype.futureStocks;
            /**
             * \@member {Image[]} [images]
             * @type {?|undefined}
             */
            Product.prototype.images;
            /**
             * \@member {string} [manufacturer]
             * @type {?|undefined}
             */
            Product.prototype.manufacturer;
            /**
             * \@member {boolean} [multidimensional]
             * @type {?|undefined}
             */
            Product.prototype.multidimensional;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Product.prototype.name;
            /**
             * \@member {number} [numberOfReviews]
             * @type {?|undefined}
             */
            Product.prototype.numberOfReviews;
            /**
             * \@member {Promotion[]} [potentialPromotions]
             * @type {?|undefined}
             */
            Product.prototype.potentialPromotions;
            /**
             * \@member {Price} [price]
             * @type {?|undefined}
             */
            Product.prototype.price;
            /**
             * \@member {PriceRange} [priceRange]
             * @type {?|undefined}
             */
            Product.prototype.priceRange;
            /**
             * \@member {ProductReference[]} [productReferences]
             * @type {?|undefined}
             */
            Product.prototype.productReferences;
            /**
             * \@member {boolean} [purchasable]
             * @type {?|undefined}
             */
            Product.prototype.purchasable;
            /**
             * \@member {Review[]} [reviews]
             * @type {?|undefined}
             */
            Product.prototype.reviews;
            /**
             * \@member {Stock} [stock]
             * @type {?|undefined}
             */
            Product.prototype.stock;
            /**
             * \@member {string} [summary]
             * @type {?|undefined}
             */
            Product.prototype.summary;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            Product.prototype.url;
            /**
             * \@member {VariantMatrixElement[]} [variantMatrix]
             * @type {?|undefined}
             */
            Product.prototype.variantMatrix;
            /**
             * \@member {VariantOption[]} [variantOptions]
             * @type {?|undefined}
             */
            Product.prototype.variantOptions;
            /**
             * \@member {string} [variantType]
             * @type {?|undefined}
             */
            Product.prototype.variantType;
            /**
             * \@member {Price[]} [volumePrices]
             * @type {?|undefined}
             */
            Product.prototype.volumePrices;
            /**
             * \@member {boolean} [volumePricesFlag]
             * @type {?|undefined}
             */
            Product.prototype.volumePricesFlag;
        }
        /**
         *
         * An interface representing OrderEntry.
         * @record
         */
        function OrderEntry() { }
        Occ.OrderEntry = OrderEntry;
        if (false) {
            /**
             * \@member {Price} [basePrice]
             * @type {?|undefined}
             */
            OrderEntry.prototype.basePrice;
            /**
             * \@member {DeliveryMode} [deliveryMode]
             * @type {?|undefined}
             */
            OrderEntry.prototype.deliveryMode;
            /**
             * \@member {PointOfService} [deliveryPointOfService]
             * @type {?|undefined}
             */
            OrderEntry.prototype.deliveryPointOfService;
            /**
             * \@member {number} [entryNumber]
             * @type {?|undefined}
             */
            OrderEntry.prototype.entryNumber;
            /**
             * \@member {Product} [product]
             * @type {?|undefined}
             */
            OrderEntry.prototype.product;
            /**
             * \@member {number} [quantity]
             * @type {?|undefined}
             */
            OrderEntry.prototype.quantity;
            /**
             * \@member {Price} [totalPrice]
             * @type {?|undefined}
             */
            OrderEntry.prototype.totalPrice;
            /**
             * \@member {boolean} [updateable]
             * @type {?|undefined}
             */
            OrderEntry.prototype.updateable;
        }
        /**
         *
         * An interface representing DeliveryOrderEntryGroup.
         * @record
         */
        function DeliveryOrderEntryGroup() { }
        Occ.DeliveryOrderEntryGroup = DeliveryOrderEntryGroup;
        if (false) {
            /**
             * \@member {Address} [deliveryAddress]
             * @type {?|undefined}
             */
            DeliveryOrderEntryGroup.prototype.deliveryAddress;
            /**
             * \@member {OrderEntry[]} [entries]
             * @type {?|undefined}
             */
            DeliveryOrderEntryGroup.prototype.entries;
            /**
             * \@member {number} [quantity]
             * @type {?|undefined}
             */
            DeliveryOrderEntryGroup.prototype.quantity;
            /**
             * \@member {Price} [totalPriceWithTax]
             * @type {?|undefined}
             */
            DeliveryOrderEntryGroup.prototype.totalPriceWithTax;
        }
        /**
         *
         * An interface representing PaymentDetails.
         * @record
         */
        function PaymentDetails() { }
        Occ.PaymentDetails = PaymentDetails;
        if (false) {
            /**
             * \@member {string} [accountHolderName]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.accountHolderName;
            /**
             * \@member {Address} [billingAddress]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.billingAddress;
            /**
             * \@member {string} [cardNumber]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.cardNumber;
            /**
             * \@member {CardType} [cardType]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.cardType;
            /**
             * \@member {string} [cvn]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.cvn;
            /**
             * \@member {boolean} [defaultPayment]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.defaultPayment;
            /**
             * \@member {string} [expiryMonth]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.expiryMonth;
            /**
             * \@member {string} [expiryYear]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.expiryYear;
            /**
             * \@member {string} [id]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.id;
            /**
             * \@member {string} [issueNumber]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.issueNumber;
            /**
             * \@member {boolean} [saved]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.saved;
            /**
             * \@member {string} [startMonth]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.startMonth;
            /**
             * \@member {string} [startYear]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.startYear;
            /**
             * \@member {string} [subscriptionId]
             * @type {?|undefined}
             */
            PaymentDetails.prototype.subscriptionId;
        }
        /**
         *
         * An interface representing PickupOrderEntryGroup.
         * @record
         */
        function PickupOrderEntryGroup() { }
        Occ.PickupOrderEntryGroup = PickupOrderEntryGroup;
        if (false) {
            /**
             * \@member {PointOfService} [deliveryPointOfService]
             * @type {?|undefined}
             */
            PickupOrderEntryGroup.prototype.deliveryPointOfService;
            /**
             * \@member {number} [distance]
             * @type {?|undefined}
             */
            PickupOrderEntryGroup.prototype.distance;
            /**
             * \@member {OrderEntry[]} [entries]
             * @type {?|undefined}
             */
            PickupOrderEntryGroup.prototype.entries;
            /**
             * \@member {number} [quantity]
             * @type {?|undefined}
             */
            PickupOrderEntryGroup.prototype.quantity;
            /**
             * \@member {Price} [totalPriceWithTax]
             * @type {?|undefined}
             */
            PickupOrderEntryGroup.prototype.totalPriceWithTax;
        }
        /**
         *
         * An interface representing Principal.
         * @record
         */
        function Principal() { }
        Occ.Principal = Principal;
        if (false) {
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Principal.prototype.name;
            /**
             * \@member {string} [uid]
             * @type {?|undefined}
             */
            Principal.prototype.uid;
        }
        /**
         *
         * An interface representing Cart.
         * @record
         */
        function Cart() { }
        Occ.Cart = Cart;
        if (false) {
            /**
             * \@member {PromotionResult[]} [appliedOrderPromotions]
             * @type {?|undefined}
             */
            Cart.prototype.appliedOrderPromotions;
            /**
             * \@member {PromotionResult[]} [appliedProductPromotions]
             * @type {?|undefined}
             */
            Cart.prototype.appliedProductPromotions;
            /**
             * \@member {Voucher[]} [appliedVouchers]
             * @type {?|undefined}
             */
            Cart.prototype.appliedVouchers;
            /**
             * \@member {boolean} [calculated]
             * @type {?|undefined}
             */
            Cart.prototype.calculated;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Cart.prototype.code;
            /**
             * \@member {Address} [deliveryAddress]
             * @type {?|undefined}
             */
            Cart.prototype.deliveryAddress;
            /**
             * \@member {Price} [deliveryCost]
             * @type {?|undefined}
             */
            Cart.prototype.deliveryCost;
            /**
             * \@member {number} [deliveryItemsQuantity]
             * @type {?|undefined}
             */
            Cart.prototype.deliveryItemsQuantity;
            /**
             * \@member {DeliveryMode} [deliveryMode]
             * @type {?|undefined}
             */
            Cart.prototype.deliveryMode;
            /**
             * \@member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]
             * @type {?|undefined}
             */
            Cart.prototype.deliveryOrderGroups;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            Cart.prototype.description;
            /**
             * \@member {OrderEntry[]} [entries]
             * @type {?|undefined}
             */
            Cart.prototype.entries;
            /**
             * \@member {Date} [expirationTime]
             * @type {?|undefined}
             */
            Cart.prototype.expirationTime;
            /**
             * \@member {string} [guid]
             * @type {?|undefined}
             */
            Cart.prototype.guid;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Cart.prototype.name;
            /**
             * \@member {boolean} [net]
             * @type {?|undefined}
             */
            Cart.prototype.net;
            /**
             * \@member {Price} [orderDiscounts]
             * @type {?|undefined}
             */
            Cart.prototype.orderDiscounts;
            /**
             * \@member {PaymentDetails} [paymentInfo]
             * @type {?|undefined}
             */
            Cart.prototype.paymentInfo;
            /**
             * \@member {number} [pickupItemsQuantity]
             * @type {?|undefined}
             */
            Cart.prototype.pickupItemsQuantity;
            /**
             * \@member {PickupOrderEntryGroup[]} [pickupOrderGroups]
             * @type {?|undefined}
             */
            Cart.prototype.pickupOrderGroups;
            /**
             * \@member {PromotionResult[]} [potentialOrderPromotions]
             * @type {?|undefined}
             */
            Cart.prototype.potentialOrderPromotions;
            /**
             * \@member {PromotionResult[]} [potentialProductPromotions]
             * @type {?|undefined}
             */
            Cart.prototype.potentialProductPromotions;
            /**
             * \@member {Price} [productDiscounts]
             * @type {?|undefined}
             */
            Cart.prototype.productDiscounts;
            /**
             * \@member {Date} [saveTime]
             * @type {?|undefined}
             */
            Cart.prototype.saveTime;
            /**
             * \@member {Principal} [savedBy]
             * @type {?|undefined}
             */
            Cart.prototype.savedBy;
            /**
             * \@member {string} [site]
             * @type {?|undefined}
             */
            Cart.prototype.site;
            /**
             * \@member {string} [store]
             * @type {?|undefined}
             */
            Cart.prototype.store;
            /**
             * \@member {Price} [subTotal]
             * @type {?|undefined}
             */
            Cart.prototype.subTotal;
            /**
             * \@member {Price} [totalDiscounts]
             * @type {?|undefined}
             */
            Cart.prototype.totalDiscounts;
            /**
             * \@member {number} [totalItems]
             * @type {?|undefined}
             */
            Cart.prototype.totalItems;
            /**
             * \@member {Price} [totalPrice]
             * @type {?|undefined}
             */
            Cart.prototype.totalPrice;
            /**
             * \@member {Price} [totalPriceWithTax]
             * @type {?|undefined}
             */
            Cart.prototype.totalPriceWithTax;
            /**
             * \@member {Price} [totalTax]
             * @type {?|undefined}
             */
            Cart.prototype.totalTax;
            /**
             * \@member {number} [totalUnitCount]
             * @type {?|undefined}
             */
            Cart.prototype.totalUnitCount;
            /**
             * \@member {Principal} [user]
             * @type {?|undefined}
             */
            Cart.prototype.user;
        }
        /**
         *
         * An interface representing CartList.
         * @record
         */
        function CartList() { }
        Occ.CartList = CartList;
        if (false) {
            /**
             * \@member {Cart[]} [carts]
             * @type {?|undefined}
             */
            CartList.prototype.carts;
        }
        /**
         *
         * An interface representing CartModification.
         * @record
         */
        function CartModification() { }
        Occ.CartModification = CartModification;
        if (false) {
            /**
             * \@member {boolean} [deliveryModeChanged]
             * @type {?|undefined}
             */
            CartModification.prototype.deliveryModeChanged;
            /**
             * \@member {OrderEntry} [entry]
             * @type {?|undefined}
             */
            CartModification.prototype.entry;
            /**
             * \@member {number} [quantity]
             * @type {?|undefined}
             */
            CartModification.prototype.quantity;
            /**
             * \@member {number} [quantityAdded]
             * @type {?|undefined}
             */
            CartModification.prototype.quantityAdded;
            /**
             * \@member {string} [statusCode]
             * @type {?|undefined}
             */
            CartModification.prototype.statusCode;
            /**
             * \@member {string} [statusMessage]
             * @type {?|undefined}
             */
            CartModification.prototype.statusMessage;
        }
        /**
         *
         * An interface representing CategoryHierarchy.
         * @record
         */
        function CategoryHierarchy() { }
        Occ.CategoryHierarchy = CategoryHierarchy;
        if (false) {
            /**
             * \@member {string} [id]
             * @type {?|undefined}
             */
            CategoryHierarchy.prototype.id;
            /**
             * \@member {Date} [lastModified]
             * @type {?|undefined}
             */
            CategoryHierarchy.prototype.lastModified;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            CategoryHierarchy.prototype.name;
            /**
             * \@member {CategoryHierarchy[]} [subcategories]
             * @type {?|undefined}
             */
            CategoryHierarchy.prototype.subcategories;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            CategoryHierarchy.prototype.url;
        }
        /**
         *
         * An interface representing CatalogVersion.
         * @record
         */
        function CatalogVersion() { }
        Occ.CatalogVersion = CatalogVersion;
        if (false) {
            /**
             * \@member {CategoryHierarchy[]} [categories]
             * @type {?|undefined}
             */
            CatalogVersion.prototype.categories;
            /**
             * \@member {string} [id]
             * @type {?|undefined}
             */
            CatalogVersion.prototype.id;
            /**
             * \@member {Date} [lastModified]
             * @type {?|undefined}
             */
            CatalogVersion.prototype.lastModified;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            CatalogVersion.prototype.name;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            CatalogVersion.prototype.url;
        }
        /**
         *
         * An interface representing Catalog.
         * @record
         */
        function Catalog() { }
        Occ.Catalog = Catalog;
        if (false) {
            /**
             * \@member {CatalogVersion[]} [catalogVersions]
             * @type {?|undefined}
             */
            Catalog.prototype.catalogVersions;
            /**
             * \@member {string} [id]
             * @type {?|undefined}
             */
            Catalog.prototype.id;
            /**
             * \@member {Date} [lastModified]
             * @type {?|undefined}
             */
            Catalog.prototype.lastModified;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Catalog.prototype.name;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            Catalog.prototype.url;
        }
        /**
         *
         * An interface representing CatalogList.
         * @record
         */
        function CatalogList() { }
        Occ.CatalogList = CatalogList;
        if (false) {
            /**
             * \@member {Catalog[]} [catalogs]
             * @type {?|undefined}
             */
            CatalogList.prototype.catalogs;
        }
        /**
         *
         * An interface representing ComponentIDList.
         * @record
         */
        function ComponentIDList() { }
        Occ.ComponentIDList = ComponentIDList;
        if (false) {
            /**
             * \@member {string[]} [idList]
             * @type {?|undefined}
             */
            ComponentIDList.prototype.idList;
        }
        /**
         *
         * An interface representing ConsignmentEntry.
         * @record
         */
        function ConsignmentEntry() { }
        Occ.ConsignmentEntry = ConsignmentEntry;
        if (false) {
            /**
             * \@member {OrderEntry} [orderEntry]
             * @type {?|undefined}
             */
            ConsignmentEntry.prototype.orderEntry;
            /**
             * \@member {number} [quantity]
             * @type {?|undefined}
             */
            ConsignmentEntry.prototype.quantity;
            /**
             * \@member {number} [shippedQuantity]
             * @type {?|undefined}
             */
            ConsignmentEntry.prototype.shippedQuantity;
        }
        /**
         *
         * An interface representing Consignment.
         * @record
         */
        function Consignment() { }
        Occ.Consignment = Consignment;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Consignment.prototype.code;
            /**
             * \@member {PointOfService} [deliveryPointOfService]
             * @type {?|undefined}
             */
            Consignment.prototype.deliveryPointOfService;
            /**
             * \@member {ConsignmentEntry[]} [entries]
             * @type {?|undefined}
             */
            Consignment.prototype.entries;
            /**
             * \@member {Address} [shippingAddress]
             * @type {?|undefined}
             */
            Consignment.prototype.shippingAddress;
            /**
             * \@member {string} [status]
             * @type {?|undefined}
             */
            Consignment.prototype.status;
            /**
             * \@member {Date} [statusDate]
             * @type {?|undefined}
             */
            Consignment.prototype.statusDate;
            /**
             * \@member {string} [trackingID]
             * @type {?|undefined}
             */
            Consignment.prototype.trackingID;
        }
        /**
         *
         * An interface representing CountryList.
         * @record
         */
        function CountryList() { }
        Occ.CountryList = CountryList;
        if (false) {
            /**
             * \@member {Country[]} [countries]
             * @type {?|undefined}
             */
            CountryList.prototype.countries;
        }
        /**
         *
         * An interface representing CurrencyList.
         * @record
         */
        function CurrencyList() { }
        Occ.CurrencyList = CurrencyList;
        if (false) {
            /**
             * \@member {Currency[]} [currencies]
             * @type {?|undefined}
             */
            CurrencyList.prototype.currencies;
        }
        /**
         * An interface representing CustomerCoupon
         * @record
         */
        function CustomerCoupon() { }
        Occ.CustomerCoupon = CustomerCoupon;
        if (false) {
            /**
             * \@member {string} [couponId]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.couponId;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.name;
            /**
             * \@member {string} [startDate]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.startDate;
            /**
             * \@member {string} [endDate]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.endDate;
            /**
             * \@member {string} [endDate]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.status;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.description;
            /**
             * \@member {boolean} [notificationOn]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.notificationOn;
            /**
             * \@member {boolean} [allProductsApplicable]
             * @type {?|undefined}
             */
            CustomerCoupon.prototype.allProductsApplicable;
        }
        /**
         * An interface representing CustomerCouponSearchResult
         * @record
         */
        function CustomerCouponSearchResult() { }
        Occ.CustomerCouponSearchResult = CustomerCouponSearchResult;
        if (false) {
            /**
             * \@member {CustomerCoupon[]} [coupons]
             * @type {?|undefined}
             */
            CustomerCouponSearchResult.prototype.coupons;
            /**
             * \@member {Sort[]} [sorts]
             * @type {?|undefined}
             */
            CustomerCouponSearchResult.prototype.sorts;
            /**
             * \@member {Pagination} [pagination]
             * @type {?|undefined}
             */
            CustomerCouponSearchResult.prototype.pagination;
        }
        /**
         *
         * An interface representing DeliveryModeList.
         * @record
         */
        function DeliveryModeList() { }
        Occ.DeliveryModeList = DeliveryModeList;
        if (false) {
            /**
             * \@member {DeliveryMode[]} [deliveryModes]
             * @type {?|undefined}
             */
            DeliveryModeList.prototype.deliveryModes;
        }
        /**
         *
         * An interface representing FacetValue.
         * @record
         */
        function FacetValue() { }
        Occ.FacetValue = FacetValue;
        if (false) {
            /**
             * \@member {number} [count]
             * @type {?|undefined}
             */
            FacetValue.prototype.count;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            FacetValue.prototype.name;
            /**
             * \@member {SearchState} [query]
             * @type {?|undefined}
             */
            FacetValue.prototype.query;
            /**
             * \@member {boolean} [selected]
             * @type {?|undefined}
             */
            FacetValue.prototype.selected;
        }
        /**
         *
         * An interface representing Facet.
         * @record
         */
        function Facet() { }
        Occ.Facet = Facet;
        if (false) {
            /**
             * \@member {boolean} [category]
             * @type {?|undefined}
             */
            Facet.prototype.category;
            /**
             * \@member {boolean} [multiSelect]
             * @type {?|undefined}
             */
            Facet.prototype.multiSelect;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Facet.prototype.name;
            /**
             * \@member {number} [priority]
             * @type {?|undefined}
             */
            Facet.prototype.priority;
            /**
             * \@member {FacetValue[]} [topValues]
             * @type {?|undefined}
             */
            Facet.prototype.topValues;
            /**
             * \@member {FacetValue[]} [values]
             * @type {?|undefined}
             */
            Facet.prototype.values;
            /**
             * \@member {boolean} [visible]
             * @type {?|undefined}
             */
            Facet.prototype.visible;
        }
        /**
         *
         * An interface representing LanguageList.
         * @record
         */
        function LanguageList() { }
        Occ.LanguageList = LanguageList;
        if (false) {
            /**
             * \@member {Language[]} [languages]
             * @type {?|undefined}
             */
            LanguageList.prototype.languages;
        }
        /**
         *
         * An interface representing Pagination.
         * Pagination info
         *
         * @record
         */
        function Pagination() { }
        Occ.Pagination = Pagination;
        if (false) {
            /**
             * \@member {number} [count] Number of elements on this page
             * @type {?|undefined}
             */
            Pagination.prototype.count;
            /**
             * \@member {number} [page] Current page number
             * @type {?|undefined}
             */
            Pagination.prototype.page;
            /**
             * \@member {number} [totalCount] Total number of elements
             * @type {?|undefined}
             */
            Pagination.prototype.totalCount;
            /**
             * \@member {number} [totalPages] Total number of pages
             * @type {?|undefined}
             */
            Pagination.prototype.totalPages;
        }
        /**
         *
         * An interface representing Sort.
         * Sort option
         *
         * @record
         */
        function Sort() { }
        Occ.Sort = Sort;
        if (false) {
            /**
             * \@member {boolean} [asc]
             * @type {?|undefined}
             */
            Sort.prototype.asc;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Sort.prototype.code;
        }
        /**
         *
         * An interface representing ListAdaptedComponents.
         * @record
         */
        function ListAdaptedComponents() { }
        Occ.ListAdaptedComponents = ListAdaptedComponents;
        if (false) {
            /**
             * \@member {any[]} [components]
             * @type {?|undefined}
             */
            ListAdaptedComponents.prototype.components;
            /**
             * \@member {Pagination} [pagination]
             * @type {?|undefined}
             */
            ListAdaptedComponents.prototype.pagination;
            /**
             * \@member {Sort[]} [sorts]
             * @type {?|undefined}
             */
            ListAdaptedComponents.prototype.sorts;
        }
        /**
         *
         * An interface representing MemberList.
         * @record
         */
        function MemberList() { }
        Occ.MemberList = MemberList;
        if (false) {
            /**
             * \@member {Principal[]} [members]
             * @type {?|undefined}
             */
            MemberList.prototype.members;
        }
        /**
         *
         * An interface representing OrderEntryList.
         * @record
         */
        function OrderEntryList() { }
        Occ.OrderEntryList = OrderEntryList;
        if (false) {
            /**
             * \@member {OrderEntry[]} [orderEntries]
             * @type {?|undefined}
             */
            OrderEntryList.prototype.orderEntries;
        }
        /**
         *
         * An interface representing OrderHistory.
         * @record
         */
        function OrderHistory() { }
        Occ.OrderHistory = OrderHistory;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            OrderHistory.prototype.code;
            /**
             * \@member {string} [guid]
             * @type {?|undefined}
             */
            OrderHistory.prototype.guid;
            /**
             * \@member {Date} [placed]
             * @type {?|undefined}
             */
            OrderHistory.prototype.placed;
            /**
             * \@member {string} [status]
             * @type {?|undefined}
             */
            OrderHistory.prototype.status;
            /**
             * \@member {string} [statusDisplay]
             * @type {?|undefined}
             */
            OrderHistory.prototype.statusDisplay;
            /**
             * \@member {Price} [total]
             * @type {?|undefined}
             */
            OrderHistory.prototype.total;
        }
        /**
         *
         * An interface representing PaginationModel.
         * @record
         */
        function PaginationModel() { }
        Occ.PaginationModel = PaginationModel;
        if (false) {
            /**
             * \@member {number} [currentPage]
             * @type {?|undefined}
             */
            PaginationModel.prototype.currentPage;
            /**
             * \@member {number} [pageSize]
             * @type {?|undefined}
             */
            PaginationModel.prototype.pageSize;
            /**
             * \@member {string} [sort]
             * @type {?|undefined}
             */
            PaginationModel.prototype.sort;
            /**
             * \@member {number} [totalPages]
             * @type {?|undefined}
             */
            PaginationModel.prototype.totalPages;
            /**
             * \@member {number} [totalResults]
             * @type {?|undefined}
             */
            PaginationModel.prototype.totalResults;
        }
        /**
         *
         * An interface representing SortModel.
         * @record
         */
        function SortModel() { }
        Occ.SortModel = SortModel;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            SortModel.prototype.code;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            SortModel.prototype.name;
            /**
             * \@member {boolean} [selected]
             * @type {?|undefined}
             */
            SortModel.prototype.selected;
        }
        /**
         *
         * An interface representing OrderHistoryList.
         * @record
         */
        function OrderHistoryList() { }
        Occ.OrderHistoryList = OrderHistoryList;
        if (false) {
            /**
             * \@member {OrderHistory[]} [orders]
             * @type {?|undefined}
             */
            OrderHistoryList.prototype.orders;
            /**
             * \@member {PaginationModel} [pagination]
             * @type {?|undefined}
             */
            OrderHistoryList.prototype.pagination;
            /**
             * \@member {SortModel[]} [sorts]
             * @type {?|undefined}
             */
            OrderHistoryList.prototype.sorts;
        }
        /**
         *
         * An interface representing OrderStatusUpdateElement.
         * @record
         */
        function OrderStatusUpdateElement() { }
        Occ.OrderStatusUpdateElement = OrderStatusUpdateElement;
        if (false) {
            /**
             * \@member {string} [baseSiteId]
             * @type {?|undefined}
             */
            OrderStatusUpdateElement.prototype.baseSiteId;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            OrderStatusUpdateElement.prototype.code;
            /**
             * \@member {string} [status]
             * @type {?|undefined}
             */
            OrderStatusUpdateElement.prototype.status;
        }
        /**
         *
         * An interface representing OrderStatusUpdateElementList.
         * @record
         */
        function OrderStatusUpdateElementList() { }
        Occ.OrderStatusUpdateElementList = OrderStatusUpdateElementList;
        if (false) {
            /**
             * \@member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]
             * @type {?|undefined}
             */
            OrderStatusUpdateElementList.prototype.orderStatusUpdateElements;
        }
        /**
         *
         * An interface representing Order.
         * @record
         */
        function Order() { }
        Occ.Order = Order;
        if (false) {
            /**
             * \@member {PromotionResult[]} [appliedOrderPromotions]
             * @type {?|undefined}
             */
            Order.prototype.appliedOrderPromotions;
            /**
             * \@member {PromotionResult[]} [appliedProductPromotions]
             * @type {?|undefined}
             */
            Order.prototype.appliedProductPromotions;
            /**
             * \@member {Voucher[]} [appliedVouchers]
             * @type {?|undefined}
             */
            Order.prototype.appliedVouchers;
            /**
             * \@member {boolean} [calculated]
             * @type {?|undefined}
             */
            Order.prototype.calculated;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Order.prototype.code;
            /**
             * \@member {Consignment[]} [consignments]
             * @type {?|undefined}
             */
            Order.prototype.consignments;
            /**
             * \@member {Date} [created]
             * @type {?|undefined}
             */
            Order.prototype.created;
            /**
             * \@member {Address} [deliveryAddress]
             * @type {?|undefined}
             */
            Order.prototype.deliveryAddress;
            /**
             * \@member {Price} [deliveryCost]
             * @type {?|undefined}
             */
            Order.prototype.deliveryCost;
            /**
             * \@member {number} [deliveryItemsQuantity]
             * @type {?|undefined}
             */
            Order.prototype.deliveryItemsQuantity;
            /**
             * \@member {DeliveryMode} [deliveryMode]
             * @type {?|undefined}
             */
            Order.prototype.deliveryMode;
            /**
             * \@member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]
             * @type {?|undefined}
             */
            Order.prototype.deliveryOrderGroups;
            /**
             * \@member {string} [deliveryStatus]
             * @type {?|undefined}
             */
            Order.prototype.deliveryStatus;
            /**
             * \@member {string} [deliveryStatusDisplay]
             * @type {?|undefined}
             */
            Order.prototype.deliveryStatusDisplay;
            /**
             * \@member {OrderEntry[]} [entries]
             * @type {?|undefined}
             */
            Order.prototype.entries;
            /**
             * \@member {boolean} [guestCustomer]
             * @type {?|undefined}
             */
            Order.prototype.guestCustomer;
            /**
             * \@member {string} [guid]
             * @type {?|undefined}
             */
            Order.prototype.guid;
            /**
             * \@member {boolean} [net]
             * @type {?|undefined}
             */
            Order.prototype.net;
            /**
             * \@member {Price} [orderDiscounts]
             * @type {?|undefined}
             */
            Order.prototype.orderDiscounts;
            /**
             * \@member {PaymentDetails} [paymentInfo]
             * @type {?|undefined}
             */
            Order.prototype.paymentInfo;
            /**
             * \@member {number} [pickupItemsQuantity]
             * @type {?|undefined}
             */
            Order.prototype.pickupItemsQuantity;
            /**
             * \@member {PickupOrderEntryGroup[]} [pickupOrderGroups]
             * @type {?|undefined}
             */
            Order.prototype.pickupOrderGroups;
            /**
             * \@member {Price} [productDiscounts]
             * @type {?|undefined}
             */
            Order.prototype.productDiscounts;
            /**
             * \@member {string} [site]
             * @type {?|undefined}
             */
            Order.prototype.site;
            /**
             * \@member {string} [status]
             * @type {?|undefined}
             */
            Order.prototype.status;
            /**
             * \@member {string} [statusDisplay]
             * @type {?|undefined}
             */
            Order.prototype.statusDisplay;
            /**
             * \@member {string} [store]
             * @type {?|undefined}
             */
            Order.prototype.store;
            /**
             * \@member {Price} [subTotal]
             * @type {?|undefined}
             */
            Order.prototype.subTotal;
            /**
             * \@member {Price} [totalDiscounts]
             * @type {?|undefined}
             */
            Order.prototype.totalDiscounts;
            /**
             * \@member {number} [totalItems]
             * @type {?|undefined}
             */
            Order.prototype.totalItems;
            /**
             * \@member {Price} [totalPrice]
             * @type {?|undefined}
             */
            Order.prototype.totalPrice;
            /**
             * \@member {Price} [totalPriceWithTax]
             * @type {?|undefined}
             */
            Order.prototype.totalPriceWithTax;
            /**
             * \@member {Price} [totalTax]
             * @type {?|undefined}
             */
            Order.prototype.totalTax;
            /**
             * \@member {OrderEntry[]} [unconsignedEntries]
             * @type {?|undefined}
             */
            Order.prototype.unconsignedEntries;
            /**
             * \@member {Principal} [user]
             * @type {?|undefined}
             */
            Order.prototype.user;
        }
        /**
         *
         * An interface representing ReturnRequest.
         * @record
         */
        function ReturnRequest() { }
        Occ.ReturnRequest = ReturnRequest;
        if (false) {
            /**
             * \@member {boolean} [cancellable]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.cancellable;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.code;
            /**
             * \@member {Date} [creationTime]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.creationTime;
            /**
             * \@member {Price} [deliveryCost]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.deliveryCost;
            /**
             * \@member {order} [order]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.order;
            /**
             * \@member {boolean} [refundDeliveryCost]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.refundDeliveryCost;
            /**
             * \@member {ReturnRequestEntry[]} [returnEntries]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.returnEntries;
            /**
             * \@member {string} [returnLabelDownloadUrl]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.returnLabelDownloadUrl;
            /**
             * \@member {string} [rma]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.rma;
            /**
             * \@member {string} [status]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.status;
            /**
             * \@member {Price} [subTotal]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.subTotal;
            /**
             * \@member {Price} [totalPrice]
             * @type {?|undefined}
             */
            ReturnRequest.prototype.totalPrice;
        }
        /**
         *
         * An interface representing ReturnRequestEntry.
         * @record
         */
        function ReturnRequestEntry() { }
        Occ.ReturnRequestEntry = ReturnRequestEntry;
        if (false) {
            /**
             * \@member {OrderEntry} [orderEntry]
             * @type {?|undefined}
             */
            ReturnRequestEntry.prototype.orderEntry;
            /**
             * \@member {number} [expectedQuantity]
             * @type {?|undefined}
             */
            ReturnRequestEntry.prototype.expectedQuantity;
            /**
             * \@member {Price} [refundAmount]
             * @type {?|undefined}
             */
            ReturnRequestEntry.prototype.refundAmount;
        }
        /**
         *
         * An interface representing PaymentDetailsList.
         * @record
         */
        function PaymentDetailsList() { }
        Occ.PaymentDetailsList = PaymentDetailsList;
        if (false) {
            /**
             * \@member {PaymentDetails[]} [payments]
             * @type {?|undefined}
             */
            PaymentDetailsList.prototype.payments;
        }
        /**
         *
         * An interface representing PointOfServiceStock.
         * @record
         */
        function PointOfServiceStock() { }
        Occ.PointOfServiceStock = PointOfServiceStock;
        if (false) {
            /**
             * \@member {Address} [address]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.address;
            /**
             * \@member {string} [description]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.description;
            /**
             * \@member {string} [displayName]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.displayName;
            /**
             * \@member {number} [distanceKm]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.distanceKm;
            /**
             * \@member {{ [propertyName: string]: string }} [features]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.features;
            /**
             * \@member {string} [formattedDistance]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.formattedDistance;
            /**
             * \@member {GeoPoint} [geoPoint]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.geoPoint;
            /**
             * \@member {Image} [mapIcon]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.mapIcon;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.name;
            /**
             * \@member {OpeningSchedule} [openingHours]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.openingHours;
            /**
             * \@member {Stock} [stockInfo]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.stockInfo;
            /**
             * \@member {string} [storeContent]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.storeContent;
            /**
             * \@member {Image[]} [storeImages]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.storeImages;
            /**
             * \@member {string} [url]
             * @type {?|undefined}
             */
            PointOfServiceStock.prototype.url;
        }
        /**
         *
         * An interface representing ProductExpressUpdateElement.
         * @record
         */
        function ProductExpressUpdateElement() { }
        Occ.ProductExpressUpdateElement = ProductExpressUpdateElement;
        if (false) {
            /**
             * \@member {string} [catalogId]
             * @type {?|undefined}
             */
            ProductExpressUpdateElement.prototype.catalogId;
            /**
             * \@member {string} [catalogVersion]
             * @type {?|undefined}
             */
            ProductExpressUpdateElement.prototype.catalogVersion;
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            ProductExpressUpdateElement.prototype.code;
        }
        /**
         *
         * An interface representing ProductExpressUpdateElementList.
         * @record
         */
        function ProductExpressUpdateElementList() { }
        Occ.ProductExpressUpdateElementList = ProductExpressUpdateElementList;
        if (false) {
            /**
             * \@member {ProductExpressUpdateElement[]} [productExpressUpdateElements]
             * @type {?|undefined}
             */
            ProductExpressUpdateElementList.prototype.productExpressUpdateElements;
        }
        /**
         *
         * An interface representing ProductList.
         * @record
         */
        function ProductList() { }
        Occ.ProductList = ProductList;
        if (false) {
            /**
             * \@member {string} [catalog]
             * @type {?|undefined}
             */
            ProductList.prototype.catalog;
            /**
             * \@member {number} [currentPage]
             * @type {?|undefined}
             */
            ProductList.prototype.currentPage;
            /**
             * \@member {Product[]} [products]
             * @type {?|undefined}
             */
            ProductList.prototype.products;
            /**
             * \@member {number} [totalPageCount]
             * @type {?|undefined}
             */
            ProductList.prototype.totalPageCount;
            /**
             * \@member {number} [totalProductCount]
             * @type {?|undefined}
             */
            ProductList.prototype.totalProductCount;
            /**
             * \@member {string} [version]
             * @type {?|undefined}
             */
            ProductList.prototype.version;
        }
        /**
         *
         * An interface representing ProductReferenceList.
         * @record
         */
        function ProductReferenceList() { }
        Occ.ProductReferenceList = ProductReferenceList;
        if (false) {
            /**
             * \@member {ProductReference[]} [references]
             * @type {?|undefined}
             */
            ProductReferenceList.prototype.references;
        }
        /**
         *
         * An interface representing SpellingSuggestion.
         * @record
         */
        function SpellingSuggestion() { }
        Occ.SpellingSuggestion = SpellingSuggestion;
        if (false) {
            /**
             * \@member {string} [query]
             * @type {?|undefined}
             */
            SpellingSuggestion.prototype.query;
            /**
             * \@member {string} [suggestion]
             * @type {?|undefined}
             */
            SpellingSuggestion.prototype.suggestion;
        }
        /**
         *
         * An interface representing ProductSearchPage.
         * @record
         */
        function ProductSearchPage() { }
        Occ.ProductSearchPage = ProductSearchPage;
        if (false) {
            /**
             * \@member {Breadcrumb[]} [breadcrumbs]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.breadcrumbs;
            /**
             * \@member {string} [categoryCode]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.categoryCode;
            /**
             * \@member {SearchState} [currentQuery]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.currentQuery;
            /**
             * \@member {Facet[]} [facets]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.facets;
            /**
             * \@member {string} [freeTextSearch]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.freeTextSearch;
            /**
             * \@member {string} [keywordRedirectUrl]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.keywordRedirectUrl;
            /**
             * \@member {PaginationModel} [pagination]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.pagination;
            /**
             * \@member {Product[]} [products]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.products;
            /**
             * \@member {SortModel[]} [sorts]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.sorts;
            /**
             * \@member {SpellingSuggestion} [spellingSuggestion]
             * @type {?|undefined}
             */
            ProductSearchPage.prototype.spellingSuggestion;
        }
        /**
         *
         * An interface representing PromotionList.
         * @record
         */
        function PromotionList() { }
        Occ.PromotionList = PromotionList;
        if (false) {
            /**
             * \@member {Promotion[]} [promotions]
             * @type {?|undefined}
             */
            PromotionList.prototype.promotions;
        }
        /**
         *
         * An interface representing PromotionResultList.
         * @record
         */
        function PromotionResultList() { }
        Occ.PromotionResultList = PromotionResultList;
        if (false) {
            /**
             * \@member {PromotionResult[]} [promotions]
             * @type {?|undefined}
             */
            PromotionResultList.prototype.promotions;
        }
        /**
         *
         * An interface representing ReviewList.
         * @record
         */
        function ReviewList() { }
        Occ.ReviewList = ReviewList;
        if (false) {
            /**
             * \@member {Review[]} [reviews]
             * @type {?|undefined}
             */
            ReviewList.prototype.reviews;
        }
        /**
         *
         * An interface representing SaveCartResult.
         * @record
         */
        function SaveCartResult() { }
        Occ.SaveCartResult = SaveCartResult;
        if (false) {
            /**
             * \@member {Cart} [savedCartData]
             * @type {?|undefined}
             */
            SaveCartResult.prototype.savedCartData;
        }
        /**
         *
         * An interface representing StoreFinderSearchPage.
         * @record
         */
        function StoreFinderSearchPage() { }
        Occ.StoreFinderSearchPage = StoreFinderSearchPage;
        if (false) {
            /**
             * \@member {number} [boundEastLongitude]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.boundEastLongitude;
            /**
             * \@member {number} [boundNorthLatitude]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.boundNorthLatitude;
            /**
             * \@member {number} [boundSouthLatitude]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.boundSouthLatitude;
            /**
             * \@member {number} [boundWestLongitude]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.boundWestLongitude;
            /**
             * \@member {string} [locationText]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.locationText;
            /**
             * \@member {PaginationModel} [pagination]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.pagination;
            /**
             * \@member {SortModel[]} [sorts]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.sorts;
            /**
             * \@member {number} [sourceLatitude]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.sourceLatitude;
            /**
             * \@member {number} [sourceLongitude]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.sourceLongitude;
            /**
             * \@member {PointOfService[]} [stores]
             * @type {?|undefined}
             */
            StoreFinderSearchPage.prototype.stores;
        }
        /**
         *
         * An interface representing StoreFinderStockSearchPage.
         * @record
         */
        function StoreFinderStockSearchPage() { }
        Occ.StoreFinderStockSearchPage = StoreFinderStockSearchPage;
        if (false) {
            /**
             * \@member {number} [boundEastLongitude]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.boundEastLongitude;
            /**
             * \@member {number} [boundNorthLatitude]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.boundNorthLatitude;
            /**
             * \@member {number} [boundSouthLatitude]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.boundSouthLatitude;
            /**
             * \@member {number} [boundWestLongitude]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.boundWestLongitude;
            /**
             * \@member {string} [locationText]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.locationText;
            /**
             * \@member {PaginationModel} [pagination]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.pagination;
            /**
             * \@member {Product} [product]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.product;
            /**
             * \@member {SortModel[]} [sorts]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.sorts;
            /**
             * \@member {number} [sourceLatitude]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.sourceLatitude;
            /**
             * \@member {number} [sourceLongitude]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.sourceLongitude;
            /**
             * \@member {PointOfServiceStock[]} [stores]
             * @type {?|undefined}
             */
            StoreFinderStockSearchPage.prototype.stores;
        }
        /**
         *
         * An interface representing Suggestion.
         * @record
         */
        function Suggestion() { }
        Occ.Suggestion = Suggestion;
        if (false) {
            /**
             * \@member {string} [value]
             * @type {?|undefined}
             */
            Suggestion.prototype.value;
        }
        /**
         *
         * An interface representing SuggestionList.
         * @record
         */
        function SuggestionList() { }
        Occ.SuggestionList = SuggestionList;
        if (false) {
            /**
             * \@member {Suggestion[]} [suggestions]
             * @type {?|undefined}
             */
            SuggestionList.prototype.suggestions;
        }
        /**
         *
         * An interface representing Title.
         * @record
         */
        function Title() { }
        Occ.Title = Title;
        if (false) {
            /**
             * \@member {string} [code]
             * @type {?|undefined}
             */
            Title.prototype.code;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            Title.prototype.name;
        }
        /**
         *
         * An interface representing TitleList.
         * @record
         */
        function TitleList() { }
        Occ.TitleList = TitleList;
        if (false) {
            /**
             * \@member {Title[]} [titles]
             * @type {?|undefined}
             */
            TitleList.prototype.titles;
        }
        /**
         *
         * An interface representing UserGroup.
         * @record
         */
        function UserGroup() { }
        Occ.UserGroup = UserGroup;
        if (false) {
            /**
             * \@member {Principal[]} [members]
             * @type {?|undefined}
             */
            UserGroup.prototype.members;
            /**
             * \@member {number} [membersCount]
             * @type {?|undefined}
             */
            UserGroup.prototype.membersCount;
            /**
             * \@member {string} [name]
             * @type {?|undefined}
             */
            UserGroup.prototype.name;
            /**
             * \@member {UserGroup[]} [subGroups]
             * @type {?|undefined}
             */
            UserGroup.prototype.subGroups;
            /**
             * \@member {string} [uid]
             * @type {?|undefined}
             */
            UserGroup.prototype.uid;
        }
        /**
         *
         * An interface representing UserGroupList.
         * @record
         */
        function UserGroupList() { }
        Occ.UserGroupList = UserGroupList;
        if (false) {
            /**
             * \@member {number} [currentPage]
             * @type {?|undefined}
             */
            UserGroupList.prototype.currentPage;
            /**
             * \@member {number} [numberOfPages]
             * @type {?|undefined}
             */
            UserGroupList.prototype.numberOfPages;
            /**
             * \@member {number} [pageSize]
             * @type {?|undefined}
             */
            UserGroupList.prototype.pageSize;
            /**
             * \@member {number} [totalNumber]
             * @type {?|undefined}
             */
            UserGroupList.prototype.totalNumber;
            /**
             * \@member {UserGroup[]} [userGroups]
             * @type {?|undefined}
             */
            UserGroupList.prototype.userGroups;
        }
        /**
         *
         * An interface representing UserSignUp.
         * @record
         */
        function UserSignUp() { }
        Occ.UserSignUp = UserSignUp;
        if (false) {
            /**
             * \@member {string} [firstName]
             * @type {?|undefined}
             */
            UserSignUp.prototype.firstName;
            /**
             * \@member {string} [lastName]
             * @type {?|undefined}
             */
            UserSignUp.prototype.lastName;
            /**
             * \@member {string} [password]
             * @type {?|undefined}
             */
            UserSignUp.prototype.password;
            /**
             * \@member {string} [titleCode]
             * @type {?|undefined}
             */
            UserSignUp.prototype.titleCode;
            /**
             * \@member {string} [uid]
             * @type {?|undefined}
             */
            UserSignUp.prototype.uid;
        }
        /**
         * @record
         */
        function StoreCount() { }
        Occ.StoreCount = StoreCount;
        if (false) {
            /** @type {?|undefined} */
            StoreCount.prototype.count;
            /** @type {?|undefined} */
            StoreCount.prototype.isoCode;
            /** @type {?|undefined} */
            StoreCount.prototype.name;
            /** @type {?|undefined} */
            StoreCount.prototype.type;
        }
        /**
         * @record
         */
        function StoreCountList() { }
        Occ.StoreCountList = StoreCountList;
        if (false) {
            /** @type {?|undefined} */
            StoreCountList.prototype.countriesAndRegionsStoreCount;
        }
        /**
         *
         * An interface representing VoucherList.
         * @record
         */
        function VoucherList() { }
        Occ.VoucherList = VoucherList;
        if (false) {
            /**
             * \@member {Voucher[]} [vouchers]
             * @type {?|undefined}
             */
            VoucherList.prototype.vouchers;
        }
        /**
         * Defines values for PriceType.
         * Possible values include: 'BUY', 'FROM'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: PriceType = <PriceType>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var PriceType;
        (function (PriceType) {
            PriceType["BUY"] = "BUY";
            PriceType["FROM"] = "FROM";
        })(PriceType = Occ.PriceType || (Occ.PriceType = {}));
        /**
         * Defines values for ImageType.
         * Possible values include: 'PRIMARY', 'GALLERY'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: ImageType = <ImageType>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var ImageType;
        (function (ImageType) {
            ImageType["PRIMARY"] = "PRIMARY";
            ImageType["GALLERY"] = "GALLERY";
        })(ImageType = Occ.ImageType || (Occ.ImageType = {}));
        /**
         * Defines values for Fields.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields = <Fields>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields;
        (function (Fields) {
            Fields["BASIC"] = "BASIC";
            Fields["DEFAULT"] = "DEFAULT";
            Fields["FULL"] = "FULL";
        })(Fields = Occ.Fields || (Occ.Fields = {}));
        /**
         * Defines values for Fields1.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields1 = <Fields1>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields1;
        (function (Fields1) {
            Fields1["BASIC"] = "BASIC";
            Fields1["DEFAULT"] = "DEFAULT";
            Fields1["FULL"] = "FULL";
        })(Fields1 = Occ.Fields1 || (Occ.Fields1 = {}));
        /**
         * Defines values for Fields2.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields2 = <Fields2>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields2;
        (function (Fields2) {
            Fields2["BASIC"] = "BASIC";
            Fields2["DEFAULT"] = "DEFAULT";
            Fields2["FULL"] = "FULL";
        })(Fields2 = Occ.Fields2 || (Occ.Fields2 = {}));
        /**
         * Defines values for Fields3.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields3 = <Fields3>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields3;
        (function (Fields3) {
            Fields3["BASIC"] = "BASIC";
            Fields3["DEFAULT"] = "DEFAULT";
            Fields3["FULL"] = "FULL";
        })(Fields3 = Occ.Fields3 || (Occ.Fields3 = {}));
        /**
         * Defines values for Fields4.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields4 = <Fields4>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields4;
        (function (Fields4) {
            Fields4["BASIC"] = "BASIC";
            Fields4["DEFAULT"] = "DEFAULT";
            Fields4["FULL"] = "FULL";
        })(Fields4 = Occ.Fields4 || (Occ.Fields4 = {}));
        /**
         * Defines values for Fields5.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields5 = <Fields5>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields5;
        (function (Fields5) {
            Fields5["BASIC"] = "BASIC";
            Fields5["DEFAULT"] = "DEFAULT";
            Fields5["FULL"] = "FULL";
        })(Fields5 = Occ.Fields5 || (Occ.Fields5 = {}));
        /**
         * Defines values for Fields6.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields6 = <Fields6>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields6;
        (function (Fields6) {
            Fields6["BASIC"] = "BASIC";
            Fields6["DEFAULT"] = "DEFAULT";
            Fields6["FULL"] = "FULL";
        })(Fields6 = Occ.Fields6 || (Occ.Fields6 = {}));
        /**
         * Defines values for PageType.
         * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',
         * 'CatalogPage'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: PageType = <PageType>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var PageType;
        (function (PageType) {
            PageType["CONTENT_PAGE"] = "ContentPage";
            PageType["PRODUCT_PAGE"] = "ProductPage";
            PageType["CATEGORY_PAGE"] = "CategoryPage";
            PageType["CATALOG_PAGE"] = "CatalogPage";
        })(PageType = Occ.PageType || (Occ.PageType = {}));
        /**
         * Defines values for Fields7.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields7 = <Fields7>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields7;
        (function (Fields7) {
            Fields7["BASIC"] = "BASIC";
            Fields7["DEFAULT"] = "DEFAULT";
            Fields7["FULL"] = "FULL";
        })(Fields7 = Occ.Fields7 || (Occ.Fields7 = {}));
        /**
         * Defines values for Fields8.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields8 = <Fields8>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields8;
        (function (Fields8) {
            Fields8["BASIC"] = "BASIC";
            Fields8["DEFAULT"] = "DEFAULT";
            Fields8["FULL"] = "FULL";
        })(Fields8 = Occ.Fields8 || (Occ.Fields8 = {}));
        /**
         * Defines values for Fields9.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields9 = <Fields9>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields9;
        (function (Fields9) {
            Fields9["BASIC"] = "BASIC";
            Fields9["DEFAULT"] = "DEFAULT";
            Fields9["FULL"] = "FULL";
        })(Fields9 = Occ.Fields9 || (Occ.Fields9 = {}));
        /**
         * Defines values for Fields10.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields10 = <Fields10>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields10;
        (function (Fields10) {
            Fields10["BASIC"] = "BASIC";
            Fields10["DEFAULT"] = "DEFAULT";
            Fields10["FULL"] = "FULL";
        })(Fields10 = Occ.Fields10 || (Occ.Fields10 = {}));
        /**
         * Defines values for Fields11.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields11 = <Fields11>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields11;
        (function (Fields11) {
            Fields11["BASIC"] = "BASIC";
            Fields11["DEFAULT"] = "DEFAULT";
            Fields11["FULL"] = "FULL";
        })(Fields11 = Occ.Fields11 || (Occ.Fields11 = {}));
        /**
         * Defines values for Fields12.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields12 = <Fields12>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields12;
        (function (Fields12) {
            Fields12["BASIC"] = "BASIC";
            Fields12["DEFAULT"] = "DEFAULT";
            Fields12["FULL"] = "FULL";
        })(Fields12 = Occ.Fields12 || (Occ.Fields12 = {}));
        /**
         * Defines values for Fields13.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields13 = <Fields13>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields13;
        (function (Fields13) {
            Fields13["BASIC"] = "BASIC";
            Fields13["DEFAULT"] = "DEFAULT";
            Fields13["FULL"] = "FULL";
        })(Fields13 = Occ.Fields13 || (Occ.Fields13 = {}));
        /**
         * Defines values for Fields14.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields14 = <Fields14>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields14;
        (function (Fields14) {
            Fields14["BASIC"] = "BASIC";
            Fields14["DEFAULT"] = "DEFAULT";
            Fields14["FULL"] = "FULL";
        })(Fields14 = Occ.Fields14 || (Occ.Fields14 = {}));
        /**
         * Defines values for Fields15.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields15 = <Fields15>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields15;
        (function (Fields15) {
            Fields15["BASIC"] = "BASIC";
            Fields15["DEFAULT"] = "DEFAULT";
            Fields15["FULL"] = "FULL";
        })(Fields15 = Occ.Fields15 || (Occ.Fields15 = {}));
        /**
         * Defines values for Fields16.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields16 = <Fields16>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields16;
        (function (Fields16) {
            Fields16["BASIC"] = "BASIC";
            Fields16["DEFAULT"] = "DEFAULT";
            Fields16["FULL"] = "FULL";
        })(Fields16 = Occ.Fields16 || (Occ.Fields16 = {}));
        /**
         * Defines values for SortEnum.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: SortEnum = <SortEnum>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var SortEnum;
        (function (SortEnum) {
            SortEnum["BASIC"] = "BASIC";
            SortEnum["DEFAULT"] = "DEFAULT";
            SortEnum["FULL"] = "FULL";
        })(SortEnum = Occ.SortEnum || (Occ.SortEnum = {}));
        /**
         * Defines values for Fields17.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields17 = <Fields17>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields17;
        (function (Fields17) {
            Fields17["BASIC"] = "BASIC";
            Fields17["DEFAULT"] = "DEFAULT";
            Fields17["FULL"] = "FULL";
        })(Fields17 = Occ.Fields17 || (Occ.Fields17 = {}));
        /**
         * Defines values for Fields18.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields18 = <Fields18>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields18;
        (function (Fields18) {
            Fields18["BASIC"] = "BASIC";
            Fields18["DEFAULT"] = "DEFAULT";
            Fields18["FULL"] = "FULL";
        })(Fields18 = Occ.Fields18 || (Occ.Fields18 = {}));
        /**
         * Defines values for Fields19.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields19 = <Fields19>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields19;
        (function (Fields19) {
            Fields19["BASIC"] = "BASIC";
            Fields19["DEFAULT"] = "DEFAULT";
            Fields19["FULL"] = "FULL";
        })(Fields19 = Occ.Fields19 || (Occ.Fields19 = {}));
        /**
         * Defines values for Fields20.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields20 = <Fields20>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields20;
        (function (Fields20) {
            Fields20["BASIC"] = "BASIC";
            Fields20["DEFAULT"] = "DEFAULT";
            Fields20["FULL"] = "FULL";
        })(Fields20 = Occ.Fields20 || (Occ.Fields20 = {}));
        /**
         * Defines values for Fields21.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields21 = <Fields21>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields21;
        (function (Fields21) {
            Fields21["BASIC"] = "BASIC";
            Fields21["DEFAULT"] = "DEFAULT";
            Fields21["FULL"] = "FULL";
        })(Fields21 = Occ.Fields21 || (Occ.Fields21 = {}));
        /**
         * Defines values for Fields22.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields22 = <Fields22>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields22;
        (function (Fields22) {
            Fields22["BASIC"] = "BASIC";
            Fields22["DEFAULT"] = "DEFAULT";
            Fields22["FULL"] = "FULL";
        })(Fields22 = Occ.Fields22 || (Occ.Fields22 = {}));
        /**
         * Defines values for Fields23.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields23 = <Fields23>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields23;
        (function (Fields23) {
            Fields23["BASIC"] = "BASIC";
            Fields23["DEFAULT"] = "DEFAULT";
            Fields23["FULL"] = "FULL";
        })(Fields23 = Occ.Fields23 || (Occ.Fields23 = {}));
        /**
         * Defines values for Fields24.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields24 = <Fields24>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields24;
        (function (Fields24) {
            Fields24["BASIC"] = "BASIC";
            Fields24["DEFAULT"] = "DEFAULT";
            Fields24["FULL"] = "FULL";
        })(Fields24 = Occ.Fields24 || (Occ.Fields24 = {}));
        /**
         * Defines values for Fields25.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields25 = <Fields25>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields25;
        (function (Fields25) {
            Fields25["BASIC"] = "BASIC";
            Fields25["DEFAULT"] = "DEFAULT";
            Fields25["FULL"] = "FULL";
        })(Fields25 = Occ.Fields25 || (Occ.Fields25 = {}));
        /**
         * Defines values for Fields26.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields26 = <Fields26>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields26;
        (function (Fields26) {
            Fields26["BASIC"] = "BASIC";
            Fields26["DEFAULT"] = "DEFAULT";
            Fields26["FULL"] = "FULL";
        })(Fields26 = Occ.Fields26 || (Occ.Fields26 = {}));
        /**
         * Defines values for Fields27.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields27 = <Fields27>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields27;
        (function (Fields27) {
            Fields27["BASIC"] = "BASIC";
            Fields27["DEFAULT"] = "DEFAULT";
            Fields27["FULL"] = "FULL";
        })(Fields27 = Occ.Fields27 || (Occ.Fields27 = {}));
        /**
         * Defines values for Fields28.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields28 = <Fields28>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields28;
        (function (Fields28) {
            Fields28["BASIC"] = "BASIC";
            Fields28["DEFAULT"] = "DEFAULT";
            Fields28["FULL"] = "FULL";
        })(Fields28 = Occ.Fields28 || (Occ.Fields28 = {}));
        /**
         * Defines values for Fields29.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields29 = <Fields29>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields29;
        (function (Fields29) {
            Fields29["BASIC"] = "BASIC";
            Fields29["DEFAULT"] = "DEFAULT";
            Fields29["FULL"] = "FULL";
        })(Fields29 = Occ.Fields29 || (Occ.Fields29 = {}));
        /**
         * Defines values for Fields30.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields30 = <Fields30>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields30;
        (function (Fields30) {
            Fields30["BASIC"] = "BASIC";
            Fields30["DEFAULT"] = "DEFAULT";
            Fields30["FULL"] = "FULL";
        })(Fields30 = Occ.Fields30 || (Occ.Fields30 = {}));
        /**
         * Defines values for Fields31.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields31 = <Fields31>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields31;
        (function (Fields31) {
            Fields31["BASIC"] = "BASIC";
            Fields31["DEFAULT"] = "DEFAULT";
            Fields31["FULL"] = "FULL";
        })(Fields31 = Occ.Fields31 || (Occ.Fields31 = {}));
        /**
         * Defines values for Fields32.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields32 = <Fields32>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields32;
        (function (Fields32) {
            Fields32["BASIC"] = "BASIC";
            Fields32["DEFAULT"] = "DEFAULT";
            Fields32["FULL"] = "FULL";
        })(Fields32 = Occ.Fields32 || (Occ.Fields32 = {}));
        /**
         * Defines values for Fields33.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields33 = <Fields33>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields33;
        (function (Fields33) {
            Fields33["BASIC"] = "BASIC";
            Fields33["DEFAULT"] = "DEFAULT";
            Fields33["FULL"] = "FULL";
        })(Fields33 = Occ.Fields33 || (Occ.Fields33 = {}));
        /**
         * Defines values for Fields34.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields34 = <Fields34>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields34;
        (function (Fields34) {
            Fields34["BASIC"] = "BASIC";
            Fields34["DEFAULT"] = "DEFAULT";
            Fields34["FULL"] = "FULL";
        })(Fields34 = Occ.Fields34 || (Occ.Fields34 = {}));
        /**
         * Defines values for Fields35.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields35 = <Fields35>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields35;
        (function (Fields35) {
            Fields35["BASIC"] = "BASIC";
            Fields35["DEFAULT"] = "DEFAULT";
            Fields35["FULL"] = "FULL";
        })(Fields35 = Occ.Fields35 || (Occ.Fields35 = {}));
        /**
         * Defines values for Fields36.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields36 = <Fields36>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields36;
        (function (Fields36) {
            Fields36["BASIC"] = "BASIC";
            Fields36["DEFAULT"] = "DEFAULT";
            Fields36["FULL"] = "FULL";
        })(Fields36 = Occ.Fields36 || (Occ.Fields36 = {}));
        /**
         * Defines values for Fields37.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields37 = <Fields37>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields37;
        (function (Fields37) {
            Fields37["BASIC"] = "BASIC";
            Fields37["DEFAULT"] = "DEFAULT";
            Fields37["FULL"] = "FULL";
        })(Fields37 = Occ.Fields37 || (Occ.Fields37 = {}));
        /**
         * Defines values for Fields38.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields38 = <Fields38>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields38;
        (function (Fields38) {
            Fields38["BASIC"] = "BASIC";
            Fields38["DEFAULT"] = "DEFAULT";
            Fields38["FULL"] = "FULL";
        })(Fields38 = Occ.Fields38 || (Occ.Fields38 = {}));
        /**
         * Defines values for Fields39.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields39 = <Fields39>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields39;
        (function (Fields39) {
            Fields39["BASIC"] = "BASIC";
            Fields39["DEFAULT"] = "DEFAULT";
            Fields39["FULL"] = "FULL";
        })(Fields39 = Occ.Fields39 || (Occ.Fields39 = {}));
        /**
         * Defines values for Fields40.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields40 = <Fields40>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields40;
        (function (Fields40) {
            Fields40["BASIC"] = "BASIC";
            Fields40["DEFAULT"] = "DEFAULT";
            Fields40["FULL"] = "FULL";
        })(Fields40 = Occ.Fields40 || (Occ.Fields40 = {}));
        /**
         * Defines values for Fields41.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields41 = <Fields41>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields41;
        (function (Fields41) {
            Fields41["BASIC"] = "BASIC";
            Fields41["DEFAULT"] = "DEFAULT";
            Fields41["FULL"] = "FULL";
        })(Fields41 = Occ.Fields41 || (Occ.Fields41 = {}));
        /**
         * Defines values for Fields42.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields42 = <Fields42>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields42;
        (function (Fields42) {
            Fields42["BASIC"] = "BASIC";
            Fields42["DEFAULT"] = "DEFAULT";
            Fields42["FULL"] = "FULL";
        })(Fields42 = Occ.Fields42 || (Occ.Fields42 = {}));
        /**
         * Defines values for Fields43.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields43 = <Fields43>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields43;
        (function (Fields43) {
            Fields43["BASIC"] = "BASIC";
            Fields43["DEFAULT"] = "DEFAULT";
            Fields43["FULL"] = "FULL";
        })(Fields43 = Occ.Fields43 || (Occ.Fields43 = {}));
        /**
         * Defines values for Fields44.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields44 = <Fields44>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields44;
        (function (Fields44) {
            Fields44["BASIC"] = "BASIC";
            Fields44["DEFAULT"] = "DEFAULT";
            Fields44["FULL"] = "FULL";
        })(Fields44 = Occ.Fields44 || (Occ.Fields44 = {}));
        /**
         * Defines values for Fields45.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields45 = <Fields45>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields45;
        (function (Fields45) {
            Fields45["BASIC"] = "BASIC";
            Fields45["DEFAULT"] = "DEFAULT";
            Fields45["FULL"] = "FULL";
        })(Fields45 = Occ.Fields45 || (Occ.Fields45 = {}));
        /**
         * Defines values for Fields46.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields46 = <Fields46>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields46;
        (function (Fields46) {
            Fields46["BASIC"] = "BASIC";
            Fields46["DEFAULT"] = "DEFAULT";
            Fields46["FULL"] = "FULL";
        })(Fields46 = Occ.Fields46 || (Occ.Fields46 = {}));
        /**
         * Defines values for Fields47.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields47 = <Fields47>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields47;
        (function (Fields47) {
            Fields47["BASIC"] = "BASIC";
            Fields47["DEFAULT"] = "DEFAULT";
            Fields47["FULL"] = "FULL";
        })(Fields47 = Occ.Fields47 || (Occ.Fields47 = {}));
        /**
         * Defines values for Fields48.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields48 = <Fields48>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields48;
        (function (Fields48) {
            Fields48["BASIC"] = "BASIC";
            Fields48["DEFAULT"] = "DEFAULT";
            Fields48["FULL"] = "FULL";
        })(Fields48 = Occ.Fields48 || (Occ.Fields48 = {}));
        /**
         * Defines values for Fields49.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields49 = <Fields49>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields49;
        (function (Fields49) {
            Fields49["BASIC"] = "BASIC";
            Fields49["DEFAULT"] = "DEFAULT";
            Fields49["FULL"] = "FULL";
        })(Fields49 = Occ.Fields49 || (Occ.Fields49 = {}));
        /**
         * Defines values for Fields50.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields50 = <Fields50>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields50;
        (function (Fields50) {
            Fields50["BASIC"] = "BASIC";
            Fields50["DEFAULT"] = "DEFAULT";
            Fields50["FULL"] = "FULL";
        })(Fields50 = Occ.Fields50 || (Occ.Fields50 = {}));
        /**
         * Defines values for Fields51.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields51 = <Fields51>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields51;
        (function (Fields51) {
            Fields51["BASIC"] = "BASIC";
            Fields51["DEFAULT"] = "DEFAULT";
            Fields51["FULL"] = "FULL";
        })(Fields51 = Occ.Fields51 || (Occ.Fields51 = {}));
        /**
         * Defines values for Fields52.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields52 = <Fields52>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields52;
        (function (Fields52) {
            Fields52["BASIC"] = "BASIC";
            Fields52["DEFAULT"] = "DEFAULT";
            Fields52["FULL"] = "FULL";
        })(Fields52 = Occ.Fields52 || (Occ.Fields52 = {}));
        /**
         * Defines values for Fields53.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields53 = <Fields53>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields53;
        (function (Fields53) {
            Fields53["BASIC"] = "BASIC";
            Fields53["DEFAULT"] = "DEFAULT";
            Fields53["FULL"] = "FULL";
        })(Fields53 = Occ.Fields53 || (Occ.Fields53 = {}));
        /**
         * Defines values for Fields54.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields54 = <Fields54>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields54;
        (function (Fields54) {
            Fields54["BASIC"] = "BASIC";
            Fields54["DEFAULT"] = "DEFAULT";
            Fields54["FULL"] = "FULL";
        })(Fields54 = Occ.Fields54 || (Occ.Fields54 = {}));
        /**
         * Defines values for Fields55.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields55 = <Fields55>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields55;
        (function (Fields55) {
            Fields55["BASIC"] = "BASIC";
            Fields55["DEFAULT"] = "DEFAULT";
            Fields55["FULL"] = "FULL";
        })(Fields55 = Occ.Fields55 || (Occ.Fields55 = {}));
        /**
         * Defines values for Fields56.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields56 = <Fields56>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields56;
        (function (Fields56) {
            Fields56["BASIC"] = "BASIC";
            Fields56["DEFAULT"] = "DEFAULT";
            Fields56["FULL"] = "FULL";
        })(Fields56 = Occ.Fields56 || (Occ.Fields56 = {}));
        /**
         * Defines values for Fields57.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields57 = <Fields57>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields57;
        (function (Fields57) {
            Fields57["BASIC"] = "BASIC";
            Fields57["DEFAULT"] = "DEFAULT";
            Fields57["FULL"] = "FULL";
        })(Fields57 = Occ.Fields57 || (Occ.Fields57 = {}));
        /**
         * Defines values for Fields58.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields58 = <Fields58>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields58;
        (function (Fields58) {
            Fields58["BASIC"] = "BASIC";
            Fields58["DEFAULT"] = "DEFAULT";
            Fields58["FULL"] = "FULL";
        })(Fields58 = Occ.Fields58 || (Occ.Fields58 = {}));
        /**
         * Defines values for Fields59.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields59 = <Fields59>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields59;
        (function (Fields59) {
            Fields59["BASIC"] = "BASIC";
            Fields59["DEFAULT"] = "DEFAULT";
            Fields59["FULL"] = "FULL";
        })(Fields59 = Occ.Fields59 || (Occ.Fields59 = {}));
        /**
         * Defines values for Fields60.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields60 = <Fields60>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields60;
        (function (Fields60) {
            Fields60["BASIC"] = "BASIC";
            Fields60["DEFAULT"] = "DEFAULT";
            Fields60["FULL"] = "FULL";
        })(Fields60 = Occ.Fields60 || (Occ.Fields60 = {}));
        /**
         * Defines values for Fields61.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields61 = <Fields61>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields61;
        (function (Fields61) {
            Fields61["BASIC"] = "BASIC";
            Fields61["DEFAULT"] = "DEFAULT";
            Fields61["FULL"] = "FULL";
        })(Fields61 = Occ.Fields61 || (Occ.Fields61 = {}));
        /**
         * Defines values for Type.
         * Possible values include: 'all', 'product', 'order'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Type;
        (function (Type) {
            Type["All"] = "all";
            Type["Product"] = "product";
            Type["Order"] = "order";
        })(Type = Occ.Type || (Occ.Type = {}));
        /**
         * @record
         */
        function AnonymousConsent() { }
        Occ.AnonymousConsent = AnonymousConsent;
        if (false) {
            /** @type {?|undefined} */
            AnonymousConsent.prototype.templateCode;
            /** @type {?|undefined} */
            AnonymousConsent.prototype.version;
            /** @type {?|undefined} */
            AnonymousConsent.prototype.consentState;
        }
        var CONSENT_STATUS;
        (function (CONSENT_STATUS) {
            CONSENT_STATUS["ANONYMOUS_CONSENT_GIVEN"] = "GIVEN";
            CONSENT_STATUS["ANONYMOUS_CONSENT_WITHDRAWN"] = "WITHDRAWN";
        })(CONSENT_STATUS = Occ.CONSENT_STATUS || (Occ.CONSENT_STATUS = {}));
        /**
         * @record
         */
        function ConsentTemplate() { }
        Occ.ConsentTemplate = ConsentTemplate;
        if (false) {
            /** @type {?|undefined} */
            ConsentTemplate.prototype.id;
            /** @type {?|undefined} */
            ConsentTemplate.prototype.name;
            /** @type {?|undefined} */
            ConsentTemplate.prototype.description;
            /** @type {?|undefined} */
            ConsentTemplate.prototype.version;
            /** @type {?|undefined} */
            ConsentTemplate.prototype.currentConsent;
        }
        /**
         * @record
         */
        function Consent() { }
        Occ.Consent = Consent;
        if (false) {
            /** @type {?|undefined} */
            Consent.prototype.code;
            /** @type {?|undefined} */
            Consent.prototype.consentGivenDate;
            /** @type {?|undefined} */
            Consent.prototype.consentWithdrawnDate;
        }
        /**
         * @record
         */
        function ConsentTemplateList() { }
        Occ.ConsentTemplateList = ConsentTemplateList;
        if (false) {
            /** @type {?|undefined} */
            ConsentTemplateList.prototype.consentTemplates;
        }
        /**
         * @record
         */
        function BaseSites() { }
        Occ.BaseSites = BaseSites;
        if (false) {
            /** @type {?|undefined} */
            BaseSites.prototype.baseSites;
        }
        /**
         * @record
         */
        function BaseSite() { }
        Occ.BaseSite = BaseSite;
        if (false) {
            /** @type {?|undefined} */
            BaseSite.prototype.channel;
            /** @type {?|undefined} */
            BaseSite.prototype.defaultLanguage;
            /** @type {?|undefined} */
            BaseSite.prototype.defaultPreviewCatalogId;
            /** @type {?|undefined} */
            BaseSite.prototype.defaultPreviewCategoryCode;
            /** @type {?|undefined} */
            BaseSite.prototype.defaultPreviewProductCode;
            /** @type {?|undefined} */
            BaseSite.prototype.locale;
            /** @type {?|undefined} */
            BaseSite.prototype.name;
            /** @type {?|undefined} */
            BaseSite.prototype.theme;
            /** @type {?|undefined} */
            BaseSite.prototype.uid;
            /** @type {?|undefined} */
            BaseSite.prototype.stores;
            /** @type {?|undefined} */
            BaseSite.prototype.urlPatterns;
            /** @type {?|undefined} */
            BaseSite.prototype.urlEncodingAttributes;
        }
        /**
         * @record
         */
        function BaseStore() { }
        Occ.BaseStore = BaseStore;
        if (false) {
            /** @type {?|undefined} */
            BaseStore.prototype.currencies;
            /** @type {?|undefined} */
            BaseStore.prototype.defaultCurrency;
            /** @type {?|undefined} */
            BaseStore.prototype.languages;
            /** @type {?|undefined} */
            BaseStore.prototype.defaultLanguage;
        }
        /**
         * @record
         */
        function ProductInterestEntry() { }
        Occ.ProductInterestEntry = ProductInterestEntry;
        if (false) {
            /** @type {?|undefined} */
            ProductInterestEntry.prototype.interestType;
            /** @type {?|undefined} */
            ProductInterestEntry.prototype.dateAdded;
            /** @type {?|undefined} */
            ProductInterestEntry.prototype.expirationDate;
        }
        /**
         * @record
         */
        function ProductInterestEntryRelation() { }
        Occ.ProductInterestEntryRelation = ProductInterestEntryRelation;
        if (false) {
            /** @type {?|undefined} */
            ProductInterestEntryRelation.prototype.product;
            /** @type {?|undefined} */
            ProductInterestEntryRelation.prototype.productInterestEntry;
        }
        /**
         * @record
         */
        function ProductInterestSearchResult() { }
        Occ.ProductInterestSearchResult = ProductInterestSearchResult;
        if (false) {
            /** @type {?|undefined} */
            ProductInterestSearchResult.prototype.results;
            /** @type {?|undefined} */
            ProductInterestSearchResult.prototype.sorts;
            /** @type {?|undefined} */
            ProductInterestSearchResult.prototype.pagination;
        }
        var NotificationType;
        (function (NotificationType) {
            NotificationType["BACK_IN_STOCK"] = "BACK_IN_STOCK";
        })(NotificationType = Occ.NotificationType || (Occ.NotificationType = {}));
    })(exports.Occ || (exports.Occ = {}));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OccModule = /** @class */ (function () {
        function OccModule() {
        }
        /**
         * @return {?}
         */
        OccModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: OccModule,
                providers: [
                    { provide: OccConfig, useExisting: Config },
                    provideConfig(defaultOccConfig),
                    provideConfigValidator(occConfigValidator),
                ],
            };
        };
        OccModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            AsmOccModule,
                            CmsOccModule,
                            CartOccModule,
                            CheckoutOccModule,
                            ProductOccModule,
                            SiteContextOccModule,
                            StoreFinderOccModule,
                            UserOccModule,
                            OccConfigLoaderModule.forRoot(),
                        ],
                    },] }
        ];
        return OccModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoadingScopesService = /** @class */ (function () {
        function LoadingScopesService(config) {
            this.config = config;
        }
        /**
         * Aims to expand scopes based on loading scopes config.
         *
         * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']
         *
         * If scope data overlaps with each other, the data should be merged in the order of scopes provided,
         * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.
         * It should apply also to implicit scopes (that are included by configuration).
         *
         * @param model
         * @param scopes
         */
        /**
         * Aims to expand scopes based on loading scopes config.
         *
         * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']
         *
         * If scope data overlaps with each other, the data should be merged in the order of scopes provided,
         * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.
         * It should apply also to implicit scopes (that are included by configuration).
         *
         * @param {?} model
         * @param {?} scopes
         * @return {?}
         */
        LoadingScopesService.prototype.expand = /**
         * Aims to expand scopes based on loading scopes config.
         *
         * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']
         *
         * If scope data overlaps with each other, the data should be merged in the order of scopes provided,
         * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.
         * It should apply also to implicit scopes (that are included by configuration).
         *
         * @param {?} model
         * @param {?} scopes
         * @return {?}
         */
        function (model, scopes) {
            var e_1, _a;
            /** @type {?} */
            var scopesConfig = this.config &&
                this.config.backend &&
                this.config.backend.loadingScopes &&
                this.config.backend.loadingScopes[model];
            if (scopesConfig) {
                /** @type {?} */
                var expandedScopes = __spread(scopes);
                /** @type {?} */
                var i = expandedScopes.length;
                while (i > 0) {
                    i--;
                    /** @type {?} */
                    var includedScopes = scopesConfig[expandedScopes[i]] &&
                        scopesConfig[expandedScopes[i]].include;
                    if (includedScopes) {
                        try {
                            for (var includedScopes_1 = (e_1 = void 0, __values(includedScopes)), includedScopes_1_1 = includedScopes_1.next(); !includedScopes_1_1.done; includedScopes_1_1 = includedScopes_1.next()) {
                                var includedScope = includedScopes_1_1.value;
                                if (!expandedScopes.includes(includedScope)) {
                                    expandedScopes.splice(i, 0, includedScope);
                                    i++;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (includedScopes_1_1 && !includedScopes_1_1.done && (_a = includedScopes_1.return)) _a.call(includedScopes_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                }
                return expandedScopes;
            }
            return scopes;
        };
        /**
         * Return maxAge for product scope in milliseconds
         *
         * @param model
         * @param scope
         */
        /**
         * Return maxAge for product scope in milliseconds
         *
         * @param {?} model
         * @param {?} scope
         * @return {?}
         */
        LoadingScopesService.prototype.getMaxAge = /**
         * Return maxAge for product scope in milliseconds
         *
         * @param {?} model
         * @param {?} scope
         * @return {?}
         */
        function (model, scope) {
            /** @type {?} */
            var scopesConfig = this.config &&
                this.config.backend &&
                this.config.backend.loadingScopes &&
                this.config.backend.loadingScopes[model];
            return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;
        };
        LoadingScopesService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        LoadingScopesService.ctorParameters = function () { return [
            { type: OccConfig }
        ]; };
        /** @nocollapse */ LoadingScopesService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function LoadingScopesService_Factory() { return new LoadingScopesService(core.ɵɵinject(OccConfig)); }, token: LoadingScopesService, providedIn: "root" });
        return LoadingScopesService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        LoadingScopesService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since 1.2.0
     * Use OCC_USER_ID_ANONYMOUS instead
     * @type {?}
     */
    var ANONYMOUS_USERID = OCC_USER_ID_ANONYMOUS;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';
    var AnonymousConsentsInterceptor = /** @class */ (function () {
        function AnonymousConsentsInterceptor(anonymousConsentsService, authService, occEndpoints, config) {
            this.anonymousConsentsService = anonymousConsentsService;
            this.authService = authService;
            this.occEndpoints = occEndpoints;
            this.config = config;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        AnonymousConsentsInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            return rxjs.iif((/**
             * @return {?}
             */
            function () { return isFeatureEnabled(_this.config, ANONYMOUS_CONSENTS_FEATURE); }), this.anonymousConsentsService.getConsents().pipe(operators.take(1), operators.withLatestFrom(this.authService.isUserLoggedIn()), operators.switchMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), consents = _b[0], isUserLoggedIn = _b[1];
                if (!_this.isOccUrl(request.url)) {
                    return next.handle(request);
                }
                /** @type {?} */
                var clonedRequest = _this.handleRequest(consents, request);
                return next.handle(clonedRequest).pipe(operators.tap((/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    if (event instanceof http.HttpResponse) {
                        _this.handleResponse(isUserLoggedIn, event.headers.get(ANONYMOUS_CONSENTS_HEADER), consents);
                    }
                })));
            }))), next.handle(request));
        };
        /**
         * @private
         * @param {?} isUserLoggedIn
         * @param {?} newRawConsents
         * @param {?} previousConsents
         * @return {?}
         */
        AnonymousConsentsInterceptor.prototype.handleResponse = /**
         * @private
         * @param {?} isUserLoggedIn
         * @param {?} newRawConsents
         * @param {?} previousConsents
         * @return {?}
         */
        function (isUserLoggedIn, newRawConsents, previousConsents) {
            if (!isUserLoggedIn && newRawConsents) {
                /** @type {?} */
                var newConsents = [];
                newConsents = this.anonymousConsentsService.decodeAndDeserialize(newRawConsents);
                newConsents = this.giveRequiredConsents(newConsents);
                if (this.anonymousConsentsService.consentsUpdated(newConsents, previousConsents)) {
                    this.anonymousConsentsService.setConsents(newConsents);
                }
            }
        };
        /**
         * @private
         * @param {?} consents
         * @param {?} request
         * @return {?}
         */
        AnonymousConsentsInterceptor.prototype.handleRequest = /**
         * @private
         * @param {?} consents
         * @param {?} request
         * @return {?}
         */
        function (consents, request) {
            var _a;
            if (!consents) {
                return request;
            }
            /** @type {?} */
            var rawConsents = this.anonymousConsentsService.serializeAndEncode(consents);
            return request.clone({
                setHeaders: (_a = {},
                    _a[ANONYMOUS_CONSENTS_HEADER] = rawConsents,
                    _a),
            });
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        AnonymousConsentsInterceptor.prototype.isOccUrl = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return url.includes(this.occEndpoints.getBaseEndpoint());
        };
        /**
         * @private
         * @param {?} consents
         * @return {?}
         */
        AnonymousConsentsInterceptor.prototype.giveRequiredConsents = /**
         * @private
         * @param {?} consents
         * @return {?}
         */
        function (consents) {
            var e_1, _a;
            /** @type {?} */
            var givenConsents = __spread(consents);
            if (Boolean(this.config.anonymousConsents) &&
                Boolean(this.config.anonymousConsents.requiredConsents)) {
                try {
                    for (var givenConsents_1 = __values(givenConsents), givenConsents_1_1 = givenConsents_1.next(); !givenConsents_1_1.done; givenConsents_1_1 = givenConsents_1.next()) {
                        var consent = givenConsents_1_1.value;
                        if (this.config.anonymousConsents.requiredConsents.includes(consent.templateCode)) {
                            consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (givenConsents_1_1 && !givenConsents_1_1.done && (_a = givenConsents_1.return)) _a.call(givenConsents_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return givenConsents;
        };
        AnonymousConsentsInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        AnonymousConsentsInterceptor.ctorParameters = function () { return [
            { type: AnonymousConsentsService },
            { type: AuthService },
            { type: OccEndpointsService },
            { type: AnonymousConsentsConfig }
        ]; };
        /** @nocollapse */ AnonymousConsentsInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AnonymousConsentsInterceptor_Factory() { return new AnonymousConsentsInterceptor(core.ɵɵinject(AnonymousConsentsService), core.ɵɵinject(AuthService), core.ɵɵinject(OccEndpointsService), core.ɵɵinject(AnonymousConsentsConfig)); }, token: AnonymousConsentsInterceptor, providedIn: "root" });
        return AnonymousConsentsInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsInterceptor.prototype.anonymousConsentsService;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsInterceptor.prototype.authService;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsInterceptor.prototype.occEndpoints;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsInterceptor.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var interceptors$1 = [
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: AnonymousConsentsInterceptor,
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PROCESS_FEATURE = 'process';
    /**
     * @record
     * @template T
     */
    function StateWithProcess() { }
    if (false) {
        /* Skipping unnamed member:
        [PROCESS_FEATURE]: EntityLoaderState<T>;*/
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @return {?}
     */
    function getProcessState() {
        return store.createFeatureSelector(PROCESS_FEATURE);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} processId
     * @return {?}
     */
    function getProcessStateFactory(processId) {
        return store.createSelector(getProcessState(), (/**
         * @param {?} entityState
         * @return {?}
         */
        function (entityState) {
            return entityStateSelector(entityState, processId);
        }));
    }
    /**
     * @template T
     * @param {?} processId
     * @return {?}
     */
    function getProcessLoadingFactory(processId) {
        return store.createSelector(getProcessStateFactory(processId), (/**
         * @param {?} loaderState
         * @return {?}
         */
        function (loaderState) { return loaderLoadingSelector(loaderState); }));
    }
    /**
     * @template T
     * @param {?} processId
     * @return {?}
     */
    function getProcessSuccessFactory(processId) {
        return store.createSelector(getProcessStateFactory(processId), (/**
         * @param {?} loaderState
         * @return {?}
         */
        function (loaderState) { return loaderSuccessSelector(loaderState); }));
    }
    /**
     * @template T
     * @param {?} processId
     * @return {?}
     */
    function getProcessErrorFactory(processId) {
        return store.createSelector(getProcessStateFactory(processId), (/**
         * @param {?} loaderState
         * @return {?}
         */
        function (loaderState) { return loaderErrorSelector(loaderState); }));
    }

    var process_selectors = /*#__PURE__*/Object.freeze({
        getProcessStateFactory: getProcessStateFactory,
        getProcessLoadingFactory: getProcessLoadingFactory,
        getProcessSuccessFactory: getProcessSuccessFactory,
        getProcessErrorFactory: getProcessErrorFactory
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';
    /** @type {?} */
    var LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';
    /** @type {?} */
    var LOAD_BILLING_COUNTRIES_SUCCESS = '[User] Load Billing Countries Success';
    var LoadBillingCountries = /** @class */ (function () {
        function LoadBillingCountries() {
            this.type = LOAD_BILLING_COUNTRIES;
        }
        return LoadBillingCountries;
    }());
    if (false) {
        /** @type {?} */
        LoadBillingCountries.prototype.type;
    }
    var LoadBillingCountriesFail = /** @class */ (function () {
        function LoadBillingCountriesFail(payload) {
            this.payload = payload;
            this.type = LOAD_BILLING_COUNTRIES_FAIL;
        }
        return LoadBillingCountriesFail;
    }());
    if (false) {
        /** @type {?} */
        LoadBillingCountriesFail.prototype.type;
        /** @type {?} */
        LoadBillingCountriesFail.prototype.payload;
    }
    var LoadBillingCountriesSuccess = /** @class */ (function () {
        function LoadBillingCountriesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_BILLING_COUNTRIES_SUCCESS;
        }
        return LoadBillingCountriesSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadBillingCountriesSuccess.prototype.type;
        /** @type {?} */
        LoadBillingCountriesSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';
    /** @type {?} */
    var LOAD_CONSIGNMENT_TRACKING_FAIL = '[User] Load Consignment Tracking Fail';
    /** @type {?} */
    var LOAD_CONSIGNMENT_TRACKING_SUCCESS = '[User] Load Consignment Tracking Success';
    /** @type {?} */
    var CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';
    var LoadConsignmentTracking = /** @class */ (function () {
        function LoadConsignmentTracking(payload) {
            this.payload = payload;
            this.type = LOAD_CONSIGNMENT_TRACKING;
        }
        return LoadConsignmentTracking;
    }());
    if (false) {
        /** @type {?} */
        LoadConsignmentTracking.prototype.type;
        /** @type {?} */
        LoadConsignmentTracking.prototype.payload;
    }
    var LoadConsignmentTrackingFail = /** @class */ (function () {
        function LoadConsignmentTrackingFail(payload) {
            this.payload = payload;
            this.type = LOAD_CONSIGNMENT_TRACKING_FAIL;
        }
        return LoadConsignmentTrackingFail;
    }());
    if (false) {
        /** @type {?} */
        LoadConsignmentTrackingFail.prototype.type;
        /** @type {?} */
        LoadConsignmentTrackingFail.prototype.payload;
    }
    var LoadConsignmentTrackingSuccess = /** @class */ (function () {
        function LoadConsignmentTrackingSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;
        }
        return LoadConsignmentTrackingSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadConsignmentTrackingSuccess.prototype.type;
        /** @type {?} */
        LoadConsignmentTrackingSuccess.prototype.payload;
    }
    var ClearConsignmentTracking = /** @class */ (function () {
        function ClearConsignmentTracking() {
            this.type = CLEAR_CONSIGNMENT_TRACKING;
        }
        return ClearConsignmentTracking;
    }());
    if (false) {
        /** @type {?} */
        ClearConsignmentTracking.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';
    /** @type {?} */
    var LOAD_DELIVERY_COUNTRIES_FAIL = '[User] Load Delivery Countries Fail';
    /** @type {?} */
    var LOAD_DELIVERY_COUNTRIES_SUCCESS = '[User] Load Delivery Countries Success';
    var LoadDeliveryCountries = /** @class */ (function () {
        function LoadDeliveryCountries() {
            this.type = LOAD_DELIVERY_COUNTRIES;
        }
        return LoadDeliveryCountries;
    }());
    if (false) {
        /** @type {?} */
        LoadDeliveryCountries.prototype.type;
    }
    var LoadDeliveryCountriesFail = /** @class */ (function () {
        function LoadDeliveryCountriesFail(payload) {
            this.payload = payload;
            this.type = LOAD_DELIVERY_COUNTRIES_FAIL;
        }
        return LoadDeliveryCountriesFail;
    }());
    if (false) {
        /** @type {?} */
        LoadDeliveryCountriesFail.prototype.type;
        /** @type {?} */
        LoadDeliveryCountriesFail.prototype.payload;
    }
    var LoadDeliveryCountriesSuccess = /** @class */ (function () {
        function LoadDeliveryCountriesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_DELIVERY_COUNTRIES_SUCCESS;
        }
        return LoadDeliveryCountriesSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadDeliveryCountriesSuccess.prototype.type;
        /** @type {?} */
        LoadDeliveryCountriesSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FORGOT_PASSWORD_EMAIL_REQUEST = '[User] Forgot Password Email Request';
    /** @type {?} */
    var FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS = '[User] Forgot Password Email Request Success';
    /** @type {?} */
    var FORGOT_PASSWORD_EMAIL_REQUEST_FAIL = '[User] Forgot Password Email Request Fail';
    var ForgotPasswordEmailRequest = /** @class */ (function () {
        function ForgotPasswordEmailRequest(payload) {
            this.payload = payload;
            this.type = FORGOT_PASSWORD_EMAIL_REQUEST;
        }
        return ForgotPasswordEmailRequest;
    }());
    if (false) {
        /** @type {?} */
        ForgotPasswordEmailRequest.prototype.type;
        /** @type {?} */
        ForgotPasswordEmailRequest.prototype.payload;
    }
    var ForgotPasswordEmailRequestFail = /** @class */ (function () {
        function ForgotPasswordEmailRequestFail(payload) {
            this.payload = payload;
            this.type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;
        }
        return ForgotPasswordEmailRequestFail;
    }());
    if (false) {
        /** @type {?} */
        ForgotPasswordEmailRequestFail.prototype.type;
        /** @type {?} */
        ForgotPasswordEmailRequestFail.prototype.payload;
    }
    var ForgotPasswordEmailRequestSuccess = /** @class */ (function () {
        function ForgotPasswordEmailRequestSuccess() {
            this.type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;
        }
        return ForgotPasswordEmailRequestSuccess;
    }());
    if (false) {
        /** @type {?} */
        ForgotPasswordEmailRequestSuccess.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var USER_FEATURE = 'user';
    /** @type {?} */
    var UPDATE_EMAIL_PROCESS_ID = 'updateEmail';
    /** @type {?} */
    var UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';
    /** @type {?} */
    var UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';
    /** @type {?} */
    var REGISTER_USER_PROCESS_ID = 'registerUser';
    /** @type {?} */
    var REMOVE_USER_PROCESS_ID = 'removeUser';
    /** @type {?} */
    var GIVE_CONSENT_PROCESS_ID = 'giveConsent';
    /** @type {?} */
    var WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';
    /** @type {?} */
    var UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID = 'updateNotificationPreferences';
    /** @type {?} */
    var ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';
    /** @type {?} */
    var REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';
    /** @type {?} */
    var CANCEL_ORDER_PROCESS_ID = 'cancelOrder';
    /** @type {?} */
    var CANCEL_RETURN_PROCESS_ID = 'cancelReturn';
    /** @type {?} */
    var USER_CONSENTS = '[User] User Consents';
    /** @type {?} */
    var USER_PAYMENT_METHODS = '[User] User Payment Methods';
    /** @type {?} */
    var USER_ORDERS = '[User] User Orders';
    /** @type {?} */
    var USER_ADDRESSES = '[User] User Addresses';
    /** @type {?} */
    var USER_RETURN_REQUESTS = '[User] Order Return Requests';
    /** @type {?} */
    var USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';
    /** @type {?} */
    var USER_ORDER_DETAILS = '[User] User Order Details';
    /** @type {?} */
    var REGIONS = '[User] Regions';
    /** @type {?} */
    var CUSTOMER_COUPONS = '[User] Customer Coupons';
    /** @type {?} */
    var SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';
    /** @type {?} */
    var UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'unsubscribeCustomerCoupon';
    /** @type {?} */
    var CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';
    /** @type {?} */
    var NOTIFICATION_PREFERENCES = '[User] Notification Preferences';
    /** @type {?} */
    var PRODUCT_INTERESTS = '[User] Product Interests';
    /**
     * @record
     */
    function StateWithUser() { }
    if (false) {
        /* Skipping unnamed member:
        [USER_FEATURE]: UserState;*/
    }
    /**
     * @record
     */
    function UserState() { }
    if (false) {
        /** @type {?} */
        UserState.prototype.account;
        /** @type {?} */
        UserState.prototype.addresses;
        /** @type {?} */
        UserState.prototype.consents;
        /** @type {?} */
        UserState.prototype.billingCountries;
        /** @type {?} */
        UserState.prototype.countries;
        /** @type {?} */
        UserState.prototype.payments;
        /** @type {?} */
        UserState.prototype.orders;
        /** @type {?} */
        UserState.prototype.order;
        /** @type {?} */
        UserState.prototype.orderReturn;
        /** @type {?} */
        UserState.prototype.orderReturnList;
        /** @type {?} */
        UserState.prototype.titles;
        /** @type {?} */
        UserState.prototype.regions;
        /** @type {?} */
        UserState.prototype.resetPassword;
        /** @type {?} */
        UserState.prototype.consignmentTracking;
        /** @type {?} */
        UserState.prototype.customerCoupons;
        /** @type {?} */
        UserState.prototype.notificationPreferences;
        /** @type {?} */
        UserState.prototype.productInterests;
    }
    /**
     * @record
     */
    function RegionsState() { }
    if (false) {
        /** @type {?} */
        RegionsState.prototype.entities;
        /** @type {?} */
        RegionsState.prototype.country;
    }
    /**
     * @record
     */
    function BillingCountryEntities() { }
    /**
     * @record
     */
    function BillingCountriesState() { }
    if (false) {
        /** @type {?} */
        BillingCountriesState.prototype.entities;
    }
    /**
     * @record
     */
    function DeliveryCountryEntities() { }
    /**
     * @record
     */
    function DeliveryCountriesState() { }
    if (false) {
        /** @type {?} */
        DeliveryCountriesState.prototype.entities;
    }
    /**
     * @record
     */
    function TitleEntities() { }
    /**
     * @record
     */
    function TitlesState() { }
    if (false) {
        /** @type {?} */
        TitlesState.prototype.entities;
    }
    /**
     * @record
     */
    function UserDetailsState() { }
    if (false) {
        /** @type {?} */
        UserDetailsState.prototype.details;
    }
    /**
     * @record
     */
    function ConsignmentTrackingState() { }
    if (false) {
        /** @type {?|undefined} */
        ConsignmentTrackingState.prototype.tracking;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_ORDER_DETAILS = '[User] Load Order Details';
    /** @type {?} */
    var LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';
    /** @type {?} */
    var LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';
    /** @type {?} */
    var CLEAR_ORDER_DETAILS = '[User] Clear Order Details';
    /** @type {?} */
    var CANCEL_ORDER = '[User] Cancel Order';
    /** @type {?} */
    var CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';
    /** @type {?} */
    var CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';
    /** @type {?} */
    var RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';
    var LoadOrderDetails = /** @class */ (function (_super) {
        __extends(LoadOrderDetails, _super);
        function LoadOrderDetails(payload) {
            var _this = _super.call(this, USER_ORDER_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_DETAILS;
            return _this;
        }
        return LoadOrderDetails;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadOrderDetails.prototype.type;
        /** @type {?} */
        LoadOrderDetails.prototype.payload;
    }
    var LoadOrderDetailsFail = /** @class */ (function (_super) {
        __extends(LoadOrderDetailsFail, _super);
        function LoadOrderDetailsFail(payload) {
            var _this = _super.call(this, USER_ORDER_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_DETAILS_FAIL;
            return _this;
        }
        return LoadOrderDetailsFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadOrderDetailsFail.prototype.type;
        /** @type {?} */
        LoadOrderDetailsFail.prototype.payload;
    }
    var LoadOrderDetailsSuccess = /** @class */ (function (_super) {
        __extends(LoadOrderDetailsSuccess, _super);
        function LoadOrderDetailsSuccess(payload) {
            var _this = _super.call(this, USER_ORDER_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_DETAILS_SUCCESS;
            return _this;
        }
        return LoadOrderDetailsSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadOrderDetailsSuccess.prototype.type;
        /** @type {?} */
        LoadOrderDetailsSuccess.prototype.payload;
    }
    var ClearOrderDetails = /** @class */ (function (_super) {
        __extends(ClearOrderDetails, _super);
        function ClearOrderDetails() {
            var _this = _super.call(this, USER_ORDER_DETAILS) || this;
            _this.type = CLEAR_ORDER_DETAILS;
            return _this;
        }
        return ClearOrderDetails;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ClearOrderDetails.prototype.type;
    }
    var CancelOrder = /** @class */ (function (_super) {
        __extends(CancelOrder, _super);
        function CancelOrder(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER;
            return _this;
        }
        return CancelOrder;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        CancelOrder.prototype.type;
        /** @type {?} */
        CancelOrder.prototype.payload;
    }
    var CancelOrderFail = /** @class */ (function (_super) {
        __extends(CancelOrderFail, _super);
        function CancelOrderFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER_FAIL;
            return _this;
        }
        return CancelOrderFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        CancelOrderFail.prototype.type;
        /** @type {?} */
        CancelOrderFail.prototype.payload;
    }
    var CancelOrderSuccess = /** @class */ (function (_super) {
        __extends(CancelOrderSuccess, _super);
        function CancelOrderSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
            _this.type = CANCEL_ORDER_SUCCESS;
            return _this;
        }
        return CancelOrderSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        CancelOrderSuccess.prototype.type;
    }
    var ResetCancelOrderProcess = /** @class */ (function (_super) {
        __extends(ResetCancelOrderProcess, _super);
        function ResetCancelOrderProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
            _this.type = RESET_CANCEL_ORDER_PROCESS;
            return _this;
        }
        return ResetCancelOrderProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetCancelOrderProcess.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';
    /** @type {?} */
    var LOAD_USER_PAYMENT_METHODS_FAIL = '[User] Load User Payment Methods Fail';
    /** @type {?} */
    var LOAD_USER_PAYMENT_METHODS_SUCCESS = '[User] Load User Payment Methods Success';
    /** @type {?} */
    var SET_DEFAULT_USER_PAYMENT_METHOD = '[User] Set Default User Payment Method';
    /** @type {?} */
    var SET_DEFAULT_USER_PAYMENT_METHOD_FAIL = '[User] Set Default User Payment Method Fail';
    /** @type {?} */
    var SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS = '[User] Set Default User Payment Method Success';
    /** @type {?} */
    var DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';
    /** @type {?} */
    var DELETE_USER_PAYMENT_METHOD_FAIL = '[User] Delete User Payment Method Fail';
    /** @type {?} */
    var DELETE_USER_PAYMENT_METHOD_SUCCESS = '[User] Delete User  Payment Method Success';
    var LoadUserPaymentMethods = /** @class */ (function (_super) {
        __extends(LoadUserPaymentMethods, _super);
        function LoadUserPaymentMethods(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_PAYMENT_METHODS;
            return _this;
        }
        return LoadUserPaymentMethods;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadUserPaymentMethods.prototype.type;
        /** @type {?} */
        LoadUserPaymentMethods.prototype.payload;
    }
    var LoadUserPaymentMethodsFail = /** @class */ (function (_super) {
        __extends(LoadUserPaymentMethodsFail, _super);
        function LoadUserPaymentMethodsFail(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_PAYMENT_METHODS_FAIL;
            return _this;
        }
        return LoadUserPaymentMethodsFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadUserPaymentMethodsFail.prototype.type;
        /** @type {?} */
        LoadUserPaymentMethodsFail.prototype.payload;
    }
    var LoadUserPaymentMethodsSuccess = /** @class */ (function (_super) {
        __extends(LoadUserPaymentMethodsSuccess, _super);
        function LoadUserPaymentMethodsSuccess(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_PAYMENT_METHODS_SUCCESS;
            return _this;
        }
        return LoadUserPaymentMethodsSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadUserPaymentMethodsSuccess.prototype.type;
        /** @type {?} */
        LoadUserPaymentMethodsSuccess.prototype.payload;
    }
    var SetDefaultUserPaymentMethod = /** @class */ (function (_super) {
        __extends(SetDefaultUserPaymentMethod, _super);
        function SetDefaultUserPaymentMethod(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = SET_DEFAULT_USER_PAYMENT_METHOD;
            return _this;
        }
        return SetDefaultUserPaymentMethod;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        SetDefaultUserPaymentMethod.prototype.type;
        /** @type {?} */
        SetDefaultUserPaymentMethod.prototype.payload;
    }
    var SetDefaultUserPaymentMethodFail = /** @class */ (function (_super) {
        __extends(SetDefaultUserPaymentMethodFail, _super);
        function SetDefaultUserPaymentMethodFail(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS, payload) || this;
            _this.payload = payload;
            _this.type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;
            return _this;
        }
        return SetDefaultUserPaymentMethodFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        SetDefaultUserPaymentMethodFail.prototype.type;
        /** @type {?} */
        SetDefaultUserPaymentMethodFail.prototype.payload;
    }
    var SetDefaultUserPaymentMethodSuccess = /** @class */ (function (_super) {
        __extends(SetDefaultUserPaymentMethodSuccess, _super);
        function SetDefaultUserPaymentMethodSuccess(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;
            return _this;
        }
        return SetDefaultUserPaymentMethodSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        SetDefaultUserPaymentMethodSuccess.prototype.type;
        /** @type {?} */
        SetDefaultUserPaymentMethodSuccess.prototype.payload;
    }
    var DeleteUserPaymentMethod = /** @class */ (function (_super) {
        __extends(DeleteUserPaymentMethod, _super);
        function DeleteUserPaymentMethod(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_PAYMENT_METHOD;
            return _this;
        }
        return DeleteUserPaymentMethod;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        DeleteUserPaymentMethod.prototype.type;
        /** @type {?} */
        DeleteUserPaymentMethod.prototype.payload;
    }
    var DeleteUserPaymentMethodFail = /** @class */ (function (_super) {
        __extends(DeleteUserPaymentMethodFail, _super);
        function DeleteUserPaymentMethodFail(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS, payload) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_PAYMENT_METHOD_FAIL;
            return _this;
        }
        return DeleteUserPaymentMethodFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        DeleteUserPaymentMethodFail.prototype.type;
        /** @type {?} */
        DeleteUserPaymentMethodFail.prototype.payload;
    }
    var DeleteUserPaymentMethodSuccess = /** @class */ (function (_super) {
        __extends(DeleteUserPaymentMethodSuccess, _super);
        function DeleteUserPaymentMethodSuccess(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_PAYMENT_METHOD_SUCCESS;
            return _this;
        }
        return DeleteUserPaymentMethodSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        DeleteUserPaymentMethodSuccess.prototype.type;
        /** @type {?} */
        DeleteUserPaymentMethodSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_REGIONS = '[User] Load Regions';
    /** @type {?} */
    var LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';
    /** @type {?} */
    var LOAD_REGIONS_FAIL = '[User] Load Regions Fail';
    /** @type {?} */
    var CLEAR_REGIONS = '[User] Clear Regions';
    var LoadRegions = /** @class */ (function (_super) {
        __extends(LoadRegions, _super);
        function LoadRegions(payload) {
            var _this = _super.call(this, REGIONS) || this;
            _this.payload = payload;
            _this.type = LOAD_REGIONS;
            return _this;
        }
        return LoadRegions;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadRegions.prototype.type;
        /** @type {?} */
        LoadRegions.prototype.payload;
    }
    var LoadRegionsFail = /** @class */ (function (_super) {
        __extends(LoadRegionsFail, _super);
        function LoadRegionsFail(payload) {
            var _this = _super.call(this, REGIONS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_REGIONS_FAIL;
            return _this;
        }
        return LoadRegionsFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadRegionsFail.prototype.type;
        /** @type {?} */
        LoadRegionsFail.prototype.payload;
    }
    var LoadRegionsSuccess = /** @class */ (function (_super) {
        __extends(LoadRegionsSuccess, _super);
        function LoadRegionsSuccess(payload) {
            var _this = _super.call(this, REGIONS) || this;
            _this.payload = payload;
            _this.type = LOAD_REGIONS_SUCCESS;
            return _this;
        }
        return LoadRegionsSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadRegionsSuccess.prototype.type;
        /** @type {?} */
        LoadRegionsSuccess.prototype.payload;
    }
    var ClearRegions = /** @class */ (function () {
        function ClearRegions() {
            this.type = CLEAR_REGIONS;
        }
        return ClearRegions;
    }());
    if (false) {
        /** @type {?} */
        ClearRegions.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var RESET_PASSWORD = '[User] Reset Password';
    /** @type {?} */
    var RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';
    /** @type {?} */
    var RESET_PASSWORD_FAIL = '[User] Reset Password Fail';
    var ResetPassword = /** @class */ (function () {
        function ResetPassword(payload) {
            this.payload = payload;
            this.type = RESET_PASSWORD;
        }
        return ResetPassword;
    }());
    if (false) {
        /** @type {?} */
        ResetPassword.prototype.type;
        /** @type {?} */
        ResetPassword.prototype.payload;
    }
    var ResetPasswordFail = /** @class */ (function () {
        function ResetPasswordFail(payload) {
            this.payload = payload;
            this.type = RESET_PASSWORD_FAIL;
        }
        return ResetPasswordFail;
    }());
    if (false) {
        /** @type {?} */
        ResetPasswordFail.prototype.type;
        /** @type {?} */
        ResetPasswordFail.prototype.payload;
    }
    var ResetPasswordSuccess = /** @class */ (function () {
        function ResetPasswordSuccess() {
            this.type = RESET_PASSWORD_SUCCESS;
        }
        return ResetPasswordSuccess;
    }());
    if (false) {
        /** @type {?} */
        ResetPasswordSuccess.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_TITLES = '[User] Load Tiltes';
    /** @type {?} */
    var LOAD_TITLES_FAIL = '[User] Load Titles Fail';
    /** @type {?} */
    var LOAD_TITLES_SUCCESS = '[User] Load Titles Success';
    var LoadTitles = /** @class */ (function () {
        function LoadTitles() {
            this.type = LOAD_TITLES;
        }
        return LoadTitles;
    }());
    if (false) {
        /** @type {?} */
        LoadTitles.prototype.type;
    }
    var LoadTitlesFail = /** @class */ (function () {
        function LoadTitlesFail(payload) {
            this.payload = payload;
            this.type = LOAD_TITLES_FAIL;
        }
        return LoadTitlesFail;
    }());
    if (false) {
        /** @type {?} */
        LoadTitlesFail.prototype.type;
        /** @type {?} */
        LoadTitlesFail.prototype.payload;
    }
    var LoadTitlesSuccess = /** @class */ (function () {
        function LoadTitlesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_TITLES_SUCCESS;
        }
        return LoadTitlesSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadTitlesSuccess.prototype.type;
        /** @type {?} */
        LoadTitlesSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UPDATE_EMAIL = '[User] Update Email';
    /** @type {?} */
    var UPDATE_EMAIL_ERROR = '[User] Update Email Error';
    /** @type {?} */
    var UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';
    /** @type {?} */
    var RESET_EMAIL = '[User] Reset Email';
    var UpdateEmailAction = /** @class */ (function (_super) {
        __extends(UpdateEmailAction, _super);
        function UpdateEmailAction(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_EMAIL;
            return _this;
        }
        return UpdateEmailAction;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        UpdateEmailAction.prototype.type;
        /** @type {?} */
        UpdateEmailAction.prototype.payload;
    }
    var UpdateEmailSuccessAction = /** @class */ (function (_super) {
        __extends(UpdateEmailSuccessAction, _super);
        function UpdateEmailSuccessAction(newUid) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID) || this;
            _this.newUid = newUid;
            _this.type = UPDATE_EMAIL_SUCCESS;
            return _this;
        }
        return UpdateEmailSuccessAction;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        UpdateEmailSuccessAction.prototype.type;
        /** @type {?} */
        UpdateEmailSuccessAction.prototype.newUid;
    }
    var UpdateEmailErrorAction = /** @class */ (function (_super) {
        __extends(UpdateEmailErrorAction, _super);
        function UpdateEmailErrorAction(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_EMAIL_ERROR;
            return _this;
        }
        return UpdateEmailErrorAction;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        UpdateEmailErrorAction.prototype.type;
        /** @type {?} */
        UpdateEmailErrorAction.prototype.payload;
    }
    var ResetUpdateEmailAction = /** @class */ (function (_super) {
        __extends(ResetUpdateEmailAction, _super);
        function ResetUpdateEmailAction() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID) || this;
            _this.type = RESET_EMAIL;
            return _this;
        }
        return ResetUpdateEmailAction;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetUpdateEmailAction.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UPDATE_PASSWORD = '[User] Update Password';
    /** @type {?} */
    var UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';
    /** @type {?} */
    var UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';
    /** @type {?} */
    var UPDATE_PASSWORD_RESET = '[User] Reset Update Password Process State';
    var UpdatePassword = /** @class */ (function (_super) {
        __extends(UpdatePassword, _super);
        function UpdatePassword(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_PASSWORD;
            return _this;
        }
        return UpdatePassword;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        UpdatePassword.prototype.type;
        /** @type {?} */
        UpdatePassword.prototype.payload;
    }
    var UpdatePasswordFail = /** @class */ (function (_super) {
        __extends(UpdatePasswordFail, _super);
        function UpdatePasswordFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_PASSWORD_FAIL;
            return _this;
        }
        return UpdatePasswordFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        UpdatePasswordFail.prototype.type;
        /** @type {?} */
        UpdatePasswordFail.prototype.payload;
    }
    var UpdatePasswordSuccess = /** @class */ (function (_super) {
        __extends(UpdatePasswordSuccess, _super);
        function UpdatePasswordSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID) || this;
            _this.type = UPDATE_PASSWORD_SUCCESS;
            return _this;
        }
        return UpdatePasswordSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        UpdatePasswordSuccess.prototype.type;
    }
    var UpdatePasswordReset = /** @class */ (function (_super) {
        __extends(UpdatePasswordReset, _super);
        function UpdatePasswordReset() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID) || this;
            _this.type = UPDATE_PASSWORD_RESET;
            return _this;
        }
        return UpdatePasswordReset;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        UpdatePasswordReset.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_USER_ADDRESSES = '[User] Load User Addresses';
    /** @type {?} */
    var LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';
    /** @type {?} */
    var LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';
    /** @type {?} */
    var ADD_USER_ADDRESS = '[User] Add User Address';
    /** @type {?} */
    var ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';
    /** @type {?} */
    var ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';
    /** @type {?} */
    var UPDATE_USER_ADDRESS = '[User] Update User Address';
    /** @type {?} */
    var UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';
    /** @type {?} */
    var UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';
    /** @type {?} */
    var DELETE_USER_ADDRESS = '[User] Delete User Address';
    /** @type {?} */
    var DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';
    /** @type {?} */
    var DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';
    var LoadUserAddresses = /** @class */ (function (_super) {
        __extends(LoadUserAddresses, _super);
        function LoadUserAddresses(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ADDRESSES;
            return _this;
        }
        return LoadUserAddresses;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadUserAddresses.prototype.type;
        /** @type {?} */
        LoadUserAddresses.prototype.payload;
    }
    var LoadUserAddressesFail = /** @class */ (function (_super) {
        __extends(LoadUserAddressesFail, _super);
        function LoadUserAddressesFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ADDRESSES_FAIL;
            return _this;
        }
        return LoadUserAddressesFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadUserAddressesFail.prototype.type;
        /** @type {?} */
        LoadUserAddressesFail.prototype.payload;
    }
    var LoadUserAddressesSuccess = /** @class */ (function (_super) {
        __extends(LoadUserAddressesSuccess, _super);
        function LoadUserAddressesSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ADDRESSES_SUCCESS;
            return _this;
        }
        return LoadUserAddressesSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadUserAddressesSuccess.prototype.type;
        /** @type {?} */
        LoadUserAddressesSuccess.prototype.payload;
    }
    // Adding address actions
    var 
    // Adding address actions
    AddUserAddress = /** @class */ (function (_super) {
        __extends(AddUserAddress, _super);
        function AddUserAddress(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = ADD_USER_ADDRESS;
            return _this;
        }
        return AddUserAddress;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        AddUserAddress.prototype.type;
        /** @type {?} */
        AddUserAddress.prototype.payload;
    }
    var AddUserAddressFail = /** @class */ (function (_super) {
        __extends(AddUserAddressFail, _super);
        function AddUserAddressFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = ADD_USER_ADDRESS_FAIL;
            return _this;
        }
        return AddUserAddressFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        AddUserAddressFail.prototype.type;
        /** @type {?} */
        AddUserAddressFail.prototype.payload;
    }
    var AddUserAddressSuccess = /** @class */ (function (_super) {
        __extends(AddUserAddressSuccess, _super);
        function AddUserAddressSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = ADD_USER_ADDRESS_SUCCESS;
            return _this;
        }
        return AddUserAddressSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        AddUserAddressSuccess.prototype.type;
        /** @type {?} */
        AddUserAddressSuccess.prototype.payload;
    }
    // Updating address actions
    var 
    // Updating address actions
    UpdateUserAddress = /** @class */ (function (_super) {
        __extends(UpdateUserAddress, _super);
        function UpdateUserAddress(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_ADDRESS;
            return _this;
        }
        return UpdateUserAddress;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        UpdateUserAddress.prototype.type;
        /** @type {?} */
        UpdateUserAddress.prototype.payload;
    }
    var UpdateUserAddressFail = /** @class */ (function (_super) {
        __extends(UpdateUserAddressFail, _super);
        function UpdateUserAddressFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_ADDRESS_FAIL;
            return _this;
        }
        return UpdateUserAddressFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        UpdateUserAddressFail.prototype.type;
        /** @type {?} */
        UpdateUserAddressFail.prototype.payload;
    }
    var UpdateUserAddressSuccess = /** @class */ (function (_super) {
        __extends(UpdateUserAddressSuccess, _super);
        function UpdateUserAddressSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_ADDRESS_SUCCESS;
            return _this;
        }
        return UpdateUserAddressSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        UpdateUserAddressSuccess.prototype.type;
        /** @type {?} */
        UpdateUserAddressSuccess.prototype.payload;
    }
    // Deleting address actions
    var 
    // Deleting address actions
    DeleteUserAddress = /** @class */ (function (_super) {
        __extends(DeleteUserAddress, _super);
        function DeleteUserAddress(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_ADDRESS;
            return _this;
        }
        return DeleteUserAddress;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        DeleteUserAddress.prototype.type;
        /** @type {?} */
        DeleteUserAddress.prototype.payload;
    }
    var DeleteUserAddressFail = /** @class */ (function (_super) {
        __extends(DeleteUserAddressFail, _super);
        function DeleteUserAddressFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_ADDRESS_FAIL;
            return _this;
        }
        return DeleteUserAddressFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        DeleteUserAddressFail.prototype.type;
        /** @type {?} */
        DeleteUserAddressFail.prototype.payload;
    }
    var DeleteUserAddressSuccess = /** @class */ (function (_super) {
        __extends(DeleteUserAddressSuccess, _super);
        function DeleteUserAddressSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_ADDRESS_SUCCESS;
            return _this;
        }
        return DeleteUserAddressSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        DeleteUserAddressSuccess.prototype.type;
        /** @type {?} */
        DeleteUserAddressSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_USER_CONSENTS = '[User] Load User Consents';
    /** @type {?} */
    var LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';
    /** @type {?} */
    var LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';
    /** @type {?} */
    var RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';
    /** @type {?} */
    var GIVE_USER_CONSENT = '[User] Give User Consent';
    /** @type {?} */
    var GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';
    /** @type {?} */
    var GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';
    /** @type {?} */
    var RESET_GIVE_USER_CONSENT_PROCESS = '[User] Reset Give User Consent Process';
    /** @type {?} */
    var TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';
    /** @type {?} */
    var WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';
    /** @type {?} */
    var WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';
    /** @type {?} */
    var WITHDRAW_USER_CONSENT_SUCCESS = '[User] Withdraw User Consent Success';
    /** @type {?} */
    var RESET_WITHDRAW_USER_CONSENT_PROCESS = '[User] Reset Withdraw User Consent Process';
    var LoadUserConsents = /** @class */ (function (_super) {
        __extends(LoadUserConsents, _super);
        function LoadUserConsents(payload) {
            var _this = _super.call(this, USER_CONSENTS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_CONSENTS;
            return _this;
        }
        return LoadUserConsents;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadUserConsents.prototype.type;
        /** @type {?} */
        LoadUserConsents.prototype.payload;
    }
    var LoadUserConsentsFail = /** @class */ (function (_super) {
        __extends(LoadUserConsentsFail, _super);
        function LoadUserConsentsFail(payload) {
            var _this = _super.call(this, USER_CONSENTS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_CONSENTS_FAIL;
            return _this;
        }
        return LoadUserConsentsFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadUserConsentsFail.prototype.type;
        /** @type {?} */
        LoadUserConsentsFail.prototype.payload;
    }
    var LoadUserConsentsSuccess = /** @class */ (function (_super) {
        __extends(LoadUserConsentsSuccess, _super);
        function LoadUserConsentsSuccess(payload) {
            var _this = _super.call(this, USER_CONSENTS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_CONSENTS_SUCCESS;
            return _this;
        }
        return LoadUserConsentsSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadUserConsentsSuccess.prototype.type;
        /** @type {?} */
        LoadUserConsentsSuccess.prototype.payload;
    }
    var ResetLoadUserConsents = /** @class */ (function (_super) {
        __extends(ResetLoadUserConsents, _super);
        function ResetLoadUserConsents() {
            var _this = _super.call(this, USER_CONSENTS) || this;
            _this.type = RESET_LOAD_USER_CONSENTS;
            return _this;
        }
        return ResetLoadUserConsents;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ResetLoadUserConsents.prototype.type;
    }
    var GiveUserConsent = /** @class */ (function (_super) {
        __extends(GiveUserConsent, _super);
        function GiveUserConsent(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = GIVE_USER_CONSENT;
            return _this;
        }
        return GiveUserConsent;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        GiveUserConsent.prototype.type;
        /** @type {?} */
        GiveUserConsent.prototype.payload;
    }
    var GiveUserConsentFail = /** @class */ (function (_super) {
        __extends(GiveUserConsentFail, _super);
        function GiveUserConsentFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload) || this;
            _this.type = GIVE_USER_CONSENT_FAIL;
            return _this;
        }
        return GiveUserConsentFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        GiveUserConsentFail.prototype.type;
    }
    var GiveUserConsentSuccess = /** @class */ (function (_super) {
        __extends(GiveUserConsentSuccess, _super);
        function GiveUserConsentSuccess(consentTemplate) {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
            _this.consentTemplate = consentTemplate;
            _this.type = GIVE_USER_CONSENT_SUCCESS;
            return _this;
        }
        return GiveUserConsentSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        GiveUserConsentSuccess.prototype.type;
        /** @type {?} */
        GiveUserConsentSuccess.prototype.consentTemplate;
    }
    var ResetGiveUserConsentProcess = /** @class */ (function (_super) {
        __extends(ResetGiveUserConsentProcess, _super);
        function ResetGiveUserConsentProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
            _this.type = RESET_GIVE_USER_CONSENT_PROCESS;
            return _this;
        }
        return ResetGiveUserConsentProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetGiveUserConsentProcess.prototype.type;
    }
    var TransferAnonymousConsent = /** @class */ (function () {
        function TransferAnonymousConsent(payload) {
            this.payload = payload;
            this.type = TRANSFER_ANONYMOUS_CONSENT;
        }
        return TransferAnonymousConsent;
    }());
    if (false) {
        /** @type {?} */
        TransferAnonymousConsent.prototype.type;
        /** @type {?} */
        TransferAnonymousConsent.prototype.payload;
    }
    var WithdrawUserConsent = /** @class */ (function (_super) {
        __extends(WithdrawUserConsent, _super);
        function WithdrawUserConsent(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = WITHDRAW_USER_CONSENT;
            return _this;
        }
        return WithdrawUserConsent;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        WithdrawUserConsent.prototype.type;
        /** @type {?} */
        WithdrawUserConsent.prototype.payload;
    }
    var WithdrawUserConsentFail = /** @class */ (function (_super) {
        __extends(WithdrawUserConsentFail, _super);
        function WithdrawUserConsentFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload) || this;
            _this.type = WITHDRAW_USER_CONSENT_FAIL;
            return _this;
        }
        return WithdrawUserConsentFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        WithdrawUserConsentFail.prototype.type;
    }
    var WithdrawUserConsentSuccess = /** @class */ (function (_super) {
        __extends(WithdrawUserConsentSuccess, _super);
        function WithdrawUserConsentSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
            _this.type = WITHDRAW_USER_CONSENT_SUCCESS;
            return _this;
        }
        return WithdrawUserConsentSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        WithdrawUserConsentSuccess.prototype.type;
    }
    var ResetWithdrawUserConsentProcess = /** @class */ (function (_super) {
        __extends(ResetWithdrawUserConsentProcess, _super);
        function ResetWithdrawUserConsentProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
            _this.type = RESET_WITHDRAW_USER_CONSENT_PROCESS;
            return _this;
        }
        return ResetWithdrawUserConsentProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetWithdrawUserConsentProcess.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_USER_DETAILS = '[User] Load User Details';
    /** @type {?} */
    var LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';
    /** @type {?} */
    var LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';
    /** @type {?} */
    var UPDATE_USER_DETAILS = '[User] Update User Details';
    /** @type {?} */
    var UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';
    /** @type {?} */
    var UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';
    /** @type {?} */
    var RESET_USER_DETAILS = '[User] Reset User Details';
    var LoadUserDetails = /** @class */ (function () {
        function LoadUserDetails(payload) {
            this.payload = payload;
            this.type = LOAD_USER_DETAILS;
        }
        return LoadUserDetails;
    }());
    if (false) {
        /** @type {?} */
        LoadUserDetails.prototype.type;
        /** @type {?} */
        LoadUserDetails.prototype.payload;
    }
    var LoadUserDetailsFail = /** @class */ (function () {
        function LoadUserDetailsFail(payload) {
            this.payload = payload;
            this.type = LOAD_USER_DETAILS_FAIL;
        }
        return LoadUserDetailsFail;
    }());
    if (false) {
        /** @type {?} */
        LoadUserDetailsFail.prototype.type;
        /** @type {?} */
        LoadUserDetailsFail.prototype.payload;
    }
    var LoadUserDetailsSuccess = /** @class */ (function () {
        function LoadUserDetailsSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_USER_DETAILS_SUCCESS;
        }
        return LoadUserDetailsSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadUserDetailsSuccess.prototype.type;
        /** @type {?} */
        LoadUserDetailsSuccess.prototype.payload;
    }
    var UpdateUserDetails = /** @class */ (function (_super) {
        __extends(UpdateUserDetails, _super);
        function UpdateUserDetails(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_DETAILS;
            return _this;
        }
        return UpdateUserDetails;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        UpdateUserDetails.prototype.type;
        /** @type {?} */
        UpdateUserDetails.prototype.payload;
    }
    var UpdateUserDetailsFail = /** @class */ (function (_super) {
        __extends(UpdateUserDetailsFail, _super);
        function UpdateUserDetailsFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_DETAILS_FAIL;
            return _this;
        }
        return UpdateUserDetailsFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        UpdateUserDetailsFail.prototype.type;
        /** @type {?} */
        UpdateUserDetailsFail.prototype.payload;
    }
    var UpdateUserDetailsSuccess = /** @class */ (function (_super) {
        __extends(UpdateUserDetailsSuccess, _super);
        function UpdateUserDetailsSuccess(userUpdates) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID) || this;
            _this.userUpdates = userUpdates;
            _this.type = UPDATE_USER_DETAILS_SUCCESS;
            return _this;
        }
        return UpdateUserDetailsSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        UpdateUserDetailsSuccess.prototype.type;
        /** @type {?} */
        UpdateUserDetailsSuccess.prototype.userUpdates;
    }
    var ResetUpdateUserDetails = /** @class */ (function (_super) {
        __extends(ResetUpdateUserDetails, _super);
        function ResetUpdateUserDetails() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID) || this;
            _this.type = RESET_USER_DETAILS;
            return _this;
        }
        return ResetUpdateUserDetails;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetUpdateUserDetails.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';
    var ClearUserMiscsData = /** @class */ (function () {
        function ClearUserMiscsData() {
            this.type = CLEAR_USER_MISCS_DATA;
        }
        return ClearUserMiscsData;
    }());
    if (false) {
        /** @type {?} */
        ClearUserMiscsData.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_USER_ORDERS = '[User] Load User Orders';
    /** @type {?} */
    var LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';
    /** @type {?} */
    var LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';
    /** @type {?} */
    var CLEAR_USER_ORDERS = '[User] Clear User Orders';
    var LoadUserOrders = /** @class */ (function (_super) {
        __extends(LoadUserOrders, _super);
        function LoadUserOrders(payload) {
            var _this = _super.call(this, USER_ORDERS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ORDERS;
            return _this;
        }
        return LoadUserOrders;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadUserOrders.prototype.type;
        /** @type {?} */
        LoadUserOrders.prototype.payload;
    }
    var LoadUserOrdersFail = /** @class */ (function (_super) {
        __extends(LoadUserOrdersFail, _super);
        function LoadUserOrdersFail(payload) {
            var _this = _super.call(this, USER_ORDERS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ORDERS_FAIL;
            return _this;
        }
        return LoadUserOrdersFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadUserOrdersFail.prototype.type;
        /** @type {?} */
        LoadUserOrdersFail.prototype.payload;
    }
    var LoadUserOrdersSuccess = /** @class */ (function (_super) {
        __extends(LoadUserOrdersSuccess, _super);
        function LoadUserOrdersSuccess(payload) {
            var _this = _super.call(this, USER_ORDERS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ORDERS_SUCCESS;
            return _this;
        }
        return LoadUserOrdersSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadUserOrdersSuccess.prototype.type;
        /** @type {?} */
        LoadUserOrdersSuccess.prototype.payload;
    }
    var ClearUserOrders = /** @class */ (function (_super) {
        __extends(ClearUserOrders, _super);
        function ClearUserOrders() {
            var _this = _super.call(this, USER_ORDERS) || this;
            _this.type = CLEAR_USER_ORDERS;
            return _this;
        }
        return ClearUserOrders;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ClearUserOrders.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var REGISTER_USER = '[User] Register User';
    /** @type {?} */
    var REGISTER_USER_FAIL = '[User] Register User Fail';
    /** @type {?} */
    var REGISTER_USER_SUCCESS = '[User] Register User Success';
    /** @type {?} */
    var RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';
    /** @type {?} */
    var REGISTER_GUEST = '[User] Register Guest';
    /** @type {?} */
    var REGISTER_GUEST_FAIL = '[User] Register Guest Fail';
    /** @type {?} */
    var REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';
    /** @type {?} */
    var REMOVE_USER = '[User] Remove User';
    /** @type {?} */
    var REMOVE_USER_FAIL = '[User] Remove User Fail';
    /** @type {?} */
    var REMOVE_USER_SUCCESS = '[User] Remove User Success';
    /** @type {?} */
    var REMOVE_USER_RESET = '[User] Reset Remove User Process State';
    var RegisterUser = /** @class */ (function (_super) {
        __extends(RegisterUser, _super);
        function RegisterUser(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REGISTER_USER;
            return _this;
        }
        return RegisterUser;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        RegisterUser.prototype.type;
        /** @type {?} */
        RegisterUser.prototype.payload;
    }
    var RegisterUserFail = /** @class */ (function (_super) {
        __extends(RegisterUserFail, _super);
        function RegisterUserFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = REGISTER_USER_FAIL;
            return _this;
        }
        return RegisterUserFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        RegisterUserFail.prototype.type;
        /** @type {?} */
        RegisterUserFail.prototype.payload;
    }
    var RegisterUserSuccess = /** @class */ (function (_super) {
        __extends(RegisterUserSuccess, _super);
        function RegisterUserSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
            _this.type = REGISTER_USER_SUCCESS;
            return _this;
        }
        return RegisterUserSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        RegisterUserSuccess.prototype.type;
    }
    var ResetRegisterUserProcess = /** @class */ (function (_super) {
        __extends(ResetRegisterUserProcess, _super);
        function ResetRegisterUserProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
            _this.type = RESET_REGISTER_USER_PROCESS;
            return _this;
        }
        return ResetRegisterUserProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetRegisterUserProcess.prototype.type;
    }
    var RegisterGuest = /** @class */ (function () {
        function RegisterGuest(payload) {
            this.payload = payload;
            this.type = REGISTER_GUEST;
        }
        return RegisterGuest;
    }());
    if (false) {
        /** @type {?} */
        RegisterGuest.prototype.type;
        /** @type {?} */
        RegisterGuest.prototype.payload;
    }
    var RegisterGuestFail = /** @class */ (function () {
        function RegisterGuestFail(payload) {
            this.payload = payload;
            this.type = REGISTER_GUEST_FAIL;
        }
        return RegisterGuestFail;
    }());
    if (false) {
        /** @type {?} */
        RegisterGuestFail.prototype.type;
        /** @type {?} */
        RegisterGuestFail.prototype.payload;
    }
    var RegisterGuestSuccess = /** @class */ (function () {
        function RegisterGuestSuccess() {
            this.type = REGISTER_GUEST_SUCCESS;
        }
        return RegisterGuestSuccess;
    }());
    if (false) {
        /** @type {?} */
        RegisterGuestSuccess.prototype.type;
    }
    var RemoveUser = /** @class */ (function (_super) {
        __extends(RemoveUser, _super);
        function RemoveUser(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REMOVE_USER;
            return _this;
        }
        return RemoveUser;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        RemoveUser.prototype.type;
        /** @type {?} */
        RemoveUser.prototype.payload;
    }
    var RemoveUserFail = /** @class */ (function (_super) {
        __extends(RemoveUserFail, _super);
        function RemoveUserFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = REMOVE_USER_FAIL;
            return _this;
        }
        return RemoveUserFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        RemoveUserFail.prototype.type;
        /** @type {?} */
        RemoveUserFail.prototype.payload;
    }
    var RemoveUserSuccess = /** @class */ (function (_super) {
        __extends(RemoveUserSuccess, _super);
        function RemoveUserSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
            _this.type = REMOVE_USER_SUCCESS;
            return _this;
        }
        return RemoveUserSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        RemoveUserSuccess.prototype.type;
    }
    var RemoveUserReset = /** @class */ (function (_super) {
        __extends(RemoveUserReset, _super);
        function RemoveUserReset() {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
            _this.type = REMOVE_USER_RESET;
            return _this;
        }
        return RemoveUserReset;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        RemoveUserReset.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';
    /** @type {?} */
    var LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';
    /** @type {?} */
    var LOAD_CUSTOMER_COUPONS_SUCCESS = '[User] Load Customer Coupons Success';
    /** @type {?} */
    var RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';
    /** @type {?} */
    var SUBSCRIBE_CUSTOMER_COUPON = '[User] Subscribe Customer Notification Coupon';
    /** @type {?} */
    var SUBSCRIBE_CUSTOMER_COUPON_FAIL = '[User] Subscribe Customer Coupon Notification Fail';
    /** @type {?} */
    var SUBSCRIBE_CUSTOMER_COUPON_SUCCESS = '[User] Subscribe Customer Coupon Notification Success';
    /** @type {?} */
    var RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS = '[User] Reset Subscribe Customer Coupon Process';
    /** @type {?} */
    var UNSUBSCRIBE_CUSTOMER_COUPON = '[User] Unsubscribe Customer Notification Coupon';
    /** @type {?} */
    var UNSUBSCRIBE_CUSTOMER_COUPON_FAIL = '[User] Unsubscribe Customer Coupon Notification Fail';
    /** @type {?} */
    var UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS = '[User] Unsubscribe Customer Coupon Notification Success';
    /** @type {?} */
    var RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS = '[User] Reset Unsubscribe Customer Coupon Process';
    /** @type {?} */
    var CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';
    /** @type {?} */
    var CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';
    /** @type {?} */
    var CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';
    var LoadCustomerCoupons = /** @class */ (function (_super) {
        __extends(LoadCustomerCoupons, _super);
        function LoadCustomerCoupons(payload) {
            var _this = _super.call(this, CUSTOMER_COUPONS) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_COUPONS;
            return _this;
        }
        return LoadCustomerCoupons;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadCustomerCoupons.prototype.type;
        /** @type {?} */
        LoadCustomerCoupons.prototype.payload;
    }
    var LoadCustomerCouponsFail = /** @class */ (function (_super) {
        __extends(LoadCustomerCouponsFail, _super);
        function LoadCustomerCouponsFail(payload) {
            var _this = _super.call(this, CUSTOMER_COUPONS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_COUPONS_FAIL;
            return _this;
        }
        return LoadCustomerCouponsFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadCustomerCouponsFail.prototype.type;
        /** @type {?} */
        LoadCustomerCouponsFail.prototype.payload;
    }
    var LoadCustomerCouponsSuccess = /** @class */ (function (_super) {
        __extends(LoadCustomerCouponsSuccess, _super);
        function LoadCustomerCouponsSuccess(payload) {
            var _this = _super.call(this, CUSTOMER_COUPONS) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_COUPONS_SUCCESS;
            return _this;
        }
        return LoadCustomerCouponsSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadCustomerCouponsSuccess.prototype.type;
        /** @type {?} */
        LoadCustomerCouponsSuccess.prototype.payload;
    }
    var ResetLoadCustomerCoupons = /** @class */ (function (_super) {
        __extends(ResetLoadCustomerCoupons, _super);
        function ResetLoadCustomerCoupons() {
            var _this = _super.call(this, CUSTOMER_COUPONS) || this;
            _this.type = RESET_LOAD_CUSTOMER_COUPONS;
            return _this;
        }
        return ResetLoadCustomerCoupons;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ResetLoadCustomerCoupons.prototype.type;
    }
    // Subscribe coupon notification actions
    var 
    // Subscribe coupon notification actions
    SubscribeCustomerCoupon = /** @class */ (function (_super) {
        __extends(SubscribeCustomerCoupon, _super);
        function SubscribeCustomerCoupon(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SUBSCRIBE_CUSTOMER_COUPON;
            return _this;
        }
        return SubscribeCustomerCoupon;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        SubscribeCustomerCoupon.prototype.type;
        /** @type {?} */
        SubscribeCustomerCoupon.prototype.payload;
    }
    var SubscribeCustomerCouponFail = /** @class */ (function (_super) {
        __extends(SubscribeCustomerCouponFail, _super);
        function SubscribeCustomerCouponFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;
            return _this;
        }
        return SubscribeCustomerCouponFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        SubscribeCustomerCouponFail.prototype.type;
        /** @type {?} */
        SubscribeCustomerCouponFail.prototype.payload;
    }
    var SubscribeCustomerCouponSuccess = /** @class */ (function (_super) {
        __extends(SubscribeCustomerCouponSuccess, _super);
        function SubscribeCustomerCouponSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;
            return _this;
        }
        return SubscribeCustomerCouponSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        SubscribeCustomerCouponSuccess.prototype.type;
        /** @type {?} */
        SubscribeCustomerCouponSuccess.prototype.payload;
    }
    var ResetSubscribeCustomerCouponProcess = /** @class */ (function (_super) {
        __extends(ResetSubscribeCustomerCouponProcess, _super);
        function ResetSubscribeCustomerCouponProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;
            return _this;
        }
        return ResetSubscribeCustomerCouponProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetSubscribeCustomerCouponProcess.prototype.type;
    }
    var UnsubscribeCustomerCoupon = /** @class */ (function (_super) {
        __extends(UnsubscribeCustomerCoupon, _super);
        function UnsubscribeCustomerCoupon(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UNSUBSCRIBE_CUSTOMER_COUPON;
            return _this;
        }
        return UnsubscribeCustomerCoupon;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        UnsubscribeCustomerCoupon.prototype.type;
        /** @type {?} */
        UnsubscribeCustomerCoupon.prototype.payload;
    }
    var UnsubscribeCustomerCouponFail = /** @class */ (function (_super) {
        __extends(UnsubscribeCustomerCouponFail, _super);
        function UnsubscribeCustomerCouponFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;
            return _this;
        }
        return UnsubscribeCustomerCouponFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        UnsubscribeCustomerCouponFail.prototype.type;
        /** @type {?} */
        UnsubscribeCustomerCouponFail.prototype.payload;
    }
    var UnsubscribeCustomerCouponSuccess = /** @class */ (function (_super) {
        __extends(UnsubscribeCustomerCouponSuccess, _super);
        function UnsubscribeCustomerCouponSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;
            return _this;
        }
        return UnsubscribeCustomerCouponSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        UnsubscribeCustomerCouponSuccess.prototype.type;
        /** @type {?} */
        UnsubscribeCustomerCouponSuccess.prototype.payload;
    }
    var ResetUnsubscribeCustomerCouponProcess = /** @class */ (function (_super) {
        __extends(ResetUnsubscribeCustomerCouponProcess, _super);
        function ResetUnsubscribeCustomerCouponProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;
            return _this;
        }
        return ResetUnsubscribeCustomerCouponProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetUnsubscribeCustomerCouponProcess.prototype.type;
    }
    var ClaimCustomerCoupon = /** @class */ (function (_super) {
        __extends(ClaimCustomerCoupon, _super);
        function ClaimCustomerCoupon(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CLAIM_CUSTOMER_COUPON;
            return _this;
        }
        return ClaimCustomerCoupon;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        ClaimCustomerCoupon.prototype.type;
        /** @type {?} */
        ClaimCustomerCoupon.prototype.payload;
    }
    var ClaimCustomerCouponFail = /** @class */ (function (_super) {
        __extends(ClaimCustomerCouponFail, _super);
        function ClaimCustomerCouponFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CLAIM_CUSTOMER_COUPON_FAIL;
            return _this;
        }
        return ClaimCustomerCouponFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        ClaimCustomerCouponFail.prototype.type;
        /** @type {?} */
        ClaimCustomerCouponFail.prototype.payload;
    }
    var ClaimCustomerCouponSuccess = /** @class */ (function (_super) {
        __extends(ClaimCustomerCouponSuccess, _super);
        function ClaimCustomerCouponSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CLAIM_CUSTOMER_COUPON_SUCCESS;
            return _this;
        }
        return ClaimCustomerCouponSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        ClaimCustomerCouponSuccess.prototype.type;
        /** @type {?} */
        ClaimCustomerCouponSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
    /** @type {?} */
    var LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
    /** @type {?} */
    var LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
    /** @type {?} */
    var UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
    /** @type {?} */
    var UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
    /** @type {?} */
    var UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
    /** @type {?} */
    var RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
    /** @type {?} */
    var CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
    var LoadNotificationPreferences = /** @class */ (function (_super) {
        __extends(LoadNotificationPreferences, _super);
        function LoadNotificationPreferences(payload) {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
            _this.payload = payload;
            _this.type = LOAD_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return LoadNotificationPreferences;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadNotificationPreferences.prototype.type;
        /** @type {?} */
        LoadNotificationPreferences.prototype.payload;
    }
    var LoadNotificationPreferencesFail = /** @class */ (function (_super) {
        __extends(LoadNotificationPreferencesFail, _super);
        function LoadNotificationPreferencesFail(payload) {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
            return _this;
        }
        return LoadNotificationPreferencesFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadNotificationPreferencesFail.prototype.type;
        /** @type {?} */
        LoadNotificationPreferencesFail.prototype.payload;
    }
    var LoadNotificationPreferencesSuccess = /** @class */ (function (_super) {
        __extends(LoadNotificationPreferencesSuccess, _super);
        function LoadNotificationPreferencesSuccess(payload) {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
            _this.payload = payload;
            _this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
            return _this;
        }
        return LoadNotificationPreferencesSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadNotificationPreferencesSuccess.prototype.type;
        /** @type {?} */
        LoadNotificationPreferencesSuccess.prototype.payload;
    }
    var UpdateNotificationPreferences = /** @class */ (function (_super) {
        __extends(UpdateNotificationPreferences, _super);
        function UpdateNotificationPreferences(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return UpdateNotificationPreferences;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        UpdateNotificationPreferences.prototype.type;
        /** @type {?} */
        UpdateNotificationPreferences.prototype.payload;
    }
    var UpdateNotificationPreferencesFail = /** @class */ (function (_super) {
        __extends(UpdateNotificationPreferencesFail, _super);
        function UpdateNotificationPreferencesFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
            return _this;
        }
        return UpdateNotificationPreferencesFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        UpdateNotificationPreferencesFail.prototype.type;
        /** @type {?} */
        UpdateNotificationPreferencesFail.prototype.payload;
    }
    var UpdateNotificationPreferencesSuccess = /** @class */ (function (_super) {
        __extends(UpdateNotificationPreferencesSuccess, _super);
        function UpdateNotificationPreferencesSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
            return _this;
        }
        return UpdateNotificationPreferencesSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        UpdateNotificationPreferencesSuccess.prototype.type;
        /** @type {?} */
        UpdateNotificationPreferencesSuccess.prototype.payload;
    }
    var ResetNotificationPreferences = /** @class */ (function (_super) {
        __extends(ResetNotificationPreferences, _super);
        function ResetNotificationPreferences() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
            _this.type = RESET_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return ResetNotificationPreferences;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetNotificationPreferences.prototype.type;
    }
    var ClearNotificationPreferences = /** @class */ (function (_super) {
        __extends(ClearNotificationPreferences, _super);
        function ClearNotificationPreferences() {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
            _this.type = CLEAR_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return ClearNotificationPreferences;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ClearNotificationPreferences.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_PRODUCT_INTERESTS = 'Load Product Interests';
    /** @type {?} */
    var LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';
    /** @type {?} */
    var LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';
    /** @type {?} */
    var REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';
    /** @type {?} */
    var REMOVE_PRODUCT_INTEREST_SUCCESS = 'Remove Product Interest Success';
    /** @type {?} */
    var REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';
    /** @type {?} */
    var ADD_PRODUCT_INTEREST = 'Add Product Interest';
    /** @type {?} */
    var ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';
    /** @type {?} */
    var ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';
    /** @type {?} */
    var ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';
    /** @type {?} */
    var REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';
    /** @type {?} */
    var CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';
    var LoadProductInterests = /** @class */ (function (_super) {
        __extends(LoadProductInterests, _super);
        function LoadProductInterests(payload) {
            var _this = _super.call(this, PRODUCT_INTERESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_INTERESTS;
            return _this;
        }
        return LoadProductInterests;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadProductInterests.prototype.type;
        /** @type {?} */
        LoadProductInterests.prototype.payload;
    }
    var LoadProductInterestsFail = /** @class */ (function (_super) {
        __extends(LoadProductInterestsFail, _super);
        function LoadProductInterestsFail(payload) {
            var _this = _super.call(this, PRODUCT_INTERESTS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_INTERESTS_FAIL;
            return _this;
        }
        return LoadProductInterestsFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadProductInterestsFail.prototype.type;
        /** @type {?} */
        LoadProductInterestsFail.prototype.payload;
    }
    var LoadProductInterestsSuccess = /** @class */ (function (_super) {
        __extends(LoadProductInterestsSuccess, _super);
        function LoadProductInterestsSuccess(payload) {
            var _this = _super.call(this, PRODUCT_INTERESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_INTERESTS_SUCCESS;
            return _this;
        }
        return LoadProductInterestsSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadProductInterestsSuccess.prototype.type;
        /** @type {?} */
        LoadProductInterestsSuccess.prototype.payload;
    }
    var RemoveProductInterest = /** @class */ (function (_super) {
        __extends(RemoveProductInterest, _super);
        function RemoveProductInterest(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REMOVE_PRODUCT_INTEREST;
            return _this;
        }
        return RemoveProductInterest;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        RemoveProductInterest.prototype.type;
        /** @type {?} */
        RemoveProductInterest.prototype.payload;
    }
    var RemoveProductInterestSuccess = /** @class */ (function (_super) {
        __extends(RemoveProductInterestSuccess, _super);
        function RemoveProductInterestSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REMOVE_PRODUCT_INTEREST_SUCCESS;
            return _this;
        }
        return RemoveProductInterestSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        RemoveProductInterestSuccess.prototype.type;
        /** @type {?} */
        RemoveProductInterestSuccess.prototype.payload;
    }
    var RemoveProductInterestFail = /** @class */ (function (_super) {
        __extends(RemoveProductInterestFail, _super);
        function RemoveProductInterestFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = REMOVE_PRODUCT_INTEREST_FAIL;
            return _this;
        }
        return RemoveProductInterestFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        RemoveProductInterestFail.prototype.type;
        /** @type {?} */
        RemoveProductInterestFail.prototype.payload;
    }
    var AddProductInterest = /** @class */ (function (_super) {
        __extends(AddProductInterest, _super);
        function AddProductInterest(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = ADD_PRODUCT_INTEREST;
            return _this;
        }
        return AddProductInterest;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        AddProductInterest.prototype.type;
        /** @type {?} */
        AddProductInterest.prototype.payload;
    }
    var AddProductInterestSuccess = /** @class */ (function (_super) {
        __extends(AddProductInterestSuccess, _super);
        function AddProductInterestSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = ADD_PRODUCT_INTEREST_SUCCESS;
            return _this;
        }
        return AddProductInterestSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        AddProductInterestSuccess.prototype.type;
        /** @type {?} */
        AddProductInterestSuccess.prototype.payload;
    }
    var AddProductInterestFail = /** @class */ (function (_super) {
        __extends(AddProductInterestFail, _super);
        function AddProductInterestFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = ADD_PRODUCT_INTEREST_FAIL;
            return _this;
        }
        return AddProductInterestFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        AddProductInterestFail.prototype.type;
        /** @type {?} */
        AddProductInterestFail.prototype.payload;
    }
    var ResetAddInterestState = /** @class */ (function (_super) {
        __extends(ResetAddInterestState, _super);
        function ResetAddInterestState() {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID) || this;
            _this.type = ADD_PRODUCT_INTEREST_RESET;
            return _this;
        }
        return ResetAddInterestState;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetAddInterestState.prototype.type;
    }
    var ResetRemoveInterestState = /** @class */ (function (_super) {
        __extends(ResetRemoveInterestState, _super);
        function ResetRemoveInterestState() {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID) || this;
            _this.type = REMOVE_PRODUCT_INTEREST_RESET;
            return _this;
        }
        return ResetRemoveInterestState;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetRemoveInterestState.prototype.type;
    }
    var ClearProductInterests = /** @class */ (function (_super) {
        __extends(ClearProductInterests, _super);
        function ClearProductInterests() {
            var _this = _super.call(this, PRODUCT_INTERESTS) || this;
            _this.type = CLEAR_PRODUCT_INTERESTS;
            return _this;
        }
        return ClearProductInterests;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ClearProductInterests.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';
    /** @type {?} */
    var CREATE_ORDER_RETURN_REQUEST_FAIL = '[User] Create Order Return Request Fail';
    /** @type {?} */
    var CREATE_ORDER_RETURN_REQUEST_SUCCESS = '[User] Create Order Return Request Success';
    /** @type {?} */
    var LOAD_ORDER_RETURN_REQUEST = '[User] Load Order Return Request details';
    /** @type {?} */
    var LOAD_ORDER_RETURN_REQUEST_FAIL = '[User] Load Order Return Request details Fail';
    /** @type {?} */
    var LOAD_ORDER_RETURN_REQUEST_SUCCESS = '[User] Load Order Return Request details Success';
    /** @type {?} */
    var CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';
    /** @type {?} */
    var CANCEL_ORDER_RETURN_REQUEST_FAIL = '[User] Cancel Order Return Request Fail';
    /** @type {?} */
    var CANCEL_ORDER_RETURN_REQUEST_SUCCESS = '[User] Cancel Order Return Request Success';
    /** @type {?} */
    var LOAD_ORDER_RETURN_REQUEST_LIST = '[User] Load User Order Return Request List';
    /** @type {?} */
    var LOAD_ORDER_RETURN_REQUEST_LIST_FAIL = '[User] Load User Order Return Request List Fail';
    /** @type {?} */
    var LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS = '[User] Load User Order Return Request List Success';
    /** @type {?} */
    var CLEAR_ORDER_RETURN_REQUEST = '[User] Clear Order Return Request Details';
    /** @type {?} */
    var CLEAR_ORDER_RETURN_REQUEST_LIST = '[User] Clear Order Return Request List';
    /** @type {?} */
    var RESET_CANCEL_RETURN_PROCESS = '[User] Reset Cancel Return Request Process';
    var CreateOrderReturnRequest = /** @class */ (function (_super) {
        __extends(CreateOrderReturnRequest, _super);
        function CreateOrderReturnRequest(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = CREATE_ORDER_RETURN_REQUEST;
            return _this;
        }
        return CreateOrderReturnRequest;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        CreateOrderReturnRequest.prototype.type;
        /** @type {?} */
        CreateOrderReturnRequest.prototype.payload;
    }
    var CreateOrderReturnRequestFail = /** @class */ (function (_super) {
        __extends(CreateOrderReturnRequestFail, _super);
        function CreateOrderReturnRequestFail(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_ORDER_RETURN_REQUEST_FAIL;
            return _this;
        }
        return CreateOrderReturnRequestFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        CreateOrderReturnRequestFail.prototype.type;
        /** @type {?} */
        CreateOrderReturnRequestFail.prototype.payload;
    }
    var CreateOrderReturnRequestSuccess = /** @class */ (function (_super) {
        __extends(CreateOrderReturnRequestSuccess, _super);
        function CreateOrderReturnRequestSuccess(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;
            return _this;
        }
        return CreateOrderReturnRequestSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        CreateOrderReturnRequestSuccess.prototype.type;
        /** @type {?} */
        CreateOrderReturnRequestSuccess.prototype.payload;
    }
    var LoadOrderReturnRequest = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequest, _super);
        function LoadOrderReturnRequest(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST;
            return _this;
        }
        return LoadOrderReturnRequest;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadOrderReturnRequest.prototype.type;
        /** @type {?} */
        LoadOrderReturnRequest.prototype.payload;
    }
    var LoadOrderReturnRequestFail = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestFail, _super);
        function LoadOrderReturnRequestFail(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_FAIL;
            return _this;
        }
        return LoadOrderReturnRequestFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadOrderReturnRequestFail.prototype.type;
        /** @type {?} */
        LoadOrderReturnRequestFail.prototype.payload;
    }
    var LoadOrderReturnRequestSuccess = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestSuccess, _super);
        function LoadOrderReturnRequestSuccess(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;
            return _this;
        }
        return LoadOrderReturnRequestSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadOrderReturnRequestSuccess.prototype.type;
        /** @type {?} */
        LoadOrderReturnRequestSuccess.prototype.payload;
    }
    var CancelOrderReturnRequest = /** @class */ (function (_super) {
        __extends(CancelOrderReturnRequest, _super);
        function CancelOrderReturnRequest(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER_RETURN_REQUEST;
            return _this;
        }
        return CancelOrderReturnRequest;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        CancelOrderReturnRequest.prototype.type;
        /** @type {?} */
        CancelOrderReturnRequest.prototype.payload;
    }
    var CancelOrderReturnRequestFail = /** @class */ (function (_super) {
        __extends(CancelOrderReturnRequestFail, _super);
        function CancelOrderReturnRequestFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER_RETURN_REQUEST_FAIL;
            return _this;
        }
        return CancelOrderReturnRequestFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        CancelOrderReturnRequestFail.prototype.type;
        /** @type {?} */
        CancelOrderReturnRequestFail.prototype.payload;
    }
    var CancelOrderReturnRequestSuccess = /** @class */ (function (_super) {
        __extends(CancelOrderReturnRequestSuccess, _super);
        function CancelOrderReturnRequestSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID) || this;
            _this.type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;
            return _this;
        }
        return CancelOrderReturnRequestSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        CancelOrderReturnRequestSuccess.prototype.type;
    }
    var LoadOrderReturnRequestList = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestList, _super);
        function LoadOrderReturnRequestList(payload) {
            var _this = _super.call(this, USER_RETURN_REQUESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_LIST;
            return _this;
        }
        return LoadOrderReturnRequestList;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadOrderReturnRequestList.prototype.type;
        /** @type {?} */
        LoadOrderReturnRequestList.prototype.payload;
    }
    var LoadOrderReturnRequestListFail = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestListFail, _super);
        function LoadOrderReturnRequestListFail(payload) {
            var _this = _super.call(this, USER_RETURN_REQUESTS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;
            return _this;
        }
        return LoadOrderReturnRequestListFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadOrderReturnRequestListFail.prototype.type;
        /** @type {?} */
        LoadOrderReturnRequestListFail.prototype.payload;
    }
    var LoadOrderReturnRequestListSuccess = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestListSuccess, _super);
        function LoadOrderReturnRequestListSuccess(payload) {
            var _this = _super.call(this, USER_RETURN_REQUESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;
            return _this;
        }
        return LoadOrderReturnRequestListSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadOrderReturnRequestListSuccess.prototype.type;
        /** @type {?} */
        LoadOrderReturnRequestListSuccess.prototype.payload;
    }
    var ClearOrderReturnRequest = /** @class */ (function (_super) {
        __extends(ClearOrderReturnRequest, _super);
        function ClearOrderReturnRequest() {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.type = CLEAR_ORDER_RETURN_REQUEST;
            return _this;
        }
        return ClearOrderReturnRequest;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ClearOrderReturnRequest.prototype.type;
    }
    var ClearOrderReturnRequestList = /** @class */ (function (_super) {
        __extends(ClearOrderReturnRequestList, _super);
        function ClearOrderReturnRequestList() {
            var _this = _super.call(this, USER_RETURN_REQUESTS) || this;
            _this.type = CLEAR_ORDER_RETURN_REQUEST_LIST;
            return _this;
        }
        return ClearOrderReturnRequestList;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ClearOrderReturnRequestList.prototype.type;
    }
    var ResetCancelReturnProcess = /** @class */ (function (_super) {
        __extends(ResetCancelReturnProcess, _super);
        function ResetCancelReturnProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID) || this;
            _this.type = RESET_CANCEL_RETURN_PROCESS;
            return _this;
        }
        return ResetCancelReturnProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetCancelReturnProcess.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var userGroup_actions = /*#__PURE__*/Object.freeze({
        LOAD_BILLING_COUNTRIES: LOAD_BILLING_COUNTRIES,
        LOAD_BILLING_COUNTRIES_FAIL: LOAD_BILLING_COUNTRIES_FAIL,
        LOAD_BILLING_COUNTRIES_SUCCESS: LOAD_BILLING_COUNTRIES_SUCCESS,
        LoadBillingCountries: LoadBillingCountries,
        LoadBillingCountriesFail: LoadBillingCountriesFail,
        LoadBillingCountriesSuccess: LoadBillingCountriesSuccess,
        LOAD_CONSIGNMENT_TRACKING: LOAD_CONSIGNMENT_TRACKING,
        LOAD_CONSIGNMENT_TRACKING_FAIL: LOAD_CONSIGNMENT_TRACKING_FAIL,
        LOAD_CONSIGNMENT_TRACKING_SUCCESS: LOAD_CONSIGNMENT_TRACKING_SUCCESS,
        CLEAR_CONSIGNMENT_TRACKING: CLEAR_CONSIGNMENT_TRACKING,
        LoadConsignmentTracking: LoadConsignmentTracking,
        LoadConsignmentTrackingFail: LoadConsignmentTrackingFail,
        LoadConsignmentTrackingSuccess: LoadConsignmentTrackingSuccess,
        ClearConsignmentTracking: ClearConsignmentTracking,
        LOAD_DELIVERY_COUNTRIES: LOAD_DELIVERY_COUNTRIES,
        LOAD_DELIVERY_COUNTRIES_FAIL: LOAD_DELIVERY_COUNTRIES_FAIL,
        LOAD_DELIVERY_COUNTRIES_SUCCESS: LOAD_DELIVERY_COUNTRIES_SUCCESS,
        LoadDeliveryCountries: LoadDeliveryCountries,
        LoadDeliveryCountriesFail: LoadDeliveryCountriesFail,
        LoadDeliveryCountriesSuccess: LoadDeliveryCountriesSuccess,
        FORGOT_PASSWORD_EMAIL_REQUEST: FORGOT_PASSWORD_EMAIL_REQUEST,
        FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS: FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS,
        FORGOT_PASSWORD_EMAIL_REQUEST_FAIL: FORGOT_PASSWORD_EMAIL_REQUEST_FAIL,
        ForgotPasswordEmailRequest: ForgotPasswordEmailRequest,
        ForgotPasswordEmailRequestFail: ForgotPasswordEmailRequestFail,
        ForgotPasswordEmailRequestSuccess: ForgotPasswordEmailRequestSuccess,
        LOAD_ORDER_DETAILS: LOAD_ORDER_DETAILS,
        LOAD_ORDER_DETAILS_FAIL: LOAD_ORDER_DETAILS_FAIL,
        LOAD_ORDER_DETAILS_SUCCESS: LOAD_ORDER_DETAILS_SUCCESS,
        CLEAR_ORDER_DETAILS: CLEAR_ORDER_DETAILS,
        CANCEL_ORDER: CANCEL_ORDER,
        CANCEL_ORDER_FAIL: CANCEL_ORDER_FAIL,
        CANCEL_ORDER_SUCCESS: CANCEL_ORDER_SUCCESS,
        RESET_CANCEL_ORDER_PROCESS: RESET_CANCEL_ORDER_PROCESS,
        LoadOrderDetails: LoadOrderDetails,
        LoadOrderDetailsFail: LoadOrderDetailsFail,
        LoadOrderDetailsSuccess: LoadOrderDetailsSuccess,
        ClearOrderDetails: ClearOrderDetails,
        CancelOrder: CancelOrder,
        CancelOrderFail: CancelOrderFail,
        CancelOrderSuccess: CancelOrderSuccess,
        ResetCancelOrderProcess: ResetCancelOrderProcess,
        LOAD_USER_PAYMENT_METHODS: LOAD_USER_PAYMENT_METHODS,
        LOAD_USER_PAYMENT_METHODS_FAIL: LOAD_USER_PAYMENT_METHODS_FAIL,
        LOAD_USER_PAYMENT_METHODS_SUCCESS: LOAD_USER_PAYMENT_METHODS_SUCCESS,
        SET_DEFAULT_USER_PAYMENT_METHOD: SET_DEFAULT_USER_PAYMENT_METHOD,
        SET_DEFAULT_USER_PAYMENT_METHOD_FAIL: SET_DEFAULT_USER_PAYMENT_METHOD_FAIL,
        SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS: SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS,
        DELETE_USER_PAYMENT_METHOD: DELETE_USER_PAYMENT_METHOD,
        DELETE_USER_PAYMENT_METHOD_FAIL: DELETE_USER_PAYMENT_METHOD_FAIL,
        DELETE_USER_PAYMENT_METHOD_SUCCESS: DELETE_USER_PAYMENT_METHOD_SUCCESS,
        LoadUserPaymentMethods: LoadUserPaymentMethods,
        LoadUserPaymentMethodsFail: LoadUserPaymentMethodsFail,
        LoadUserPaymentMethodsSuccess: LoadUserPaymentMethodsSuccess,
        SetDefaultUserPaymentMethod: SetDefaultUserPaymentMethod,
        SetDefaultUserPaymentMethodFail: SetDefaultUserPaymentMethodFail,
        SetDefaultUserPaymentMethodSuccess: SetDefaultUserPaymentMethodSuccess,
        DeleteUserPaymentMethod: DeleteUserPaymentMethod,
        DeleteUserPaymentMethodFail: DeleteUserPaymentMethodFail,
        DeleteUserPaymentMethodSuccess: DeleteUserPaymentMethodSuccess,
        LOAD_REGIONS: LOAD_REGIONS,
        LOAD_REGIONS_SUCCESS: LOAD_REGIONS_SUCCESS,
        LOAD_REGIONS_FAIL: LOAD_REGIONS_FAIL,
        CLEAR_REGIONS: CLEAR_REGIONS,
        LoadRegions: LoadRegions,
        LoadRegionsFail: LoadRegionsFail,
        LoadRegionsSuccess: LoadRegionsSuccess,
        ClearRegions: ClearRegions,
        RESET_PASSWORD: RESET_PASSWORD,
        RESET_PASSWORD_SUCCESS: RESET_PASSWORD_SUCCESS,
        RESET_PASSWORD_FAIL: RESET_PASSWORD_FAIL,
        ResetPassword: ResetPassword,
        ResetPasswordFail: ResetPasswordFail,
        ResetPasswordSuccess: ResetPasswordSuccess,
        LOAD_TITLES: LOAD_TITLES,
        LOAD_TITLES_FAIL: LOAD_TITLES_FAIL,
        LOAD_TITLES_SUCCESS: LOAD_TITLES_SUCCESS,
        LoadTitles: LoadTitles,
        LoadTitlesFail: LoadTitlesFail,
        LoadTitlesSuccess: LoadTitlesSuccess,
        UPDATE_EMAIL: UPDATE_EMAIL,
        UPDATE_EMAIL_ERROR: UPDATE_EMAIL_ERROR,
        UPDATE_EMAIL_SUCCESS: UPDATE_EMAIL_SUCCESS,
        RESET_EMAIL: RESET_EMAIL,
        UpdateEmailAction: UpdateEmailAction,
        UpdateEmailSuccessAction: UpdateEmailSuccessAction,
        UpdateEmailErrorAction: UpdateEmailErrorAction,
        ResetUpdateEmailAction: ResetUpdateEmailAction,
        UPDATE_PASSWORD: UPDATE_PASSWORD,
        UPDATE_PASSWORD_FAIL: UPDATE_PASSWORD_FAIL,
        UPDATE_PASSWORD_SUCCESS: UPDATE_PASSWORD_SUCCESS,
        UPDATE_PASSWORD_RESET: UPDATE_PASSWORD_RESET,
        UpdatePassword: UpdatePassword,
        UpdatePasswordFail: UpdatePasswordFail,
        UpdatePasswordSuccess: UpdatePasswordSuccess,
        UpdatePasswordReset: UpdatePasswordReset,
        LOAD_USER_ADDRESSES: LOAD_USER_ADDRESSES,
        LOAD_USER_ADDRESSES_FAIL: LOAD_USER_ADDRESSES_FAIL,
        LOAD_USER_ADDRESSES_SUCCESS: LOAD_USER_ADDRESSES_SUCCESS,
        ADD_USER_ADDRESS: ADD_USER_ADDRESS,
        ADD_USER_ADDRESS_FAIL: ADD_USER_ADDRESS_FAIL,
        ADD_USER_ADDRESS_SUCCESS: ADD_USER_ADDRESS_SUCCESS,
        UPDATE_USER_ADDRESS: UPDATE_USER_ADDRESS,
        UPDATE_USER_ADDRESS_FAIL: UPDATE_USER_ADDRESS_FAIL,
        UPDATE_USER_ADDRESS_SUCCESS: UPDATE_USER_ADDRESS_SUCCESS,
        DELETE_USER_ADDRESS: DELETE_USER_ADDRESS,
        DELETE_USER_ADDRESS_FAIL: DELETE_USER_ADDRESS_FAIL,
        DELETE_USER_ADDRESS_SUCCESS: DELETE_USER_ADDRESS_SUCCESS,
        LoadUserAddresses: LoadUserAddresses,
        LoadUserAddressesFail: LoadUserAddressesFail,
        LoadUserAddressesSuccess: LoadUserAddressesSuccess,
        AddUserAddress: AddUserAddress,
        AddUserAddressFail: AddUserAddressFail,
        AddUserAddressSuccess: AddUserAddressSuccess,
        UpdateUserAddress: UpdateUserAddress,
        UpdateUserAddressFail: UpdateUserAddressFail,
        UpdateUserAddressSuccess: UpdateUserAddressSuccess,
        DeleteUserAddress: DeleteUserAddress,
        DeleteUserAddressFail: DeleteUserAddressFail,
        DeleteUserAddressSuccess: DeleteUserAddressSuccess,
        LOAD_USER_CONSENTS: LOAD_USER_CONSENTS,
        LOAD_USER_CONSENTS_SUCCESS: LOAD_USER_CONSENTS_SUCCESS,
        LOAD_USER_CONSENTS_FAIL: LOAD_USER_CONSENTS_FAIL,
        RESET_LOAD_USER_CONSENTS: RESET_LOAD_USER_CONSENTS,
        GIVE_USER_CONSENT: GIVE_USER_CONSENT,
        GIVE_USER_CONSENT_FAIL: GIVE_USER_CONSENT_FAIL,
        GIVE_USER_CONSENT_SUCCESS: GIVE_USER_CONSENT_SUCCESS,
        RESET_GIVE_USER_CONSENT_PROCESS: RESET_GIVE_USER_CONSENT_PROCESS,
        TRANSFER_ANONYMOUS_CONSENT: TRANSFER_ANONYMOUS_CONSENT,
        WITHDRAW_USER_CONSENT: WITHDRAW_USER_CONSENT,
        WITHDRAW_USER_CONSENT_FAIL: WITHDRAW_USER_CONSENT_FAIL,
        WITHDRAW_USER_CONSENT_SUCCESS: WITHDRAW_USER_CONSENT_SUCCESS,
        RESET_WITHDRAW_USER_CONSENT_PROCESS: RESET_WITHDRAW_USER_CONSENT_PROCESS,
        LoadUserConsents: LoadUserConsents,
        LoadUserConsentsFail: LoadUserConsentsFail,
        LoadUserConsentsSuccess: LoadUserConsentsSuccess,
        ResetLoadUserConsents: ResetLoadUserConsents,
        GiveUserConsent: GiveUserConsent,
        GiveUserConsentFail: GiveUserConsentFail,
        GiveUserConsentSuccess: GiveUserConsentSuccess,
        ResetGiveUserConsentProcess: ResetGiveUserConsentProcess,
        TransferAnonymousConsent: TransferAnonymousConsent,
        WithdrawUserConsent: WithdrawUserConsent,
        WithdrawUserConsentFail: WithdrawUserConsentFail,
        WithdrawUserConsentSuccess: WithdrawUserConsentSuccess,
        ResetWithdrawUserConsentProcess: ResetWithdrawUserConsentProcess,
        LOAD_USER_DETAILS: LOAD_USER_DETAILS,
        LOAD_USER_DETAILS_FAIL: LOAD_USER_DETAILS_FAIL,
        LOAD_USER_DETAILS_SUCCESS: LOAD_USER_DETAILS_SUCCESS,
        UPDATE_USER_DETAILS: UPDATE_USER_DETAILS,
        UPDATE_USER_DETAILS_FAIL: UPDATE_USER_DETAILS_FAIL,
        UPDATE_USER_DETAILS_SUCCESS: UPDATE_USER_DETAILS_SUCCESS,
        RESET_USER_DETAILS: RESET_USER_DETAILS,
        LoadUserDetails: LoadUserDetails,
        LoadUserDetailsFail: LoadUserDetailsFail,
        LoadUserDetailsSuccess: LoadUserDetailsSuccess,
        UpdateUserDetails: UpdateUserDetails,
        UpdateUserDetailsFail: UpdateUserDetailsFail,
        UpdateUserDetailsSuccess: UpdateUserDetailsSuccess,
        ResetUpdateUserDetails: ResetUpdateUserDetails,
        CLEAR_USER_MISCS_DATA: CLEAR_USER_MISCS_DATA,
        ClearUserMiscsData: ClearUserMiscsData,
        LOAD_USER_ORDERS: LOAD_USER_ORDERS,
        LOAD_USER_ORDERS_FAIL: LOAD_USER_ORDERS_FAIL,
        LOAD_USER_ORDERS_SUCCESS: LOAD_USER_ORDERS_SUCCESS,
        CLEAR_USER_ORDERS: CLEAR_USER_ORDERS,
        LoadUserOrders: LoadUserOrders,
        LoadUserOrdersFail: LoadUserOrdersFail,
        LoadUserOrdersSuccess: LoadUserOrdersSuccess,
        ClearUserOrders: ClearUserOrders,
        REGISTER_USER: REGISTER_USER,
        REGISTER_USER_FAIL: REGISTER_USER_FAIL,
        REGISTER_USER_SUCCESS: REGISTER_USER_SUCCESS,
        RESET_REGISTER_USER_PROCESS: RESET_REGISTER_USER_PROCESS,
        REGISTER_GUEST: REGISTER_GUEST,
        REGISTER_GUEST_FAIL: REGISTER_GUEST_FAIL,
        REGISTER_GUEST_SUCCESS: REGISTER_GUEST_SUCCESS,
        REMOVE_USER: REMOVE_USER,
        REMOVE_USER_FAIL: REMOVE_USER_FAIL,
        REMOVE_USER_SUCCESS: REMOVE_USER_SUCCESS,
        REMOVE_USER_RESET: REMOVE_USER_RESET,
        RegisterUser: RegisterUser,
        RegisterUserFail: RegisterUserFail,
        RegisterUserSuccess: RegisterUserSuccess,
        ResetRegisterUserProcess: ResetRegisterUserProcess,
        RegisterGuest: RegisterGuest,
        RegisterGuestFail: RegisterGuestFail,
        RegisterGuestSuccess: RegisterGuestSuccess,
        RemoveUser: RemoveUser,
        RemoveUserFail: RemoveUserFail,
        RemoveUserSuccess: RemoveUserSuccess,
        RemoveUserReset: RemoveUserReset,
        LOAD_CUSTOMER_COUPONS: LOAD_CUSTOMER_COUPONS,
        LOAD_CUSTOMER_COUPONS_FAIL: LOAD_CUSTOMER_COUPONS_FAIL,
        LOAD_CUSTOMER_COUPONS_SUCCESS: LOAD_CUSTOMER_COUPONS_SUCCESS,
        RESET_LOAD_CUSTOMER_COUPONS: RESET_LOAD_CUSTOMER_COUPONS,
        SUBSCRIBE_CUSTOMER_COUPON: SUBSCRIBE_CUSTOMER_COUPON,
        SUBSCRIBE_CUSTOMER_COUPON_FAIL: SUBSCRIBE_CUSTOMER_COUPON_FAIL,
        SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: SUBSCRIBE_CUSTOMER_COUPON_SUCCESS,
        RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS: RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS,
        UNSUBSCRIBE_CUSTOMER_COUPON: UNSUBSCRIBE_CUSTOMER_COUPON,
        UNSUBSCRIBE_CUSTOMER_COUPON_FAIL: UNSUBSCRIBE_CUSTOMER_COUPON_FAIL,
        UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS,
        RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS: RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS,
        CLAIM_CUSTOMER_COUPON: CLAIM_CUSTOMER_COUPON,
        CLAIM_CUSTOMER_COUPON_FAIL: CLAIM_CUSTOMER_COUPON_FAIL,
        CLAIM_CUSTOMER_COUPON_SUCCESS: CLAIM_CUSTOMER_COUPON_SUCCESS,
        LoadCustomerCoupons: LoadCustomerCoupons,
        LoadCustomerCouponsFail: LoadCustomerCouponsFail,
        LoadCustomerCouponsSuccess: LoadCustomerCouponsSuccess,
        ResetLoadCustomerCoupons: ResetLoadCustomerCoupons,
        SubscribeCustomerCoupon: SubscribeCustomerCoupon,
        SubscribeCustomerCouponFail: SubscribeCustomerCouponFail,
        SubscribeCustomerCouponSuccess: SubscribeCustomerCouponSuccess,
        ResetSubscribeCustomerCouponProcess: ResetSubscribeCustomerCouponProcess,
        UnsubscribeCustomerCoupon: UnsubscribeCustomerCoupon,
        UnsubscribeCustomerCouponFail: UnsubscribeCustomerCouponFail,
        UnsubscribeCustomerCouponSuccess: UnsubscribeCustomerCouponSuccess,
        ResetUnsubscribeCustomerCouponProcess: ResetUnsubscribeCustomerCouponProcess,
        ClaimCustomerCoupon: ClaimCustomerCoupon,
        ClaimCustomerCouponFail: ClaimCustomerCouponFail,
        ClaimCustomerCouponSuccess: ClaimCustomerCouponSuccess,
        LOAD_NOTIFICATION_PREFERENCES: LOAD_NOTIFICATION_PREFERENCES,
        LOAD_NOTIFICATION_PREFERENCES_FAIL: LOAD_NOTIFICATION_PREFERENCES_FAIL,
        LOAD_NOTIFICATION_PREFERENCES_SUCCESS: LOAD_NOTIFICATION_PREFERENCES_SUCCESS,
        UPDATE_NOTIFICATION_PREFERENCES: UPDATE_NOTIFICATION_PREFERENCES,
        UPDATE_NOTIFICATION_PREFERENCES_FAIL: UPDATE_NOTIFICATION_PREFERENCES_FAIL,
        UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: UPDATE_NOTIFICATION_PREFERENCES_SUCCESS,
        RESET_NOTIFICATION_PREFERENCES: RESET_NOTIFICATION_PREFERENCES,
        CLEAR_NOTIFICATION_PREFERENCES: CLEAR_NOTIFICATION_PREFERENCES,
        LoadNotificationPreferences: LoadNotificationPreferences,
        LoadNotificationPreferencesFail: LoadNotificationPreferencesFail,
        LoadNotificationPreferencesSuccess: LoadNotificationPreferencesSuccess,
        UpdateNotificationPreferences: UpdateNotificationPreferences,
        UpdateNotificationPreferencesFail: UpdateNotificationPreferencesFail,
        UpdateNotificationPreferencesSuccess: UpdateNotificationPreferencesSuccess,
        ResetNotificationPreferences: ResetNotificationPreferences,
        ClearNotificationPreferences: ClearNotificationPreferences,
        LOAD_PRODUCT_INTERESTS: LOAD_PRODUCT_INTERESTS,
        LOAD_PRODUCT_INTERESTS_FAIL: LOAD_PRODUCT_INTERESTS_FAIL,
        LOAD_PRODUCT_INTERESTS_SUCCESS: LOAD_PRODUCT_INTERESTS_SUCCESS,
        REMOVE_PRODUCT_INTEREST: REMOVE_PRODUCT_INTEREST,
        REMOVE_PRODUCT_INTEREST_SUCCESS: REMOVE_PRODUCT_INTEREST_SUCCESS,
        REMOVE_PRODUCT_INTEREST_FAIL: REMOVE_PRODUCT_INTEREST_FAIL,
        ADD_PRODUCT_INTEREST: ADD_PRODUCT_INTEREST,
        ADD_PRODUCT_INTEREST_FAIL: ADD_PRODUCT_INTEREST_FAIL,
        ADD_PRODUCT_INTEREST_SUCCESS: ADD_PRODUCT_INTEREST_SUCCESS,
        ADD_PRODUCT_INTEREST_RESET: ADD_PRODUCT_INTEREST_RESET,
        REMOVE_PRODUCT_INTEREST_RESET: REMOVE_PRODUCT_INTEREST_RESET,
        CLEAR_PRODUCT_INTERESTS: CLEAR_PRODUCT_INTERESTS,
        LoadProductInterests: LoadProductInterests,
        LoadProductInterestsFail: LoadProductInterestsFail,
        LoadProductInterestsSuccess: LoadProductInterestsSuccess,
        RemoveProductInterest: RemoveProductInterest,
        RemoveProductInterestSuccess: RemoveProductInterestSuccess,
        RemoveProductInterestFail: RemoveProductInterestFail,
        AddProductInterest: AddProductInterest,
        AddProductInterestSuccess: AddProductInterestSuccess,
        AddProductInterestFail: AddProductInterestFail,
        ResetAddInterestState: ResetAddInterestState,
        ResetRemoveInterestState: ResetRemoveInterestState,
        ClearProductInterests: ClearProductInterests,
        CREATE_ORDER_RETURN_REQUEST: CREATE_ORDER_RETURN_REQUEST,
        CREATE_ORDER_RETURN_REQUEST_FAIL: CREATE_ORDER_RETURN_REQUEST_FAIL,
        CREATE_ORDER_RETURN_REQUEST_SUCCESS: CREATE_ORDER_RETURN_REQUEST_SUCCESS,
        LOAD_ORDER_RETURN_REQUEST: LOAD_ORDER_RETURN_REQUEST,
        LOAD_ORDER_RETURN_REQUEST_FAIL: LOAD_ORDER_RETURN_REQUEST_FAIL,
        LOAD_ORDER_RETURN_REQUEST_SUCCESS: LOAD_ORDER_RETURN_REQUEST_SUCCESS,
        CANCEL_ORDER_RETURN_REQUEST: CANCEL_ORDER_RETURN_REQUEST,
        CANCEL_ORDER_RETURN_REQUEST_FAIL: CANCEL_ORDER_RETURN_REQUEST_FAIL,
        CANCEL_ORDER_RETURN_REQUEST_SUCCESS: CANCEL_ORDER_RETURN_REQUEST_SUCCESS,
        LOAD_ORDER_RETURN_REQUEST_LIST: LOAD_ORDER_RETURN_REQUEST_LIST,
        LOAD_ORDER_RETURN_REQUEST_LIST_FAIL: LOAD_ORDER_RETURN_REQUEST_LIST_FAIL,
        LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS,
        CLEAR_ORDER_RETURN_REQUEST: CLEAR_ORDER_RETURN_REQUEST,
        CLEAR_ORDER_RETURN_REQUEST_LIST: CLEAR_ORDER_RETURN_REQUEST_LIST,
        RESET_CANCEL_RETURN_PROCESS: RESET_CANCEL_RETURN_PROCESS,
        CreateOrderReturnRequest: CreateOrderReturnRequest,
        CreateOrderReturnRequestFail: CreateOrderReturnRequestFail,
        CreateOrderReturnRequestSuccess: CreateOrderReturnRequestSuccess,
        LoadOrderReturnRequest: LoadOrderReturnRequest,
        LoadOrderReturnRequestFail: LoadOrderReturnRequestFail,
        LoadOrderReturnRequestSuccess: LoadOrderReturnRequestSuccess,
        CancelOrderReturnRequest: CancelOrderReturnRequest,
        CancelOrderReturnRequestFail: CancelOrderReturnRequestFail,
        CancelOrderReturnRequestSuccess: CancelOrderReturnRequestSuccess,
        LoadOrderReturnRequestList: LoadOrderReturnRequestList,
        LoadOrderReturnRequestListFail: LoadOrderReturnRequestListFail,
        LoadOrderReturnRequestListSuccess: LoadOrderReturnRequestListSuccess,
        ClearOrderReturnRequest: ClearOrderReturnRequest,
        ClearOrderReturnRequestList: ClearOrderReturnRequestList,
        ResetCancelReturnProcess: ResetCancelReturnProcess
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getUserState = store.createFeatureSelector(USER_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$b = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.billingCountries; };
    /** @type {?} */
    var getBillingCountriesState = store.createSelector(getUserState, (ɵ0$b));
    var ɵ1$7 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entities; };
    /** @type {?} */
    var getBillingCountriesEntites = store.createSelector(getBillingCountriesState, (ɵ1$7));
    var ɵ2$3 = /**
     * @param {?} entites
     * @return {?}
     */
    function (entites) { return Object.keys(entites).map((/**
     * @param {?} isocode
     * @return {?}
     */
    function (isocode) { return entites[isocode]; })); };
    /** @type {?} */
    var getAllBillingCountries = store.createSelector(getBillingCountriesEntites, (ɵ2$3));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$c = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.consignmentTracking; };
    /** @type {?} */
    var getConsignmentTrackingState = store.createSelector(getUserState, (ɵ0$c));
    var ɵ1$8 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.tracking; };
    /** @type {?} */
    var getConsignmentTracking = store.createSelector(getConsignmentTrackingState, (ɵ1$8));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$d = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.countries; };
    /** @type {?} */
    var getDeliveryCountriesState = store.createSelector(getUserState, (ɵ0$d));
    var ɵ1$9 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entities; };
    /** @type {?} */
    var getDeliveryCountriesEntites = store.createSelector(getDeliveryCountriesState, (ɵ1$9));
    var ɵ2$4 = /**
     * @param {?} entites
     * @return {?}
     */
    function (entites) { return Object.keys(entites).map((/**
     * @param {?} isocode
     * @return {?}
     */
    function (isocode) { return entites[isocode]; })); };
    /** @type {?} */
    var getAllDeliveryCountries = store.createSelector(getDeliveryCountriesEntites, (ɵ2$4));
    /** @type {?} */
    var countrySelectorFactory = (/**
     * @param {?} isocode
     * @return {?}
     */
    function (isocode) {
        return store.createSelector(getDeliveryCountriesEntites, (/**
         * @param {?} entities
         * @return {?}
         */
        function (entities) { return (Object.keys(entities).length !== 0 ? entities[isocode] : null); }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$e = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.order; };
    /** @type {?} */
    var getOrderState = store.createSelector(getUserState, (ɵ0$e));
    var ɵ1$a = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getOrderDetails = store.createSelector(getOrderState, (ɵ1$a));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$f = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.orderReturn; };
    /** @type {?} */
    var getOrderReturnRequestState = store.createSelector(getUserState, (ɵ0$f));
    var ɵ1$b = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state);
    };
    /** @type {?} */
    var getOrderReturnRequest = store.createSelector(getOrderReturnRequestState, (ɵ1$b));
    var ɵ2$5 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getOrderReturnRequestLoading = store.createSelector(getOrderReturnRequestState, (ɵ2$5));
    var ɵ3$3 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderSuccessSelector(state) &&
            !loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getOrderReturnRequestSuccess = store.createSelector(getOrderReturnRequestState, (ɵ3$3));
    var ɵ4 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.orderReturnList; };
    /** @type {?} */
    var getOrderReturnRequestListState = store.createSelector(getUserState, (ɵ4));
    var ɵ5 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state);
    };
    /** @type {?} */
    var getOrderReturnRequestList = store.createSelector(getOrderReturnRequestListState, (ɵ5));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$g = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.payments; };
    /** @type {?} */
    var getPaymentMethodsState = store.createSelector(getUserState, (ɵ0$g));
    var ɵ1$c = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state);
    };
    /** @type {?} */
    var getPaymentMethods = store.createSelector(getPaymentMethodsState, (ɵ1$c));
    var ɵ2$6 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getPaymentMethodsLoading = store.createSelector(getPaymentMethodsState, (ɵ2$6));
    var ɵ3$4 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderSuccessSelector(state) &&
            !loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getPaymentMethodsLoadedSuccess = store.createSelector(getPaymentMethodsState, (ɵ3$4));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$h = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.regions; };
    /** @type {?} */
    var getRegionsLoaderState = store.createSelector(getUserState, (ɵ0$h));
    var ɵ1$d = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state).entities;
    };
    /** @type {?} */
    var getAllRegions = store.createSelector(getRegionsLoaderState, (ɵ1$d));
    var ɵ2$7 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return ({
        loaded: loaderSuccessSelector(state),
        loading: loaderLoadingSelector(state),
        regions: loaderValueSelector(state).entities,
        country: loaderValueSelector(state).country,
    }); };
    /** @type {?} */
    var getRegionsDataAndLoading = store.createSelector(getRegionsLoaderState, (ɵ2$7));
    var ɵ3$5 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state).country;
    };
    /** @type {?} */
    var getRegionsCountry = store.createSelector(getRegionsLoaderState, (ɵ3$5));
    var ɵ4$1 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getRegionsLoading = store.createSelector(getRegionsLoaderState, (ɵ4$1));
    var ɵ5$1 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderSuccessSelector(state);
    };
    /** @type {?} */
    var getRegionsLoaded = store.createSelector(getRegionsLoaderState, (ɵ5$1));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$i = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.resetPassword; };
    /** @type {?} */
    var getResetPassword = store.createSelector(getUserState, (ɵ0$i));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$j = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.titles; };
    /** @type {?} */
    var getTitlesState = store.createSelector(getUserState, (ɵ0$j));
    var ɵ1$e = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entities; };
    /** @type {?} */
    var getTitlesEntites = store.createSelector(getTitlesState, (ɵ1$e));
    var ɵ2$8 = /**
     * @param {?} entites
     * @return {?}
     */
    function (entites) { return Object.keys(entites).map((/**
     * @param {?} code
     * @return {?}
     */
    function (code) { return entites[code]; })); };
    /** @type {?} */
    var getAllTitles = store.createSelector(getTitlesEntites, (ɵ2$8));
    /** @type {?} */
    var titleSelectorFactory = (/**
     * @param {?} code
     * @return {?}
     */
    function (code) {
        return store.createSelector(getTitlesEntites, (/**
         * @param {?} entities
         * @return {?}
         */
        function (entities) { return (Object.keys(entities).length !== 0 ? entities[code] : null); }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$k = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.addresses; };
    /** @type {?} */
    var getAddressesLoaderState = store.createSelector(getUserState, (ɵ0$k));
    var ɵ1$f = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state);
    };
    /** @type {?} */
    var getAddresses = store.createSelector(getAddressesLoaderState, (ɵ1$f));
    var ɵ2$9 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getAddressesLoading = store.createSelector(getAddressesLoaderState, (ɵ2$9));
    var ɵ3$6 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderSuccessSelector(state) &&
            !loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getAddressesLoadedSuccess = store.createSelector(getAddressesLoaderState, (ɵ3$6));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$l = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.consents; };
    /** @type {?} */
    var getConsentsState = store.createSelector(getUserState, (ɵ0$l));
    /** @type {?} */
    var getConsentsValue = store.createSelector(getConsentsState, loaderValueSelector);
    /** @type {?} */
    var getConsentByTemplateId = (/**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        return store.createSelector(getConsentsValue, (/**
         * @param {?} templates
         * @return {?}
         */
        function (templates) { return templates.find((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return template.id === templateId; })); }));
    });
    /** @type {?} */
    var getConsentsLoading = store.createSelector(getConsentsState, loaderLoadingSelector);
    /** @type {?} */
    var getConsentsSuccess = store.createSelector(getConsentsState, loaderSuccessSelector);
    /** @type {?} */
    var getConsentsError = store.createSelector(getConsentsState, loaderErrorSelector);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$m = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.account; };
    /** @type {?} */
    var getDetailsState = store.createSelector(getUserState, (ɵ0$m));
    var ɵ1$g = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.details; };
    /** @type {?} */
    var getDetails = store.createSelector(getDetailsState, (ɵ1$g));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$n = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.orders; };
    /** @type {?} */
    var getOrdersState = store.createSelector(getUserState, (ɵ0$n));
    var ɵ1$h = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderSuccessSelector(state);
    };
    /** @type {?} */
    var getOrdersLoaded = store.createSelector(getOrdersState, (ɵ1$h));
    var ɵ2$a = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state);
    };
    /** @type {?} */
    var getOrders = store.createSelector(getOrdersState, (ɵ2$a));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$o = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.customerCoupons; };
    /** @type {?} */
    var getCustomerCouponsState = store.createSelector(getUserState, (ɵ0$o));
    var ɵ1$i = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderSuccessSelector(state);
    };
    /** @type {?} */
    var getCustomerCouponsLoaded = store.createSelector(getCustomerCouponsState, (ɵ1$i));
    var ɵ2$b = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getCustomerCouponsLoading = store.createSelector(getCustomerCouponsState, (ɵ2$b));
    var ɵ3$7 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getCustomerCoupons = store.createSelector(getCustomerCouponsState, (ɵ3$7));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$p = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.notificationPreferences; };
    /** @type {?} */
    var getPreferencesLoaderState = store.createSelector(getUserState, (ɵ0$p));
    var ɵ1$j = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getPreferences = store.createSelector(getPreferencesLoaderState, (ɵ1$j));
    var ɵ2$c = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state).filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.enabled; }));
    };
    /** @type {?} */
    var getEnabledPreferences = store.createSelector(getPreferencesLoaderState, (ɵ2$c));
    var ɵ3$8 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderLoadingSelector(state); };
    /** @type {?} */
    var getPreferencesLoading = store.createSelector(getPreferencesLoaderState, (ɵ3$8));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$q = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.productInterests; };
    /** @type {?} */
    var getInterestsState = store.createSelector(getUserState, (ɵ0$q));
    var ɵ1$k = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderValueSelector(state);
    };
    /** @type {?} */
    var getInterests = store.createSelector(getInterestsState, (ɵ1$k));
    var ɵ2$d = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getInterestsLoading = store.createSelector(getInterestsState, (ɵ2$d));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var usersGroup_selectors = /*#__PURE__*/Object.freeze({
        getBillingCountriesState: getBillingCountriesState,
        getBillingCountriesEntites: getBillingCountriesEntites,
        getAllBillingCountries: getAllBillingCountries,
        getConsignmentTrackingState: getConsignmentTrackingState,
        getConsignmentTracking: getConsignmentTracking,
        getDeliveryCountriesState: getDeliveryCountriesState,
        getDeliveryCountriesEntites: getDeliveryCountriesEntites,
        getAllDeliveryCountries: getAllDeliveryCountries,
        countrySelectorFactory: countrySelectorFactory,
        getUserState: getUserState,
        getOrderState: getOrderState,
        getOrderDetails: getOrderDetails,
        getOrderReturnRequestState: getOrderReturnRequestState,
        getOrderReturnRequest: getOrderReturnRequest,
        getOrderReturnRequestLoading: getOrderReturnRequestLoading,
        getOrderReturnRequestSuccess: getOrderReturnRequestSuccess,
        getOrderReturnRequestListState: getOrderReturnRequestListState,
        getOrderReturnRequestList: getOrderReturnRequestList,
        getPaymentMethodsState: getPaymentMethodsState,
        getPaymentMethods: getPaymentMethods,
        getPaymentMethodsLoading: getPaymentMethodsLoading,
        getPaymentMethodsLoadedSuccess: getPaymentMethodsLoadedSuccess,
        getRegionsLoaderState: getRegionsLoaderState,
        getAllRegions: getAllRegions,
        getRegionsDataAndLoading: getRegionsDataAndLoading,
        getRegionsCountry: getRegionsCountry,
        getRegionsLoading: getRegionsLoading,
        getRegionsLoaded: getRegionsLoaded,
        getResetPassword: getResetPassword,
        getTitlesState: getTitlesState,
        getTitlesEntites: getTitlesEntites,
        getAllTitles: getAllTitles,
        titleSelectorFactory: titleSelectorFactory,
        getAddressesLoaderState: getAddressesLoaderState,
        getAddresses: getAddresses,
        getAddressesLoading: getAddressesLoading,
        getAddressesLoadedSuccess: getAddressesLoadedSuccess,
        getConsentsState: getConsentsState,
        getConsentsValue: getConsentsValue,
        getConsentByTemplateId: getConsentByTemplateId,
        getConsentsLoading: getConsentsLoading,
        getConsentsSuccess: getConsentsSuccess,
        getConsentsError: getConsentsError,
        getDetailsState: getDetailsState,
        getDetails: getDetails,
        getOrdersState: getOrdersState,
        getOrdersLoaded: getOrdersLoaded,
        getOrders: getOrders,
        getCustomerCouponsState: getCustomerCouponsState,
        getCustomerCouponsLoaded: getCustomerCouponsLoaded,
        getCustomerCouponsLoading: getCustomerCouponsLoading,
        getCustomerCoupons: getCustomerCoupons,
        getPreferencesLoaderState: getPreferencesLoaderState,
        getPreferences: getPreferences,
        getEnabledPreferences: getEnabledPreferences,
        getPreferencesLoading: getPreferencesLoading,
        getInterestsState: getInterestsState,
        getInterests: getInterests,
        getInterestsLoading: getInterestsLoading
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserConsentService = /** @class */ (function () {
        function UserConsentService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Retrieves all consents.
         */
        /**
         * Retrieves all consents.
         * @return {?}
         */
        UserConsentService.prototype.loadConsents = /**
         * Retrieves all consents.
         * @return {?}
         */
        function () {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new LoadUserConsents(userId));
            }));
        };
        /**
         * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.
         * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.
         */
        /**
         * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.
         * @param {?=} loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.
         * @return {?}
         */
        UserConsentService.prototype.getConsents = /**
         * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.
         * @param {?=} loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.
         * @return {?}
         */
        function (loadIfMissing) {
            var _this = this;
            if (loadIfMissing === void 0) { loadIfMissing = false; }
            return rxjs.iif((/**
             * @return {?}
             */
            function () { return loadIfMissing; }), this.store.pipe(store.select(getConsentsValue), operators.withLatestFrom(this.getConsentsResultLoading(), this.getConsentsResultSuccess()), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), _templates = _b[0], loading = _b[1], _success = _b[2];
                return !loading;
            })), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), templates = _b[0], _loading = _b[1], success = _b[2];
                if (!templates || templates.length === 0) {
                    // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response
                    if (!success) {
                        _this.loadConsents();
                    }
                }
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return Boolean(templates);
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return templates;
            }))), this.store.pipe(store.select(getConsentsValue)));
        };
        /**
         * Returns the consents loading flag
         */
        /**
         * Returns the consents loading flag
         * @return {?}
         */
        UserConsentService.prototype.getConsentsResultLoading = /**
         * Returns the consents loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getConsentsLoading));
        };
        /**
         * Returns the consents success flag
         */
        /**
         * Returns the consents success flag
         * @return {?}
         */
        UserConsentService.prototype.getConsentsResultSuccess = /**
         * Returns the consents success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getConsentsSuccess));
        };
        /**
         * Returns the consents error flag
         */
        /**
         * Returns the consents error flag
         * @return {?}
         */
        UserConsentService.prototype.getConsentsResultError = /**
         * Returns the consents error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getConsentsError));
        };
        /**
         * Resets the processing state for consent retrieval
         */
        /**
         * Resets the processing state for consent retrieval
         * @return {?}
         */
        UserConsentService.prototype.resetConsentsProcessState = /**
         * Resets the processing state for consent retrieval
         * @return {?}
         */
        function () {
            this.store.dispatch(new ResetLoadUserConsents());
        };
        /**
         * Returns the registered consent for the given template ID.
         *
         * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.
         *
         * @param templateId a template ID by which to filter the registered templates.
         */
        /**
         * Returns the registered consent for the given template ID.
         *
         * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.
         *
         * @param {?} templateId a template ID by which to filter the registered templates.
         * @return {?}
         */
        UserConsentService.prototype.getConsent = /**
         * Returns the registered consent for the given template ID.
         *
         * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.
         *
         * @param {?} templateId a template ID by which to filter the registered templates.
         * @return {?}
         */
        function (templateId) {
            var _this = this;
            return this.authService.isUserLoggedIn().pipe(operators.filter(Boolean), operators.tap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) { return _this.getConsents(true); })), operators.switchMap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                return _this.store.pipe(store.select(getConsentByTemplateId(templateId)));
            })), operators.filter((/**
             * @param {?} template
             * @return {?}
             */
            function (template) { return Boolean(template); })), operators.map((/**
             * @param {?} template
             * @return {?}
             */
            function (template) { return template.currentConsent; })));
        };
        /**
         * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.
         * Otherwise, `false` is returned.
         *
         * @param consent to check
         */
        /**
         * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.
         * Otherwise, `false` is returned.
         *
         * @param {?} consent to check
         * @return {?}
         */
        UserConsentService.prototype.isConsentGiven = /**
         * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.
         * Otherwise, `false` is returned.
         *
         * @param {?} consent to check
         * @return {?}
         */
        function (consent) {
            return (Boolean(consent) &&
                Boolean(consent.consentGivenDate) &&
                !Boolean(consent.consentWithdrawnDate));
        };
        /**
         * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.
         * Otherwise, `false` is returned.
         *
         * @param consent to check
         */
        /**
         * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.
         * Otherwise, `false` is returned.
         *
         * @param {?} consent to check
         * @return {?}
         */
        UserConsentService.prototype.isConsentWithdrawn = /**
         * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.
         * Otherwise, `false` is returned.
         *
         * @param {?} consent to check
         * @return {?}
         */
        function (consent) {
            if (Boolean(consent)) {
                return Boolean(consent.consentWithdrawnDate);
            }
            return true;
        };
        /**
         * Give consent for specified consent template ID and version.
         * @param consentTemplateId a template ID for which to give a consent
         * @param consentTemplateVersion a template version for which to give a consent
         */
        /**
         * Give consent for specified consent template ID and version.
         * @param {?} consentTemplateId a template ID for which to give a consent
         * @param {?} consentTemplateVersion a template version for which to give a consent
         * @return {?}
         */
        UserConsentService.prototype.giveConsent = /**
         * Give consent for specified consent template ID and version.
         * @param {?} consentTemplateId a template ID for which to give a consent
         * @param {?} consentTemplateVersion a template version for which to give a consent
         * @return {?}
         */
        function (consentTemplateId, consentTemplateVersion) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new GiveUserConsent({
                    userId: userId,
                    consentTemplateId: consentTemplateId,
                    consentTemplateVersion: consentTemplateVersion,
                }));
            }));
        };
        /**
         * Returns the give consent process loading flag
         */
        /**
         * Returns the give consent process loading flag
         * @return {?}
         */
        UserConsentService.prototype.getGiveConsentResultLoading = /**
         * Returns the give consent process loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the give consent process success flag
         */
        /**
         * Returns the give consent process success flag
         * @return {?}
         */
        UserConsentService.prototype.getGiveConsentResultSuccess = /**
         * Returns the give consent process success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the give consent process error flag
         */
        /**
         * Returns the give consent process error flag
         * @return {?}
         */
        UserConsentService.prototype.getGiveConsentResultError = /**
         * Returns the give consent process error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID)));
        };
        /**
         * Resents the give consent process flags
         */
        /**
         * Resents the give consent process flags
         * @return {?}
         */
        UserConsentService.prototype.resetGiveConsentProcessState = /**
         * Resents the give consent process flags
         * @return {?}
         */
        function () {
            return this.store.dispatch(new ResetGiveUserConsentProcess());
        };
        /**
         * Withdraw consent for the given `consentCode`
         * @param consentCode for which to withdraw the consent
         */
        /**
         * Withdraw consent for the given `consentCode`
         * @param {?} consentCode for which to withdraw the consent
         * @return {?}
         */
        UserConsentService.prototype.withdrawConsent = /**
         * Withdraw consent for the given `consentCode`
         * @param {?} consentCode for which to withdraw the consent
         * @return {?}
         */
        function (consentCode) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new WithdrawUserConsent({
                    userId: userId,
                    consentCode: consentCode,
                }));
            }));
        };
        /**
         * Returns the withdraw consent process loading flag
         */
        /**
         * Returns the withdraw consent process loading flag
         * @return {?}
         */
        UserConsentService.prototype.getWithdrawConsentResultLoading = /**
         * Returns the withdraw consent process loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the withdraw consent process success flag
         */
        /**
         * Returns the withdraw consent process success flag
         * @return {?}
         */
        UserConsentService.prototype.getWithdrawConsentResultSuccess = /**
         * Returns the withdraw consent process success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the withdraw consent process error flag
         */
        /**
         * Returns the withdraw consent process error flag
         * @return {?}
         */
        UserConsentService.prototype.getWithdrawConsentResultError = /**
         * Returns the withdraw consent process error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID)));
        };
        /**
         * Resets the process flags for withdraw consent
         */
        /**
         * Resets the process flags for withdraw consent
         * @return {?}
         */
        UserConsentService.prototype.resetWithdrawConsentProcessState = /**
         * Resets the process flags for withdraw consent
         * @return {?}
         */
        function () {
            return this.store.dispatch(new ResetWithdrawUserConsentProcess());
        };
        /**
         * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.
         * If the `hideTemplateIds` is empty, the provided `templateList` is returned.
         *
         * @param templateList a list of consent templates to filter
         * @param hideTemplateIds template IDs to hide
         */
        /**
         * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.
         * If the `hideTemplateIds` is empty, the provided `templateList` is returned.
         *
         * @param {?} templateList a list of consent templates to filter
         * @param {?=} hideTemplateIds template IDs to hide
         * @return {?}
         */
        UserConsentService.prototype.filterConsentTemplates = /**
         * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.
         * If the `hideTemplateIds` is empty, the provided `templateList` is returned.
         *
         * @param {?} templateList a list of consent templates to filter
         * @param {?=} hideTemplateIds template IDs to hide
         * @return {?}
         */
        function (templateList, hideTemplateIds) {
            var e_1, _a;
            if (hideTemplateIds === void 0) { hideTemplateIds = []; }
            if (hideTemplateIds.length === 0) {
                return templateList;
            }
            /** @type {?} */
            var updatedTemplateList = [];
            try {
                for (var templateList_1 = __values(templateList), templateList_1_1 = templateList_1.next(); !templateList_1_1.done; templateList_1_1 = templateList_1.next()) {
                    var template = templateList_1_1.value;
                    /** @type {?} */
                    var show = !hideTemplateIds.includes(template.id);
                    if (show) {
                        updatedTemplateList.push(template);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (templateList_1_1 && !templateList_1_1.done && (_a = templateList_1.return)) _a.call(templateList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return updatedTemplateList;
        };
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         */
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        UserConsentService.prototype.withUserId = /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        function (callback) {
            if (this.authService) {
                this.authService
                    .getOccUserId()
                    .pipe(operators.take(1))
                    .subscribe((/**
                 * @param {?} userId
                 * @return {?}
                 */
                function (userId) { return callback(userId); }));
            }
            else {
                // TODO(issue:#5628) Deprecated since 1.3.0
                callback(OCC_USER_ID_CURRENT);
            }
        };
        UserConsentService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserConsentService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        /** @nocollapse */ UserConsentService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserConsentService_Factory() { return new UserConsentService(core.ɵɵinject(store.Store), core.ɵɵinject(AuthService)); }, token: UserConsentService, providedIn: "root" });
        return UserConsentService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserConsentService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        UserConsentService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AnonymousConsentTemplatesConnector = /** @class */ (function () {
        function AnonymousConsentTemplatesConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @return {?}
         */
        AnonymousConsentTemplatesConnector.prototype.loadAnonymousConsentTemplates = /**
         * @return {?}
         */
        function () {
            return this.adapter.loadAnonymousConsentTemplates();
        };
        AnonymousConsentTemplatesConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AnonymousConsentTemplatesConnector.ctorParameters = function () { return [
            { type: AnonymousConsentTemplatesAdapter }
        ]; };
        /** @nocollapse */ AnonymousConsentTemplatesConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AnonymousConsentTemplatesConnector_Factory() { return new AnonymousConsentTemplatesConnector(core.ɵɵinject(AnonymousConsentTemplatesAdapter)); }, token: AnonymousConsentTemplatesConnector, providedIn: "root" });
        return AnonymousConsentTemplatesConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        AnonymousConsentTemplatesConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AnonymousConsentsEffects = /** @class */ (function () {
        function AnonymousConsentsEffects(actions$, anonymousConsentTemplatesConnector, authService, anonymousConsentsConfig, anonymousConsentService, userConsentService) {
            var _this = this;
            this.actions$ = actions$;
            this.anonymousConsentTemplatesConnector = anonymousConsentTemplatesConnector;
            this.authService = authService;
            this.anonymousConsentsConfig = anonymousConsentsConfig;
            this.anonymousConsentService = anonymousConsentService;
            this.userConsentService = userConsentService;
            this.loadAnonymousConsentTemplates$ = this.actions$.pipe(effects$d.ofType(LOAD_ANONYMOUS_CONSENT_TEMPLATES), operators.concatMap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                return _this.anonymousConsentTemplatesConnector
                    .loadAnonymousConsentTemplates()
                    .pipe(operators.withLatestFrom(_this.anonymousConsentService.getTemplates()), operators.mergeMap((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), newConsentTemplates = _b[0], currentConsentTemplates = _b[1];
                    /** @type {?} */
                    var updated = false;
                    if (Boolean(currentConsentTemplates) &&
                        currentConsentTemplates.length !== 0) {
                        updated = _this.anonymousConsentService.detectUpdatedTemplates(currentConsentTemplates, newConsentTemplates);
                    }
                    return [
                        new LoadAnonymousConsentTemplatesSuccess(newConsentTemplates),
                        new ToggleAnonymousConsentTemplatesUpdated(updated),
                    ];
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadAnonymousConsentTemplatesFail(makeErrorSerializable(error)));
                })));
            })));
            this.transferAnonymousConsentsToUser$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_TOKEN_SUCCESS), operators.filter((/**
             * @return {?}
             */
            function () {
                return isFeatureEnabled(_this.anonymousConsentsConfig, ANONYMOUS_CONSENTS_FEATURE) && Boolean(_this.anonymousConsentsConfig.anonymousConsents);
            })), operators.withLatestFrom(this.actions$.pipe(effects$d.ofType(REGISTER_USER_SUCCESS))), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), registerAction = _b[1];
                return Boolean(registerAction);
            })), operators.switchMap((/**
             * @return {?}
             */
            function () {
                return _this.anonymousConsentService.getConsents().pipe(operators.withLatestFrom(_this.authService.getOccUserId(), _this.anonymousConsentService.getTemplates(), _this.authService.isUserLoggedIn()), operators.filter((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 4), loggedIn = _b[3];
                    return loggedIn;
                })), operators.concatMap((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var e_1, _b, e_2, _c;
                    var _d = __read(_a, 4), consents = _d[0], userId = _d[1], templates = _d[2], _loggedIn = _d[3];
                    /** @type {?} */
                    var actions = [];
                    try {
                        for (var consents_1 = __values(consents), consents_1_1 = consents_1.next(); !consents_1_1.done; consents_1_1 = consents_1.next()) {
                            var consent = consents_1_1.value;
                            if (_this.anonymousConsentService.isConsentGiven(consent) &&
                                (!_this.anonymousConsentsConfig.anonymousConsents
                                    .requiredConsents ||
                                    !_this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(consent.templateCode))) {
                                try {
                                    for (var templates_1 = (e_2 = void 0, __values(templates)), templates_1_1 = templates_1.next(); !templates_1_1.done; templates_1_1 = templates_1.next()) {
                                        var template = templates_1_1.value;
                                        if (template.id === consent.templateCode) {
                                            actions.push(new TransferAnonymousConsent({
                                                userId: userId,
                                                consentTemplateId: template.id,
                                                consentTemplateVersion: template.version,
                                            }));
                                            break;
                                        }
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (templates_1_1 && !templates_1_1.done && (_c = templates_1.return)) _c.call(templates_1);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (consents_1_1 && !consents_1_1.done && (_b = consents_1.return)) _b.call(consents_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (actions.length > 0) {
                        return actions;
                    }
                    return rxjs.EMPTY;
                })));
            })));
            this.giveRequiredConsentsToUser$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_TOKEN_SUCCESS), operators.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return isFeatureEnabled(_this.anonymousConsentsConfig, ANONYMOUS_CONSENTS_FEATURE) &&
                    Boolean(_this.anonymousConsentsConfig.anonymousConsents) &&
                    Boolean(_this.anonymousConsentsConfig.anonymousConsents.requiredConsents) &&
                    Boolean(action);
            })), operators.concatMap((/**
             * @return {?}
             */
            function () {
                return _this.userConsentService.getConsentsResultSuccess().pipe(operators.withLatestFrom(_this.authService.getOccUserId(), _this.userConsentService.getConsents(), _this.authService.isUserLoggedIn()), operators.filter((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 4), loggedIn = _b[3];
                    return loggedIn;
                })), operators.tap((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 4), loaded = _b[0], _userId = _b[1], _templates = _b[2], _loggedIn = _b[3];
                    if (!loaded) {
                        _this.userConsentService.loadConsents();
                    }
                })), operators.map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 4), _loaded = _b[0], userId = _b[1], templates = _b[2], _loggedIn = _b[3];
                    return { userId: userId, templates: templates };
                })), operators.concatMap((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var e_3, _b;
                    var userId = _a.userId, templates = _a.templates;
                    /** @type {?} */
                    var actions = [];
                    try {
                        for (var templates_2 = __values(templates), templates_2_1 = templates_2.next(); !templates_2_1.done; templates_2_1 = templates_2.next()) {
                            var template = templates_2_1.value;
                            if (_this.userConsentService.isConsentWithdrawn(template.currentConsent) &&
                                _this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(template.id)) {
                                actions.push(new GiveUserConsent({
                                    userId: userId,
                                    consentTemplateId: template.id,
                                    consentTemplateVersion: template.version,
                                }));
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (templates_2_1 && !templates_2_1.done && (_b = templates_2.return)) _b.call(templates_2);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    if (actions.length > 0) {
                        return actions;
                    }
                    return rxjs.EMPTY;
                })));
            })));
        }
        AnonymousConsentsEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AnonymousConsentsEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: AnonymousConsentTemplatesConnector },
            { type: AuthService },
            { type: AnonymousConsentsConfig },
            { type: AnonymousConsentsService },
            { type: UserConsentService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], AnonymousConsentsEffects.prototype, "loadAnonymousConsentTemplates$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], AnonymousConsentsEffects.prototype, "transferAnonymousConsentsToUser$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], AnonymousConsentsEffects.prototype, "giveRequiredConsentsToUser$", void 0);
        return AnonymousConsentsEffects;
    }());
    if (false) {
        /** @type {?} */
        AnonymousConsentsEffects.prototype.loadAnonymousConsentTemplates$;
        /** @type {?} */
        AnonymousConsentsEffects.prototype.transferAnonymousConsentsToUser$;
        /** @type {?} */
        AnonymousConsentsEffects.prototype.giveRequiredConsentsToUser$;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsEffects.prototype.anonymousConsentTemplatesConnector;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsEffects.prototype.authService;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsEffects.prototype.anonymousConsentsConfig;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsEffects.prototype.anonymousConsentService;
        /**
         * @type {?}
         * @private
         */
        AnonymousConsentsEffects.prototype.userConsentService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$1 = [AnonymousConsentsEffects];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SiteConnector = /** @class */ (function () {
        function SiteConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @return {?}
         */
        SiteConnector.prototype.getLanguages = /**
         * @return {?}
         */
        function () {
            return this.adapter.loadLanguages();
        };
        /**
         * @return {?}
         */
        SiteConnector.prototype.getCurrencies = /**
         * @return {?}
         */
        function () {
            return this.adapter.loadCurrencies();
        };
        /**
         * @param {?=} type
         * @return {?}
         */
        SiteConnector.prototype.getCountries = /**
         * @param {?=} type
         * @return {?}
         */
        function (type) {
            return this.adapter.loadCountries(type);
        };
        /**
         * @param {?} countryIsoCode
         * @return {?}
         */
        SiteConnector.prototype.getRegions = /**
         * @param {?} countryIsoCode
         * @return {?}
         */
        function (countryIsoCode) {
            return this.adapter.loadRegions(countryIsoCode);
        };
        /**
         * @return {?}
         */
        SiteConnector.prototype.getBaseSite = /**
         * @return {?}
         */
        function () {
            return this.adapter.loadBaseSite();
        };
        SiteConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        SiteConnector.ctorParameters = function () { return [
            { type: SiteAdapter }
        ]; };
        /** @nocollapse */ SiteConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SiteConnector_Factory() { return new SiteConnector(core.ɵɵinject(SiteAdapter)); }, token: SiteConnector, providedIn: "root" });
        return SiteConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        SiteConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template T
     */
    function SiteContext() { }
    if (false) {
        /**
         * @return {?}
         */
        SiteContext.prototype.getAll = function () { };
        /**
         * @return {?}
         */
        SiteContext.prototype.getActive = function () { };
        /**
         * @param {?} isocode
         * @return {?}
         */
        SiteContext.prototype.setActive = function (isocode) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    ContextServiceMap = /** @class */ (function () {
        function ContextServiceMap() {
        }
        return ContextServiceMap;
    }());
    /**
     * @return {?}
     */
    function serviceMapFactory() {
        var _a;
        return _a = {},
            _a[LANGUAGE_CONTEXT_ID] = LanguageService,
            _a[CURRENCY_CONTEXT_ID] = CurrencyService,
            _a[BASE_SITE_CONTEXT_ID] = BaseSiteService,
            _a;
    }
    /** @type {?} */
    var contextServiceMapProvider = {
        provide: ContextServiceMap,
        useFactory: serviceMapFactory,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since 1.3 - should be removed from public API and the logic should be moved to the function `initializeContext`
     * @param {?} baseSiteService
     * @param {?} langService
     * @param {?} currService
     * @return {?}
     */
    function inititializeContext(baseSiteService, langService, currService) {
        return (/**
         * @return {?}
         */
        function () {
            baseSiteService.initialize();
            langService.initialize();
            currService.initialize();
        });
    }
    /**
     * @param {?} baseSiteService
     * @param {?} langService
     * @param {?} currService
     * @param {?} configInit
     * @return {?}
     */
    function initializeContext(baseSiteService, langService, currService, configInit) {
        return (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var initialize = inititializeContext(baseSiteService, langService, currService);
            configInit.getStableConfig('context').then((/**
             * @return {?}
             */
            function () {
                initialize();
            }));
        });
    }
    /**
     * @deprecated since 1.3 - should be removed
     * @type {?}
     */
    var deprecatedContextServiceProviders = [
        BaseSiteService,
        LanguageService,
        CurrencyService,
        {
            provide: core.APP_INITIALIZER,
            useFactory: inititializeContext,
            deps: [BaseSiteService, LanguageService, CurrencyService],
            multi: true,
        },
    ];
    /** @type {?} */
    var contextServiceProviders = [
        BaseSiteService,
        LanguageService,
        CurrencyService,
        {
            provide: core.APP_INITIALIZER,
            useFactory: initializeContext,
            deps: [
                BaseSiteService,
                LanguageService,
                CurrencyService,
                ConfigInitializerService,
            ],
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SiteContextParamsService = /** @class */ (function () {
        function SiteContextParamsService(config, injector, serviceMap) {
            this.config = config;
            this.injector = injector;
            this.serviceMap = serviceMap;
        }
        /**
         * @return {?}
         */
        SiteContextParamsService.prototype.getContextParameters = /**
         * @return {?}
         */
        function () {
            if (this.config.context) {
                return Object.keys(this.config.context).filter((/**
                 * @param {?} param
                 * @return {?}
                 */
                function (param) { return param !== 'urlParameters'; }));
            }
            return [];
        };
        /**
         * @return {?}
         */
        SiteContextParamsService.prototype.getUrlEncodingParameters = /**
         * @return {?}
         */
        function () {
            return (this.config.context && this.config.context.urlParameters) || [];
        };
        /**
         * @param {?} param
         * @return {?}
         */
        SiteContextParamsService.prototype.getParamValues = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            return getContextParameterValues(this.config, param);
        };
        /**
         * @param {?} param
         * @return {?}
         */
        SiteContextParamsService.prototype.getParamDefaultValue = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            return getContextParameterDefault(this.config, param);
        };
        /**
         * @param {?} param
         * @return {?}
         */
        SiteContextParamsService.prototype.getSiteContextService = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            if (this.serviceMap[param]) {
                return this.injector.get(this.serviceMap[param], null);
            }
        };
        /**
         * @param {?} param
         * @return {?}
         */
        SiteContextParamsService.prototype.getValue = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var value;
            /** @type {?} */
            var service = this.getSiteContextService(param);
            if (service) {
                service
                    .getActive()
                    .subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return (value = val); }))
                    .unsubscribe();
            }
            return value !== undefined ? value : this.getParamDefaultValue(param);
        };
        /**
         * @param {?} param
         * @param {?} value
         * @return {?}
         */
        SiteContextParamsService.prototype.setValue = /**
         * @param {?} param
         * @param {?} value
         * @return {?}
         */
        function (param, value) {
            /** @type {?} */
            var service = this.getSiteContextService(param);
            if (service) {
                service.setActive(value);
            }
        };
        SiteContextParamsService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SiteContextParamsService.ctorParameters = function () { return [
            { type: SiteContextConfig },
            { type: core.Injector },
            { type: ContextServiceMap }
        ]; };
        return SiteContextParamsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SiteContextParamsService.prototype.config;
        /**
         * @type {?}
         * @private
         */
        SiteContextParamsService.prototype.injector;
        /**
         * @type {?}
         * @private
         */
        SiteContextParamsService.prototype.serviceMap;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ParamValuesMap() { }
    /**
     * @record
     */
    function UrlTreeWithSiteContext() { }
    if (false) {
        /** @type {?|undefined} */
        UrlTreeWithSiteContext.prototype.siteContext;
    }
    /** @type {?} */
    var UrlSplit = /(^[^#?]*)(.*)/;
    // used to split url into path and query/fragment parts
    var SiteContextUrlSerializer = /** @class */ (function (_super) {
        __extends(SiteContextUrlSerializer, _super);
        function SiteContextUrlSerializer(siteContextParams) {
            var _this = _super.call(this) || this;
            _this.siteContextParams = siteContextParams;
            return _this;
        }
        Object.defineProperty(SiteContextUrlSerializer.prototype, "urlEncodingParameters", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return this.siteContextParams.getUrlEncodingParameters();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SiteContextUrlSerializer.prototype, "hasContextInRoutes", {
            get: /**
             * @return {?}
             */
            function () {
                return this.urlEncodingParameters.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} url
         * @return {?}
         */
        SiteContextUrlSerializer.prototype.parse = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (this.hasContextInRoutes) {
                /** @type {?} */
                var urlWithParams = this.urlExtractContextParameters(url);
                /** @type {?} */
                var parsed = (/** @type {?} */ (_super.prototype.parse.call(this, urlWithParams.url)));
                this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);
                return parsed;
            }
            else {
                return _super.prototype.parse.call(this, url);
            }
        };
        /**
         * @param {?} url
         * @return {?}
         */
        SiteContextUrlSerializer.prototype.urlExtractContextParameters = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            var _a = __read(url.match(UrlSplit), 3), urlPart = _a[1], queryPart = _a[2];
            /** @type {?} */
            var segments = urlPart.split('/');
            if (segments[0] === '') {
                segments.shift();
            }
            /** @type {?} */
            var params = {};
            /** @type {?} */
            var paramId = 0;
            /** @type {?} */
            var segmentId = 0;
            while (paramId < this.urlEncodingParameters.length &&
                segmentId < segments.length) {
                /** @type {?} */
                var paramName = this.urlEncodingParameters[paramId];
                /** @type {?} */
                var paramValues = this.siteContextParams.getParamValues(paramName);
                if (paramValues.includes(segments[segmentId])) {
                    params[paramName] = segments[segmentId];
                    segmentId++;
                }
                paramId++;
            }
            url = segments.slice(Object.keys(params).length).join('/') + queryPart;
            return { url: url, params: params };
        };
        /**
         * @private
         * @param {?} urlTree
         * @param {?} params
         * @return {?}
         */
        SiteContextUrlSerializer.prototype.urlTreeIncludeContextParameters = /**
         * @private
         * @param {?} urlTree
         * @param {?} params
         * @return {?}
         */
        function (urlTree, params) {
            urlTree.siteContext = params;
        };
        /**
         * @param {?} tree
         * @return {?}
         */
        SiteContextUrlSerializer.prototype.serialize = /**
         * @param {?} tree
         * @return {?}
         */
        function (tree) {
            /** @type {?} */
            var params = this.urlTreeExtractContextParameters(tree);
            /** @type {?} */
            var url = _super.prototype.serialize.call(this, tree);
            /** @type {?} */
            var serialized = this.urlIncludeContextParameters(url, params);
            return serialized;
        };
        /**
         * @param {?} urlTree
         * @return {?}
         */
        SiteContextUrlSerializer.prototype.urlTreeExtractContextParameters = /**
         * @param {?} urlTree
         * @return {?}
         */
        function (urlTree) {
            return urlTree.siteContext ? urlTree.siteContext : {};
        };
        /**
         * @private
         * @param {?} url
         * @param {?} params
         * @return {?}
         */
        SiteContextUrlSerializer.prototype.urlIncludeContextParameters = /**
         * @private
         * @param {?} url
         * @param {?} params
         * @return {?}
         */
        function (url, params) {
            var _this = this;
            /** @type {?} */
            var contextRoutePart = this.urlEncodingParameters
                .map((/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                return params[param]
                    ? params[param]
                    : _this.siteContextParams.getValue(param);
            }))
                .join('/');
            return contextRoutePart + url;
        };
        SiteContextUrlSerializer.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SiteContextUrlSerializer.ctorParameters = function () { return [
            { type: SiteContextParamsService }
        ]; };
        return SiteContextUrlSerializer;
    }(router.DefaultUrlSerializer));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SiteContextUrlSerializer.prototype.siteContextParams;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SiteContextRoutesHandler = /** @class */ (function () {
        function SiteContextRoutesHandler(siteContextParams, serializer, injector) {
            this.siteContextParams = siteContextParams;
            this.serializer = serializer;
            this.injector = injector;
            this.subscription = new rxjs.Subscription();
            this.contextValues = {};
            this.isNavigating = false;
        }
        /**
         * @return {?}
         */
        SiteContextRoutesHandler.prototype.init = /**
         * @return {?}
         */
        function () {
            this.router = this.injector.get(router.Router);
            this.location = this.injector.get(common.Location);
            /** @type {?} */
            var routingParams = this.siteContextParams.getUrlEncodingParameters();
            if (routingParams.length) {
                this.setContextParamsFromRoute(this.router.url);
                this.subscribeChanges(routingParams);
                this.subscribeRouting();
            }
        };
        /**
         * @private
         * @param {?} params
         * @return {?}
         */
        SiteContextRoutesHandler.prototype.subscribeChanges = /**
         * @private
         * @param {?} params
         * @return {?}
         */
        function (params) {
            var _this = this;
            params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                /** @type {?} */
                var service = _this.siteContextParams.getSiteContextService(param);
                if (service) {
                    _this.subscription.add(service.getActive().subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        if (!_this.isNavigating &&
                            _this.contextValues[param] &&
                            _this.contextValues[param] !== value) {
                            /** @type {?} */
                            var parsed = _this.router.parseUrl(_this.router.url);
                            /** @type {?} */
                            var serialized = _this.router.serializeUrl(parsed);
                            _this.location.replaceState(serialized);
                        }
                        _this.contextValues[param] = value;
                    })));
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        SiteContextRoutesHandler.prototype.subscribeRouting = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.subscription.add(this.router.events
                .pipe(operators.filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return event instanceof router.NavigationStart ||
                    event instanceof router.NavigationEnd ||
                    event instanceof router.NavigationError ||
                    event instanceof router.NavigationCancel;
            })))
                .subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.isNavigating = event instanceof router.NavigationStart;
                if (_this.isNavigating) {
                    _this.setContextParamsFromRoute(event.url);
                }
            })));
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        SiteContextRoutesHandler.prototype.setContextParamsFromRoute = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            var _this = this;
            var params = this.serializer.urlExtractContextParameters(url).params;
            Object.keys(params).forEach((/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                return _this.siteContextParams.setValue(param, params[param]);
            }));
        };
        /**
         * @return {?}
         */
        SiteContextRoutesHandler.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.subscription.unsubscribe();
        };
        SiteContextRoutesHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        SiteContextRoutesHandler.ctorParameters = function () { return [
            { type: SiteContextParamsService },
            { type: SiteContextUrlSerializer },
            { type: core.Injector }
        ]; };
        /** @nocollapse */ SiteContextRoutesHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SiteContextRoutesHandler_Factory() { return new SiteContextRoutesHandler(core.ɵɵinject(SiteContextParamsService), core.ɵɵinject(SiteContextUrlSerializer), core.ɵɵinject(core.INJECTOR)); }, token: SiteContextRoutesHandler, providedIn: "root" });
        return SiteContextRoutesHandler;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.subscription;
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.contextValues;
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.router;
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.location;
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.isNavigating;
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.siteContextParams;
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.serializer;
        /**
         * @type {?}
         * @private
         */
        SiteContextRoutesHandler.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // functions below should not be exposed in public API:
    /**
     * @param {?} siteContextRoutesHandler
     * @param {?} configInit
     * @return {?}
     */
    function initSiteContextRoutesHandler(siteContextRoutesHandler, configInit) {
        return (/**
         * @return {?}
         */
        function () {
            configInit.getStableConfig('context').then((/**
             * @return {?}
             */
            function () {
                siteContextRoutesHandler.init();
            }));
        });
    }
    /** @type {?} */
    var siteContextParamsProviders = [
        SiteContextParamsService,
        SiteContextUrlSerializer,
        { provide: router.UrlSerializer, useExisting: SiteContextUrlSerializer },
        {
            provide: core.APP_INITIALIZER,
            useFactory: initSiteContextRoutesHandler,
            deps: [SiteContextRoutesHandler, ConfigInitializerService],
            multi: true,
        },
    ];
    /**
     * @deprecated since 1.3.1; TODO: remove
     * @param {?} siteContextRoutesHandler
     * @return {?}
     */
    function deprecatedInitSiteContextRoutesHandler(siteContextRoutesHandler) {
        return (/**
         * @return {?}
         */
        function () {
            siteContextRoutesHandler.init();
        });
    }
    /**
     * @deprecated since 1.3.1; TODO: remove
     * @type {?}
     */
    var deprecatedSiteContextParamsProviders = [
        SiteContextParamsService,
        SiteContextUrlSerializer,
        { provide: router.UrlSerializer, useExisting: SiteContextUrlSerializer },
        {
            provide: core.APP_INITIALIZER,
            useFactory: deprecatedInitSiteContextRoutesHandler,
            deps: [SiteContextRoutesHandler],
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function baseSiteConfigValidator(config) {
        if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {
            return 'Please configure context.parameters.baseSite before using storefront library!';
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function defaultSiteContextConfigFactory() {
        var _a;
        return {
            context: (_a = {},
                _a[LANGUAGE_CONTEXT_ID] = [
                    'en',
                    'de',
                    'ja',
                    'zh',
                    'ru',
                    'fr',
                    'tr',
                    'it',
                    'es',
                    'uk',
                    'pl',
                    'nl',
                    'hi',
                    'ar',
                    'pt',
                    'bn',
                    'pa',
                ],
                _a[CURRENCY_CONTEXT_ID] = [
                    'USD',
                    'EUR',
                    'JPY',
                    'GBP',
                    'AUD',
                    'CAD',
                    'CHF',
                    'CNY',
                    'SEK',
                    'NZD',
                    'MXN',
                    'SGD',
                    'HKD',
                    'NOK',
                    'KRW',
                    'TRY',
                    'RUB',
                    'INR',
                    'BRL',
                    'ZAR',
                ],
                _a),
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LanguagesEffects = /** @class */ (function () {
        function LanguagesEffects(actions$, siteConnector, winRef) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.winRef = winRef;
            this.loadLanguages$ = this.actions$.pipe(effects$d.ofType(LOAD_LANGUAGES), operators.exhaustMap((/**
             * @return {?}
             */
            function () {
                return _this.siteConnector.getLanguages().pipe(operators.map((/**
                 * @param {?} languages
                 * @return {?}
                 */
                function (languages) { return new LoadLanguagesSuccess(languages); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadLanguagesFail(makeErrorSerializable(error)));
                })));
            })));
            this.activateLanguage$ = this.actions$.pipe(effects$d.ofType(SET_ACTIVE_LANGUAGE), operators.tap((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                if (_this.winRef.sessionStorage) {
                    _this.winRef.sessionStorage.setItem('language', action.payload);
                }
            })), operators.map((/**
             * @return {?}
             */
            function () { return new LanguageChange(); })));
        }
        LanguagesEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LanguagesEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: SiteConnector },
            { type: WindowRef }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], LanguagesEffects.prototype, "loadLanguages$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], LanguagesEffects.prototype, "activateLanguage$", void 0);
        return LanguagesEffects;
    }());
    if (false) {
        /** @type {?} */
        LanguagesEffects.prototype.loadLanguages$;
        /** @type {?} */
        LanguagesEffects.prototype.activateLanguage$;
        /**
         * @type {?}
         * @private
         */
        LanguagesEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        LanguagesEffects.prototype.siteConnector;
        /**
         * @type {?}
         * @private
         */
        LanguagesEffects.prototype.winRef;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CurrenciesEffects = /** @class */ (function () {
        function CurrenciesEffects(actions$, siteConnector, winRef) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.winRef = winRef;
            this.loadCurrencies$ = this.actions$.pipe(effects$d.ofType(LOAD_CURRENCIES), operators.exhaustMap((/**
             * @return {?}
             */
            function () {
                return _this.siteConnector.getCurrencies().pipe(operators.map((/**
                 * @param {?} currencies
                 * @return {?}
                 */
                function (currencies) { return new LoadCurrenciesSuccess(currencies); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadCurrenciesFail(makeErrorSerializable(error)));
                })));
            })));
            this.activateCurrency$ = this.actions$.pipe(effects$d.ofType(SET_ACTIVE_CURRENCY), operators.tap((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                if (_this.winRef.sessionStorage) {
                    _this.winRef.sessionStorage.setItem('currency', action.payload);
                }
            })), operators.map((/**
             * @return {?}
             */
            function () { return new CurrencyChange(); })));
        }
        CurrenciesEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CurrenciesEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: SiteConnector },
            { type: WindowRef }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CurrenciesEffects.prototype, "loadCurrencies$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CurrenciesEffects.prototype, "activateCurrency$", void 0);
        return CurrenciesEffects;
    }());
    if (false) {
        /** @type {?} */
        CurrenciesEffects.prototype.loadCurrencies$;
        /** @type {?} */
        CurrenciesEffects.prototype.activateCurrency$;
        /**
         * @type {?}
         * @private
         */
        CurrenciesEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CurrenciesEffects.prototype.siteConnector;
        /**
         * @type {?}
         * @private
         */
        CurrenciesEffects.prototype.winRef;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BaseSiteEffects = /** @class */ (function () {
        function BaseSiteEffects(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadBaseSite$ = this.actions$.pipe(effects$d.ofType(LOAD_BASE_SITE), operators.exhaustMap((/**
             * @return {?}
             */
            function () {
                return _this.siteConnector.getBaseSite().pipe(operators.map((/**
                 * @param {?} baseSite
                 * @return {?}
                 */
                function (baseSite) { return new LoadBaseSiteSuccess(baseSite); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadBaseSiteFail(makeErrorSerializable(error)));
                })));
            })));
        }
        BaseSiteEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BaseSiteEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: SiteConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], BaseSiteEffects.prototype, "loadBaseSite$", void 0);
        return BaseSiteEffects;
    }());
    if (false) {
        /** @type {?} */
        BaseSiteEffects.prototype.loadBaseSite$;
        /**
         * @type {?}
         * @private
         */
        BaseSiteEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        BaseSiteEffects.prototype.siteConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$2 = [
        LanguagesEffects,
        CurrenciesEffects,
        BaseSiteEffects,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$1 = {
        details: {},
        activeSite: '',
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$1(state, action) {
        if (state === void 0) { state = initialState$1; }
        switch (action.type) {
            case LOAD_BASE_SITE_SUCCESS: {
                return __assign({}, state, { details: action.payload });
            }
            case SET_ACTIVE_BASE_SITE: {
                return __assign({}, state, { activeSite: action.payload });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$2 = {
        entities: null,
        activeCurrency: null,
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$2(state, action) {
        if (state === void 0) { state = initialState$2; }
        switch (action.type) {
            case LOAD_CURRENCIES_SUCCESS: {
                /** @type {?} */
                var currencies = action.payload;
                /** @type {?} */
                var entities = currencies.reduce((/**
                 * @param {?} currEntities
                 * @param {?} currency
                 * @return {?}
                 */
                function (currEntities, currency) {
                    var _a;
                    return __assign({}, currEntities, (_a = {}, _a[currency.isocode] = currency, _a));
                }), __assign({}, state.entities));
                return __assign({}, state, { entities: entities });
            }
            case SET_ACTIVE_CURRENCY: {
                /** @type {?} */
                var isocode = action.payload;
                return __assign({}, state, { activeCurrency: isocode });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$3 = {
        entities: null,
        activeLanguage: null,
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$3(state, action) {
        if (state === void 0) { state = initialState$3; }
        switch (action.type) {
            case LOAD_LANGUAGES_SUCCESS: {
                /** @type {?} */
                var languages = action.payload;
                /** @type {?} */
                var entities = languages.reduce((/**
                 * @param {?} langEntities
                 * @param {?} language
                 * @return {?}
                 */
                function (langEntities, language) {
                    var _a;
                    return __assign({}, langEntities, (_a = {}, _a[language.isocode] = language, _a));
                }), __assign({}, state.entities));
                return __assign({}, state, { entities: entities });
            }
            case SET_ACTIVE_LANGUAGE: {
                /** @type {?} */
                var isocode = action.payload;
                return __assign({}, state, { activeLanguage: isocode });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$1() {
        return {
            languages: reducer$3,
            currencies: reducer$2,
            baseSite: reducer$1,
        };
    }
    /** @type {?} */
    var reducerToken$1 = new core.InjectionToken('SiteContextReducers');
    /** @type {?} */
    var reducerProvider$1 = {
        provide: reducerToken$1,
        useFactory: getReducers$1,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function siteContextStoreConfigFactory() {
        var _a;
        // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object
        /** @type {?} */
        var config = {
            state: {
                ssrTransfer: {
                    keys: (_a = {}, _a[SITE_CONTEXT_FEATURE] = StateTransferType.TRANSFER_STATE, _a),
                },
            },
        };
        return config;
    }
    var SiteContextStoreModule = /** @class */ (function () {
        function SiteContextStoreModule() {
        }
        SiteContextStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            store.StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken$1),
                            effects$d.EffectsModule.forFeature(effects$2),
                            ConfigModule.withConfigFactory(siteContextStoreConfigFactory),
                        ],
                        providers: [reducerProvider$1],
                    },] }
        ];
        return SiteContextStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var SiteContextModule = /** @class */ (function () {
        function SiteContextModule() {
        }
        /**
         * @return {?}
         */
        SiteContextModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: SiteContextModule,
                providers: __spread([
                    contextServiceMapProvider
                ], contextServiceProviders, siteContextParamsProviders, [
                    { provide: SiteContextConfig, useExisting: Config },
                    provideConfigValidator(baseSiteConfigValidator),
                ]),
            };
        };
        SiteContextModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            ConfigModule.withConfigFactory(defaultSiteContextConfigFactory),
                            StateModule,
                            SiteContextStoreModule,
                        ],
                    },] }
        ];
        return SiteContextModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$4 = false;
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$4(state, action) {
        if (state === void 0) { state = initialState$4; }
        switch (action.type) {
            case TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {
                return action.dismissed;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$5 = false;
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$5(state, action) {
        if (state === void 0) { state = initialState$5; }
        switch (action.type) {
            case TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {
                return action.updated;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$6 = [];
    /**
     * @param {?} consents
     * @param {?} templateCode
     * @param {?} status
     * @return {?}
     */
    function toggleConsentStatus(consents, templateCode, status) {
        if (!consents) {
            return [];
        }
        return consents.map((/**
         * @param {?} consent
         * @return {?}
         */
        function (consent) {
            if (consent.templateCode === templateCode) {
                consent = __assign({}, consent, { consentState: status });
            }
            return consent;
        }));
    }
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$6(state, action) {
        if (state === void 0) { state = initialState$6; }
        switch (action.type) {
            case GIVE_ANONYMOUS_CONSENT: {
                return toggleConsentStatus(state, action.templateCode, ANONYMOUS_CONSENT_STATUS.GIVEN);
            }
            case WITHDRAW_ANONYMOUS_CONSENT: {
                return toggleConsentStatus(state, action.templateCode, ANONYMOUS_CONSENT_STATUS.WITHDRAWN);
            }
            case SET_ANONYMOUS_CONSENTS: {
                return action.payload;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$2() {
        return {
            templates: loaderReducer(ANONYMOUS_CONSENTS),
            consents: reducer$6,
            ui: store.combineReducers({
                bannerDismissed: reducer$4,
                updated: reducer$5,
            }),
        };
    }
    /** @type {?} */
    var reducerToken$2 = new core.InjectionToken('AnonymousConsentsReducers');
    /** @type {?} */
    var reducerProvider$2 = {
        provide: reducerToken$2,
        useFactory: getReducers$2,
    };
    /**
     * @param {?} reducer
     * @return {?}
     */
    function clearAnonymousConsentTemplates(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LOGOUT ||
                action.type === LANGUAGE_CHANGE) {
                state = __assign({}, state, { templates: undefined });
            }
            return reducer(state, action);
        });
    }
    /** @type {?} */
    var metaReducers$1 = [
        clearAnonymousConsentTemplates,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function anonymousConsentsStoreConfigFactory() {
        var _a;
        /** @type {?} */
        var config = {
            state: {
                storageSync: {
                    keys: (_a = {},
                        _a[ANONYMOUS_CONSENTS_STORE_FEATURE] = StorageSyncType.LOCAL_STORAGE,
                        _a),
                },
            },
        };
        return config;
    }
    var AnonymousConsentsStoreModule = /** @class */ (function () {
        function AnonymousConsentsStoreModule() {
        }
        AnonymousConsentsStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            StateModule,
                            store.StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken$2, {
                                metaReducers: metaReducers$1,
                            }),
                            effects$d.EffectsModule.forFeature(effects$1),
                            ConfigModule.withConfigFactory(anonymousConsentsStoreConfigFactory),
                        ],
                        providers: [reducerProvider$2],
                    },] }
        ];
        return AnonymousConsentsStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AnonymousConsentsModule = /** @class */ (function () {
        function AnonymousConsentsModule() {
        }
        /**
         * @return {?}
         */
        AnonymousConsentsModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: AnonymousConsentsModule,
                providers: __spread(interceptors$1, [
                    AnonymousConsentsService,
                    { provide: AnonymousConsentsConfig, useExisting: Config },
                ]),
            };
        };
        AnonymousConsentsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            AnonymousConsentsStoreModule,
                            ConfigModule.withConfig(defaultAnonymousConsentsConfig),
                        ],
                    },] }
        ];
        return AnonymousConsentsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultAsmConfig = {
        asm: {
            agentSessionTimer: {
                startingDelayInSeconds: 600,
            },
            customerSearch: {
                maxResults: 20,
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ASM_FEATURE = 'asm';
    /** @type {?} */
    var CUSTOMER_SEARCH_DATA = '[asm] Customer search data';
    /** @type {?} */
    var CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';
    /**
     * @record
     */
    function StateWithAsm() { }
    if (false) {
        /* Skipping unnamed member:
        [ASM_FEATURE]: AsmState;*/
    }
    /**
     * @record
     */
    function AsmState() { }
    if (false) {
        /** @type {?} */
        AsmState.prototype.customerSearchResult;
        /** @type {?} */
        AsmState.prototype.asmUi;
        /** @type {?} */
        AsmState.prototype.csagentToken;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AsmConnector = /** @class */ (function () {
        function AsmConnector(asmAdapter) {
            this.asmAdapter = asmAdapter;
        }
        /**
         * @param {?} options
         * @return {?}
         */
        AsmConnector.prototype.customerSearch = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            return this.asmAdapter.customerSearch(options);
        };
        AsmConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AsmConnector.ctorParameters = function () { return [
            { type: AsmAdapter }
        ]; };
        /** @nocollapse */ AsmConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AsmConnector_Factory() { return new AsmConnector(core.ɵɵinject(AsmAdapter)); }, token: AsmConnector, providedIn: "root" });
        return AsmConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        AsmConnector.prototype.asmAdapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ASM_UI_UPDATE = '[Asm] UI Update';
    var AsmUiUpdate = /** @class */ (function () {
        function AsmUiUpdate(payload) {
            this.payload = payload;
            this.type = ASM_UI_UPDATE;
        }
        return AsmUiUpdate;
    }());
    if (false) {
        /** @type {?} */
        AsmUiUpdate.prototype.type;
        /** @type {?} */
        AsmUiUpdate.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CUSTOMER_SEARCH = '[Asm] Customer Search';
    /** @type {?} */
    var CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';
    /** @type {?} */
    var CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';
    /** @type {?} */
    var CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';
    var CustomerSearch = /** @class */ (function (_super) {
        __extends(CustomerSearch, _super);
        function CustomerSearch(payload) {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.payload = payload;
            _this.type = CUSTOMER_SEARCH;
            return _this;
        }
        return CustomerSearch;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        CustomerSearch.prototype.type;
        /** @type {?} */
        CustomerSearch.prototype.payload;
    }
    var CustomerSearchFail = /** @class */ (function (_super) {
        __extends(CustomerSearchFail, _super);
        function CustomerSearchFail(payload) {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.payload = payload;
            _this.type = CUSTOMER_SEARCH_FAIL;
            return _this;
        }
        return CustomerSearchFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        CustomerSearchFail.prototype.type;
        /** @type {?} */
        CustomerSearchFail.prototype.payload;
    }
    var CustomerSearchSuccess = /** @class */ (function (_super) {
        __extends(CustomerSearchSuccess, _super);
        function CustomerSearchSuccess(payload) {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.payload = payload;
            _this.type = CUSTOMER_SEARCH_SUCCESS;
            return _this;
        }
        return CustomerSearchSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        CustomerSearchSuccess.prototype.type;
        /** @type {?} */
        CustomerSearchSuccess.prototype.payload;
    }
    var CustomerSearchReset = /** @class */ (function (_super) {
        __extends(CustomerSearchReset, _super);
        function CustomerSearchReset() {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.type = CUSTOMER_SEARCH_RESET;
            return _this;
        }
        return CustomerSearchReset;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        CustomerSearchReset.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN = '[Auth] Load Customer Service Agent Token';
    /** @type {?} */
    var LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL = '[Auth] Load Customer Service Agent Token Fail';
    /** @type {?} */
    var LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS = '[Auth] Load Customer Service Agent Token Success';
    var LoadCustomerSupportAgentToken = /** @class */ (function (_super) {
        __extends(LoadCustomerSupportAgentToken, _super);
        function LoadCustomerSupportAgentToken(payload) {
            var _this = _super.call(this, CSAGENT_TOKEN_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;
            return _this;
        }
        return LoadCustomerSupportAgentToken;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadCustomerSupportAgentToken.prototype.type;
        /** @type {?} */
        LoadCustomerSupportAgentToken.prototype.payload;
    }
    var LoadCustomerSupportAgentTokenFail = /** @class */ (function (_super) {
        __extends(LoadCustomerSupportAgentTokenFail, _super);
        function LoadCustomerSupportAgentTokenFail(payload) {
            var _this = _super.call(this, CSAGENT_TOKEN_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;
            return _this;
        }
        return LoadCustomerSupportAgentTokenFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadCustomerSupportAgentTokenFail.prototype.type;
        /** @type {?} */
        LoadCustomerSupportAgentTokenFail.prototype.payload;
    }
    var LoadCustomerSupportAgentTokenSuccess = /** @class */ (function (_super) {
        __extends(LoadCustomerSupportAgentTokenSuccess, _super);
        function LoadCustomerSupportAgentTokenSuccess(payload) {
            var _this = _super.call(this, CSAGENT_TOKEN_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;
            return _this;
        }
        return LoadCustomerSupportAgentTokenSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadCustomerSupportAgentTokenSuccess.prototype.type;
        /** @type {?} */
        LoadCustomerSupportAgentTokenSuccess.prototype.payload;
    }
    var LogoutCustomerSupportAgent = /** @class */ (function () {
        function LogoutCustomerSupportAgent() {
            this.type = LOGOUT_CUSTOMER_SUPPORT_AGENT;
        }
        return LogoutCustomerSupportAgent;
    }());
    if (false) {
        /** @type {?} */
        LogoutCustomerSupportAgent.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var customerGroup_actions = /*#__PURE__*/Object.freeze({
        ASM_UI_UPDATE: ASM_UI_UPDATE,
        AsmUiUpdate: AsmUiUpdate,
        CUSTOMER_SEARCH: CUSTOMER_SEARCH,
        CUSTOMER_SEARCH_FAIL: CUSTOMER_SEARCH_FAIL,
        CUSTOMER_SEARCH_SUCCESS: CUSTOMER_SEARCH_SUCCESS,
        CUSTOMER_SEARCH_RESET: CUSTOMER_SEARCH_RESET,
        CustomerSearch: CustomerSearch,
        CustomerSearchFail: CustomerSearchFail,
        CustomerSearchSuccess: CustomerSearchSuccess,
        CustomerSearchReset: CustomerSearchReset,
        LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN: LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN,
        LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL: LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL,
        LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS: LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS,
        LoadCustomerSupportAgentToken: LoadCustomerSupportAgentToken,
        LoadCustomerSupportAgentTokenFail: LoadCustomerSupportAgentTokenFail,
        LoadCustomerSupportAgentTokenSuccess: LoadCustomerSupportAgentTokenSuccess,
        LogoutCustomerSupportAgent: LogoutCustomerSupportAgent
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerEffects = /** @class */ (function () {
        function CustomerEffects(actions$, asmConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.asmConnector = asmConnector;
            this.customerSearch$ = this.actions$.pipe(effects$d.ofType(CUSTOMER_SEARCH), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} options
             * @return {?}
             */
            function (options) {
                return _this.asmConnector.customerSearch(options).pipe(operators.map((/**
                 * @param {?} customerSearchResults
                 * @return {?}
                 */
                function (customerSearchResults) {
                    return new CustomerSearchSuccess(customerSearchResults);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new CustomerSearchFail(makeErrorSerializable(error)));
                })));
            })));
        }
        CustomerEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CustomerEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: AsmConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CustomerEffects.prototype, "customerSearch$", void 0);
        return CustomerEffects;
    }());
    if (false) {
        /** @type {?} */
        CustomerEffects.prototype.customerSearch$;
        /**
         * @type {?}
         * @private
         */
        CustomerEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CustomerEffects.prototype.asmConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerSupportAgentTokenEffects = /** @class */ (function () {
        function CustomerSupportAgentTokenEffects(actions$, userTokenService) {
            var _this = this;
            this.actions$ = actions$;
            this.userTokenService = userTokenService;
            this.loadCustomerSupportAgentToken$ = this.actions$.pipe(effects$d.ofType(LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var userId = _a.userId, password = _a.password;
                return _this.userTokenService.loadToken(userId, password).pipe(operators.map((/**
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    /** @type {?} */
                    var date = new Date();
                    date.setSeconds(date.getSeconds() + token.expires_in);
                    token.expiration_time = date.toJSON();
                    return new LoadCustomerSupportAgentTokenSuccess(token);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadCustomerSupportAgentTokenFail(makeErrorSerializable(error)));
                })));
            })));
        }
        CustomerSupportAgentTokenEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CustomerSupportAgentTokenEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserAuthenticationTokenService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CustomerSupportAgentTokenEffects.prototype, "loadCustomerSupportAgentToken$", void 0);
        return CustomerSupportAgentTokenEffects;
    }());
    if (false) {
        /** @type {?} */
        CustomerSupportAgentTokenEffects.prototype.loadCustomerSupportAgentToken$;
        /**
         * @type {?}
         * @private
         */
        CustomerSupportAgentTokenEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CustomerSupportAgentTokenEffects.prototype.userTokenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$3 = [
        CustomerEffects,
        CustomerSupportAgentTokenEffects,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$7 = (/** @type {?} */ ({ collapsed: false }));
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$7(state, action) {
        if (state === void 0) { state = initialState$7; }
        switch (action.type) {
            case ASM_UI_UPDATE: {
                return __assign({}, state, action.payload);
            }
            default: {
                return state;
            }
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$3() {
        return {
            customerSearchResult: loaderReducer(CUSTOMER_SEARCH_DATA),
            asmUi: reducer$7,
            csagentToken: loaderReducer(CSAGENT_TOKEN_DATA),
        };
    }
    /** @type {?} */
    var reducerToken$3 = new core.InjectionToken('AsmReducers');
    /** @type {?} */
    var reducerProvider$3 = {
        provide: reducerToken$3,
        useFactory: getReducers$3,
    };
    /**
     * @param {?} reducer
     * @return {?}
     */
    function clearCustomerSupportAgentAsmState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LOGOUT_CUSTOMER_SUPPORT_AGENT) {
                state = __assign({}, state, { customerSearchResult: undefined, csagentToken: undefined });
            }
            return reducer(state, action);
        });
    }
    /** @type {?} */
    var metaReducers$2 = [
        clearCustomerSupportAgentAsmState,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function asmStoreConfigFactory() {
        /** @type {?} */
        var config = {
            state: {
                storageSync: {
                    keys: {
                        'asm.asmUi': StorageSyncType.LOCAL_STORAGE,
                        'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,
                        'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,
                        'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,
                        'asm.csagentToken.value.expiration_time': StorageSyncType.LOCAL_STORAGE,
                        'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,
                        'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,
                    },
                },
            },
        };
        return config;
    }
    var AsmStoreModule = /** @class */ (function () {
        function AsmStoreModule() {
        }
        AsmStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            StateModule,
                            store.StoreModule.forFeature(ASM_FEATURE, reducerToken$3, { metaReducers: metaReducers$2 }),
                            effects$d.EffectsModule.forFeature(effects$3),
                            ConfigModule.withConfigFactory(asmStoreConfigFactory),
                        ],
                        providers: [reducerProvider$3],
                    },] }
        ];
        return AsmStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getAsmState = store.createFeatureSelector(ASM_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$r = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.asmUi; };
    /** @type {?} */
    var getAsmUi = store.createSelector(getAsmState, (ɵ0$r));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$s = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.customerSearchResult; };
    /** @type {?} */
    var getCustomerSearchResultsLoaderState = store.createSelector(getAsmState, (ɵ0$s));
    var ɵ1$l = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getCustomerSearchResults = store.createSelector(getCustomerSearchResultsLoaderState, (ɵ1$l));
    var ɵ2$e = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderLoadingSelector(state); };
    /** @type {?} */
    var getCustomerSearchResultsLoading = store.createSelector(getCustomerSearchResultsLoaderState, (ɵ2$e));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$t = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.csagentToken; };
    /** @type {?} */
    var getCustomerSupportAgentTokenState = store.createSelector(getAsmState, (ɵ0$t));
    var ɵ1$m = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getCustomerSupportAgentToken = store.createSelector(getCustomerSupportAgentTokenState, (ɵ1$m));
    var ɵ2$f = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderLoadingSelector(state); };
    /** @type {?} */
    var getCustomerSupportAgentTokenLoading = store.createSelector(getCustomerSupportAgentTokenState, (ɵ2$f));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var asmGroup_selectors = /*#__PURE__*/Object.freeze({
        getAsmUi: getAsmUi,
        getCustomerSearchResultsLoaderState: getCustomerSearchResultsLoaderState,
        getCustomerSearchResults: getCustomerSearchResults,
        getCustomerSearchResultsLoading: getCustomerSearchResultsLoading,
        getAsmState: getAsmState,
        getCustomerSupportAgentTokenState: getCustomerSupportAgentTokenState,
        getCustomerSupportAgentToken: getCustomerSupportAgentToken,
        getCustomerSupportAgentTokenLoading: getCustomerSupportAgentTokenLoading
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AsmAuthService = /** @class */ (function () {
        function AsmAuthService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Loads a user token for a customer support agent
         * @param userId
         * @param password
         */
        /**
         * Loads a user token for a customer support agent
         * @param {?} userId
         * @param {?} password
         * @return {?}
         */
        AsmAuthService.prototype.authorizeCustomerSupportAgent = /**
         * Loads a user token for a customer support agent
         * @param {?} userId
         * @param {?} password
         * @return {?}
         */
        function (userId, password) {
            this.store.dispatch(new LoadCustomerSupportAgentToken({
                userId: userId,
                password: password,
            }));
        };
        /**
         * Starts an ASM customer emulation session.
         * A customer emulation session is stoped by calling logout().
         * @param customerSupportAgentToken
         * @param customerId
         */
        /**
         * Starts an ASM customer emulation session.
         * A customer emulation session is stoped by calling logout().
         * @param {?} customerSupportAgentToken
         * @param {?} customerId
         * @return {?}
         */
        AsmAuthService.prototype.startCustomerEmulationSession = /**
         * Starts an ASM customer emulation session.
         * A customer emulation session is stoped by calling logout().
         * @param {?} customerSupportAgentToken
         * @param {?} customerId
         * @return {?}
         */
        function (customerSupportAgentToken, customerId) {
            this.authService.authorizeWithToken(__assign({}, customerSupportAgentToken, { userId: customerId }));
        };
        /**
         * Utility function to determine if a given token is a customer emulation session token.
         * @param userToken
         */
        /**
         * Utility function to determine if a given token is a customer emulation session token.
         * @param {?} userToken
         * @return {?}
         */
        AsmAuthService.prototype.isCustomerEmulationToken = /**
         * Utility function to determine if a given token is a customer emulation session token.
         * @param {?} userToken
         * @return {?}
         */
        function (userToken) {
            return (Boolean(userToken) &&
                Boolean(userToken.userId) &&
                userToken.userId !== OCC_USER_ID_CURRENT);
        };
        /**
         * Returns the customer support agent's token
         */
        /**
         * Returns the customer support agent's token
         * @return {?}
         */
        AsmAuthService.prototype.getCustomerSupportAgentToken = /**
         * Returns the customer support agent's token
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getCustomerSupportAgentToken));
        };
        /**
         * Returns the customer support agent's token loading status
         */
        /**
         * Returns the customer support agent's token loading status
         * @return {?}
         */
        AsmAuthService.prototype.getCustomerSupportAgentTokenLoading = /**
         * Returns the customer support agent's token loading status
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getCustomerSupportAgentTokenLoading));
        };
        /**
         * Logout a customer support agent
         */
        /**
         * Logout a customer support agent
         * @return {?}
         */
        AsmAuthService.prototype.logoutCustomerSupportAgent = /**
         * Logout a customer support agent
         * @return {?}
         */
        function () {
            var _this = this;
            this.getCustomerSupportAgentToken()
                .pipe(operators.take(1))
                .subscribe((/**
             * @param {?} userToken
             * @return {?}
             */
            function (userToken) {
                _this.store.dispatch(new LogoutCustomerSupportAgent());
                _this.store.dispatch(new RevokeUserToken(userToken));
            }));
        };
        AsmAuthService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AsmAuthService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        /** @nocollapse */ AsmAuthService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AsmAuthService_Factory() { return new AsmAuthService(core.ɵɵinject(store.Store), core.ɵɵinject(AuthService)); }, token: AsmAuthService, providedIn: "root" });
        return AsmAuthService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        AsmAuthService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        AsmAuthService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerSupportAgentTokenInterceptor = /** @class */ (function () {
        function CustomerSupportAgentTokenInterceptor(asmAuthService) {
            this.asmAuthService = asmAuthService;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        CustomerSupportAgentTokenInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            return this.getCustomerSupportAgentToken(request).pipe(operators.take(1), operators.switchMap((/**
             * @param {?} token
             * @return {?}
             */
            function (token) {
                if (token) {
                    request = request.clone({
                        setHeaders: {
                            Authorization: token.token_type + " " + token.access_token,
                        },
                    });
                }
                return next.handle(request);
            })));
        };
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        CustomerSupportAgentTokenInterceptor.prototype.getCustomerSupportAgentToken = /**
         * @private
         * @param {?} request
         * @return {?}
         */
        function (request) {
            if (InterceptorUtil.getInterceptorParam(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request.headers)) {
                return this.asmAuthService.getCustomerSupportAgentToken();
            }
            return rxjs.of(null);
        };
        CustomerSupportAgentTokenInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        CustomerSupportAgentTokenInterceptor.ctorParameters = function () { return [
            { type: AsmAuthService }
        ]; };
        /** @nocollapse */ CustomerSupportAgentTokenInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CustomerSupportAgentTokenInterceptor_Factory() { return new CustomerSupportAgentTokenInterceptor(core.ɵɵinject(AsmAuthService)); }, token: CustomerSupportAgentTokenInterceptor, providedIn: "root" });
        return CustomerSupportAgentTokenInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CustomerSupportAgentTokenInterceptor.prototype.asmAuthService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var GlobalMessageType = {
        MSG_TYPE_CONFIRMATION: '[GlobalMessage] Confirmation',
        MSG_TYPE_ERROR: '[GlobalMessage] Error',
        MSG_TYPE_INFO: '[GlobalMessage] Information',
    };
    /**
     * @record
     */
    function GlobalMessage() { }
    if (false) {
        /** @type {?} */
        GlobalMessage.prototype.text;
        /** @type {?} */
        GlobalMessage.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    GlobalMessageConfig = /** @class */ (function () {
        function GlobalMessageConfig() {
        }
        return GlobalMessageConfig;
    }());
    if (false) {
        /** @type {?} */
        GlobalMessageConfig.prototype.globalMessages;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ADD_MESSAGE = '[Global-message] Add a Message';
    /** @type {?} */
    var REMOVE_MESSAGE = '[Global-message] Remove a Message';
    /** @type {?} */
    var REMOVE_MESSAGES_BY_TYPE = '[Global-message] Remove messages by type';
    var AddMessage = /** @class */ (function () {
        function AddMessage(payload) {
            this.payload = payload;
            this.type = ADD_MESSAGE;
        }
        return AddMessage;
    }());
    if (false) {
        /** @type {?} */
        AddMessage.prototype.type;
        /** @type {?} */
        AddMessage.prototype.payload;
    }
    var RemoveMessage = /** @class */ (function () {
        function RemoveMessage(payload) {
            this.payload = payload;
            this.type = REMOVE_MESSAGE;
        }
        return RemoveMessage;
    }());
    if (false) {
        /** @type {?} */
        RemoveMessage.prototype.type;
        /** @type {?} */
        RemoveMessage.prototype.payload;
    }
    var RemoveMessagesByType = /** @class */ (function () {
        function RemoveMessagesByType(payload) {
            this.payload = payload;
            this.type = REMOVE_MESSAGES_BY_TYPE;
        }
        return RemoveMessagesByType;
    }());
    if (false) {
        /** @type {?} */
        RemoveMessagesByType.prototype.type;
        /** @type {?} */
        RemoveMessagesByType.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var globalMessageGroup_actions = /*#__PURE__*/Object.freeze({
        ADD_MESSAGE: ADD_MESSAGE,
        REMOVE_MESSAGE: REMOVE_MESSAGE,
        REMOVE_MESSAGES_BY_TYPE: REMOVE_MESSAGES_BY_TYPE,
        AddMessage: AddMessage,
        RemoveMessage: RemoveMessage,
        RemoveMessagesByType: RemoveMessagesByType
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var GLOBAL_MESSAGE_FEATURE = 'global-message';
    /**
     * @record
     */
    function StateWithGlobalMessage() { }
    if (false) {
        /* Skipping unnamed member:
        [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;*/
    }
    /**
     * @record
     */
    function GlobalMessageState() { }
    if (false) {
        /** @type {?} */
        GlobalMessageState.prototype.entities;
    }
    /**
     * @record
     */
    function GlobalMessageEntities() { }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getGlobalMessageState = store.createFeatureSelector(GLOBAL_MESSAGE_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$u = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entities; };
    /** @type {?} */
    var getGlobalMessageEntities = store.createSelector(getGlobalMessageState, (ɵ0$u));
    /** @type {?} */
    var getGlobalMessageEntitiesByType = (/**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return store.createSelector(getGlobalMessageEntities, (/**
         * @param {?} entities
         * @return {?}
         */
        function (entities) { return entities && entities[type]; }));
    });
    /** @type {?} */
    var getGlobalMessageCountByType = (/**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return store.createSelector(getGlobalMessageEntitiesByType(type), (/**
         * @param {?} entities
         * @return {?}
         */
        function (entities) { return entities && entities.length; }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var globalMessageGroup_selectors = /*#__PURE__*/Object.freeze({
        getGlobalMessageState: getGlobalMessageState,
        getGlobalMessageEntities: getGlobalMessageEntities,
        getGlobalMessageEntitiesByType: getGlobalMessageEntitiesByType,
        getGlobalMessageCountByType: getGlobalMessageCountByType
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalMessageService = /** @class */ (function () {
        function GlobalMessageService(store) {
            this.store = store;
        }
        /**
         * Get all global messages
         */
        /**
         * Get all global messages
         * @return {?}
         */
        GlobalMessageService.prototype.get = /**
         * Get all global messages
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getGlobalMessageEntities), operators.filter((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return data !== undefined; })));
        };
        /**
         * Add one message into store
         * @param text: string | Translatable
         * @param type: GlobalMessageType object
         */
        /**
         * Add one message into store
         * @param {?} text
         * @param {?} type
         * @return {?}
         */
        GlobalMessageService.prototype.add = /**
         * Add one message into store
         * @param {?} text
         * @param {?} type
         * @return {?}
         */
        function (text, type) {
            this.store.dispatch(new AddMessage({
                text: typeof text === 'string' ? { raw: text } : text,
                type: type,
            }));
        };
        /**
         * Remove message(s) from store
         * @param type: GlobalMessageType
         * @param index:optional. Without it, messages will be removed by type; otherwise,
         * message will be removed from list by index.
         */
        /**
         * Remove message(s) from store
         * @param {?} type
         * @param {?=} index
         * @return {?}
         */
        GlobalMessageService.prototype.remove = /**
         * Remove message(s) from store
         * @param {?} type
         * @param {?=} index
         * @return {?}
         */
        function (type, index) {
            this.store.dispatch(index !== undefined
                ? new RemoveMessage({
                    type: type,
                    index: index,
                })
                : new RemoveMessagesByType(type));
        };
        GlobalMessageService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GlobalMessageService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        return GlobalMessageService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        GlobalMessageService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var HttpResponseStatus = {
        UNKNOWN: -1,
        BAD_REQUEST: 400,
        FORBIDDEN: 403,
        NOT_FOUND: 404,
        CONFLICT: 409,
        BAD_GATEWAY: 502,
        GATEWAY_TIMEOUT: 504,
        INTERNAL_SERVER_ERROR: 500,
    };
    HttpResponseStatus[HttpResponseStatus.UNKNOWN] = 'UNKNOWN';
    HttpResponseStatus[HttpResponseStatus.BAD_REQUEST] = 'BAD_REQUEST';
    HttpResponseStatus[HttpResponseStatus.FORBIDDEN] = 'FORBIDDEN';
    HttpResponseStatus[HttpResponseStatus.NOT_FOUND] = 'NOT_FOUND';
    HttpResponseStatus[HttpResponseStatus.CONFLICT] = 'CONFLICT';
    HttpResponseStatus[HttpResponseStatus.BAD_GATEWAY] = 'BAD_GATEWAY';
    HttpResponseStatus[HttpResponseStatus.GATEWAY_TIMEOUT] = 'GATEWAY_TIMEOUT';
    HttpResponseStatus[HttpResponseStatus.INTERNAL_SERVER_ERROR] = 'INTERNAL_SERVER_ERROR';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var HttpErrorHandler = /** @class */ (function () {
        function HttpErrorHandler(globalMessageService) {
            this.globalMessageService = globalMessageService;
        }
        HttpErrorHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        HttpErrorHandler.ctorParameters = function () { return [
            { type: GlobalMessageService }
        ]; };
        /** @nocollapse */ HttpErrorHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function HttpErrorHandler_Factory() { return new HttpErrorHandler(core.ɵɵinject(GlobalMessageService)); }, token: HttpErrorHandler, providedIn: "root" });
        return HttpErrorHandler;
    }());
    if (false) {
        /**
         * The http response status number which is handled by this handler.
         * Implementations can set the response status number, i.e. 404, so that
         * the handler can be found by the error interceptor.
         * @type {?}
         */
        HttpErrorHandler.prototype.responseStatus;
        /**
         * @type {?}
         * @protected
         */
        HttpErrorHandler.prototype.globalMessageService;
        /**
         * Handles the error response for the respose status that is register for the handler
         * @abstract
         * @param {?} request
         * @param {?} errorResponse
         * @return {?}
         */
        HttpErrorHandler.prototype.handleError = function (request, errorResponse) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BadGatewayHandler = /** @class */ (function (_super) {
        __extends(BadGatewayHandler, _super);
        function BadGatewayHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.responseStatus = HttpResponseStatus.BAD_GATEWAY;
            return _this;
        }
        /**
         * @return {?}
         */
        BadGatewayHandler.prototype.handleError = /**
         * @return {?}
         */
        function () {
            this.globalMessageService.add({ key: 'httpHandlers.badGateway' }, GlobalMessageType.MSG_TYPE_ERROR);
        };
        BadGatewayHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ BadGatewayHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function BadGatewayHandler_Factory() { return new BadGatewayHandler(core.ɵɵinject(GlobalMessageService)); }, token: BadGatewayHandler, providedIn: "root" });
        return BadGatewayHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        BadGatewayHandler.prototype.responseStatus;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OAUTH_ENDPOINT$1 = '/authorizationserver/oauth/token';
    var BadRequestHandler = /** @class */ (function (_super) {
        __extends(BadRequestHandler, _super);
        function BadRequestHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.responseStatus = HttpResponseStatus.BAD_REQUEST;
            return _this;
        }
        /**
         * @param {?} request
         * @param {?} response
         * @return {?}
         */
        BadRequestHandler.prototype.handleError = /**
         * @param {?} request
         * @param {?} response
         * @return {?}
         */
        function (request, response) {
            var _this = this;
            if (response.url.includes(OAUTH_ENDPOINT$1) &&
                response.error &&
                response.error.error === 'invalid_grant' &&
                request.body.get('grant_type') === 'password') {
                this.globalMessageService.add({
                    key: 'httpHandlers.badRequestPleaseLoginAgain',
                    params: {
                        errorMessage: response.error.error_description || response.message || '',
                    },
                }, GlobalMessageType.MSG_TYPE_ERROR);
                this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);
            }
            else {
                if (response.error &&
                    response.error.errors &&
                    response.error.errors instanceof Array) {
                    response.error.errors.forEach((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        /** @type {?} */
                        var errorMessage;
                        if (error.type === 'PasswordMismatchError') {
                            // uses en translation error message instead of backend exception error
                            // @todo: this condition could be removed if backend gives better message
                            errorMessage = {
                                key: 'httpHandlers.badRequestOldPasswordIncorrect',
                            };
                        }
                        else if (error.subjectType === 'cart' &&
                            error.reason === 'notFound') {
                            errorMessage = { key: 'httpHandlers.cartNotFound' };
                        }
                        else if (error.type === 'ValidationError') {
                            // build translation key in case of backend field validation error
                            errorMessage = {
                                key: "httpHandlers.validationErrors." + error.reason + "." + error.subject,
                            };
                        }
                        else {
                            // this is currently showing up in case we have a page not found. It should be a 404.
                            // see https://jira.hybris.com/browse/CMSX-8516
                            errorMessage = { raw: error.message || '' };
                        }
                        // @todo: remove this condition once backend is improved, see:
                        // https://github.com/SAP/cloud-commerce-spartacus-storefront/issues/6679
                        if (error.type !== 'JaloObjectNoLongerValidError') {
                            _this.globalMessageService.add(errorMessage, GlobalMessageType.MSG_TYPE_ERROR);
                        }
                    }));
                }
            }
        };
        BadRequestHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ BadRequestHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function BadRequestHandler_Factory() { return new BadRequestHandler(core.ɵɵinject(GlobalMessageService)); }, token: BadRequestHandler, providedIn: "root" });
        return BadRequestHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        BadRequestHandler.prototype.responseStatus;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConflictHandler = /** @class */ (function (_super) {
        __extends(ConflictHandler, _super);
        function ConflictHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.responseStatus = HttpResponseStatus.CONFLICT;
            return _this;
        }
        /**
         * @return {?}
         */
        ConflictHandler.prototype.handleError = /**
         * @return {?}
         */
        function () {
            this.globalMessageService.add({ key: 'httpHandlers.conflict' }, GlobalMessageType.MSG_TYPE_ERROR);
        };
        ConflictHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ ConflictHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ConflictHandler_Factory() { return new ConflictHandler(core.ɵɵinject(GlobalMessageService)); }, token: ConflictHandler, providedIn: "root" });
        return ConflictHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        ConflictHandler.prototype.responseStatus;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ForbiddenHandler = /** @class */ (function (_super) {
        __extends(ForbiddenHandler, _super);
        function ForbiddenHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.responseStatus = HttpResponseStatus.FORBIDDEN;
            return _this;
        }
        /**
         * @return {?}
         */
        ForbiddenHandler.prototype.handleError = /**
         * @return {?}
         */
        function () {
            this.globalMessageService.add({ key: 'httpHandlers.forbidden' }, GlobalMessageType.MSG_TYPE_ERROR);
        };
        ForbiddenHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ ForbiddenHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ForbiddenHandler_Factory() { return new ForbiddenHandler(core.ɵɵinject(GlobalMessageService)); }, token: ForbiddenHandler, providedIn: "root" });
        return ForbiddenHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        ForbiddenHandler.prototype.responseStatus;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GatewayTimeoutHandler = /** @class */ (function (_super) {
        __extends(GatewayTimeoutHandler, _super);
        function GatewayTimeoutHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;
            return _this;
        }
        /**
         * @return {?}
         */
        GatewayTimeoutHandler.prototype.handleError = /**
         * @return {?}
         */
        function () {
            this.globalMessageService.add({ key: 'httpHandlers.gatewayTimeout' }, GlobalMessageType.MSG_TYPE_ERROR);
        };
        GatewayTimeoutHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ GatewayTimeoutHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function GatewayTimeoutHandler_Factory() { return new GatewayTimeoutHandler(core.ɵɵinject(GlobalMessageService)); }, token: GatewayTimeoutHandler, providedIn: "root" });
        return GatewayTimeoutHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        GatewayTimeoutHandler.prototype.responseStatus;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InternalServerErrorHandler = /** @class */ (function (_super) {
        __extends(InternalServerErrorHandler, _super);
        function InternalServerErrorHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;
            return _this;
        }
        /**
         * @return {?}
         */
        InternalServerErrorHandler.prototype.handleError = /**
         * @return {?}
         */
        function () {
            this.globalMessageService.add({ key: 'httpHandlers.internalServerError' }, GlobalMessageType.MSG_TYPE_ERROR);
        };
        InternalServerErrorHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ InternalServerErrorHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function InternalServerErrorHandler_Factory() { return new InternalServerErrorHandler(core.ɵɵinject(GlobalMessageService)); }, token: InternalServerErrorHandler, providedIn: "root" });
        return InternalServerErrorHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        InternalServerErrorHandler.prototype.responseStatus;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NotFoundHandler = /** @class */ (function (_super) {
        __extends(NotFoundHandler, _super);
        function NotFoundHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.responseStatus = HttpResponseStatus.NOT_FOUND;
            return _this;
        }
        // empty error handler to avoid we fallabck to the unknown error handler
        // empty error handler to avoid we fallabck to the unknown error handler
        /**
         * @return {?}
         */
        NotFoundHandler.prototype.handleError = 
        // empty error handler to avoid we fallabck to the unknown error handler
        /**
         * @return {?}
         */
        function () { };
        NotFoundHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ NotFoundHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NotFoundHandler_Factory() { return new NotFoundHandler(core.ɵɵinject(GlobalMessageService)); }, token: NotFoundHandler, providedIn: "root" });
        return NotFoundHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        NotFoundHandler.prototype.responseStatus;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UnknownErrorHandler = /** @class */ (function (_super) {
        __extends(UnknownErrorHandler, _super);
        function UnknownErrorHandler(globalMessageService) {
            var _this = _super.call(this, globalMessageService) || this;
            _this.globalMessageService = globalMessageService;
            _this.responseStatus = HttpResponseStatus.UNKNOWN;
            return _this;
        }
        /**
         * @return {?}
         */
        UnknownErrorHandler.prototype.handleError = /**
         * @return {?}
         */
        function () {
            if (core.isDevMode()) {
                console.warn("Unknown http response error: " + this.responseStatus);
            }
        };
        UnknownErrorHandler.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UnknownErrorHandler.ctorParameters = function () { return [
            { type: GlobalMessageService }
        ]; };
        /** @nocollapse */ UnknownErrorHandler.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UnknownErrorHandler_Factory() { return new UnknownErrorHandler(core.ɵɵinject(GlobalMessageService)); }, token: UnknownErrorHandler, providedIn: "root" });
        return UnknownErrorHandler;
    }(HttpErrorHandler));
    if (false) {
        /** @type {?} */
        UnknownErrorHandler.prototype.responseStatus;
        /**
         * @type {?}
         * @protected
         */
        UnknownErrorHandler.prototype.globalMessageService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HttpErrorInterceptor = /** @class */ (function () {
        function HttpErrorInterceptor(handlers) {
            this.handlers = handlers;
            // We reverse the handlers to allow for custom handlers
            // that replace standard handlers
            this.handlers.reverse();
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        HttpErrorInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            return next.handle(request).pipe(operators.catchError((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response instanceof http.HttpErrorResponse) {
                    _this.handleErrorResponse(request, response);
                    return rxjs.throwError(response);
                }
            })));
        };
        /**
         * @protected
         * @param {?} request
         * @param {?} response
         * @return {?}
         */
        HttpErrorInterceptor.prototype.handleErrorResponse = /**
         * @protected
         * @param {?} request
         * @param {?} response
         * @return {?}
         */
        function (request, response) {
            /** @type {?} */
            var handler = this.getResponseHandler(response);
            if (handler) {
                handler.handleError(request, response);
            }
        };
        /**
         * return the error handler that matches the `HttpResponseStatus` code.
         * If no handler is available, the UNKNOWN handler is returned.
         */
        /**
         * return the error handler that matches the `HttpResponseStatus` code.
         * If no handler is available, the UNKNOWN handler is returned.
         * @protected
         * @param {?} response
         * @return {?}
         */
        HttpErrorInterceptor.prototype.getResponseHandler = /**
         * return the error handler that matches the `HttpResponseStatus` code.
         * If no handler is available, the UNKNOWN handler is returned.
         * @protected
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var status = response.status;
            /** @type {?} */
            var handler = this.handlers.find((/**
             * @param {?} h
             * @return {?}
             */
            function (h) { return h.responseStatus === status; }));
            if (!handler) {
                handler = this.handlers.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                function (h) { return h.responseStatus === HttpResponseStatus.UNKNOWN; }));
            }
            return handler;
        };
        HttpErrorInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        HttpErrorInterceptor.ctorParameters = function () { return [
            { type: Array, decorators: [{ type: core.Inject, args: [HttpErrorHandler,] }] }
        ]; };
        /** @nocollapse */ HttpErrorInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function HttpErrorInterceptor_Factory() { return new HttpErrorInterceptor(core.ɵɵinject(HttpErrorHandler)); }, token: HttpErrorInterceptor, providedIn: "root" });
        return HttpErrorInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        HttpErrorInterceptor.prototype.handlers;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var errorHandlers = [
        {
            provide: HttpErrorHandler,
            useExisting: UnknownErrorHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: BadGatewayHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: BadRequestHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: ConflictHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: ForbiddenHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: GatewayTimeoutHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: InternalServerErrorHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: NotFoundHandler,
            multi: true,
        },
    ];
    /** @type {?} */
    var httpErrorInterceptors = [
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: HttpErrorInterceptor,
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$8 = {
        entities: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$8(state, action) {
        var _a, _b, _c, _d;
        if (state === void 0) { state = initialState$8; }
        switch (action.type) {
            case ADD_MESSAGE: {
                /** @type {?} */
                var message = action.payload;
                if (state.entities[message.type] === undefined) {
                    return __assign({}, state, { entities: __assign({}, state.entities, (_a = {}, _a[message.type] = [message.text], _a)) });
                }
                else {
                    /** @type {?} */
                    var currentMessages = state.entities[message.type];
                    return __assign({}, state, { entities: __assign({}, state.entities, (_b = {}, _b[message.type] = __spread(currentMessages, [message.text]), _b)) });
                }
            }
            case REMOVE_MESSAGE: {
                /** @type {?} */
                var msgType = action.payload.type;
                /** @type {?} */
                var msgIndex = action.payload.index;
                if (Object.keys(state.entities).length === 0 ||
                    !state.entities[msgType]) {
                    return state;
                }
                /** @type {?} */
                var messages = __spread(state.entities[msgType]);
                messages.splice(msgIndex, 1);
                return __assign({}, state, { entities: __assign({}, state.entities, (_c = {}, _c[msgType] = messages, _c)) });
            }
            case REMOVE_MESSAGES_BY_TYPE: {
                /** @type {?} */
                var entities = __assign({}, state.entities, (_d = {}, _d[action.payload] = [], _d));
                return __assign({}, state, { entities: entities });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$4() {
        return reducer$8;
    }
    /** @type {?} */
    var reducerToken$4 = new core.InjectionToken('GlobalMessageReducers');
    /** @type {?} */
    var reducerProvider$4 = {
        provide: reducerToken$4,
        useFactory: getReducers$4,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalMessageStoreModule = /** @class */ (function () {
        function GlobalMessageStoreModule() {
        }
        GlobalMessageStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            StateModule,
                            store.StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken$4),
                        ],
                        providers: [reducerProvider$4],
                    },] }
        ];
        return GlobalMessageStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} objA
     * @param {?} objB
     * @return {?}
     */
    function shallowEqualObjects(objA, objB) {
        if (objA === objB) {
            return true;
        }
        if (!objA || !objB) {
            return false;
        }
        /** @type {?} */
        var aKeys = Object.keys(objA);
        /** @type {?} */
        var bKeys = Object.keys(objB);
        /** @type {?} */
        var aKeysLen = aKeys.length;
        /** @type {?} */
        var bKeysLen = bKeys.length;
        if (aKeysLen !== bKeysLen) {
            return false;
        }
        for (var i = 0; i < aKeysLen; i++) {
            /** @type {?} */
            var key = aKeys[i];
            if (objA[key] !== objB[key]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} objA
     * @param {?} objB
     * @return {?}
     */
    function deepEqualObjects(objA, objB) {
        if (objA === objB) {
            return true; // if both objA and objB are null or undefined and exactly the same
        }
        else if (!(objA instanceof Object) || !(objB instanceof Object)) {
            return false; // if they are not strictly equal, they both need to be Objects
        }
        else if (objA.constructor !== objB.constructor) {
            // they must have the exact same prototype chain, the closest we can do is
            // test their constructor.
            return false;
        }
        else {
            for (var key in objA) {
                if (!objA.hasOwnProperty(key)) {
                    continue; // other properties were tested using objA.constructor === y.constructor
                }
                if (!objB.hasOwnProperty(key)) {
                    return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined
                }
                if (objA[key] === objB[key]) {
                    continue; // if they have the same strict value or identity then they are equal
                }
                if (typeof objA[key] !== 'object') {
                    return false; // Numbers, Strings, Functions, Booleans must be strictly equal
                }
                if (!deepEqualObjects(objA[key], objB[key])) {
                    return false;
                }
            }
            for (var key in objB) {
                if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
                    return false;
                }
            }
            return true;
        }
    }
    /**
     * @param {?} obj
     * @param {?} arr
     * @return {?}
     */
    function countOfDeepEqualObjects(obj, arr) {
        return arr.reduce((/**
         * @param {?} acc
         * @param {?} curr
         * @return {?}
         */
        function (acc, curr) {
            if (deepEqualObjects(obj, curr)) {
                acc++;
            }
            return acc;
        }), 0);
    }
    /**
     * @param {?} obj
     * @param {?} arr
     * @return {?}
     */
    function indexOfFirstOccurrence(obj, arr) {
        for (var index = 0; index < arr.length; index++) {
            if (deepEqualObjects(arr[index], obj)) {
                return index;
            }
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalMessageEffect = /** @class */ (function () {
        function GlobalMessageEffect(actions$, store$1, config, platformId) {
            var _this = this;
            this.actions$ = actions$;
            this.store = store$1;
            this.config = config;
            this.platformId = platformId;
            this.removeDuplicated$ = this.actions$.pipe(effects$d.ofType(ADD_MESSAGE), operators.pluck('payload'), operators.switchMap((/**
             * @param {?} message
             * @return {?}
             */
            function (message) {
                return rxjs.of(message.text).pipe(operators.withLatestFrom(_this.store.pipe(store.select(getGlobalMessageEntitiesByType(message.type)))), operators.filter((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), text = _b[0], messages = _b[1];
                    return countOfDeepEqualObjects(text, messages) > 1;
                })), operators.map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), text = _b[0], messages = _b[1];
                    return new RemoveMessage({
                        type: message.type,
                        index: indexOfFirstOccurrence(text, messages),
                    });
                })));
            })));
            this.hideAfterDelay$ = common.isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR
                ? this.actions$.pipe(effects$d.ofType(ADD_MESSAGE), operators.pluck('payload', 'type'), operators.concatMap((/**
                 * @param {?} type
                 * @return {?}
                 */
                function (type) {
                    /** @type {?} */
                    var config = _this.config.globalMessages[type];
                    return _this.store.pipe(store.select(getGlobalMessageCountByType(type)), operators.take(1), operators.filter((/**
                     * @param {?} count
                     * @return {?}
                     */
                    function (count) {
                        return config && config.timeout !== undefined && count && count > 0;
                    })), operators.delay(config.timeout), operators.switchMap((/**
                     * @return {?}
                     */
                    function () {
                        return rxjs.of(new RemoveMessage({
                            type: type,
                            index: 0,
                        }));
                    })));
                })))
                : rxjs.EMPTY;
        }
        GlobalMessageEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GlobalMessageEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: store.Store },
            { type: GlobalMessageConfig },
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], GlobalMessageEffect.prototype, "removeDuplicated$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], GlobalMessageEffect.prototype, "hideAfterDelay$", void 0);
        return GlobalMessageEffect;
    }());
    if (false) {
        /** @type {?} */
        GlobalMessageEffect.prototype.removeDuplicated$;
        /** @type {?} */
        GlobalMessageEffect.prototype.hideAfterDelay$;
        /**
         * @type {?}
         * @private
         */
        GlobalMessageEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        GlobalMessageEffect.prototype.store;
        /**
         * @type {?}
         * @private
         */
        GlobalMessageEffect.prototype.config;
        /**
         * @type {?}
         * @private
         */
        GlobalMessageEffect.prototype.platformId;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function defaultGlobalMessageConfigFactory() {
        var _a;
        return {
            globalMessages: (_a = {},
                _a[GlobalMessageType.MSG_TYPE_CONFIRMATION] = {
                    timeout: 3000,
                },
                _a[GlobalMessageType.MSG_TYPE_INFO] = {
                    timeout: 3000,
                },
                _a[GlobalMessageType.MSG_TYPE_ERROR] = {
                    timeout: 7000,
                },
                _a),
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalMessageModule = /** @class */ (function () {
        function GlobalMessageModule() {
        }
        /**
         * @return {?}
         */
        GlobalMessageModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: GlobalMessageModule,
                providers: __spread(errorHandlers, httpErrorInterceptors),
            };
        };
        GlobalMessageModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            GlobalMessageStoreModule,
                            effects$d.EffectsModule.forFeature([GlobalMessageEffect]),
                            ConfigModule.withConfigFactory(defaultGlobalMessageConfigFactory),
                        ],
                        providers: [
                            GlobalMessageService,
                            { provide: GlobalMessageConfig, useExisting: Config },
                        ],
                    },] }
        ];
        return GlobalMessageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerSupportAgentErrorHandlingService = /** @class */ (function () {
        function CustomerSupportAgentErrorHandlingService(asmAuthService, globalMessageService) {
            this.asmAuthService = asmAuthService;
            this.globalMessageService = globalMessageService;
        }
        /**
         * @return {?}
         */
        CustomerSupportAgentErrorHandlingService.prototype.terminateCustomerSupportAgentExpiredSession = /**
         * @return {?}
         */
        function () {
            this.asmAuthService.logoutCustomerSupportAgent();
            this.globalMessageService.add({
                key: 'asm.csagentTokenExpired',
            }, GlobalMessageType.MSG_TYPE_ERROR);
        };
        CustomerSupportAgentErrorHandlingService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        CustomerSupportAgentErrorHandlingService.ctorParameters = function () { return [
            { type: AsmAuthService },
            { type: GlobalMessageService }
        ]; };
        /** @nocollapse */ CustomerSupportAgentErrorHandlingService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CustomerSupportAgentErrorHandlingService_Factory() { return new CustomerSupportAgentErrorHandlingService(core.ɵɵinject(AsmAuthService), core.ɵɵinject(GlobalMessageService)); }, token: CustomerSupportAgentErrorHandlingService, providedIn: "root" });
        return CustomerSupportAgentErrorHandlingService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CustomerSupportAgentErrorHandlingService.prototype.asmAuthService;
        /**
         * @type {?}
         * @protected
         */
        CustomerSupportAgentErrorHandlingService.prototype.globalMessageService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerSupportAgentAuthErrorInterceptor = /** @class */ (function () {
        function CustomerSupportAgentAuthErrorInterceptor(csagentErrorHandlingService) {
            this.csagentErrorHandlingService = csagentErrorHandlingService;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        CustomerSupportAgentAuthErrorInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            /** @type {?} */
            var isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(request);
            if (isCustomerSupportAgentRequest) {
                request = InterceptorUtil.removeHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request);
            }
            return next.handle(request).pipe(operators.catchError((/**
             * @param {?} errResponse
             * @return {?}
             */
            function (errResponse) {
                if (errResponse instanceof http.HttpErrorResponse) {
                    // Unauthorized
                    if (isCustomerSupportAgentRequest && errResponse.status === 401) {
                        _this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();
                        return rxjs.of((/** @type {?} */ (undefined)));
                    }
                }
                return rxjs.throwError(errResponse);
            })));
        };
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        CustomerSupportAgentAuthErrorInterceptor.prototype.isCustomerSupportAgentRequest = /**
         * @private
         * @param {?} request
         * @return {?}
         */
        function (request) {
            /** @type {?} */
            var isRequestMapping = InterceptorUtil.getInterceptorParam(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request.headers);
            return Boolean(isRequestMapping);
        };
        CustomerSupportAgentAuthErrorInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        CustomerSupportAgentAuthErrorInterceptor.ctorParameters = function () { return [
            { type: CustomerSupportAgentErrorHandlingService }
        ]; };
        /** @nocollapse */ CustomerSupportAgentAuthErrorInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CustomerSupportAgentAuthErrorInterceptor_Factory() { return new CustomerSupportAgentAuthErrorInterceptor(core.ɵɵinject(CustomerSupportAgentErrorHandlingService)); }, token: CustomerSupportAgentAuthErrorInterceptor, providedIn: "root" });
        return CustomerSupportAgentAuthErrorInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CustomerSupportAgentAuthErrorInterceptor.prototype.csagentErrorHandlingService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var interceptors$2 = [
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: CustomerSupportAgentTokenInterceptor,
            multi: true,
        },
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: CustomerSupportAgentAuthErrorInterceptor,
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AsmModule = /** @class */ (function () {
        function AsmModule() {
        }
        /**
         * @return {?}
         */
        AsmModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: AsmModule,
                providers: __spread([{ provide: AsmConfig, useExisting: Config }], interceptors$2),
            };
        };
        AsmModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            AsmStoreModule,
                            ConfigModule.withConfig(defaultAsmConfig),
                        ],
                    },] }
        ];
        return AsmModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AsmService = /** @class */ (function () {
        function AsmService(store) {
            this.store = store;
        }
        /**
         * Search for customers
         * @param options
         */
        /**
         * Search for customers
         * @param {?} options
         * @return {?}
         */
        AsmService.prototype.customerSearch = /**
         * Search for customers
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this.store.dispatch(new CustomerSearch(options));
        };
        /**
         * Reset the customer search result data to the initial state.
         */
        /**
         * Reset the customer search result data to the initial state.
         * @return {?}
         */
        AsmService.prototype.customerSearchReset = /**
         * Reset the customer search result data to the initial state.
         * @return {?}
         */
        function () {
            this.store.dispatch(new CustomerSearchReset());
        };
        /**
         * Returns the customer search result data.
         */
        /**
         * Returns the customer search result data.
         * @return {?}
         */
        AsmService.prototype.getCustomerSearchResults = /**
         * Returns the customer search result data.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getCustomerSearchResults));
        };
        /**
         * Returns the customer search result loading status.
         */
        /**
         * Returns the customer search result loading status.
         * @return {?}
         */
        AsmService.prototype.getCustomerSearchResultsLoading = /**
         * Returns the customer search result loading status.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getCustomerSearchResultsLoading));
        };
        /**
         * Updates the state of the ASM UI
         */
        /**
         * Updates the state of the ASM UI
         * @param {?} asmUi
         * @return {?}
         */
        AsmService.prototype.updateAsmUiState = /**
         * Updates the state of the ASM UI
         * @param {?} asmUi
         * @return {?}
         */
        function (asmUi) {
            this.store.dispatch(new AsmUiUpdate(asmUi));
        };
        /**
         * Get the state of the ASM UI
         */
        /**
         * Get the state of the ASM UI
         * @return {?}
         */
        AsmService.prototype.getAsmUiState = /**
         * Get the state of the ASM UI
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAsmUi));
        };
        AsmService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AsmService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        /** @nocollapse */ AsmService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AsmService_Factory() { return new AsmService(core.ɵɵinject(store.Store)); }, token: AsmService, providedIn: "root" });
        return AsmService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        AsmService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function CustomerSearchPage() { }
    if (false) {
        /** @type {?} */
        CustomerSearchPage.prototype.entries;
        /** @type {?|undefined} */
        CustomerSearchPage.prototype.pagination;
        /** @type {?|undefined} */
        CustomerSearchPage.prototype.sorts;
    }
    /**
     * @record
     */
    function CustomerSearchOptions() { }
    if (false) {
        /** @type {?|undefined} */
        CustomerSearchOptions.prototype.query;
        /** @type {?|undefined} */
        CustomerSearchOptions.prototype.pageSize;
    }
    /**
     * @record
     */
    function AsmUi() { }
    if (false) {
        /** @type {?|undefined} */
        AsmUi.prototype.collapsed;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    PageMetaResolver = /** @class */ (function () {
        function PageMetaResolver() {
        }
        /**
         * @param {?} page
         * @return {?}
         */
        PageMetaResolver.prototype.getScore = /**
         * @param {?} page
         * @return {?}
         */
        function (page) {
            /** @type {?} */
            var score = 0;
            if (this.pageType) {
                score += page.type === this.pageType ? 1 : -1;
            }
            if (this.pageTemplate) {
                score += page.template === this.pageTemplate ? 1 : -1;
            }
            return score;
        };
        return PageMetaResolver;
    }());
    if (false) {
        /** @type {?} */
        PageMetaResolver.prototype.pageType;
        /** @type {?} */
        PageMetaResolver.prototype.pageTemplate;
        /**
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         *
         * @deprecated since version 1.3
         * @abstract
         * @return {?}
         */
        PageMetaResolver.prototype.resolve = function () { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Email Standard RFC 5322:
    /** @type {?} */
    var EMAIL_PATTERN = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    // tslint:disable-line
    /** @type {?} */
    var PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\-+{};:.,]).{6,}$/;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CART_FEATURE = 'cart';
    /** @type {?} */
    var CART_DATA = '[Cart] Cart Data';
    /** @type {?} */
    var ADD_VOUCHER_PROCESS_ID = 'addVoucher';
    /**
     * @record
     */
    function StateWithCart() { }
    if (false) {
        /* Skipping unnamed member:
        [CART_FEATURE]: CartsState;*/
    }
    /**
     * @record
     */
    function CartsState() { }
    if (false) {
        /** @type {?} */
        CartsState.prototype.active;
    }
    /**
     * @record
     */
    function CartState() { }
    if (false) {
        /** @type {?} */
        CartState.prototype.content;
        /** @type {?} */
        CartState.prototype.entries;
        /** @type {?} */
        CartState.prototype.refresh;
        /** @type {?} */
        CartState.prototype.cartMergeComplete;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getCartContentSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.content; });
    var ɵ0$v = getCartContentSelector;
    /** @type {?} */
    var getCartRefreshSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.refresh; });
    var ɵ1$n = getCartRefreshSelector;
    /** @type {?} */
    var getCartEntriesSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entries; });
    var ɵ2$g = getCartEntriesSelector;
    /** @type {?} */
    var getCartMergeCompleteSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.cartMergeComplete;
    });
    var ɵ3$9 = getCartMergeCompleteSelector;
    /** @type {?} */
    var getCartsState = store.createFeatureSelector(CART_FEATURE);
    var ɵ4$2 = /**
     * @param {?} cartsState
     * @return {?}
     */
    function (cartsState) { return cartsState.active; };
    /** @type {?} */
    var getActiveCartState = store.createSelector(getCartsState, (ɵ4$2));
    var ɵ5$2 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getCartState = store.createSelector(getActiveCartState, (ɵ5$2));
    /** @type {?} */
    var getCartContent = store.createSelector(getCartState, getCartContentSelector);
    /** @type {?} */
    var getCartRefresh = store.createSelector(getCartState, getCartRefreshSelector);
    var ɵ6 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return (loaderSuccessSelector(state) &&
            !loaderLoadingSelector(state) &&
            !loaderValueSelector(state).refresh) ||
            (loaderErrorSelector(state) &&
                !loaderLoadingSelector(state) &&
                !loaderValueSelector(state).refresh);
    };
    /** @type {?} */
    var getCartLoaded = store.createSelector(getActiveCartState, (ɵ6));
    var ɵ7 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderLoadingSelector(state); };
    /** @type {?} */
    var getCartLoading = store.createSelector(getActiveCartState, (ɵ7));
    /** @type {?} */
    var getCartMergeComplete = store.createSelector(getCartState, getCartMergeCompleteSelector);
    /** @type {?} */
    var getCartEntriesMap = store.createSelector(getCartState, getCartEntriesSelector);
    /** @type {?} */
    var getCartEntrySelectorFactory = (/**
     * @param {?} productCode
     * @return {?}
     */
    function (productCode) {
        return store.createSelector(getCartEntriesMap, (/**
         * @param {?} entries
         * @return {?}
         */
        function (entries) {
            if (entries) {
                return entries[productCode];
            }
        }));
    });
    var ɵ8 = /**
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        return Object.keys(entities).map((/**
         * @param {?} code
         * @return {?}
         */
        function (code) { return entities[code]; }));
    };
    /** @type {?} */
    var getCartEntries = store.createSelector(getCartEntriesMap, (ɵ8));
    var ɵ9 = /**
     * @param {?} content
     * @return {?}
     */
    function (content) { return content.user; };
    /** @type {?} */
    var getCartUser = store.createSelector(getCartContent, (ɵ9));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var cartGroup_selectors = /*#__PURE__*/Object.freeze({
        getCartsState: getCartsState,
        getActiveCartState: getActiveCartState,
        getCartState: getCartState,
        getCartContent: getCartContent,
        getCartRefresh: getCartRefresh,
        getCartLoaded: getCartLoaded,
        getCartLoading: getCartLoading,
        getCartMergeComplete: getCartMergeComplete,
        getCartEntriesMap: getCartEntriesMap,
        getCartEntrySelectorFactory: getCartEntrySelectorFactory,
        getCartEntries: getCartEntries,
        getCartUser: getCartUser
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MULTI_CART_FEATURE = 'multi-cart';
    /** @type {?} */
    var MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';
    /**
     * @record
     */
    function StateWithMultiCart() { }
    if (false) {
        /* Skipping unnamed member:
        [MULTI_CART_FEATURE]: MultiCartState;*/
    }
    /**
     * @record
     */
    function MultiCartState() { }
    if (false) {
        /** @type {?} */
        MultiCartState.prototype.carts;
        /** @type {?} */
        MultiCartState.prototype.active;
        /** @type {?} */
        MultiCartState.prototype.wishList;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getMultiCartState = store.createFeatureSelector(MULTI_CART_FEATURE);
    var ɵ0$w = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.carts; };
    /** @type {?} */
    var getMultiCartEntities = store.createSelector(getMultiCartState, (ɵ0$w));
    /** @type {?} */
    var getCartEntitySelectorFactory = (/**
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        return store.createSelector(getMultiCartEntities, (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return entityProcessesLoaderStateSelector(state, cartId);
        }));
    });
    /** @type {?} */
    var getCartSelectorFactory = (/**
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        return store.createSelector(getMultiCartEntities, (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return entityValueSelector(state, cartId);
        }));
    });
    /** @type {?} */
    var getCartIsStableSelectorFactory = (/**
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        return store.createSelector(getMultiCartEntities, (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return entityIsStableSelector(state, cartId);
        }));
    });
    /** @type {?} */
    var getCartHasPendingProcessesSelectorFactory = (/**
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        return store.createSelector(getMultiCartEntities, (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return entityHasPendingProcessesSelector(state, cartId);
        }));
    });
    /** @type {?} */
    var getCartEntriesSelectorFactory = (/**
     * @param {?} cartId
     * @return {?}
     */
    function (cartId) {
        return store.createSelector(getCartSelectorFactory(cartId), (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return state && state.entries ? state.entries : [];
        }));
    });
    /** @type {?} */
    var getCartEntrySelectorFactory$1 = (/**
     * @param {?} cartId
     * @param {?} productCode
     * @return {?}
     */
    function (cartId, productCode) {
        return store.createSelector(getCartEntriesSelectorFactory(cartId), (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return state
                ? state.find((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) { return entry.product.code === productCode; }))
                : undefined;
        }));
    });
    var ɵ1$o = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.active; };
    /** @type {?} */
    var getActiveCartId = store.createSelector(getMultiCartState, (ɵ1$o));
    var ɵ2$h = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.wishList; };
    /** @type {?} */
    var getWishListId = store.createSelector(getMultiCartState, (ɵ2$h));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var multiCartGroup_selectors = /*#__PURE__*/Object.freeze({
        getMultiCartState: getMultiCartState,
        getMultiCartEntities: getMultiCartEntities,
        getCartEntitySelectorFactory: getCartEntitySelectorFactory,
        getCartSelectorFactory: getCartSelectorFactory,
        getCartIsStableSelectorFactory: getCartIsStableSelectorFactory,
        getCartHasPendingProcessesSelectorFactory: getCartHasPendingProcessesSelectorFactory,
        getCartEntriesSelectorFactory: getCartEntriesSelectorFactory,
        getCartEntrySelectorFactory: getCartEntrySelectorFactory$1,
        getActiveCartId: getActiveCartId,
        getWishListId: getWishListId
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} cart
     * @param {?} userId
     * @return {?}
     */
    function getCartIdByUserId(cart, userId) {
        if (userId === OCC_USER_ID_ANONYMOUS) {
            return cart.guid;
        }
        return cart.code;
    }
    /**
     * What is a temporary cart?
     * - frontend only cart entity!
     * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)
     *
     * Why we need temporary carts?
     * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)
     * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)
     * - cart identifiers are created in the backend, so those are only known after cart is created
     *
     * Temporary cart lifecycle
     * - create cart method invoked
     * - new `temp-${uuid}` cart is created with `loading=true` state
     * - backend returns created cart
     * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)
     * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)
     * - in next tick temporary cart is removed
     * @param {?} cartId
     * @return {?}
     */
    function isTempCartId(cartId) {
        return cartId.startsWith('temp-');
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CREATE_CART = '[Cart] Create Cart';
    /** @type {?} */
    var CREATE_CART_FAIL = '[Cart] Create Cart Fail';
    /** @type {?} */
    var CREATE_CART_SUCCESS = '[Cart] Create Cart Success';
    /** @type {?} */
    var LOAD_CART = '[Cart] Load Cart';
    /** @type {?} */
    var LOAD_CART_FAIL = '[Cart] Load Cart Fail';
    /** @type {?} */
    var LOAD_CART_SUCCESS = '[Cart] Load Cart Success';
    /** @type {?} */
    var ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';
    /** @type {?} */
    var ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';
    /** @type {?} */
    var ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';
    /** @type {?} */
    var MERGE_CART = '[Cart] Merge Cart';
    /** @type {?} */
    var MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';
    /** @type {?} */
    var RESET_CART_DETAILS = '[Cart] Reset Cart Details';
    /** @type {?} */
    var CLEAR_EXPIRED_COUPONS = '[Cart] Clear Expired Coupon';
    /** @type {?} */
    var CLEAR_CART = '[Cart] Clear Cart';
    /** @type {?} */
    var DELETE_CART = '[Cart] Delete Cart';
    /** @type {?} */
    var DELETE_CART_FAIL = '[Cart] Delete Cart Fail';
    var CreateCart = /** @class */ (function (_super) {
        __extends(CreateCart, _super);
        function CreateCart(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CREATE_CART;
            return _this;
        }
        return CreateCart;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        CreateCart.prototype.type;
        /** @type {?} */
        CreateCart.prototype.payload;
    }
    var CreateCartFail = /** @class */ (function (_super) {
        __extends(CreateCartFail, _super);
        function CreateCartFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_CART_FAIL;
            return _this;
        }
        return CreateCartFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        CreateCartFail.prototype.type;
        /** @type {?} */
        CreateCartFail.prototype.payload;
    }
    var CreateCartSuccess = /** @class */ (function (_super) {
        __extends(CreateCartSuccess, _super);
        function CreateCartSuccess(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CREATE_CART_SUCCESS;
            return _this;
        }
        return CreateCartSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        CreateCartSuccess.prototype.type;
        /** @type {?} */
        CreateCartSuccess.prototype.payload;
    }
    var AddEmailToCart = /** @class */ (function (_super) {
        __extends(AddEmailToCart, _super);
        function AddEmailToCart(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_CART;
            return _this;
        }
        return AddEmailToCart;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        AddEmailToCart.prototype.type;
        /** @type {?} */
        AddEmailToCart.prototype.payload;
    }
    var AddEmailToCartFail = /** @class */ (function (_super) {
        __extends(AddEmailToCartFail, _super);
        function AddEmailToCartFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_CART_FAIL;
            return _this;
        }
        return AddEmailToCartFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        AddEmailToCartFail.prototype.type;
        /** @type {?} */
        AddEmailToCartFail.prototype.payload;
    }
    var AddEmailToCartSuccess = /** @class */ (function (_super) {
        __extends(AddEmailToCartSuccess, _super);
        function AddEmailToCartSuccess(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_CART_SUCCESS;
            return _this;
        }
        return AddEmailToCartSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        AddEmailToCartSuccess.prototype.type;
        /** @type {?} */
        AddEmailToCartSuccess.prototype.payload;
    }
    var LoadCart = /** @class */ (function (_super) {
        __extends(LoadCart, _super);
        function LoadCart(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_CART;
            return _this;
        }
        return LoadCart;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadCart.prototype.type;
        /** @type {?} */
        LoadCart.prototype.payload;
    }
    var LoadCartFail = /** @class */ (function (_super) {
        __extends(LoadCartFail, _super);
        function LoadCartFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CART_FAIL;
            return _this;
        }
        return LoadCartFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadCartFail.prototype.type;
        /** @type {?} */
        LoadCartFail.prototype.payload;
    }
    var LoadCartSuccess = /** @class */ (function (_super) {
        __extends(LoadCartSuccess, _super);
        function LoadCartSuccess(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_CART_SUCCESS;
            return _this;
        }
        return LoadCartSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadCartSuccess.prototype.type;
        /** @type {?} */
        LoadCartSuccess.prototype.payload;
    }
    var MergeCart = /** @class */ (function () {
        function MergeCart(payload) {
            this.payload = payload;
            this.type = MERGE_CART;
        }
        return MergeCart;
    }());
    if (false) {
        /** @type {?} */
        MergeCart.prototype.type;
        /** @type {?} */
        MergeCart.prototype.payload;
    }
    var MergeCartSuccess = /** @class */ (function () {
        function MergeCartSuccess(payload) {
            this.payload = payload;
            this.type = MERGE_CART_SUCCESS;
        }
        return MergeCartSuccess;
    }());
    if (false) {
        /** @type {?} */
        MergeCartSuccess.prototype.type;
        /** @type {?} */
        MergeCartSuccess.prototype.payload;
    }
    var ResetCartDetails = /** @class */ (function () {
        function ResetCartDetails() {
            this.type = RESET_CART_DETAILS;
        }
        return ResetCartDetails;
    }());
    if (false) {
        /** @type {?} */
        ResetCartDetails.prototype.type;
    }
    var ClearExpiredCoupons = /** @class */ (function () {
        function ClearExpiredCoupons(payload) {
            this.payload = payload;
            this.type = CLEAR_EXPIRED_COUPONS;
        }
        return ClearExpiredCoupons;
    }());
    if (false) {
        /** @type {?} */
        ClearExpiredCoupons.prototype.type;
        /** @type {?} */
        ClearExpiredCoupons.prototype.payload;
    }
    var ClearCart = /** @class */ (function (_super) {
        __extends(ClearCart, _super);
        function ClearCart() {
            var _this = _super.call(this, CART_DATA) || this;
            _this.type = CLEAR_CART;
            return _this;
        }
        return ClearCart;
    }(LoaderResetAction));
    if (false) {
        /** @type {?} */
        ClearCart.prototype.type;
    }
    var DeleteCart = /** @class */ (function (_super) {
        __extends(DeleteCart, _super);
        function DeleteCart(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = DELETE_CART;
            return _this;
        }
        return DeleteCart;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        DeleteCart.prototype.type;
        /** @type {?} */
        DeleteCart.prototype.payload;
    }
    var DeleteCartFail = /** @class */ (function (_super) {
        __extends(DeleteCartFail, _super);
        function DeleteCartFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = DELETE_CART_FAIL;
            return _this;
        }
        return DeleteCartFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        DeleteCartFail.prototype.type;
        /** @type {?} */
        DeleteCartFail.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CART_ADD_ENTRY = '[Cart-entry] Add Entry';
    /** @type {?} */
    var CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';
    /** @type {?} */
    var CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';
    /** @type {?} */
    var CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';
    /** @type {?} */
    var CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';
    /** @type {?} */
    var CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';
    /** @type {?} */
    var CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';
    /** @type {?} */
    var CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';
    /** @type {?} */
    var CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';
    var CartAddEntry = /** @class */ (function (_super) {
        __extends(CartAddEntry, _super);
        function CartAddEntry(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_ADD_ENTRY;
            return _this;
        }
        return CartAddEntry;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        CartAddEntry.prototype.type;
        /** @type {?} */
        CartAddEntry.prototype.payload;
    }
    var CartAddEntrySuccess = /** @class */ (function (_super) {
        __extends(CartAddEntrySuccess, _super);
        function CartAddEntrySuccess(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_ADD_ENTRY_SUCCESS;
            return _this;
        }
        return CartAddEntrySuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        CartAddEntrySuccess.prototype.type;
        /** @type {?} */
        CartAddEntrySuccess.prototype.payload;
    }
    var CartAddEntryFail = /** @class */ (function (_super) {
        __extends(CartAddEntryFail, _super);
        function CartAddEntryFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = CART_ADD_ENTRY_FAIL;
            return _this;
        }
        return CartAddEntryFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        CartAddEntryFail.prototype.type;
        /** @type {?} */
        CartAddEntryFail.prototype.payload;
    }
    var CartRemoveEntry = /** @class */ (function (_super) {
        __extends(CartRemoveEntry, _super);
        function CartRemoveEntry(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_ENTRY;
            return _this;
        }
        return CartRemoveEntry;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        CartRemoveEntry.prototype.type;
        /** @type {?} */
        CartRemoveEntry.prototype.payload;
    }
    var CartRemoveEntrySuccess = /** @class */ (function (_super) {
        __extends(CartRemoveEntrySuccess, _super);
        function CartRemoveEntrySuccess(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_ENTRY_SUCCESS;
            return _this;
        }
        return CartRemoveEntrySuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        CartRemoveEntrySuccess.prototype.type;
        /** @type {?} */
        CartRemoveEntrySuccess.prototype.payload;
    }
    var CartRemoveEntryFail = /** @class */ (function (_super) {
        __extends(CartRemoveEntryFail, _super);
        function CartRemoveEntryFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_ENTRY_FAIL;
            return _this;
        }
        return CartRemoveEntryFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        CartRemoveEntryFail.prototype.type;
        /** @type {?} */
        CartRemoveEntryFail.prototype.payload;
    }
    var CartUpdateEntry = /** @class */ (function (_super) {
        __extends(CartUpdateEntry, _super);
        function CartUpdateEntry(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_UPDATE_ENTRY;
            return _this;
        }
        return CartUpdateEntry;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        CartUpdateEntry.prototype.type;
        /** @type {?} */
        CartUpdateEntry.prototype.payload;
    }
    var CartUpdateEntrySuccess = /** @class */ (function (_super) {
        __extends(CartUpdateEntrySuccess, _super);
        function CartUpdateEntrySuccess(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_UPDATE_ENTRY_SUCCESS;
            return _this;
        }
        return CartUpdateEntrySuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        CartUpdateEntrySuccess.prototype.type;
        /** @type {?} */
        CartUpdateEntrySuccess.prototype.payload;
    }
    var CartUpdateEntryFail = /** @class */ (function (_super) {
        __extends(CartUpdateEntryFail, _super);
        function CartUpdateEntryFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = CART_UPDATE_ENTRY_FAIL;
            return _this;
        }
        return CartUpdateEntryFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        CartUpdateEntryFail.prototype.type;
        /** @type {?} */
        CartUpdateEntryFail.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';
    /** @type {?} */
    var CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';
    /** @type {?} */
    var CART_ADD_VOUCHER_SUCCESS = '[Cart-voucher] Add Cart Voucher Success';
    /** @type {?} */
    var CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';
    /** @type {?} */
    var CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';
    /** @type {?} */
    var CART_REMOVE_VOUCHER_FAIL = '[Cart-voucher] Remove Cart Voucher Fail';
    /** @type {?} */
    var CART_REMOVE_VOUCHER_SUCCESS = '[Cart-voucher] Remove Cart Voucher Success';
    // Adding cart voucher actions
    var 
    // Adding cart voucher actions
    CartAddVoucher = /** @class */ (function (_super) {
        __extends(CartAddVoucher, _super);
        function CartAddVoucher(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CART_ADD_VOUCHER;
            return _this;
        }
        return CartAddVoucher;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        CartAddVoucher.prototype.type;
        /** @type {?} */
        CartAddVoucher.prototype.payload;
    }
    var CartAddVoucherFail = /** @class */ (function (_super) {
        __extends(CartAddVoucherFail, _super);
        function CartAddVoucherFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CART_ADD_VOUCHER_FAIL;
            return _this;
        }
        return CartAddVoucherFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        CartAddVoucherFail.prototype.type;
        /** @type {?} */
        CartAddVoucherFail.prototype.payload;
    }
    var CartAddVoucherSuccess = /** @class */ (function (_super) {
        __extends(CartAddVoucherSuccess, _super);
        function CartAddVoucherSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CART_ADD_VOUCHER_SUCCESS;
            return _this;
        }
        return CartAddVoucherSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        CartAddVoucherSuccess.prototype.type;
        /** @type {?} */
        CartAddVoucherSuccess.prototype.payload;
    }
    var CartResetAddVoucher = /** @class */ (function (_super) {
        __extends(CartResetAddVoucher, _super);
        function CartResetAddVoucher() {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID) || this;
            _this.type = CART_RESET_ADD_VOUCHER;
            return _this;
        }
        return CartResetAddVoucher;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        CartResetAddVoucher.prototype.type;
    }
    // Deleting cart voucher
    var 
    // Deleting cart voucher
    CartRemoveVoucher = /** @class */ (function (_super) {
        __extends(CartRemoveVoucher, _super);
        function CartRemoveVoucher(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_VOUCHER;
            return _this;
        }
        return CartRemoveVoucher;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        CartRemoveVoucher.prototype.type;
        /** @type {?} */
        CartRemoveVoucher.prototype.payload;
    }
    var CartRemoveVoucherFail = /** @class */ (function (_super) {
        __extends(CartRemoveVoucherFail, _super);
        function CartRemoveVoucherFail(payload) {
            var _this = _super.call(this, CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_VOUCHER_FAIL;
            return _this;
        }
        return CartRemoveVoucherFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        CartRemoveVoucherFail.prototype.type;
        /** @type {?} */
        CartRemoveVoucherFail.prototype.payload;
    }
    var CartRemoveVoucherSuccess = /** @class */ (function (_super) {
        __extends(CartRemoveVoucherSuccess, _super);
        function CartRemoveVoucherSuccess(payload) {
            var _this = _super.call(this, CART_DATA) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_VOUCHER_SUCCESS;
            return _this;
        }
        return CartRemoveVoucherSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        CartRemoveVoucherSuccess.prototype.type;
        /** @type {?} */
        CartRemoveVoucherSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var REMOVE_TEMP_CART = '[Multi Cart] Remove Temp Cart';
    /** @type {?} */
    var CREATE_MULTI_CART = '[Multi Cart] Create Cart';
    /** @type {?} */
    var CREATE_MULTI_CART_FAIL = '[Multi Cart] Create Cart Fail';
    /** @type {?} */
    var CREATE_MULTI_CART_SUCCESS = '[Multi Cart] Create Cart Success';
    /** @type {?} */
    var LOAD_MULTI_CART = '[Multi Cart] Load Cart';
    /** @type {?} */
    var LOAD_MULTI_CART_FAIL = '[Multi Cart] Load Cart Fail';
    /** @type {?} */
    var LOAD_MULTI_CART_SUCCESS = '[Multi Cart] Load Cart Success';
    /** @type {?} */
    var MERGE_MULTI_CART = '[Multi Cart] Merge Cart';
    /** @type {?} */
    var MERGE_MULTI_CART_SUCCESS = '[Multi Cart] Merge Cart Success';
    /** @type {?} */
    var RESET_MULTI_CART_DETAILS = '[Multi Cart] Reset Cart Details';
    /** @type {?} */
    var SET_TEMP_CART = '[Multi Cart] Set Temp Cart';
    /** @type {?} */
    var REMOVE_CART = '[Multi Cart] Remove Cart';
    /** @type {?} */
    var ADD_EMAIL_TO_MULTI_CART = '[Multi Cart] Add Email';
    /** @type {?} */
    var ADD_EMAIL_TO_MULTI_CART_FAIL = '[Multi Cart] Add Email Fail';
    /** @type {?} */
    var ADD_EMAIL_TO_MULTI_CART_SUCCESS = '[Multi Cart] Add Email Success';
    /** @type {?} */
    var CART_PROCESSES_INCREMENT = '[Multi Cart] Cart Processes Increment';
    /** @type {?} */
    var CART_PROCESSES_DECREMENT = '[Multi Cart] Cart Processes Decrement';
    /**
     * To keep track of cart creation process we use cart with `temp-${uuid}` id.
     * After creating cart we switch to entity with `code` or `guid`.
     * We need `temp-${uuid}` cart entities for loading/error state.
     */
    var /**
     * To keep track of cart creation process we use cart with `temp-${uuid}` id.
     * After creating cart we switch to entity with `code` or `guid`.
     * We need `temp-${uuid}` cart entities for loading/error state.
     */
    RemoveTempCart = /** @class */ (function (_super) {
        __extends(RemoveTempCart, _super);
        function RemoveTempCart(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.tempCartId) || this;
            _this.payload = payload;
            _this.type = REMOVE_TEMP_CART;
            return _this;
        }
        return RemoveTempCart;
    }(EntityRemoveAction));
    if (false) {
        /** @type {?} */
        RemoveTempCart.prototype.type;
        /** @type {?} */
        RemoveTempCart.prototype.payload;
    }
    var SetTempCart = /** @class */ (function (_super) {
        __extends(SetTempCart, _super);
        function SetTempCart(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.tempCartId, payload.cart) || this;
            _this.payload = payload;
            _this.type = SET_TEMP_CART;
            return _this;
        }
        return SetTempCart;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        SetTempCart.prototype.type;
        /** @type {?} */
        SetTempCart.prototype.payload;
    }
    var CreateMultiCart = /** @class */ (function (_super) {
        __extends(CreateMultiCart, _super);
        function CreateMultiCart(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.tempCartId) || this;
            _this.payload = payload;
            _this.type = CREATE_MULTI_CART;
            return _this;
        }
        return CreateMultiCart;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        CreateMultiCart.prototype.type;
        /** @type {?} */
        CreateMultiCart.prototype.payload;
    }
    var CreateMultiCartFail = /** @class */ (function (_super) {
        __extends(CreateMultiCartFail, _super);
        function CreateMultiCartFail(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.tempCartId) || this;
            _this.payload = payload;
            _this.type = CREATE_MULTI_CART_FAIL;
            return _this;
        }
        return CreateMultiCartFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        CreateMultiCartFail.prototype.type;
        /** @type {?} */
        CreateMultiCartFail.prototype.payload;
    }
    var CreateMultiCartSuccess = /** @class */ (function (_super) {
        __extends(CreateMultiCartSuccess, _super);
        function CreateMultiCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, getCartIdByUserId(payload.cart, payload.userId)) || this;
            _this.payload = payload;
            _this.type = CREATE_MULTI_CART_SUCCESS;
            return _this;
        }
        return CreateMultiCartSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        CreateMultiCartSuccess.prototype.type;
        /** @type {?} */
        CreateMultiCartSuccess.prototype.payload;
    }
    var LoadMultiCart = /** @class */ (function (_super) {
        __extends(LoadMultiCart, _super);
        function LoadMultiCart(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.cartId) || this;
            _this.payload = payload;
            _this.type = LOAD_MULTI_CART;
            return _this;
        }
        return LoadMultiCart;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        LoadMultiCart.prototype.type;
        /** @type {?} */
        LoadMultiCart.prototype.payload;
    }
    var LoadMultiCartFail = /** @class */ (function (_super) {
        __extends(LoadMultiCartFail, _super);
        function LoadMultiCartFail(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.cartId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_MULTI_CART_FAIL;
            return _this;
        }
        return LoadMultiCartFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        LoadMultiCartFail.prototype.type;
        /** @type {?} */
        LoadMultiCartFail.prototype.payload;
    }
    var LoadMultiCartSuccess = /** @class */ (function (_super) {
        __extends(LoadMultiCartSuccess, _super);
        function LoadMultiCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, getCartIdByUserId(payload.cart, payload.userId)) || this;
            _this.payload = payload;
            _this.type = LOAD_MULTI_CART_SUCCESS;
            return _this;
        }
        return LoadMultiCartSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        LoadMultiCartSuccess.prototype.type;
        /** @type {?} */
        LoadMultiCartSuccess.prototype.payload;
    }
    var MergeMultiCart = /** @class */ (function () {
        function MergeMultiCart(payload) {
            this.payload = payload;
            this.type = MERGE_MULTI_CART;
        }
        return MergeMultiCart;
    }());
    if (false) {
        /** @type {?} */
        MergeMultiCart.prototype.type;
        /** @type {?} */
        MergeMultiCart.prototype.payload;
    }
    var MergeMultiCartSuccess = /** @class */ (function (_super) {
        __extends(MergeMultiCartSuccess, _super);
        function MergeMultiCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.oldCartId) || this;
            _this.payload = payload;
            _this.type = MERGE_MULTI_CART_SUCCESS;
            return _this;
        }
        return MergeMultiCartSuccess;
    }(EntityRemoveAction));
    if (false) {
        /** @type {?} */
        MergeMultiCartSuccess.prototype.type;
        /** @type {?} */
        MergeMultiCartSuccess.prototype.payload;
    }
    var ResetMultiCartDetails = /** @class */ (function (_super) {
        __extends(ResetMultiCartDetails, _super);
        function ResetMultiCartDetails() {
            var _this = _super.call(this, MULTI_CART_FEATURE, undefined) || this;
            _this.type = RESET_MULTI_CART_DETAILS;
            return _this;
        }
        return ResetMultiCartDetails;
    }(EntityProcessesLoaderResetAction));
    if (false) {
        /** @type {?} */
        ResetMultiCartDetails.prototype.type;
    }
    var RemoveCart = /** @class */ (function (_super) {
        __extends(RemoveCart, _super);
        function RemoveCart(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload) || this;
            _this.payload = payload;
            _this.type = REMOVE_CART;
            return _this;
        }
        return RemoveCart;
    }(EntityRemoveAction));
    if (false) {
        /** @type {?} */
        RemoveCart.prototype.type;
        /** @type {?} */
        RemoveCart.prototype.payload;
    }
    var AddEmailToMultiCart = /** @class */ (function (_super) {
        __extends(AddEmailToMultiCart, _super);
        function AddEmailToMultiCart(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.cartId) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_MULTI_CART;
            return _this;
        }
        return AddEmailToMultiCart;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        AddEmailToMultiCart.prototype.type;
        /** @type {?} */
        AddEmailToMultiCart.prototype.payload;
    }
    var AddEmailToMultiCartFail = /** @class */ (function (_super) {
        __extends(AddEmailToMultiCartFail, _super);
        function AddEmailToMultiCartFail(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.cartId, payload.error) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_MULTI_CART_FAIL;
            return _this;
        }
        return AddEmailToMultiCartFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        AddEmailToMultiCartFail.prototype.type;
        /** @type {?} */
        AddEmailToMultiCartFail.prototype.payload;
    }
    var AddEmailToMultiCartSuccess = /** @class */ (function (_super) {
        __extends(AddEmailToMultiCartSuccess, _super);
        function AddEmailToMultiCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.cartId) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_MULTI_CART_SUCCESS;
            return _this;
        }
        return AddEmailToMultiCartSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        AddEmailToMultiCartSuccess.prototype.type;
        /** @type {?} */
        AddEmailToMultiCartSuccess.prototype.payload;
    }
    var CartProcessesIncrement = /** @class */ (function (_super) {
        __extends(CartProcessesIncrement, _super);
        function CartProcessesIncrement(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload) || this;
            _this.payload = payload;
            _this.type = CART_PROCESSES_INCREMENT;
            return _this;
        }
        return CartProcessesIncrement;
    }(EntityProcessesIncrementAction));
    if (false) {
        /** @type {?} */
        CartProcessesIncrement.prototype.type;
        /** @type {?} */
        CartProcessesIncrement.prototype.payload;
    }
    var CartProcessesDecrement = /** @class */ (function (_super) {
        __extends(CartProcessesDecrement, _super);
        function CartProcessesDecrement(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload) || this;
            _this.payload = payload;
            _this.type = CART_PROCESSES_DECREMENT;
            return _this;
        }
        return CartProcessesDecrement;
    }(EntityProcessesDecrementAction));
    if (false) {
        /** @type {?} */
        CartProcessesDecrement.prototype.type;
        /** @type {?} */
        CartProcessesDecrement.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CREATE_WISH_LIST = '[Wish List] Create Wish List';
    /** @type {?} */
    var CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';
    /** @type {?} */
    var CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';
    /** @type {?} */
    var LOAD_WISH_LIST = '[Wish List] Load Wish List';
    /** @type {?} */
    var LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';
    /** @type {?} */
    var RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';
    var CreateWishList = /** @class */ (function () {
        function CreateWishList(payload) {
            this.payload = payload;
            this.type = CREATE_WISH_LIST;
        }
        return CreateWishList;
    }());
    if (false) {
        /** @type {?} */
        CreateWishList.prototype.type;
        /** @type {?} */
        CreateWishList.prototype.payload;
    }
    var CreateWishListSuccess = /** @class */ (function (_super) {
        __extends(CreateWishListSuccess, _super);
        function CreateWishListSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, getCartIdByUserId(payload.cart, payload.userId)) || this;
            _this.payload = payload;
            _this.type = CREATE_WISH_LIST_SUCCESS;
            return _this;
        }
        return CreateWishListSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        CreateWishListSuccess.prototype.type;
        /** @type {?} */
        CreateWishListSuccess.prototype.payload;
    }
    var CreateWishListFail = /** @class */ (function (_super) {
        __extends(CreateWishListFail, _super);
        function CreateWishListFail(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, payload.cartId, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_WISH_LIST_FAIL;
            return _this;
        }
        return CreateWishListFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        CreateWishListFail.prototype.type;
        /** @type {?} */
        CreateWishListFail.prototype.payload;
    }
    var LoadWishList = /** @class */ (function () {
        function LoadWishList(payload) {
            this.payload = payload;
            this.type = LOAD_WISH_LIST;
        }
        return LoadWishList;
    }());
    if (false) {
        /** @type {?} */
        LoadWishList.prototype.type;
        /** @type {?} */
        LoadWishList.prototype.payload;
    }
    var LoadWishListSuccess = /** @class */ (function (_super) {
        __extends(LoadWishListSuccess, _super);
        function LoadWishListSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_FEATURE, getCartIdByUserId(payload.cart, payload.userId)) || this;
            _this.payload = payload;
            _this.type = LOAD_WISH_LIST_SUCCESS;
            return _this;
        }
        return LoadWishListSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        LoadWishListSuccess.prototype.type;
        /** @type {?} */
        LoadWishListSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var cartGroup_actions = /*#__PURE__*/Object.freeze({
        CART_ADD_ENTRY: CART_ADD_ENTRY,
        CART_ADD_ENTRY_SUCCESS: CART_ADD_ENTRY_SUCCESS,
        CART_ADD_ENTRY_FAIL: CART_ADD_ENTRY_FAIL,
        CART_REMOVE_ENTRY: CART_REMOVE_ENTRY,
        CART_REMOVE_ENTRY_SUCCESS: CART_REMOVE_ENTRY_SUCCESS,
        CART_REMOVE_ENTRY_FAIL: CART_REMOVE_ENTRY_FAIL,
        CART_UPDATE_ENTRY: CART_UPDATE_ENTRY,
        CART_UPDATE_ENTRY_SUCCESS: CART_UPDATE_ENTRY_SUCCESS,
        CART_UPDATE_ENTRY_FAIL: CART_UPDATE_ENTRY_FAIL,
        CartAddEntry: CartAddEntry,
        CartAddEntrySuccess: CartAddEntrySuccess,
        CartAddEntryFail: CartAddEntryFail,
        CartRemoveEntry: CartRemoveEntry,
        CartRemoveEntrySuccess: CartRemoveEntrySuccess,
        CartRemoveEntryFail: CartRemoveEntryFail,
        CartUpdateEntry: CartUpdateEntry,
        CartUpdateEntrySuccess: CartUpdateEntrySuccess,
        CartUpdateEntryFail: CartUpdateEntryFail,
        CART_ADD_VOUCHER: CART_ADD_VOUCHER,
        CART_ADD_VOUCHER_FAIL: CART_ADD_VOUCHER_FAIL,
        CART_ADD_VOUCHER_SUCCESS: CART_ADD_VOUCHER_SUCCESS,
        CART_RESET_ADD_VOUCHER: CART_RESET_ADD_VOUCHER,
        CART_REMOVE_VOUCHER: CART_REMOVE_VOUCHER,
        CART_REMOVE_VOUCHER_FAIL: CART_REMOVE_VOUCHER_FAIL,
        CART_REMOVE_VOUCHER_SUCCESS: CART_REMOVE_VOUCHER_SUCCESS,
        CartAddVoucher: CartAddVoucher,
        CartAddVoucherFail: CartAddVoucherFail,
        CartAddVoucherSuccess: CartAddVoucherSuccess,
        CartResetAddVoucher: CartResetAddVoucher,
        CartRemoveVoucher: CartRemoveVoucher,
        CartRemoveVoucherFail: CartRemoveVoucherFail,
        CartRemoveVoucherSuccess: CartRemoveVoucherSuccess,
        CREATE_CART: CREATE_CART,
        CREATE_CART_FAIL: CREATE_CART_FAIL,
        CREATE_CART_SUCCESS: CREATE_CART_SUCCESS,
        LOAD_CART: LOAD_CART,
        LOAD_CART_FAIL: LOAD_CART_FAIL,
        LOAD_CART_SUCCESS: LOAD_CART_SUCCESS,
        ADD_EMAIL_TO_CART: ADD_EMAIL_TO_CART,
        ADD_EMAIL_TO_CART_FAIL: ADD_EMAIL_TO_CART_FAIL,
        ADD_EMAIL_TO_CART_SUCCESS: ADD_EMAIL_TO_CART_SUCCESS,
        MERGE_CART: MERGE_CART,
        MERGE_CART_SUCCESS: MERGE_CART_SUCCESS,
        RESET_CART_DETAILS: RESET_CART_DETAILS,
        CLEAR_EXPIRED_COUPONS: CLEAR_EXPIRED_COUPONS,
        CLEAR_CART: CLEAR_CART,
        DELETE_CART: DELETE_CART,
        DELETE_CART_FAIL: DELETE_CART_FAIL,
        CreateCart: CreateCart,
        CreateCartFail: CreateCartFail,
        CreateCartSuccess: CreateCartSuccess,
        AddEmailToCart: AddEmailToCart,
        AddEmailToCartFail: AddEmailToCartFail,
        AddEmailToCartSuccess: AddEmailToCartSuccess,
        LoadCart: LoadCart,
        LoadCartFail: LoadCartFail,
        LoadCartSuccess: LoadCartSuccess,
        MergeCart: MergeCart,
        MergeCartSuccess: MergeCartSuccess,
        ResetCartDetails: ResetCartDetails,
        ClearExpiredCoupons: ClearExpiredCoupons,
        ClearCart: ClearCart,
        DeleteCart: DeleteCart,
        DeleteCartFail: DeleteCartFail,
        REMOVE_TEMP_CART: REMOVE_TEMP_CART,
        CREATE_MULTI_CART: CREATE_MULTI_CART,
        CREATE_MULTI_CART_FAIL: CREATE_MULTI_CART_FAIL,
        CREATE_MULTI_CART_SUCCESS: CREATE_MULTI_CART_SUCCESS,
        LOAD_MULTI_CART: LOAD_MULTI_CART,
        LOAD_MULTI_CART_FAIL: LOAD_MULTI_CART_FAIL,
        LOAD_MULTI_CART_SUCCESS: LOAD_MULTI_CART_SUCCESS,
        MERGE_MULTI_CART: MERGE_MULTI_CART,
        MERGE_MULTI_CART_SUCCESS: MERGE_MULTI_CART_SUCCESS,
        RESET_MULTI_CART_DETAILS: RESET_MULTI_CART_DETAILS,
        SET_TEMP_CART: SET_TEMP_CART,
        REMOVE_CART: REMOVE_CART,
        ADD_EMAIL_TO_MULTI_CART: ADD_EMAIL_TO_MULTI_CART,
        ADD_EMAIL_TO_MULTI_CART_FAIL: ADD_EMAIL_TO_MULTI_CART_FAIL,
        ADD_EMAIL_TO_MULTI_CART_SUCCESS: ADD_EMAIL_TO_MULTI_CART_SUCCESS,
        CART_PROCESSES_INCREMENT: CART_PROCESSES_INCREMENT,
        CART_PROCESSES_DECREMENT: CART_PROCESSES_DECREMENT,
        RemoveTempCart: RemoveTempCart,
        SetTempCart: SetTempCart,
        CreateMultiCart: CreateMultiCart,
        CreateMultiCartFail: CreateMultiCartFail,
        CreateMultiCartSuccess: CreateMultiCartSuccess,
        LoadMultiCart: LoadMultiCart,
        LoadMultiCartFail: LoadMultiCartFail,
        LoadMultiCartSuccess: LoadMultiCartSuccess,
        MergeMultiCart: MergeMultiCart,
        MergeMultiCartSuccess: MergeMultiCartSuccess,
        ResetMultiCartDetails: ResetMultiCartDetails,
        RemoveCart: RemoveCart,
        AddEmailToMultiCart: AddEmailToMultiCart,
        AddEmailToMultiCartFail: AddEmailToMultiCartFail,
        AddEmailToMultiCartSuccess: AddEmailToMultiCartSuccess,
        CartProcessesIncrement: CartProcessesIncrement,
        CartProcessesDecrement: CartProcessesDecrement,
        CREATE_WISH_LIST: CREATE_WISH_LIST,
        CREATE_WISH_LIST_FAIL: CREATE_WISH_LIST_FAIL,
        CREATE_WISH_LIST_SUCCESS: CREATE_WISH_LIST_SUCCESS,
        LOAD_WISH_LIST: LOAD_WISH_LIST,
        LOAD_WISH_LIST_SUCCESS: LOAD_WISH_LIST_SUCCESS,
        RESET_WISH_LIST_DETAILS: RESET_WISH_LIST_DETAILS,
        CreateWishList: CreateWishList,
        CreateWishListSuccess: CreateWishListSuccess,
        CreateWishListFail: CreateWishListFail,
        LoadWishList: LoadWishList,
        LoadWishListSuccess: LoadWishListSuccess
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MultiCartService = /** @class */ (function () {
        function MultiCartService(store) {
            this.store = store;
        }
        /**
         * Returns cart from store as an observable
         *
         * @param cartId
         */
        /**
         * Returns cart from store as an observable
         *
         * @param {?} cartId
         * @return {?}
         */
        MultiCartService.prototype.getCart = /**
         * Returns cart from store as an observable
         *
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            return this.store.pipe(store.select(getCartSelectorFactory(cartId)));
        };
        /**
         * Returns cart entity from store (cart with loading, error, success flags) as an observable
         *
         * @param cartId
         */
        /**
         * Returns cart entity from store (cart with loading, error, success flags) as an observable
         *
         * @param {?} cartId
         * @return {?}
         */
        MultiCartService.prototype.getCartEntity = /**
         * Returns cart entity from store (cart with loading, error, success flags) as an observable
         *
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            return this.store.pipe(store.select(getCartEntitySelectorFactory(cartId)));
        };
        /**
         * Returns true when there are no operations on that in progress and it is not currently loading
         *
         * @param cartId
         */
        /**
         * Returns true when there are no operations on that in progress and it is not currently loading
         *
         * @param {?} cartId
         * @return {?}
         */
        MultiCartService.prototype.isStable = /**
         * Returns true when there are no operations on that in progress and it is not currently loading
         *
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            return this.store.pipe(store.select(getCartIsStableSelectorFactory(cartId)), 
            // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.
            // This flickering should only be avoided when switching from false to true
            // Start of loading should be showed instantly (no debounce)
            // Extra actions are only dispatched after some loading
            operators.debounce((/**
             * @param {?} isStable
             * @return {?}
             */
            function (isStable) { return (isStable ? rxjs.timer(0) : rxjs.EMPTY); })), operators.distinctUntilChanged());
        };
        /**
         * Simple random temp cart id generator
         */
        /**
         * Simple random temp cart id generator
         * @private
         * @return {?}
         */
        MultiCartService.prototype.generateTempCartId = /**
         * Simple random temp cart id generator
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var pseudoUuid = Math.random()
                .toString(36)
                .substr(2, 9);
            return "temp-" + pseudoUuid;
        };
        /**
         * Create or merge cart
         *
         * @param params Object with userId, oldCartId, toMergeCartGuid and extraData
         */
        /**
         * Create or merge cart
         *
         * @param {?} __0
         * @return {?}
         */
        MultiCartService.prototype.createCart = /**
         * Create or merge cart
         *
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var userId = _a.userId, oldCartId = _a.oldCartId, toMergeCartGuid = _a.toMergeCartGuid, extraData = _a.extraData;
            // to support creating multiple carts at the same time we need to use different entity for every process
            // simple random uuid generator is used here for entity names
            /** @type {?} */
            var tempCartId = this.generateTempCartId();
            this.store.dispatch(new CreateCart({
                extraData: extraData,
                userId: userId,
                oldCartId: oldCartId,
                toMergeCartGuid: toMergeCartGuid,
                tempCartId: tempCartId,
            }));
            return this.getCartEntity(tempCartId);
        };
        /**
         * Merge provided cart to current user cart
         *
         * @param params Object with userId, cartId and extraData
         */
        /**
         * Merge provided cart to current user cart
         *
         * @param {?} __0
         * @return {?}
         */
        MultiCartService.prototype.mergeToCurrentCart = /**
         * Merge provided cart to current user cart
         *
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var userId = _a.userId, cartId = _a.cartId, extraData = _a.extraData;
            /** @type {?} */
            var tempCartId = this.generateTempCartId();
            this.store.dispatch(new MergeCart({
                userId: userId,
                cartId: cartId,
                extraData: extraData,
                tempCartId: tempCartId,
            }));
        };
        /**
         * Load cart
         *
         * @param params Object with userId, cartId and extraData
         */
        /**
         * Load cart
         *
         * @param {?} __0
         * @return {?}
         */
        MultiCartService.prototype.loadCart = /**
         * Load cart
         *
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var cartId = _a.cartId, userId = _a.userId, extraData = _a.extraData;
            this.store.dispatch(new LoadCart({
                userId: userId,
                cartId: cartId,
                extraData: extraData,
            }));
        };
        /**
         * Get cart entries as an observable
         * @param cartId
         */
        /**
         * Get cart entries as an observable
         * @param {?} cartId
         * @return {?}
         */
        MultiCartService.prototype.getEntries = /**
         * Get cart entries as an observable
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            return this.store.pipe(store.select(getCartEntriesSelectorFactory(cartId)));
        };
        /**
         * Add entry to cart
         *
         * @param userId
         * @param cartId
         * @param productCode
         * @param quantity
         */
        /**
         * Add entry to cart
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        MultiCartService.prototype.addEntry = /**
         * Add entry to cart
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        function (userId, cartId, productCode, quantity) {
            this.store.dispatch(new CartAddEntry({
                userId: userId,
                cartId: cartId,
                productCode: productCode,
                quantity: quantity,
            }));
        };
        /**
         * Add multiple entries to cart
         *
         * @param userId
         * @param cartId
         * @param products Array with items (productCode and quantity)
         */
        /**
         * Add multiple entries to cart
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} products Array with items (productCode and quantity)
         * @return {?}
         */
        MultiCartService.prototype.addEntries = /**
         * Add multiple entries to cart
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} products Array with items (productCode and quantity)
         * @return {?}
         */
        function (userId, cartId, products) {
            var _this = this;
            products.forEach((/**
             * @param {?} product
             * @return {?}
             */
            function (product) {
                _this.store.dispatch(new CartAddEntry({
                    userId: userId,
                    cartId: cartId,
                    productCode: product.productCode,
                    quantity: product.quantity,
                }));
            }));
        };
        /**
         * Remove entry from cart
         *
         * @param userId
         * @param cartId
         * @param entryNumber
         */
        /**
         * Remove entry from cart
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        MultiCartService.prototype.removeEntry = /**
         * Remove entry from cart
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        function (userId, cartId, entryNumber) {
            this.store.dispatch(new CartRemoveEntry({
                userId: userId,
                cartId: cartId,
                entry: entryNumber,
            }));
        };
        /**
         * Update entry in cart. For quantity = 0 it removes entry
         *
         * @param userId
         * @param cartId
         * @param entryNumber
         * @param quantity
         */
        /**
         * Update entry in cart. For quantity = 0 it removes entry
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        MultiCartService.prototype.updateEntry = /**
         * Update entry in cart. For quantity = 0 it removes entry
         *
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        function (userId, cartId, entryNumber, quantity) {
            if (quantity > 0) {
                this.store.dispatch(new CartUpdateEntry({
                    userId: userId,
                    cartId: cartId,
                    entry: entryNumber,
                    qty: quantity,
                }));
            }
            else {
                this.removeEntry(userId, cartId, entryNumber);
            }
        };
        /**
         * Get specific entry from cart
         *
         * @param cartId
         * @param productCode
         */
        /**
         * Get specific entry from cart
         *
         * @param {?} cartId
         * @param {?} productCode
         * @return {?}
         */
        MultiCartService.prototype.getEntry = /**
         * Get specific entry from cart
         *
         * @param {?} cartId
         * @param {?} productCode
         * @return {?}
         */
        function (cartId, productCode) {
            return this.store.pipe(store.select(getCartEntrySelectorFactory$1(cartId, productCode)));
        };
        /**
         * Assign email to the cart
         *
         * @param cartId
         * @param userId
         * @param email
         */
        /**
         * Assign email to the cart
         *
         * @param {?} cartId
         * @param {?} userId
         * @param {?} email
         * @return {?}
         */
        MultiCartService.prototype.assignEmail = /**
         * Assign email to the cart
         *
         * @param {?} cartId
         * @param {?} userId
         * @param {?} email
         * @return {?}
         */
        function (cartId, userId, email) {
            this.store.dispatch(new AddEmailToCart({
                userId: userId,
                cartId: cartId,
                email: email,
            }));
        };
        /**
         * Delete cart
         *
         * @param cartId
         * @param userId
         */
        /**
         * Delete cart
         *
         * @param {?} cartId
         * @param {?} userId
         * @return {?}
         */
        MultiCartService.prototype.deleteCart = /**
         * Delete cart
         *
         * @param {?} cartId
         * @param {?} userId
         * @return {?}
         */
        function (cartId, userId) {
            this.store.dispatch(new DeleteCart({
                userId: userId,
                cartId: cartId,
            }));
        };
        MultiCartService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        MultiCartService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        return MultiCartService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        MultiCartService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ActiveCartService = /** @class */ (function () {
        function ActiveCartService(store$1, authService, multiCartService) {
            var _this = this;
            this.store = store$1;
            this.authService = authService;
            this.multiCartService = multiCartService;
            this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
            this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
            this.userId = OCC_USER_ID_ANONYMOUS;
            this.activeCartId$ = this.store.pipe(store.select(getActiveCartId), operators.map((/**
             * @param {?} cartId
             * @return {?}
             */
            function (cartId) {
                if (!cartId) {
                    return OCC_CART_ID_CURRENT;
                }
                return cartId;
            })));
            this.cartSelector$ = this.activeCartId$.pipe(operators.switchMap((/**
             * @param {?} cartId
             * @return {?}
             */
            function (cartId) { return _this.multiCartService.getCartEntity(cartId); })));
            this.authService.getOccUserId().subscribe((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                _this.userId = userId;
                if (_this.userId !== OCC_USER_ID_ANONYMOUS) {
                    if (_this.isJustLoggedIn(userId)) {
                        _this.loadOrMerge(_this.cartId);
                    }
                }
                _this.previousUserId = userId;
            }));
            this.activeCartId$.subscribe((/**
             * @param {?} cartId
             * @return {?}
             */
            function (cartId) {
                _this.cartId = cartId;
            }));
            this.initActiveCart();
        }
        /**
         * @private
         * @return {?}
         */
        ActiveCartService.prototype.initActiveCart = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.activeCart$ = this.cartSelector$.pipe(operators.withLatestFrom(this.activeCartId$), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), cartEntity = _b[0], activeCartId = _b[1];
                return {
                    cart: cartEntity.value,
                    cartId: activeCartId,
                    isStable: !cartEntity.loading && cartEntity.processesCount === 0,
                    loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
                };
            })), 
            // we want to emit empty carts even if those are not stable
            // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete
            // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart
            operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var isStable = _a.isStable, cart = _a.cart;
                return isStable || _this.isEmpty(cart);
            })), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var cart = _a.cart, cartId = _a.cartId, loaded = _a.loaded, isStable = _a.isStable;
                if (isStable &&
                    _this.isEmpty(cart) &&
                    !loaded &&
                    !isTempCartId(cartId)) {
                    _this.load(cartId);
                }
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var cart = _a.cart;
                return (cart ? cart : {});
            })), operators.tap((/**
             * @param {?} cart
             * @return {?}
             */
            function (cart) {
                if (cart) {
                    _this.cartUser = cart.user;
                }
            })), operators.distinctUntilChanged(), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Returns active cart
         */
        /**
         * Returns active cart
         * @return {?}
         */
        ActiveCartService.prototype.getActive = /**
         * Returns active cart
         * @return {?}
         */
        function () {
            return this.activeCart$;
        };
        /**
         * Returns active cart id
         */
        /**
         * Returns active cart id
         * @return {?}
         */
        ActiveCartService.prototype.getActiveCartId = /**
         * Returns active cart id
         * @return {?}
         */
        function () {
            var _this = this;
            return this.activeCart$.pipe(operators.map((/**
             * @param {?} cart
             * @return {?}
             */
            function (cart) { return getCartIdByUserId(cart, _this.userId); })), operators.distinctUntilChanged());
        };
        /**
         * Returns cart entries
         */
        /**
         * Returns cart entries
         * @return {?}
         */
        ActiveCartService.prototype.getEntries = /**
         * Returns cart entries
         * @return {?}
         */
        function () {
            var _this = this;
            return this.activeCartId$.pipe(operators.switchMap((/**
             * @param {?} cartId
             * @return {?}
             */
            function (cartId) { return _this.multiCartService.getEntries(cartId); })), operators.distinctUntilChanged());
        };
        /**
         * Returns true when cart is stable (not loading and not pending processes on cart)
         */
        /**
         * Returns true when cart is stable (not loading and not pending processes on cart)
         * @return {?}
         */
        ActiveCartService.prototype.getLoaded = /**
         * Returns true when cart is stable (not loading and not pending processes on cart)
         * @return {?}
         */
        function () {
            var _this = this;
            // Debounce is used here, to avoid flickering when we switch between different cart entities.
            // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.
            // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.
            // At the end we finally switch to cart `code` for cart id. Between those switches cart `getLoaded` function should not flicker.
            return this.activeCartId$.pipe(operators.switchMap((/**
             * @param {?} cartId
             * @return {?}
             */
            function (cartId) { return _this.multiCartService.isStable(cartId); })), operators.debounce((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return (state ? rxjs.timer(0) : rxjs.EMPTY); })), operators.distinctUntilChanged());
        };
        /**
         * @private
         * @param {?} cartId
         * @return {?}
         */
        ActiveCartService.prototype.loadOrMerge = /**
         * @private
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            // for login user, whenever there's an existing cart, we will load the user
            // current cart and merge it into the existing cart
            if (!cartId || cartId === OCC_CART_ID_CURRENT) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: OCC_CART_ID_CURRENT,
                    extraData: {
                        active: true,
                    },
                });
            }
            else if (this.isGuestCart()) {
                this.guestCartMerge(cartId);
            }
            else {
                this.multiCartService.mergeToCurrentCart({
                    userId: this.userId,
                    cartId: cartId,
                    extraData: {
                        active: true,
                    },
                });
            }
        };
        /**
         * @private
         * @param {?} cartId
         * @return {?}
         */
        ActiveCartService.prototype.load = /**
         * @private
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            if (this.userId !== OCC_USER_ID_ANONYMOUS) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: cartId ? cartId : OCC_CART_ID_CURRENT,
                    extraData: {
                        active: true,
                    },
                });
            }
            else if (cartId && cartId !== OCC_CART_ID_CURRENT) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: cartId,
                    extraData: {
                        active: true,
                    },
                });
            }
        };
        /**
         * @private
         * @param {?} cartEntries
         * @return {?}
         */
        ActiveCartService.prototype.addEntriesGuestMerge = /**
         * @private
         * @param {?} cartEntries
         * @return {?}
         */
        function (cartEntries) {
            var _this = this;
            /** @type {?} */
            var entriesToAdd = cartEntries.map((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) { return ({
                productCode: entry.product.code,
                quantity: entry.quantity,
            }); }));
            this.requireLoadedCartForGuestMerge().subscribe((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                _this.multiCartService.addEntries(_this.userId, getCartIdByUserId(cartState.value, _this.userId), entriesToAdd);
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ActiveCartService.prototype.requireLoadedCartForGuestMerge = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            return this.requireLoadedCart(this.cartSelector$.pipe(operators.filter((/**
             * @return {?}
             */
            function () { return !_this.isGuestCart(); }))));
        };
        /**
         * @private
         * @param {?} cartState
         * @return {?}
         */
        ActiveCartService.prototype.isCartCreating = /**
         * @private
         * @param {?} cartState
         * @return {?}
         */
        function (cartState) {
            // cart creating is always represented with loading flags
            // when all loading flags are false it means that we restored wrong cart id
            // could happen on context change or reload right in the middle on cart create call
            return (isTempCartId(this.cartId) &&
                (cartState.loading || cartState.success || cartState.error));
        };
        /**
         * @private
         * @param {?=} customCartSelector$
         * @return {?}
         */
        ActiveCartService.prototype.requireLoadedCart = /**
         * @private
         * @param {?=} customCartSelector$
         * @return {?}
         */
        function (customCartSelector$) {
            var _this = this;
            // For guest cart merge we want to filter guest cart in the whole stream
            // We have to wait with load/create/addEntry after guest cart will be deleted.
            // That's why you can provide custom selector with this filter applied.
            /** @type {?} */
            var cartSelector$ = customCartSelector$
                ? customCartSelector$
                : this.cartSelector$;
            return cartSelector$.pipe(operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !cartState.loading; })), 
            // Avoid load/create call when there are new cart creating at the moment
            operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !_this.isCartCreating(cartState); })), operators.take(1), operators.switchMap((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                // Try to load the cart, because it might have been created on another device between our login and add entry call
                if (_this.isEmpty(cartState.value) &&
                    _this.userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.load(undefined);
                }
                return cartSelector$;
            })), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !cartState.loading; })), 
            // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty
            operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                return _this.userId === OCC_USER_ID_ANONYMOUS ||
                    cartState.success ||
                    cartState.error;
            })), operators.take(1), operators.switchMap((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                if (_this.isEmpty(cartState.value)) {
                    _this.multiCartService.createCart({
                        userId: _this.userId,
                        extraData: {
                            active: true,
                        },
                    });
                }
                return cartSelector$;
            })), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !cartState.loading; })), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return cartState.success || cartState.error; })), 
            // wait for active cart id to point to code/guid to avoid some work on temp cart entity
            operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !_this.isCartCreating(cartState); })), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !_this.isEmpty(cartState.value); })), operators.take(1));
        };
        /**
         * Add entry to active cart
         *
         * @param productCode
         * @param quantity
         */
        /**
         * Add entry to active cart
         *
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        ActiveCartService.prototype.addEntry = /**
         * Add entry to active cart
         *
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        function (productCode, quantity) {
            var _this = this;
            this.requireLoadedCart().subscribe((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                _this.multiCartService.addEntry(_this.userId, getCartIdByUserId(cartState.value, _this.userId), productCode, quantity);
            }));
        };
        /**
         * Remove entry
         *
         * @param entry
         */
        /**
         * Remove entry
         *
         * @param {?} entry
         * @return {?}
         */
        ActiveCartService.prototype.removeEntry = /**
         * Remove entry
         *
         * @param {?} entry
         * @return {?}
         */
        function (entry) {
            this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
        };
        /**
         * Update entry
         *
         * @param entryNumber
         * @param quantity
         */
        /**
         * Update entry
         *
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        ActiveCartService.prototype.updateEntry = /**
         * Update entry
         *
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        function (entryNumber, quantity) {
            this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
        };
        /**
         * Returns cart entry
         *
         * @param productCode
         */
        /**
         * Returns cart entry
         *
         * @param {?} productCode
         * @return {?}
         */
        ActiveCartService.prototype.getEntry = /**
         * Returns cart entry
         *
         * @param {?} productCode
         * @return {?}
         */
        function (productCode) {
            var _this = this;
            return this.activeCartId$.pipe(operators.switchMap((/**
             * @param {?} cartId
             * @return {?}
             */
            function (cartId) { return _this.multiCartService.getEntry(cartId, productCode); })), operators.distinctUntilChanged());
        };
        /**
         * Assign email to cart
         *
         * @param email
         */
        /**
         * Assign email to cart
         *
         * @param {?} email
         * @return {?}
         */
        ActiveCartService.prototype.addEmail = /**
         * Assign email to cart
         *
         * @param {?} email
         * @return {?}
         */
        function (email) {
            this.multiCartService.assignEmail(this.cartId, this.userId, email);
        };
        /**
         * Get assigned user to cart
         */
        /**
         * Get assigned user to cart
         * @return {?}
         */
        ActiveCartService.prototype.getAssignedUser = /**
         * Get assigned user to cart
         * @return {?}
         */
        function () {
            return this.getActive().pipe(operators.map((/**
             * @param {?} cart
             * @return {?}
             */
            function (cart) { return cart.user; })));
        };
        /**
         * Returns true for guest cart
         */
        /**
         * Returns true for guest cart
         * @return {?}
         */
        ActiveCartService.prototype.isGuestCart = /**
         * Returns true for guest cart
         * @return {?}
         */
        function () {
            return (this.cartUser &&
                (this.cartUser.name === OCC_USER_ID_GUEST ||
                    this.isEmail(this.cartUser.uid
                        .split('|')
                        .slice(1)
                        .join('|'))));
        };
        /**
         * Add multiple entries to a cart
         *
         * @param cartEntries : list of entries to add (OrderEntry[])
         */
        /**
         * Add multiple entries to a cart
         *
         * @param {?} cartEntries : list of entries to add (OrderEntry[])
         * @return {?}
         */
        ActiveCartService.prototype.addEntries = /**
         * Add multiple entries to a cart
         *
         * @param {?} cartEntries : list of entries to add (OrderEntry[])
         * @return {?}
         */
        function (cartEntries) {
            var _this = this;
            cartEntries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) {
                _this.addEntry(entry.product.code, entry.quantity);
            }));
        };
        /**
         * @private
         * @param {?} str
         * @return {?}
         */
        ActiveCartService.prototype.isEmail = /**
         * @private
         * @param {?} str
         * @return {?}
         */
        function (str) {
            if (str) {
                return str.match(EMAIL_PATTERN) ? true : false;
            }
            return false;
        };
        // TODO: Remove once backend is updated
        /**
         * Temporary method to merge guest cart with user cart because of backend limitation
         * This is for an edge case
         */
        // TODO: Remove once backend is updated
        /**
         * Temporary method to merge guest cart with user cart because of backend limitation
         * This is for an edge case
         * @private
         * @param {?} cartId
         * @return {?}
         */
        ActiveCartService.prototype.guestCartMerge = 
        // TODO: Remove once backend is updated
        /**
         * Temporary method to merge guest cart with user cart because of backend limitation
         * This is for an edge case
         * @private
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            /** @type {?} */
            var cartEntries;
            this.getEntries()
                .pipe(operators.take(1))
                .subscribe((/**
             * @param {?} entries
             * @return {?}
             */
            function (entries) {
                cartEntries = entries;
            }));
            this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);
            this.addEntriesGuestMerge(cartEntries);
        };
        /**
         * @private
         * @param {?} cart
         * @return {?}
         */
        ActiveCartService.prototype.isEmpty = /**
         * @private
         * @param {?} cart
         * @return {?}
         */
        function (cart) {
            return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
        };
        /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        ActiveCartService.prototype.isJustLoggedIn = /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return (this.previousUserId !== userId && // *just* logged in
                this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
            );
        };
        ActiveCartService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ActiveCartService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService },
            { type: MultiCartService }
        ]; };
        return ActiveCartService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.PREVIOUS_USER_ID_INITIAL_VALUE;
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.previousUserId;
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.activeCart$;
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.userId;
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.cartId;
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.cartUser;
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.activeCartId$;
        /**
         * @type {?}
         * @private
         */
        ActiveCartService.prototype.cartSelector$;
        /**
         * @type {?}
         * @protected
         */
        ActiveCartService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        ActiveCartService.prototype.authService;
        /**
         * @type {?}
         * @protected
         */
        ActiveCartService.prototype.multiCartService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * The MIT License
     * Copyright (c) 2010-2019 Google LLC. http://angular.io/license
     *
     * See:
     * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts
     * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17
     * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86
     */
    /** @type {?} */
    var QUESTION_MARK = '[^/]';
    /** @type {?} */
    var WILD_SINGLE = '[^/]*';
    /** @type {?} */
    var WILD_OPEN = '(?:.+\\/)?';
    /** @type {?} */
    var TO_ESCAPE_BASE = [
        { replace: /\./g, with: '\\.' },
        { replace: /\+/g, with: '\\+' },
        { replace: /\*/g, with: WILD_SINGLE },
    ];
    /** @type {?} */
    var TO_ESCAPE_WILDCARD_QM = __spread(TO_ESCAPE_BASE, [
        { replace: /\?/g, with: QUESTION_MARK },
    ]);
    /** @type {?} */
    var TO_ESCAPE_LITERAL_QM = __spread(TO_ESCAPE_BASE, [
        { replace: /\?/g, with: '\\?' },
    ]);
    /**
     * Converts the glob-like pattern into regex string.
     *
     * Patterns use a limited glob format:
     * `**` matches 0 or more path segments
     * `*` matches 0 or more characters excluding `/`
     * `?` matches exactly one character excluding `/` (but when \@param literalQuestionMark is true, `?` is treated as normal character)
     * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included
     *
     * @param {?} glob glob-like pattern
     * @param {?=} literalQuestionMark when true, it tells that `?` is treated as a normal character
     * @return {?}
     */
    function globToRegex(glob, literalQuestionMark) {
        if (literalQuestionMark === void 0) { literalQuestionMark = false; }
        /** @type {?} */
        var toEscape = literalQuestionMark
            ? TO_ESCAPE_LITERAL_QM
            : TO_ESCAPE_WILDCARD_QM;
        /** @type {?} */
        var segments = glob.split('/').reverse();
        /** @type {?} */
        var regex = '';
        while (segments.length > 0) {
            /** @type {?} */
            var segment = segments.pop();
            if (segment === '**') {
                if (segments.length > 0) {
                    regex += WILD_OPEN;
                }
                else {
                    regex += '.*';
                }
            }
            else {
                /** @type {?} */
                var processed = toEscape.reduce((/**
                 * @param {?} seg
                 * @param {?} escape
                 * @return {?}
                 */
                function (seg, escape) { return seg.replace(escape.replace, escape.with); }), segment);
                regex += processed;
                if (segments.length > 0) {
                    regex += '\\/';
                }
            }
        }
        return regex;
    }
    /**
     * For given list of glob-like patterns, returns a matcher function.
     *
     * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.
     * @param {?} patterns
     * @return {?}
     */
    function getGlobMatcher(patterns) {
        /** @type {?} */
        var processedPatterns = processGlobPatterns(patterns).map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var positive = _a.positive, regex = _a.regex;
            return ({
                positive: positive,
                regex: new RegExp(regex),
            });
        }));
        /** @type {?} */
        var includePatterns = processedPatterns.filter((/**
         * @param {?} spec
         * @return {?}
         */
        function (spec) { return spec.positive; }));
        /** @type {?} */
        var excludePatterns = processedPatterns.filter((/**
         * @param {?} spec
         * @return {?}
         */
        function (spec) { return !spec.positive; }));
        return (/**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return includePatterns.some((/**
             * @param {?} pattern
             * @return {?}
             */
            function (pattern) { return pattern.regex.test(url); })) &&
                !excludePatterns.some((/**
                 * @param {?} pattern
                 * @return {?}
                 */
                function (pattern) { return pattern.regex.test(url); }));
        });
    }
    /**
     * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative
     * @param {?} urls
     * @return {?}
     */
    function processGlobPatterns(urls) {
        return urls.map((/**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            /** @type {?} */
            var positive = !url.startsWith('!');
            url = positive ? url : url.substr(1);
            return { positive: positive, regex: "^" + globToRegex(url) + "$" };
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobService = /** @class */ (function () {
        function GlobService() {
        }
        /**
         * For given list of glob-like patterns, returns a validator function.
         *
         * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.
         */
        /**
         * For given list of glob-like patterns, returns a validator function.
         *
         * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.
         * @param {?} patterns
         * @return {?}
         */
        GlobService.prototype.getValidator = /**
         * For given list of glob-like patterns, returns a validator function.
         *
         * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.
         * @param {?} patterns
         * @return {?}
         */
        function (patterns) {
            /** @type {?} */
            var processedPatterns = processGlobPatterns(patterns).map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var positive = _a.positive, regex = _a.regex;
                return ({
                    positive: positive,
                    regex: new RegExp(regex),
                });
            }));
            /** @type {?} */
            var includePatterns = processedPatterns.filter((/**
             * @param {?} spec
             * @return {?}
             */
            function (spec) { return spec.positive; }));
            /** @type {?} */
            var excludePatterns = processedPatterns.filter((/**
             * @param {?} spec
             * @return {?}
             */
            function (spec) { return !spec.positive; }));
            return (/**
             * @param {?} url
             * @return {?}
             */
            function (url) {
                return includePatterns.some((/**
                 * @param {?} pattern
                 * @return {?}
                 */
                function (pattern) { return pattern.regex.test(url); })) &&
                    !excludePatterns.some((/**
                     * @param {?} pattern
                     * @return {?}
                     */
                    function (pattern) { return pattern.regex.test(url); }));
            });
        };
        GlobService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ GlobService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function GlobService_Factory() { return new GlobService(); }, token: GlobService, providedIn: "root" });
        return GlobService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.4
     * Replace particular methods usage with replacements from other services
     */
    var CartDataService = /** @class */ (function () {
        function CartDataService(store$1, authService) {
            var _this = this;
            this.store = store$1;
            this.authService = authService;
            this._userId = OCC_USER_ID_ANONYMOUS;
            this.authService
                .getUserToken()
                .pipe(operators.filter((/**
             * @param {?} userToken
             * @return {?}
             */
            function (userToken) { return _this.userId !== userToken.userId; })))
                .subscribe((/**
             * @param {?} userToken
             * @return {?}
             */
            function (userToken) {
                if (Object.keys(userToken).length !== 0) {
                    _this._userId = userToken.userId;
                }
                else {
                    _this._userId = OCC_USER_ID_ANONYMOUS;
                }
            }));
            this.store.pipe(store.select(getCartContent)).subscribe((/**
             * @param {?} cart
             * @return {?}
             */
            function (cart) {
                _this._cart = cart;
            }));
        }
        Object.defineProperty(CartDataService.prototype, "hasCart", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this._cart && Object.keys(this._cart).length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CartDataService.prototype, "userId", {
            /**
             * @deprecated since version 1.4
             * Use `getOccUserId` from `AuthService` instead
             */
            get: /**
             * @deprecated since version 1.4
             * Use `getOccUserId` from `AuthService` instead
             * @return {?}
             */
            function () {
                return this._userId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CartDataService.prototype, "cart", {
            /**
             * @deprecated since version 1.4
             * Use `getActive` from `ActiveCartService` instead
             */
            get: /**
             * @deprecated since version 1.4
             * Use `getActive` from `ActiveCartService` instead
             * @return {?}
             */
            function () {
                return this._cart;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CartDataService.prototype, "cartId", {
            /**
             * @deprecated since version 1.4
             * Use `getActiveCartId` from `ActiveCartService` instead
             */
            get: /**
             * @deprecated since version 1.4
             * Use `getActiveCartId` from `ActiveCartService` instead
             * @return {?}
             */
            function () {
                if (this.hasCart) {
                    return this.userId === OCC_USER_ID_ANONYMOUS
                        ? this.cart.guid
                        : this.cart.code;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CartDataService.prototype, "isGuestCart", {
            /**
             * @deprecated since version 1.4
             * Use `isGuestCart` from `ActiveCartService` instead
             */
            get: /**
             * @deprecated since version 1.4
             * Use `isGuestCart` from `ActiveCartService` instead
             * @return {?}
             */
            function () {
                return (this.cart.user &&
                    (this.cart.user.name === OCC_USER_ID_GUEST ||
                        this.isEmail(this.cart.user.uid
                            .split('|')
                            .slice(1)
                            .join('|'))));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} str
         * @return {?}
         */
        CartDataService.prototype.isEmail = /**
         * @private
         * @param {?} str
         * @return {?}
         */
        function (str) {
            if (str) {
                return str.match(EMAIL_PATTERN) ? true : false;
            }
            return false;
        };
        CartDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CartDataService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        return CartDataService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CartDataService.prototype._userId;
        /**
         * @type {?}
         * @private
         */
        CartDataService.prototype._cart;
        /**
         * @type {?}
         * @protected
         */
        CartDataService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        CartDataService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CartVoucherService = /** @class */ (function () {
        function CartVoucherService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * @param {?} voucherId
         * @param {?=} cartId
         * @return {?}
         */
        CartVoucherService.prototype.addVoucher = /**
         * @param {?} voucherId
         * @param {?=} cartId
         * @return {?}
         */
        function (voucherId, cartId) {
            var _this = this;
            this.combineUserAndCartId(cartId).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), occUserId = _b[0], cartIdentifier = _b[1];
                return _this.store.dispatch(new CartAddVoucher({
                    userId: occUserId,
                    cartId: cartIdentifier,
                    voucherId: voucherId,
                }));
            }));
        };
        /**
         * @param {?} voucherId
         * @param {?=} cartId
         * @return {?}
         */
        CartVoucherService.prototype.removeVoucher = /**
         * @param {?} voucherId
         * @param {?=} cartId
         * @return {?}
         */
        function (voucherId, cartId) {
            var _this = this;
            this.combineUserAndCartId(cartId).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), occUserId = _b[0], cartIdentifier = _b[1];
                return _this.store.dispatch(new CartRemoveVoucher({
                    userId: occUserId,
                    cartId: cartIdentifier,
                    voucherId: voucherId,
                }));
            }));
        };
        /**
         * @return {?}
         */
        CartVoucherService.prototype.getAddVoucherResultError = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID)));
        };
        /**
         * @return {?}
         */
        CartVoucherService.prototype.getAddVoucherResultSuccess = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID)));
        };
        /**
         * @return {?}
         */
        CartVoucherService.prototype.getAddVoucherResultLoading = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID)));
        };
        /**
         * @return {?}
         */
        CartVoucherService.prototype.resetAddVoucherProcessingState = /**
         * @return {?}
         */
        function () {
            this.store.dispatch(new CartResetAddVoucher());
        };
        /**
         * @private
         * @param {?} cartId
         * @return {?}
         */
        CartVoucherService.prototype.combineUserAndCartId = /**
         * @private
         * @param {?} cartId
         * @return {?}
         */
        function (cartId) {
            if (cartId) {
                return this.authService.getOccUserId().pipe(operators.take(1), operators.map((/**
                 * @param {?} userId
                 * @return {?}
                 */
                function (userId) { return [userId, cartId]; })));
            }
            else {
                return rxjs.combineLatest([
                    this.authService.getOccUserId(),
                    this.store.pipe(store.select(getCartContent), operators.map((/**
                     * @param {?} cart
                     * @return {?}
                     */
                    function (cart) { return cart; }))),
                ]).pipe(operators.take(1), operators.map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), userId = _b[0], cart = _b[1];
                    return [
                        userId,
                        userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code,
                    ];
                })));
            }
        };
        CartVoucherService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CartVoucherService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        return CartVoucherService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CartVoucherService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        CartVoucherService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.4
     * Use ActiveCartService instead (API is almost the same)
     * From 1.4 version CartService uses ActiveCartService if it is available
     * Fixes and improvements will be only implemented in ActiveCartService
     */
    var CartService = /** @class */ (function () {
        function CartService(store, cartData, authService, activeCartService) {
            var _this = this;
            this.store = store;
            this.cartData = cartData;
            this.authService = authService;
            this.activeCartService = activeCartService;
            this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
            this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
            this._activeCart$ = rxjs.combineLatest([
                this.store.select(getCartContent),
                this.store.select(getCartLoading),
                this.authService.getUserToken(),
                this.store.select(getCartLoaded),
            ]).pipe(
            // combineLatest emits multiple times on each property update instead of one emit
            // additionally dispatching actions that changes selectors used here needs to happen in order
            // for this asyncScheduler is used here
            operators.debounceTime(0), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), loading = _b[1];
                return !loading;
            })), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 4), cart = _b[0], userToken = _b[2], loaded = _b[3];
                if (_this.isJustLoggedIn(userToken.userId)) {
                    _this.loadOrMerge();
                }
                else if ((_this.isCreated(cart) && _this.isIncomplete(cart)) ||
                    (_this.isLoggedIn(userToken.userId) &&
                        !_this.isCreated(cart) &&
                        !loaded) // try to load current cart for logged in user (loaded flag to prevent infinite loop when user doesn't have cart)
                ) {
                    _this.load();
                }
                _this.previousUserId = userToken.userId;
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), cart = _b[0];
                return !_this.isCreated(cart) ||
                    (_this.isCreated(cart) && !_this.isIncomplete(cart));
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), cart = _b[0];
                return cart;
            })), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        /**
         * @return {?}
         */
        CartService.prototype.getActive = /**
         * @return {?}
         */
        function () {
            if (this.activeCartService) {
                return this.activeCartService.getActive();
            }
            return this._activeCart$;
        };
        /**
         * @return {?}
         */
        CartService.prototype.getEntries = /**
         * @return {?}
         */
        function () {
            if (this.activeCartService) {
                return this.activeCartService.getEntries();
            }
            return this.store.pipe(store.select(getCartEntries));
        };
        // TODO: to remove in 2.0
        // doesn't seem useful for end developers
        // there shouldn't be a need for such low level information
        // TODO: to remove in 2.0
        // doesn't seem useful for end developers
        // there shouldn't be a need for such low level information
        /**
         * @return {?}
         */
        CartService.prototype.getCartMergeComplete = 
        // TODO: to remove in 2.0
        // doesn't seem useful for end developers
        // there shouldn't be a need for such low level information
        /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getCartMergeComplete));
        };
        /**
         * @return {?}
         */
        CartService.prototype.getLoaded = /**
         * @return {?}
         */
        function () {
            if (this.activeCartService) {
                return this.activeCartService.getLoaded();
            }
            return this.store.pipe(store.select(getCartLoaded));
        };
        /**
         * @private
         * @return {?}
         */
        CartService.prototype.loadOrMerge = /**
         * @private
         * @return {?}
         */
        function () {
            // for login user, whenever there's an existing cart, we will load the user
            // current cart and merge it into the existing cart
            if (!this.isCreated(this.cartData.cart)) {
                this.store.dispatch(new LoadCart({
                    userId: this.cartData.userId,
                    cartId: OCC_CART_ID_CURRENT,
                }));
            }
            else if (this.isGuestCart()) {
                this.guestCartMerge();
            }
            else {
                this.store.dispatch(new MergeCart({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cart.guid,
                }));
            }
        };
        /**
         * @private
         * @return {?}
         */
        CartService.prototype.load = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.cartData.userId !== OCC_USER_ID_ANONYMOUS) {
                this.store.dispatch(new LoadCart({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId
                        ? this.cartData.cartId
                        : OCC_CART_ID_CURRENT,
                }));
            }
            else {
                this.store.dispatch(new LoadCart({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                }));
            }
        };
        /**
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        CartService.prototype.addEntry = /**
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        function (productCode, quantity) {
            var _this = this;
            if (this.activeCartService) {
                return this.activeCartService.addEntry(productCode, quantity);
            }
            this.store
                .pipe(store.select(getActiveCartState), operators.tap((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                if (!_this.isCreated(cartState.value.content) && !cartState.loading) {
                    _this.store.dispatch(new CreateCart({
                        userId: _this.cartData.userId,
                    }));
                }
            })), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return _this.isCreated(cartState.value.content); })), operators.take(1))
                .subscribe((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                _this.store.dispatch(new CartAddEntry({
                    userId: _this.cartData.userId,
                    cartId: _this.cartData.cartId,
                    productCode: productCode,
                    quantity: quantity,
                }));
            }));
        };
        /**
         * @param {?} entry
         * @return {?}
         */
        CartService.prototype.removeEntry = /**
         * @param {?} entry
         * @return {?}
         */
        function (entry) {
            if (this.activeCartService) {
                return this.activeCartService.removeEntry(entry);
            }
            this.store.dispatch(new CartRemoveEntry({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
                entry: entry.entryNumber,
            }));
        };
        /**
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        CartService.prototype.updateEntry = /**
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        function (entryNumber, quantity) {
            if (this.activeCartService) {
                return this.activeCartService.updateEntry(parseInt(entryNumber, 10), quantity);
            }
            if (quantity > 0) {
                this.store.dispatch(new CartUpdateEntry({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                    entry: entryNumber,
                    qty: quantity,
                }));
            }
            else {
                this.store.dispatch(new CartRemoveEntry({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                    entry: entryNumber,
                }));
            }
        };
        /**
         * @param {?} productCode
         * @return {?}
         */
        CartService.prototype.getEntry = /**
         * @param {?} productCode
         * @return {?}
         */
        function (productCode) {
            if (this.activeCartService) {
                return this.activeCartService.getEntry(productCode);
            }
            return this.store.pipe(store.select(getCartEntrySelectorFactory(productCode)));
        };
        /**
         * @param {?} email
         * @return {?}
         */
        CartService.prototype.addEmail = /**
         * @param {?} email
         * @return {?}
         */
        function (email) {
            if (this.activeCartService) {
                return this.activeCartService.addEmail(email);
            }
            this.store.dispatch(new AddEmailToCart({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
                email: email,
            }));
        };
        /**
         * @return {?}
         */
        CartService.prototype.getAssignedUser = /**
         * @return {?}
         */
        function () {
            if (this.activeCartService) {
                return this.activeCartService.getAssignedUser();
            }
            return this.store.pipe(store.select(getCartUser));
        };
        /**
         * @return {?}
         */
        CartService.prototype.isGuestCart = /**
         * @return {?}
         */
        function () {
            if (this.activeCartService) {
                return this.activeCartService.isGuestCart();
            }
            return this.cartData.isGuestCart;
        };
        /**
         * Add multiple entries to a cart
         * Requires a created cart
         * @param cartEntries : list of entries to add (OrderEntry[])
         */
        /**
         * Add multiple entries to a cart
         * Requires a created cart
         * @param {?} cartEntries : list of entries to add (OrderEntry[])
         * @return {?}
         */
        CartService.prototype.addEntries = /**
         * Add multiple entries to a cart
         * Requires a created cart
         * @param {?} cartEntries : list of entries to add (OrderEntry[])
         * @return {?}
         */
        function (cartEntries) {
            var _this = this;
            if (this.activeCartService) {
                return this.activeCartService.addEntries(cartEntries);
            }
            /** @type {?} */
            var newEntries = 0;
            this.getEntries()
                .pipe(operators.tap((/**
             * @return {?}
             */
            function () {
                // Keep adding entries until the user cart contains the same number of entries
                // as the guest cart did
                if (newEntries < cartEntries.length) {
                    _this.store.dispatch(new CartAddEntry({
                        userId: _this.cartData.userId,
                        cartId: _this.cartData.cartId,
                        productCode: cartEntries[newEntries].product.code,
                        quantity: cartEntries[newEntries].quantity,
                    }));
                    newEntries++;
                }
            })), operators.filter((/**
             * @return {?}
             */
            function () { return newEntries === cartEntries.length; })), operators.take(1))
                .subscribe();
        };
        /**
         * @private
         * @param {?} cart
         * @return {?}
         */
        CartService.prototype.isCreated = /**
         * @private
         * @param {?} cart
         * @return {?}
         */
        function (cart) {
            return cart && typeof cart.guid !== 'undefined';
        };
        /**
         * Cart is incomplete if it contains only `guid`, `code` and `user` properties, which come from local storage.
         * To get cart content, we need to load cart from backend.
         */
        /**
         * Cart is incomplete if it contains only `guid`, `code` and `user` properties, which come from local storage.
         * To get cart content, we need to load cart from backend.
         * @private
         * @param {?} cart
         * @return {?}
         */
        CartService.prototype.isIncomplete = /**
         * Cart is incomplete if it contains only `guid`, `code` and `user` properties, which come from local storage.
         * To get cart content, we need to load cart from backend.
         * @private
         * @param {?} cart
         * @return {?}
         */
        function (cart) {
            return cart && Object.keys(cart).length <= 3;
        };
        /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        CartService.prototype.isJustLoggedIn = /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return (this.isLoggedIn(userId) &&
                this.previousUserId !== userId && // *just* logged in
                this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
            );
        };
        /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        CartService.prototype.isLoggedIn = /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return typeof userId !== 'undefined';
        };
        // TODO: Remove once backend is updated
        /**
         * Temporary method to merge guest cart with user cart because of backend limitation
         * This is for an edge case
         */
        // TODO: Remove once backend is updated
        /**
         * Temporary method to merge guest cart with user cart because of backend limitation
         * This is for an edge case
         * @private
         * @return {?}
         */
        CartService.prototype.guestCartMerge = 
        // TODO: Remove once backend is updated
        /**
         * Temporary method to merge guest cart with user cart because of backend limitation
         * This is for an edge case
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var cartEntries;
            this.getEntries()
                .pipe(operators.take(1))
                .subscribe((/**
             * @param {?} entries
             * @return {?}
             */
            function (entries) {
                cartEntries = entries;
            }));
            this.store.dispatch(new DeleteCart({
                userId: OCC_USER_ID_ANONYMOUS,
                cartId: this.cartData.cart.guid,
            }));
            this.store
                .pipe(store.select(getActiveCartState), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !cartState.loading; })), operators.tap((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                // If the cart is not created it needs to be created
                // This step should happen before adding entries to avoid conflicts in the requests
                if (!_this.isCreated(cartState.value.content)) {
                    _this.store.dispatch(new CreateCart({
                        userId: _this.cartData.userId,
                    }));
                }
            })), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return _this.isCreated(cartState.value.content); })), operators.take(1))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.addEntries(cartEntries);
            }));
        };
        /**
         * @param {?} voucherId
         * @return {?}
         */
        CartService.prototype.addVoucher = /**
         * @param {?} voucherId
         * @return {?}
         */
        function (voucherId) {
            this.store.dispatch(new CartAddVoucher({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
                voucherId: voucherId,
            }));
        };
        CartService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CartService.ctorParameters = function () { return [
            { type: store.Store },
            { type: CartDataService },
            { type: AuthService },
            { type: ActiveCartService }
        ]; };
        return CartService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CartService.prototype.PREVIOUS_USER_ID_INITIAL_VALUE;
        /**
         * @type {?}
         * @private
         */
        CartService.prototype.previousUserId;
        /**
         * @type {?}
         * @private
         */
        CartService.prototype._activeCart$;
        /**
         * @type {?}
         * @protected
         */
        CartService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        CartService.prototype.cartData;
        /**
         * @type {?}
         * @protected
         */
        CartService.prototype.authService;
        /**
         * @type {?}
         * @protected
         */
        CartService.prototype.activeCartService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserService = /** @class */ (function () {
        function UserService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Returns a user
         */
        /**
         * Returns a user
         * @return {?}
         */
        UserService.prototype.get = /**
         * Returns a user
         * @return {?}
         */
        function () {
            var _this = this;
            return this.store.pipe(store.select(getDetails), operators.tap((/**
             * @param {?} details
             * @return {?}
             */
            function (details) {
                if (Object.keys(details).length === 0) {
                    _this.load();
                }
            })));
        };
        /**
         * Loads the user's details
         */
        /**
         * Loads the user's details
         * @return {?}
         */
        UserService.prototype.load = /**
         * Loads the user's details
         * @return {?}
         */
        function () {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                if (userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.store.dispatch(new LoadUserDetails(userId));
                }
            }));
        };
        /**
         * Register a new user
         *
         * @param submitFormData as UserRegisterFormData
         */
        /**
         * Register a new user
         *
         * @param {?} userRegisterFormData
         * @return {?}
         */
        UserService.prototype.register = /**
         * Register a new user
         *
         * @param {?} userRegisterFormData
         * @return {?}
         */
        function (userRegisterFormData) {
            this.store.dispatch(new RegisterUser(userRegisterFormData));
        };
        /**
         * Register a new user from guest
         *
         * @param guid
         * @param password
         */
        /**
         * Register a new user from guest
         *
         * @param {?} guid
         * @param {?} password
         * @return {?}
         */
        UserService.prototype.registerGuest = /**
         * Register a new user from guest
         *
         * @param {?} guid
         * @param {?} password
         * @return {?}
         */
        function (guid, password) {
            this.store.dispatch(new RegisterGuest({ guid: guid, password: password }));
        };
        /**
         * Returns the register user process loading flag
         */
        /**
         * Returns the register user process loading flag
         * @return {?}
         */
        UserService.prototype.getRegisterUserResultLoading = /**
         * Returns the register user process loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID)));
        };
        /**
         * Returns the register user process success flag
         */
        /**
         * Returns the register user process success flag
         * @return {?}
         */
        UserService.prototype.getRegisterUserResultSuccess = /**
         * Returns the register user process success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID)));
        };
        /**
         * Returns the register user process error flag
         */
        /**
         * Returns the register user process error flag
         * @return {?}
         */
        UserService.prototype.getRegisterUserResultError = /**
         * Returns the register user process error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID)));
        };
        /**
         * Resets the register user process flags
         */
        /**
         * Resets the register user process flags
         * @return {?}
         */
        UserService.prototype.resetRegisterUserProcessState = /**
         * Resets the register user process flags
         * @return {?}
         */
        function () {
            return this.store.dispatch(new ResetRegisterUserProcess());
        };
        /**
         * Remove user account, that's also called close user's account
         */
        /**
         * Remove user account, that's also called close user's account
         * @return {?}
         */
        UserService.prototype.remove = /**
         * Remove user account, that's also called close user's account
         * @return {?}
         */
        function () {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new RemoveUser(userId));
            }));
        };
        /**
         * Returns the remove user loading flag
         */
        /**
         * Returns the remove user loading flag
         * @return {?}
         */
        UserService.prototype.getRemoveUserResultLoading = /**
         * Returns the remove user loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID)));
        };
        /**
         * Returns the remove user failure outcome.
         */
        /**
         * Returns the remove user failure outcome.
         * @return {?}
         */
        UserService.prototype.getRemoveUserResultError = /**
         * Returns the remove user failure outcome.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID)));
        };
        /**
         * Returns the remove user process success outcome.
         */
        /**
         * Returns the remove user process success outcome.
         * @return {?}
         */
        UserService.prototype.getRemoveUserResultSuccess = /**
         * Returns the remove user process success outcome.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID)));
        };
        /**
         * Resets the remove user process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         */
        /**
         * Resets the remove user process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         * @return {?}
         */
        UserService.prototype.resetRemoveUserProcessState = /**
         * Resets the remove user process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         * @return {?}
         */
        function () {
            this.store.dispatch(new RemoveUserReset());
        };
        /**
         * Returns titles
         */
        /**
         * Returns titles
         * @return {?}
         */
        UserService.prototype.getTitles = /**
         * Returns titles
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAllTitles));
        };
        /**
         * Retrieves titles
         */
        /**
         * Retrieves titles
         * @return {?}
         */
        UserService.prototype.loadTitles = /**
         * Retrieves titles
         * @return {?}
         */
        function () {
            this.store.dispatch(new LoadTitles());
        };
        /**
         * Return whether user's password is successfully reset
         */
        /**
         * Return whether user's password is successfully reset
         * @return {?}
         */
        UserService.prototype.isPasswordReset = /**
         * Return whether user's password is successfully reset
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getResetPassword));
        };
        /**
         * Updates the user's details
         * @param userDetails to be updated
         */
        /**
         * Updates the user's details
         * @param {?} userDetails to be updated
         * @return {?}
         */
        UserService.prototype.updatePersonalDetails = /**
         * Updates the user's details
         * @param {?} userDetails to be updated
         * @return {?}
         */
        function (userDetails) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new UpdateUserDetails({
                    username: userId,
                    userDetails: userDetails,
                }));
            }));
        };
        /**
         * Returns the update user's personal details loading flag
         */
        /**
         * Returns the update user's personal details loading flag
         * @return {?}
         */
        UserService.prototype.getUpdatePersonalDetailsResultLoading = /**
         * Returns the update user's personal details loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
        };
        /**
         * Returns the update user's personal details error flag
         */
        /**
         * Returns the update user's personal details error flag
         * @return {?}
         */
        UserService.prototype.getUpdatePersonalDetailsResultError = /**
         * Returns the update user's personal details error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
        };
        /**
         * Returns the update user's personal details success flag
         */
        /**
         * Returns the update user's personal details success flag
         * @return {?}
         */
        UserService.prototype.getUpdatePersonalDetailsResultSuccess = /**
         * Returns the update user's personal details success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
        };
        /**
         * Resets the update user details processing state
         */
        /**
         * Resets the update user details processing state
         * @return {?}
         */
        UserService.prototype.resetUpdatePersonalDetailsProcessingState = /**
         * Resets the update user details processing state
         * @return {?}
         */
        function () {
            this.store.dispatch(new ResetUpdateUserDetails());
        };
        /**
         * Reset new password.  Part of the forgot password flow.
         * @param token
         * @param password
         */
        /**
         * Reset new password.  Part of the forgot password flow.
         * @param {?} token
         * @param {?} password
         * @return {?}
         */
        UserService.prototype.resetPassword = /**
         * Reset new password.  Part of the forgot password flow.
         * @param {?} token
         * @param {?} password
         * @return {?}
         */
        function (token, password) {
            this.store.dispatch(new ResetPassword({ token: token, password: password }));
        };
        /*
         * Request an email to reset a forgotten password.
         */
        /*
           * Request an email to reset a forgotten password.
           */
        /**
         * @param {?} userEmailAddress
         * @return {?}
         */
        UserService.prototype.requestForgotPasswordEmail = /*
           * Request an email to reset a forgotten password.
           */
        /**
         * @param {?} userEmailAddress
         * @return {?}
         */
        function (userEmailAddress) {
            this.store.dispatch(new ForgotPasswordEmailRequest(userEmailAddress));
        };
        /**
         * Updates the user's email
         */
        /**
         * Updates the user's email
         * @param {?} password
         * @param {?} newUid
         * @return {?}
         */
        UserService.prototype.updateEmail = /**
         * Updates the user's email
         * @param {?} password
         * @param {?} newUid
         * @return {?}
         */
        function (password, newUid) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new UpdateEmailAction({
                    uid: userId,
                    password: password,
                    newUid: newUid,
                }));
            }));
        };
        /**
         * Returns the update user's email success flag
         */
        /**
         * Returns the update user's email success flag
         * @return {?}
         */
        UserService.prototype.getUpdateEmailResultSuccess = /**
         * Returns the update user's email success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID)));
        };
        /**
         * Returns the update user's email error flag
         */
        /**
         * Returns the update user's email error flag
         * @return {?}
         */
        UserService.prototype.getUpdateEmailResultError = /**
         * Returns the update user's email error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID)));
        };
        /**
         * Returns the update user's email loading flag
         */
        /**
         * Returns the update user's email loading flag
         * @return {?}
         */
        UserService.prototype.getUpdateEmailResultLoading = /**
         * Returns the update user's email loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID)));
        };
        /**
         * Resets the update user's email processing state
         */
        /**
         * Resets the update user's email processing state
         * @return {?}
         */
        UserService.prototype.resetUpdateEmailResultState = /**
         * Resets the update user's email processing state
         * @return {?}
         */
        function () {
            this.store.dispatch(new ResetUpdateEmailAction());
        };
        /**
         * Updates the password for the user
         * @param oldPassword the current password that will be changed
         * @param newPassword the new password
         */
        /**
         * Updates the password for the user
         * @param {?} oldPassword the current password that will be changed
         * @param {?} newPassword the new password
         * @return {?}
         */
        UserService.prototype.updatePassword = /**
         * Updates the password for the user
         * @param {?} oldPassword the current password that will be changed
         * @param {?} newPassword the new password
         * @return {?}
         */
        function (oldPassword, newPassword) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new UpdatePassword({
                    userId: userId,
                    oldPassword: oldPassword,
                    newPassword: newPassword,
                }));
            }));
        };
        /**
         * Returns the update password loading flag
         */
        /**
         * Returns the update password loading flag
         * @return {?}
         */
        UserService.prototype.getUpdatePasswordResultLoading = /**
         * Returns the update password loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID)));
        };
        /**
         * Returns the update password failure outcome.
         */
        /**
         * Returns the update password failure outcome.
         * @return {?}
         */
        UserService.prototype.getUpdatePasswordResultError = /**
         * Returns the update password failure outcome.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID)));
        };
        /**
         * Returns the update password process success outcome.
         */
        /**
         * Returns the update password process success outcome.
         * @return {?}
         */
        UserService.prototype.getUpdatePasswordResultSuccess = /**
         * Returns the update password process success outcome.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID)));
        };
        /**
         * Resets the update password process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         */
        /**
         * Resets the update password process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         * @return {?}
         */
        UserService.prototype.resetUpdatePasswordProcessState = /**
         * Resets the update password process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         * @return {?}
         */
        function () {
            this.store.dispatch(new UpdatePasswordReset());
        };
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         */
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        UserService.prototype.withUserId = /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        function (callback) {
            if (this.authService) {
                this.authService
                    .getOccUserId()
                    .pipe(operators.take(1))
                    .subscribe((/**
                 * @param {?} userId
                 * @return {?}
                 */
                function (userId) { return callback(userId); }));
            }
            else {
                // TODO(issue:#5628) Deprecated since 1.3.0
                callback(OCC_USER_ID_CURRENT);
            }
        };
        UserService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        return UserService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        UserService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectiveCartService = /** @class */ (function () {
        function SelectiveCartService(store, userService, authService, multiCartService, baseSiteService) {
            var _this = this;
            this.store = store;
            this.userService = userService;
            this.authService = authService;
            this.multiCartService = multiCartService;
            this.baseSiteService = baseSiteService;
            this.cartId$ = new rxjs.BehaviorSubject(undefined);
            this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
            this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
            this.cartSelector$ = this.cartId$.pipe(operators.switchMap((/**
             * @param {?} cartId
             * @return {?}
             */
            function (cartId) {
                _this.cartId = cartId;
                return _this.multiCartService.getCartEntity(cartId);
            })));
            rxjs.combineLatest([
                this.userService.get(),
                this.baseSiteService.getActive(),
            ]).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), user = _b[0], activeBaseSite = _b[1];
                if (user && user.customerId && activeBaseSite) {
                    _this.customerId = user.customerId;
                    _this.cartId$.next("selectivecart" + activeBaseSite + _this.customerId);
                }
                else if (user && !user.customerId) {
                    _this.cartId$.next(undefined);
                }
            }));
            this.authService.getOccUserId().subscribe((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                _this.userId = userId;
                if (_this.isJustLoggedIn(userId)) {
                    _this.load();
                }
                _this.previousUserId = userId;
            }));
            this.selectiveCart$ = this.cartSelector$.pipe(operators.map((/**
             * @param {?} cartEntity
             * @return {?}
             */
            function (cartEntity) {
                return {
                    cart: cartEntity.value,
                    loading: cartEntity.loading,
                    loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
                };
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var loading = _a.loading;
                return !loading;
            })), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var cart = _a.cart, loaded = _a.loaded;
                if (_this.cartId && _this.isEmpty(cart) && !loaded) {
                    _this.load();
                }
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var cart = _a.cart;
                return (cart ? cart : {});
            })), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        /**
         * @return {?}
         */
        SelectiveCartService.prototype.getCart = /**
         * @return {?}
         */
        function () {
            return this.selectiveCart$;
        };
        /**
         * @return {?}
         */
        SelectiveCartService.prototype.getEntries = /**
         * @return {?}
         */
        function () {
            return this.multiCartService.getEntries(this.cartId);
        };
        /**
         * @return {?}
         */
        SelectiveCartService.prototype.getLoaded = /**
         * @return {?}
         */
        function () {
            return this.cartSelector$.pipe(operators.map((/**
             * @param {?} cart
             * @return {?}
             */
            function (cart) { return (cart.success || cart.error) && !cart.loading; })));
        };
        /**
         * @private
         * @return {?}
         */
        SelectiveCartService.prototype.load = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.isLoggedIn(this.userId) && this.cartId) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: this.cartId,
                });
            }
        };
        /**
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        SelectiveCartService.prototype.addEntry = /**
         * @param {?} productCode
         * @param {?} quantity
         * @return {?}
         */
        function (productCode, quantity) {
            var _this = this;
            /** @type {?} */
            var loadAttempted = false;
            this.cartSelector$
                .pipe(operators.filter((/**
             * @return {?}
             */
            function () { return !loadAttempted; })), operators.switchMap((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) {
                if (_this.isEmpty(cartState.value) && !cartState.loading) {
                    loadAttempted = true;
                    _this.load();
                }
                return rxjs.of(cartState);
            })), operators.filter((/**
             * @param {?} cartState
             * @return {?}
             */
            function (cartState) { return !_this.isEmpty(cartState.value); })), operators.take(1))
                .subscribe((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                _this.multiCartService.addEntry(_this.userId, _this.cartId, productCode, quantity);
            }));
        };
        /**
         * @param {?} entry
         * @return {?}
         */
        SelectiveCartService.prototype.removeEntry = /**
         * @param {?} entry
         * @return {?}
         */
        function (entry) {
            this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
        };
        /**
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        SelectiveCartService.prototype.updateEntry = /**
         * @param {?} entryNumber
         * @param {?} quantity
         * @return {?}
         */
        function (entryNumber, quantity) {
            this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
        };
        /**
         * @param {?} productCode
         * @return {?}
         */
        SelectiveCartService.prototype.getEntry = /**
         * @param {?} productCode
         * @return {?}
         */
        function (productCode) {
            return this.multiCartService.getEntry(this.cartId, productCode);
        };
        /**
         * @private
         * @param {?} cart
         * @return {?}
         */
        SelectiveCartService.prototype.isEmpty = /**
         * @private
         * @param {?} cart
         * @return {?}
         */
        function (cart) {
            return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
        };
        /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        SelectiveCartService.prototype.isJustLoggedIn = /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return (this.isLoggedIn(userId) &&
                this.previousUserId !== userId && // *just* logged in
                this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
            );
        };
        /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        SelectiveCartService.prototype.isLoggedIn = /**
         * @private
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;
        };
        SelectiveCartService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SelectiveCartService.ctorParameters = function () { return [
            { type: store.Store },
            { type: UserService },
            { type: AuthService },
            { type: MultiCartService },
            { type: BaseSiteService }
        ]; };
        return SelectiveCartService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.customerId;
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.userId;
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.cartId;
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.selectiveCart$;
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.cartId$;
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.PREVIOUS_USER_ID_INITIAL_VALUE;
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.previousUserId;
        /**
         * @type {?}
         * @private
         */
        SelectiveCartService.prototype.cartSelector$;
        /**
         * @type {?}
         * @protected
         */
        SelectiveCartService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        SelectiveCartService.prototype.userService;
        /**
         * @type {?}
         * @protected
         */
        SelectiveCartService.prototype.authService;
        /**
         * @type {?}
         * @protected
         */
        SelectiveCartService.prototype.multiCartService;
        /**
         * @type {?}
         * @protected
         */
        SelectiveCartService.prototype.baseSiteService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WishListService = /** @class */ (function () {
        function WishListService(store, authService, userService, multiCartService) {
            this.store = store;
            this.authService = authService;
            this.userService = userService;
            this.multiCartService = multiCartService;
        }
        /**
         * @param {?} userId
         * @param {?=} name
         * @param {?=} description
         * @return {?}
         */
        WishListService.prototype.createWishList = /**
         * @param {?} userId
         * @param {?=} name
         * @param {?=} description
         * @return {?}
         */
        function (userId, name, description) {
            this.store.dispatch(new CreateWishList({ userId: userId, name: name, description: description }));
        };
        /**
         * @return {?}
         */
        WishListService.prototype.getWishList = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return rxjs.combineLatest([
                this.getWishListId(),
                this.userService.get(),
                this.authService.getOccUserId(),
            ]).pipe(operators.distinctUntilChanged(), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), wishListId = _b[0], user = _b[1], userId = _b[2];
                if (!Boolean(wishListId) &&
                    userId !== OCC_USER_ID_ANONYMOUS &&
                    Boolean(user) &&
                    Boolean(user.customerId)) {
                    _this.loadWishList(userId, user.customerId);
                }
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return Boolean(wishListId);
            })), operators.switchMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return _this.multiCartService.getCart(wishListId);
            })));
        };
        /**
         * @param {?} userId
         * @param {?} customerId
         * @return {?}
         */
        WishListService.prototype.loadWishList = /**
         * @param {?} userId
         * @param {?} customerId
         * @return {?}
         */
        function (userId, customerId) {
            this.store.dispatch(new LoadWishList({ userId: userId, customerId: customerId }));
        };
        /**
         * @param {?} productCode
         * @return {?}
         */
        WishListService.prototype.addEntry = /**
         * @param {?} productCode
         * @return {?}
         */
        function (productCode) {
            var _this = this;
            this.getWishListId()
                .pipe(operators.distinctUntilChanged(), operators.withLatestFrom(this.authService.getOccUserId(), this.userService.get()), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), wishListId = _b[0], userId = _b[1], user = _b[2];
                if (!Boolean(wishListId) &&
                    Boolean(user) &&
                    Boolean(user.customerId)) {
                    _this.loadWishList(userId, user.customerId);
                }
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return Boolean(wishListId);
            })), operators.take(1))
                .subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), wishListId = _b[0], userId = _b[1];
                return _this.multiCartService.addEntry(userId, wishListId, productCode, 1);
            }));
        };
        /**
         * @param {?} entry
         * @return {?}
         */
        WishListService.prototype.removeEntry = /**
         * @param {?} entry
         * @return {?}
         */
        function (entry) {
            var _this = this;
            this.getWishListId()
                .pipe(operators.distinctUntilChanged(), operators.withLatestFrom(this.authService.getOccUserId(), this.userService.get()), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), wishListId = _b[0], userId = _b[1], user = _b[2];
                if (!Boolean(wishListId) &&
                    Boolean(user) &&
                    Boolean(user.customerId)) {
                    _this.loadWishList(userId, user.customerId);
                }
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return Boolean(wishListId);
            })), operators.take(1))
                .subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), wishListId = _b[0], userId = _b[1];
                return _this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber);
            }));
        };
        /**
         * @return {?}
         */
        WishListService.prototype.getWishListLoading = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.getWishListId().pipe(operators.switchMap((/**
             * @param {?} wishListId
             * @return {?}
             */
            function (wishListId) {
                return _this.multiCartService.isStable(wishListId).pipe(operators.map((/**
                 * @param {?} stable
                 * @return {?}
                 */
                function (stable) { return !stable; })));
            })));
        };
        /**
         * @protected
         * @return {?}
         */
        WishListService.prototype.getWishListId = /**
         * @protected
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getWishListId));
        };
        WishListService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WishListService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService },
            { type: UserService },
            { type: MultiCartService }
        ]; };
        return WishListService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        WishListService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        WishListService.prototype.authService;
        /**
         * @type {?}
         * @protected
         */
        WishListService.prototype.userService;
        /**
         * @type {?}
         * @protected
         */
        WishListService.prototype.multiCartService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CMS_FEATURE = 'cms';
    /** @type {?} */
    var NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';
    // TODO(issue:6027) - fix the const value to `[Cms] Component Entity`
    /** @type {?} */
    var COMPONENT_ENTITY = '[Cms[ Component Entity';
    /**
     * @record
     */
    function StateWithCms() { }
    if (false) {
        /* Skipping unnamed member:
        [CMS_FEATURE]: CmsState;*/
    }
    /**
     * @record
     */
    function ComponentsContext() { }
    if (false) {
        /** @type {?} */
        ComponentsContext.prototype.component;
        /**
         * Page context stores an information for which context does the component exist.
         * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:
         *
         * ```ts
         * ProductPage-1776948: {
         *  success: true,
         *  loading: false,
         *  error: false,
         *  // The `value` property indicates that the component exists for the given page context.
         *  value: true
         * }
         * ```
         *
         * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),
         * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:
         *
         * ```ts
         * ProductPage-1776948: {
         *  success: true,
         *  loading: false,
         *  error: false,
         *  // The `value` property indicates that the component exists for the given page context.
         *  value: true
         * },
         * ContentPage-homepage: {
         *  success: true,
         *  loading: false,
         *  error: false,
         *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.
         *  value: false
         * }
         * ```
         *
         * @type {?}
         */
        ComponentsContext.prototype.pageContext;
    }
    /**
     * @record
     */
    function NavigationNodes() { }
    /**
     * @record
     */
    function PageState() { }
    if (false) {
        /** @type {?} */
        PageState.prototype.pageData;
        /** @type {?} */
        PageState.prototype.index;
    }
    /**
     * @record
     */
    function CmsState() { }
    if (false) {
        /** @type {?} */
        CmsState.prototype.page;
        /** @type {?} */
        CmsState.prototype.component;
        /** @type {?} */
        CmsState.prototype.components;
        /** @type {?} */
        CmsState.prototype.navigation;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CMS_COMPONENT = '[Cms] Load Component';
    /** @type {?} */
    var LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';
    /** @type {?} */
    var LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';
    // TODO(issue:6027) - rename the const to `CMS_GET_COMPONENT_FROM_PAGE`
    /** @type {?} */
    var CMS_GET_COMPONENET_FROM_PAGE = '[Cms] Get Component from Page';
    var LoadCmsComponent = /** @class */ (function (_super) {
        __extends(LoadCmsComponent, _super);
        // TODO(issue:6027) - this action should have only one `payload` property which should encapsulate all of the constructor's arguments
        function LoadCmsComponent(payload, pageContext) {
            var _this = _super.call(this, COMPONENT_ENTITY, payload) || this;
            _this.payload = payload;
            _this.pageContext = pageContext;
            _this.type = LOAD_CMS_COMPONENT;
            return _this;
        }
        return LoadCmsComponent;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        LoadCmsComponent.prototype.type;
        /** @type {?} */
        LoadCmsComponent.prototype.payload;
        /** @type {?} */
        LoadCmsComponent.prototype.pageContext;
    }
    var LoadCmsComponentFail = /** @class */ (function (_super) {
        __extends(LoadCmsComponentFail, _super);
        // TODO(issue:6027) - this action should have only one `payload` property which should encapsulate all of the constructor's arguments
        function LoadCmsComponentFail(uid, payload, pageContext) {
            var _this = _super.call(this, COMPONENT_ENTITY, uid, payload) || this;
            _this.payload = payload;
            _this.pageContext = pageContext;
            _this.type = LOAD_CMS_COMPONENT_FAIL;
            return _this;
        }
        return LoadCmsComponentFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        LoadCmsComponentFail.prototype.type;
        /** @type {?} */
        LoadCmsComponentFail.prototype.payload;
        /** @type {?} */
        LoadCmsComponentFail.prototype.pageContext;
    }
    /**
     * @template T
     */
    var /**
     * @template T
     */
    LoadCmsComponentSuccess = /** @class */ (function (_super) {
        __extends(LoadCmsComponentSuccess, _super);
        // TODO(issue:6027) - this action should have only one `payload` property which should encapsulate all of the constructor's arguments
        function LoadCmsComponentSuccess(payload, uid, pageContext) {
            var _this = _super.call(this, COMPONENT_ENTITY, uid || payload.uid || '') || this;
            _this.payload = payload;
            _this.pageContext = pageContext;
            _this.type = LOAD_CMS_COMPONENT_SUCCESS;
            return _this;
        }
        return LoadCmsComponentSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        LoadCmsComponentSuccess.prototype.type;
        /** @type {?} */
        LoadCmsComponentSuccess.prototype.payload;
        /** @type {?} */
        LoadCmsComponentSuccess.prototype.pageContext;
    }
    /**
     * @template T
     */
    var /**
     * @template T
     */
    CmsGetComponentFromPage = /** @class */ (function (_super) {
        __extends(CmsGetComponentFromPage, _super);
        // TODO(issue:6027) - this action should have only one `payload` property which should encapsulate all of the constructor's arguments
        function CmsGetComponentFromPage(payload, pageContext) {
            var _this = _super.call(this, COMPONENT_ENTITY, payload.map((/**
             * @param {?} cmp
             * @return {?}
             */
            function (cmp) { return cmp.uid; }))) || this;
            _this.payload = payload;
            _this.pageContext = pageContext;
            _this.type = CMS_GET_COMPONENET_FROM_PAGE;
            return _this;
        }
        return CmsGetComponentFromPage;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        CmsGetComponentFromPage.prototype.type;
        /** @type {?} */
        CmsGetComponentFromPage.prototype.payload;
        /** @type {?} */
        CmsGetComponentFromPage.prototype.pageContext;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';
    /** @type {?} */
    var LOAD_CMS_NAVIGATION_ITEMS_FAIL = '[Cms] Load NavigationEntry items Fail';
    /** @type {?} */
    var LOAD_CMS_NAVIGATION_ITEMS_SUCCESS = '[Cms] Load NavigationEntry items Success';
    var LoadCmsNavigationItems = /** @class */ (function (_super) {
        __extends(LoadCmsNavigationItems, _super);
        function LoadCmsNavigationItems(payload) {
            var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_NAVIGATION_ITEMS;
            return _this;
        }
        return LoadCmsNavigationItems;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        LoadCmsNavigationItems.prototype.type;
        /** @type {?} */
        LoadCmsNavigationItems.prototype.payload;
    }
    var LoadCmsNavigationItemsFail = /** @class */ (function (_super) {
        __extends(LoadCmsNavigationItemsFail, _super);
        function LoadCmsNavigationItemsFail(nodeId, payload) {
            var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, nodeId, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;
            return _this;
        }
        return LoadCmsNavigationItemsFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        LoadCmsNavigationItemsFail.prototype.type;
        /** @type {?} */
        LoadCmsNavigationItemsFail.prototype.payload;
    }
    var LoadCmsNavigationItemsSuccess = /** @class */ (function (_super) {
        __extends(LoadCmsNavigationItemsSuccess, _super);
        function LoadCmsNavigationItemsSuccess(payload) {
            var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;
            return _this;
        }
        return LoadCmsNavigationItemsSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        LoadCmsNavigationItemsSuccess.prototype.type;
        /** @type {?} */
        LoadCmsNavigationItemsSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';
    /** @type {?} */
    var LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';
    /** @type {?} */
    var LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';
    /** @type {?} */
    var CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';
    /** @type {?} */
    var CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';
    var LoadCmsPageData = /** @class */ (function (_super) {
        __extends(LoadCmsPageData, _super);
        function LoadCmsPageData(payload) {
            var _this = _super.call(this, payload.type, payload.id) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_PAGE_DATA;
            return _this;
        }
        return LoadCmsPageData;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        LoadCmsPageData.prototype.type;
        /** @type {?} */
        LoadCmsPageData.prototype.payload;
    }
    var LoadCmsPageDataFail = /** @class */ (function (_super) {
        __extends(LoadCmsPageDataFail, _super);
        function LoadCmsPageDataFail(pageContext, error) {
            var _this = _super.call(this, pageContext.type, pageContext.id, error) || this;
            _this.type = LOAD_CMS_PAGE_DATA_FAIL;
            return _this;
        }
        return LoadCmsPageDataFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        LoadCmsPageDataFail.prototype.type;
    }
    var LoadCmsPageDataSuccess = /** @class */ (function (_super) {
        __extends(LoadCmsPageDataSuccess, _super);
        function LoadCmsPageDataSuccess(pageContext, payload) {
            var _this = _super.call(this, pageContext.type, pageContext.id, payload) || this;
            _this.type = LOAD_CMS_PAGE_DATA_SUCCESS;
            return _this;
        }
        return LoadCmsPageDataSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        LoadCmsPageDataSuccess.prototype.type;
    }
    var CmsSetPageSuccessIndex = /** @class */ (function (_super) {
        __extends(CmsSetPageSuccessIndex, _super);
        function CmsSetPageSuccessIndex(pageContext, payload) {
            var _this = _super.call(this, pageContext.type, pageContext.id, payload) || this;
            _this.type = CMS_SET_PAGE_SUCCESS_INDEX;
            return _this;
        }
        return CmsSetPageSuccessIndex;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        CmsSetPageSuccessIndex.prototype.type;
    }
    var CmsSetPageFailIndex = /** @class */ (function (_super) {
        __extends(CmsSetPageFailIndex, _super);
        function CmsSetPageFailIndex(pageContext, payload) {
            var _this = _super.call(this, pageContext.type, pageContext.id) || this;
            _this.payload = payload;
            _this.type = CMS_SET_PAGE_FAIL_INDEX;
            return _this;
        }
        return CmsSetPageFailIndex;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        CmsSetPageFailIndex.prototype.type;
        /** @type {?} */
        CmsSetPageFailIndex.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var cmsGroup_actions = /*#__PURE__*/Object.freeze({
        LOAD_CMS_COMPONENT: LOAD_CMS_COMPONENT,
        LOAD_CMS_COMPONENT_FAIL: LOAD_CMS_COMPONENT_FAIL,
        LOAD_CMS_COMPONENT_SUCCESS: LOAD_CMS_COMPONENT_SUCCESS,
        CMS_GET_COMPONENET_FROM_PAGE: CMS_GET_COMPONENET_FROM_PAGE,
        LoadCmsComponent: LoadCmsComponent,
        LoadCmsComponentFail: LoadCmsComponentFail,
        LoadCmsComponentSuccess: LoadCmsComponentSuccess,
        CmsGetComponentFromPage: CmsGetComponentFromPage,
        LOAD_CMS_NAVIGATION_ITEMS: LOAD_CMS_NAVIGATION_ITEMS,
        LOAD_CMS_NAVIGATION_ITEMS_FAIL: LOAD_CMS_NAVIGATION_ITEMS_FAIL,
        LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: LOAD_CMS_NAVIGATION_ITEMS_SUCCESS,
        LoadCmsNavigationItems: LoadCmsNavigationItems,
        LoadCmsNavigationItemsFail: LoadCmsNavigationItemsFail,
        LoadCmsNavigationItemsSuccess: LoadCmsNavigationItemsSuccess,
        LOAD_CMS_PAGE_DATA: LOAD_CMS_PAGE_DATA,
        LOAD_CMS_PAGE_DATA_FAIL: LOAD_CMS_PAGE_DATA_FAIL,
        LOAD_CMS_PAGE_DATA_SUCCESS: LOAD_CMS_PAGE_DATA_SUCCESS,
        CMS_SET_PAGE_SUCCESS_INDEX: CMS_SET_PAGE_SUCCESS_INDEX,
        CMS_SET_PAGE_FAIL_INDEX: CMS_SET_PAGE_FAIL_INDEX,
        LoadCmsPageData: LoadCmsPageData,
        LoadCmsPageDataFail: LoadCmsPageDataFail,
        LoadCmsPageDataSuccess: LoadCmsPageDataSuccess,
        CmsSetPageSuccessIndex: CmsSetPageSuccessIndex,
        CmsSetPageFailIndex: CmsSetPageFailIndex
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getCmsState = store.createFeatureSelector(CMS_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO(issue:6027) - delete this method
    /**
     * @deprecated as of 2.0, this method will be removed.
     * @type {?}
     */
    var getComponentEntitiesSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return Object.keys(state.entities).reduce((/**
         * @param {?} acc
         * @param {?} cur
         * @return {?}
         */
        function (acc, cur) {
            acc[cur] = state.entities[cur].value;
            return acc;
        }), {});
    });
    var ɵ0$x = getComponentEntitiesSelector;
    // TODO(issue:6027) - delete this method
    var ɵ1$p = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.component; };
    /**
     * @deprecated as of 2.0, this method will be removed in favour of `getComponentsState`
     * @type {?}
     */
    var getComponentState = store.createSelector(getCmsState, (ɵ1$p));
    // TODO(issue:6027) - delete this method
    /**
     * @deprecated as of 2.0, this method will be removed.
     * @type {?}
     */
    var getComponentEntities = store.createSelector(getComponentState, getComponentEntitiesSelector);
    // TODO(issue:6027) - delete this method
    /**
     * @deprecated as of 2.0, this method will be removed in favour of `componentsLoaderStateSelectorFactory`
     * @type {?}
     */
    var componentStateSelectorFactory = (/**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        return store.createSelector(getComponentState, (/**
         * @param {?} entities
         * @return {?}
         */
        function (entities) {
            // the whole component entities are empty
            if (Object.keys(entities.entities).length === 0) {
                return undefined;
            }
            else {
                return entityStateSelector(entities, uid);
            }
        }));
    });
    // TODO(issue:6027) - delete this method
    /**
     * @deprecated as of 2.0, this method will be removed in favour of `componentsSelectorFactory`
     * @type {?}
     */
    var componentSelectorFactory = (/**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        return store.createSelector(componentStateSelectorFactory(uid), (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (state) {
                return loaderValueSelector(state);
            }
            else {
                return undefined;
            }
        }));
    });
    var ɵ2$i = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.components; };
    /** @type {?} */
    var getComponentsState = store.createSelector(getCmsState, (ɵ2$i));
    /** @type {?} */
    var componentsContextSelectorFactory = (/**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        return store.createSelector(getComponentsState, (/**
         * @param {?} componentsState
         * @return {?}
         */
        function (componentsState) { return entitySelector(componentsState, uid); }));
    });
    /** @type {?} */
    var componentsLoaderStateSelectorFactory = (/**
     * @param {?} uid
     * @param {?} context
     * @return {?}
     */
    function (uid, context) {
        return store.createSelector(componentsContextSelectorFactory(uid), (/**
         * @param {?} componentsContext
         * @return {?}
         */
        function (componentsContext) {
            return (componentsContext &&
                componentsContext.pageContext &&
                componentsContext.pageContext[context]) ||
                initialLoaderState;
        }));
    });
    /** @type {?} */
    var componentsContextExistsSelectorFactory = (/**
     * @param {?} uid
     * @param {?} context
     * @return {?}
     */
    function (uid, context) {
        return store.createSelector(componentsLoaderStateSelectorFactory(uid, context), (/**
         * @param {?} loaderState
         * @return {?}
         */
        function (loaderState) {
            return loaderValueSelector(loaderState) || false;
        }));
    });
    /** @type {?} */
    var componentsDataSelectorFactory = (/**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        return store.createSelector(componentsContextSelectorFactory(uid), (/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (state ? state.component : undefined); }));
    });
    /** @type {?} */
    var componentsSelectorFactory = (/**
     * @param {?} uid
     * @param {?} context
     * @return {?}
     */
    function (uid, context) {
        return store.createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), (/**
         * @param {?} componentState
         * @param {?} exists
         * @return {?}
         */
        function (componentState, exists) {
            if (componentState && exists) {
                return componentState;
            }
            else {
                return undefined;
            }
        }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$y = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.navigation; };
    /** @type {?} */
    var getNavigationEntryItemState = store.createSelector(getCmsState, (ɵ0$y));
    /** @type {?} */
    var getSelectedNavigationEntryItemState = (/**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        return store.createSelector(getNavigationEntryItemState, (/**
         * @param {?} nodes
         * @return {?}
         */
        function (nodes) { return entityStateSelector(nodes, nodeId); }));
    });
    /** @type {?} */
    var getNavigationEntryItems = (/**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        return store.createSelector(getSelectedNavigationEntryItemState(nodeId), (/**
         * @param {?} itemState
         * @return {?}
         */
        function (itemState) { return loaderValueSelector(itemState); }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getPageEntitiesSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.pageData.entities; });
    var ɵ0$z = getPageEntitiesSelector;
    /** @type {?} */
    var getIndexByType = (/**
     * @param {?} index
     * @param {?} type
     * @return {?}
     */
    function (index, type) {
        switch (type) {
            case PageType.CONTENT_PAGE: {
                return index.content;
            }
            case PageType.PRODUCT_PAGE: {
                return index.product;
            }
            case PageType.CATEGORY_PAGE: {
                return index.category;
            }
            case PageType.CATALOG_PAGE: {
                return index.catalog;
            }
        }
        return { entities: {} };
    });
    var ɵ1$q = getIndexByType;
    /** @type {?} */
    var getPageComponentTypesSelector = (/**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var componentTypes = new Set();
        if (page && page.slots) {
            try {
                for (var _c = __values(Object.keys(page.slots)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var slot = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, __values(page.slots[slot].components || [])), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var component = _f.value;
                            componentTypes.add(component.flexType);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return Array.from(componentTypes);
    });
    var ɵ2$j = getPageComponentTypesSelector;
    var ɵ3$a = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.page; };
    /** @type {?} */
    var getPageState = store.createSelector(getCmsState, (ɵ3$a));
    var ɵ4$3 = /**
     * @param {?} page
     * @return {?}
     */
    function (page) { return page.index; };
    /** @type {?} */
    var getPageStateIndex = store.createSelector(getPageState, (ɵ4$3));
    /** @type {?} */
    var getPageStateIndexEntityLoaderState = (/**
     * @param {?} pageContext
     * @return {?}
     */
    function (pageContext) {
        return store.createSelector(getPageStateIndex, (/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return getIndexByType(index, pageContext.type); }));
    });
    /** @type {?} */
    var getPageStateIndexLoaderState = (/**
     * @param {?} pageContext
     * @return {?}
     */
    function (pageContext) {
        return store.createSelector(getPageStateIndexEntityLoaderState(pageContext), (/**
         * @param {?} indexState
         * @return {?}
         */
        function (indexState) {
            return entityStateSelector(indexState, pageContext.id);
        }));
    });
    /** @type {?} */
    var getPageStateIndexValue = (/**
     * @param {?} pageContext
     * @return {?}
     */
    function (pageContext) {
        return store.createSelector(getPageStateIndexLoaderState(pageContext), (/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) { return loaderValueSelector(entity); }));
    });
    /** @type {?} */
    var getPageEntities = store.createSelector(getPageState, getPageEntitiesSelector);
    /** @type {?} */
    var getPageData = (/**
     * @param {?} pageContext
     * @return {?}
     */
    function (pageContext) {
        return store.createSelector(getPageEntities, getPageStateIndexValue(pageContext), (/**
         * @param {?} entities
         * @param {?} indexValue
         * @return {?}
         */
        function (entities, indexValue) {
            return entities[indexValue];
        }));
    });
    /** @type {?} */
    var getPageComponentTypes = (/**
     * @param {?} pageContext
     * @return {?}
     */
    function (pageContext) {
        return store.createSelector(getPageData(pageContext), (/**
         * @param {?} pageData
         * @return {?}
         */
        function (pageData) { return getPageComponentTypesSelector(pageData); }));
    });
    /** @type {?} */
    var getCurrentSlotSelectorFactory = (/**
     * @param {?} pageContext
     * @param {?} position
     * @return {?}
     */
    function (pageContext, position) {
        return store.createSelector(getPageData(pageContext), (/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            if (entity) {
                return entity.slots[position] || { components: [] };
            }
        }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var cmsGroup_selectors = /*#__PURE__*/Object.freeze({
        getComponentState: getComponentState,
        getComponentEntities: getComponentEntities,
        componentStateSelectorFactory: componentStateSelectorFactory,
        componentSelectorFactory: componentSelectorFactory,
        getComponentsState: getComponentsState,
        componentsContextSelectorFactory: componentsContextSelectorFactory,
        componentsLoaderStateSelectorFactory: componentsLoaderStateSelectorFactory,
        componentsContextExistsSelectorFactory: componentsContextExistsSelectorFactory,
        componentsDataSelectorFactory: componentsDataSelectorFactory,
        componentsSelectorFactory: componentsSelectorFactory,
        getCmsState: getCmsState,
        getNavigationEntryItemState: getNavigationEntryItemState,
        getSelectedNavigationEntryItemState: getSelectedNavigationEntryItemState,
        getNavigationEntryItems: getNavigationEntryItems,
        getPageState: getPageState,
        getPageStateIndex: getPageStateIndex,
        getPageStateIndexEntityLoaderState: getPageStateIndexEntityLoaderState,
        getPageStateIndexLoaderState: getPageStateIndexLoaderState,
        getPageStateIndexValue: getPageStateIndexValue,
        getPageEntities: getPageEntities,
        getPageData: getPageData,
        getPageComponentTypes: getPageComponentTypes,
        getCurrentSlotSelectorFactory: getCurrentSlotSelectorFactory
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CURRENT_CONTEXT_KEY = 'current';
    /**
     *
     * Serializes the provided page context.
     * The pattern used for serialization is: `pageContext.type-pageContext.id`.
     *
     * @param {?} pageContext to serialize
     * @param {?=} ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.
     * Otherwise, the page context if fully serialized.
     * @return {?}
     */
    function serializePageContext(pageContext, ignoreContentPageId) {
        if (!pageContext) {
            return CURRENT_CONTEXT_KEY;
        }
        if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {
            return "" + pageContext.type;
        }
        return pageContext.type + "-" + pageContext.id;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmsService = /** @class */ (function () {
        function CmsService(store, routingService) {
            this.store = store;
            this.routingService = routingService;
            this._launchInSmartEdit = false;
            this.components = {};
        }
        Object.defineProperty(CmsService.prototype, "launchInSmartEdit", {
            /**
             * Set _launchInSmartEdit value
             */
            set: /**
             * Set _launchInSmartEdit value
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._launchInSmartEdit = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Whether the app launched in smart edit
         */
        /**
         * Whether the app launched in smart edit
         * @return {?}
         */
        CmsService.prototype.isLaunchInSmartEdit = /**
         * Whether the app launched in smart edit
         * @return {?}
         */
        function () {
            return this._launchInSmartEdit;
        };
        /**
         * Get current CMS page data
         */
        /**
         * Get current CMS page data
         * @return {?}
         */
        CmsService.prototype.getCurrentPage = /**
         * Get current CMS page data
         * @return {?}
         */
        function () {
            var _this = this;
            return this.routingService
                .getPageContext()
                .pipe(operators.switchMap((/**
             * @param {?} pageContext
             * @return {?}
             */
            function (pageContext) {
                return _this.store.select(getPageData(pageContext));
            })));
        };
        /**
         * Get CMS component data by uid
         *
         * This method can be safely and optimally used to load multiple components data at the same time.
         * Calling getComponentData multiple times for different components will always result in optimized
         * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.
         *
         * In case the component data is not present, the method will load it.
         * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.
         *
         * @param uid CMS component uid
         * @param pageContext if provided, it will be used to lookup the component data.
         */
        /**
         * Get CMS component data by uid
         *
         * This method can be safely and optimally used to load multiple components data at the same time.
         * Calling getComponentData multiple times for different components will always result in optimized
         * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.
         *
         * In case the component data is not present, the method will load it.
         * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.
         *
         * @template T
         * @param {?} uid CMS component uid
         * @param {?=} pageContext if provided, it will be used to lookup the component data.
         * @return {?}
         */
        CmsService.prototype.getComponentData = /**
         * Get CMS component data by uid
         *
         * This method can be safely and optimally used to load multiple components data at the same time.
         * Calling getComponentData multiple times for different components will always result in optimized
         * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.
         *
         * In case the component data is not present, the method will load it.
         * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.
         *
         * @template T
         * @param {?} uid CMS component uid
         * @param {?=} pageContext if provided, it will be used to lookup the component data.
         * @return {?}
         */
        function (uid, pageContext) {
            /** @type {?} */
            var context = serializePageContext(pageContext, true);
            if (!this.components[uid]) {
                // create the component data structure, if it doesn't already exist
                this.components[uid] = {};
            }
            /** @type {?} */
            var component = this.components[uid];
            if (!component[context]) {
                // create the component data and assign it to the component's context
                component[context] = this.createComponentData(uid, pageContext);
            }
            return (/** @type {?} */ (component[context]));
        };
        /**
         * @private
         * @template T
         * @param {?} uid
         * @param {?=} pageContext
         * @return {?}
         */
        CmsService.prototype.createComponentData = /**
         * @private
         * @template T
         * @param {?} uid
         * @param {?=} pageContext
         * @return {?}
         */
        function (uid, pageContext) {
            var _this = this;
            if (!pageContext) {
                return this.routingService.getPageContext().pipe(operators.filter((/**
                 * @param {?} currentContext
                 * @return {?}
                 */
                function (currentContext) { return !!currentContext; })), operators.switchMap((/**
                 * @param {?} currentContext
                 * @return {?}
                 */
                function (currentContext) {
                    return _this.getComponentData(uid, currentContext);
                })));
            }
            /** @type {?} */
            var context = serializePageContext(pageContext, true);
            /** @type {?} */
            var loading$ = rxjs.combineLatest([
                this.routingService.getNextPageContext(),
                this.store.pipe(store.select(componentsLoaderStateSelectorFactory(uid, context))),
            ]).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), nextContext = _b[0], loadingState = _b[1];
                /** @type {?} */
                var attemptedLoad = loadingState.loading || loadingState.success || loadingState.error;
                // if the requested context is the same as the one that's currently being navigated to
                // (as it might already been triggered and might be available shortly from page data)
                // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed
                /** @type {?} */
                var couldBeLoadedWithPageData = nextContext
                    ? serializePageContext(nextContext, true) === context
                    : false;
                if (!attemptedLoad && !couldBeLoadedWithPageData) {
                    _this.store.dispatch(new LoadCmsComponent(uid, pageContext));
                }
            })));
            /** @type {?} */
            var component$ = (/** @type {?} */ (this.store.pipe(store.select(componentsSelectorFactory(uid, context)), 
            // TODO(issue:6027) - this `filter` should be removed.
            // The reason for removal: with `filter` in place, when moving to a page that has restrictions, the component data will still emit the previous value.
            // Removing it causes some components to fail, because they are not checking
            // if the data is actually there. I noticed these that this component is failing, but there are possibly more:
            // - `tab-paragraph-container.component.ts` when visiting any PDP page
            operators.filter((/**
             * @param {?} component
             * @return {?}
             */
            function (component) { return !!component; })))));
            return rxjs.using((/**
             * @return {?}
             */
            function () { return loading$.subscribe(); }), (/**
             * @return {?}
             */
            function () { return component$; })).pipe(operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Given the position, get the content slot data
         * @param position : content slot position
         */
        /**
         * Given the position, get the content slot data
         * @param {?} position : content slot position
         * @return {?}
         */
        CmsService.prototype.getContentSlot = /**
         * Given the position, get the content slot data
         * @param {?} position : content slot position
         * @return {?}
         */
        function (position) {
            var _this = this;
            return this.routingService.getPageContext().pipe(operators.switchMap((/**
             * @param {?} pageContext
             * @return {?}
             */
            function (pageContext) {
                return _this.store.pipe(store.select(getCurrentSlotSelectorFactory(pageContext, position)), operators.filter(Boolean));
            })));
        };
        /**
         * Given navigation node uid, get items (with id and type) inside the navigation entries
         * @param navigationNodeUid : uid of the navigation node
         */
        /**
         * Given navigation node uid, get items (with id and type) inside the navigation entries
         * @param {?} navigationNodeUid : uid of the navigation node
         * @return {?}
         */
        CmsService.prototype.getNavigationEntryItems = /**
         * Given navigation node uid, get items (with id and type) inside the navigation entries
         * @param {?} navigationNodeUid : uid of the navigation node
         * @return {?}
         */
        function (navigationNodeUid) {
            return this.store.pipe(store.select(getNavigationEntryItems(navigationNodeUid)));
        };
        /**
         * Load navigation items data
         * @param rootUid : the uid of the root navigation node
         * @param itemList : list of items (with id and type)
         */
        /**
         * Load navigation items data
         * @param {?} rootUid : the uid of the root navigation node
         * @param {?} itemList : list of items (with id and type)
         * @return {?}
         */
        CmsService.prototype.loadNavigationItems = /**
         * Load navigation items data
         * @param {?} rootUid : the uid of the root navigation node
         * @param {?} itemList : list of items (with id and type)
         * @return {?}
         */
        function (rootUid, itemList) {
            this.store.dispatch(new LoadCmsNavigationItems({
                nodeId: rootUid,
                items: itemList,
            }));
        };
        /**
         * Refresh the content of the latest cms page
         */
        /**
         * Refresh the content of the latest cms page
         * @return {?}
         */
        CmsService.prototype.refreshLatestPage = /**
         * Refresh the content of the latest cms page
         * @return {?}
         */
        function () {
            var _this = this;
            this.routingService
                .getPageContext()
                .pipe(operators.take(1))
                .subscribe((/**
             * @param {?} pageContext
             * @return {?}
             */
            function (pageContext) {
                return _this.store.dispatch(new LoadCmsPageData(pageContext));
            }));
        };
        /**
         * Refresh the cms page content by page Id
         * @param pageId
         */
        /**
         * Refresh the cms page content by page Id
         * @param {?} pageId
         * @return {?}
         */
        CmsService.prototype.refreshPageById = /**
         * Refresh the cms page content by page Id
         * @param {?} pageId
         * @return {?}
         */
        function (pageId) {
            /** @type {?} */
            var pageContext = { id: pageId };
            this.store.dispatch(new LoadCmsPageData(pageContext));
        };
        /**
         * Refresh cms component's content
         * @param uid component uid
         * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.
         * If not specified, 'current' page context is used.
         */
        /**
         * Refresh cms component's content
         * @param {?} uid component uid
         * @param {?=} pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.
         * If not specified, 'current' page context is used.
         * @return {?}
         */
        CmsService.prototype.refreshComponent = /**
         * Refresh cms component's content
         * @param {?} uid component uid
         * @param {?=} pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.
         * If not specified, 'current' page context is used.
         * @return {?}
         */
        function (uid, pageContext) {
            this.store.dispatch(new LoadCmsComponent(uid, pageContext));
        };
        /**
         * Given pageContext, return the CMS page data
         * @param pageContext
         */
        /**
         * Given pageContext, return the CMS page data
         * @param {?} pageContext
         * @return {?}
         */
        CmsService.prototype.getPageState = /**
         * Given pageContext, return the CMS page data
         * @param {?} pageContext
         * @return {?}
         */
        function (pageContext) {
            return this.store.pipe(store.select(getPageData(pageContext)));
        };
        /**
         * Given pageContext, return the CMS page data
         * @param pageContext
         */
        /**
         * Given pageContext, return the CMS page data
         * @param {?} pageContext
         * @return {?}
         */
        CmsService.prototype.getPageComponentTypes = /**
         * Given pageContext, return the CMS page data
         * @param {?} pageContext
         * @return {?}
         */
        function (pageContext) {
            return this.store.pipe(store.select(getPageComponentTypes(pageContext)));
        };
        /**
         * Given pageContext, return whether the CMS page data exists or not
         * @param pageContext
         */
        /**
         * Given pageContext, return whether the CMS page data exists or not
         * @param {?} pageContext
         * @param {?=} forceReload
         * @return {?}
         */
        CmsService.prototype.hasPage = /**
         * Given pageContext, return whether the CMS page data exists or not
         * @param {?} pageContext
         * @param {?=} forceReload
         * @return {?}
         */
        function (pageContext, forceReload) {
            var _this = this;
            if (forceReload === void 0) { forceReload = false; }
            return this.store.pipe(store.select(getPageStateIndexLoaderState(pageContext)), operators.tap((/**
             * @param {?} entity
             * @return {?}
             */
            function (entity) {
                /** @type {?} */
                var attemptedLoad = entity.loading || entity.success || entity.error;
                /** @type {?} */
                var shouldReload = forceReload && !entity.loading;
                if (!attemptedLoad || shouldReload) {
                    _this.store.dispatch(new LoadCmsPageData(pageContext));
                    forceReload = false;
                }
            })), operators.filter((/**
             * @param {?} entity
             * @return {?}
             */
            function (entity) {
                if (!entity.hasOwnProperty('value')) {
                    // if we have incomplete state from SSR failed load transfer state,
                    // we should wait for reload and actual value
                    return false;
                }
                return entity.success || (entity.error && !entity.loading);
            })), operators.pluck('success'), operators.catchError((/**
             * @return {?}
             */
            function () { return rxjs.of(false); })));
        };
        /**
         * Given pageContext, return the CMS page data
         **/
        /**
         * Given pageContext, return the CMS page data
         *
         * @param {?} pageContext
         * @param {?=} forceReload
         * @return {?}
         */
        CmsService.prototype.getPage = /**
         * Given pageContext, return the CMS page data
         *
         * @param {?} pageContext
         * @param {?=} forceReload
         * @return {?}
         */
        function (pageContext, forceReload) {
            var _this = this;
            if (forceReload === void 0) { forceReload = false; }
            return this.hasPage(pageContext, forceReload).pipe(operators.switchMap((/**
             * @param {?} hasPage
             * @return {?}
             */
            function (hasPage) {
                return hasPage ? _this.getPageState(pageContext) : rxjs.of(null);
            })));
        };
        /**
         * @param {?} pageContext
         * @return {?}
         */
        CmsService.prototype.getPageIndex = /**
         * @param {?} pageContext
         * @return {?}
         */
        function (pageContext) {
            return this.store.pipe(store.select(getPageStateIndexValue(pageContext)));
        };
        /**
         * @param {?} pageContext
         * @param {?} value
         * @return {?}
         */
        CmsService.prototype.setPageFailIndex = /**
         * @param {?} pageContext
         * @param {?} value
         * @return {?}
         */
        function (pageContext, value) {
            this.store.dispatch(new CmsSetPageFailIndex(pageContext, value));
        };
        CmsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CmsService.ctorParameters = function () { return [
            { type: store.Store },
            { type: RoutingService }
        ]; };
        /** @nocollapse */ CmsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CmsService_Factory() { return new CmsService(core.ɵɵinject(store.Store), core.ɵɵinject(RoutingService)); }, token: CmsService, providedIn: "root" });
        return CmsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CmsService.prototype._launchInSmartEdit;
        /**
         * @type {?}
         * @private
         */
        CmsService.prototype.components;
        /**
         * @type {?}
         * @protected
         */
        CmsService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        CmsService.prototype.routingService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Page() { }
    if (false) {
        /** @type {?|undefined} */
        Page.prototype.pageId;
        /** @type {?|undefined} */
        Page.prototype.name;
        /** @type {?|undefined} */
        Page.prototype.type;
        /** @type {?|undefined} */
        Page.prototype.title;
        /** @type {?|undefined} */
        Page.prototype.template;
        /** @type {?|undefined} */
        Page.prototype.loadTime;
        /** @type {?} */
        Page.prototype.slots;
        /** @type {?|undefined} */
        Page.prototype.properties;
        /** @type {?|undefined} */
        Page.prototype.label;
    }
    /**
     * Represents the cms structure for pages, slots and components.
     * @record
     */
    function CmsStructureModel() { }
    if (false) {
        /** @type {?|undefined} */
        CmsStructureModel.prototype.page;
        /** @type {?|undefined} */
        CmsStructureModel.prototype.components;
    }
    /**
     * Represents the page meta data that can be used
     * to resolve page data and seo related data.
     * @record
     */
    function PageMeta() { }
    if (false) {
        /**
         * the page title is used for the page title tag which
         * is visible in the browser navigation as well as in the
         * Search Engine Result Page
         * @type {?|undefined}
         */
        PageMeta.prototype.title;
        /**
         * the page heading is typically used in the UI
         * @type {?|undefined}
         */
        PageMeta.prototype.heading;
        /**
         * the page description is used in the Search Engine Result Page
         * @type {?|undefined}
         */
        PageMeta.prototype.description;
        /**
         * the robots information drives search engines to index the page and
         * follow links in the page
         * @type {?|undefined}
         */
        PageMeta.prototype.robots;
        /**
         * image that can be added to the og:image metatag
         * @type {?|undefined}
         */
        PageMeta.prototype.image;
        /**
         * the list of breadcrumbs that can be rendered in the page UI.
         * @type {?|undefined}
         */
        PageMeta.prototype.breadcrumbs;
    }
    /**
     * @record
     */
    function BreadcrumbMeta() { }
    if (false) {
        /** @type {?} */
        BreadcrumbMeta.prototype.label;
        /** @type {?} */
        BreadcrumbMeta.prototype.link;
    }
    /** @enum {string} */
    var PageRobotsMeta = {
        INDEX: 'INDEX',
        NOINDEX: 'NOINDEX',
        FOLLOW: 'FOLLOW',
        NOFOLLOW: 'NOFOLLOW',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`
     * and the `CartPageTemplate`. If the cart page matches this template, the more generic
     * `ContentPageMetaResolver` is overriden by this resolver.
     *
     * The page title and robots are resolved in this implementation only.
     */
    var CartPageMetaResolver = /** @class */ (function (_super) {
        __extends(CartPageMetaResolver, _super);
        function CartPageMetaResolver(cms) {
            var _this = _super.call(this) || this;
            _this.cms = cms;
            _this.cms$ = _this.cms
                .getCurrentPage()
                .pipe(operators.filter((/**
             * @param {?} page
             * @return {?}
             */
            function (page) { return !!page; })));
            _this.pageType = PageType.CONTENT_PAGE;
            _this.pageTemplate = 'CartPageTemplate';
            return _this;
        }
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         */
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        CartPageMetaResolver.prototype.resolve = /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.cms$.pipe(operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                return rxjs.combineLatest([_this.resolveTitle(page), _this.resolveRobots()]);
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), title = _b[0], robots = _b[1];
                return ({ title: title, robots: robots });
            })));
        };
        /**
         * @param {?=} page
         * @return {?}
         */
        CartPageMetaResolver.prototype.resolveTitle = /**
         * @param {?=} page
         * @return {?}
         */
        function (page) {
            return page ? rxjs.of(page.title) : this.cms$.pipe(operators.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.title; })));
        };
        /**
         * @return {?}
         */
        CartPageMetaResolver.prototype.resolveRobots = /**
         * @return {?}
         */
        function () {
            return rxjs.of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);
        };
        CartPageMetaResolver.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CartPageMetaResolver.ctorParameters = function () { return [
            { type: CmsService }
        ]; };
        /** @nocollapse */ CartPageMetaResolver.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CartPageMetaResolver_Factory() { return new CartPageMetaResolver(core.ɵɵinject(CmsService)); }, token: CartPageMetaResolver, providedIn: "root" });
        return CartPageMetaResolver;
    }(PageMetaResolver));
    if (false) {
        /** @type {?} */
        CartPageMetaResolver.prototype.cms$;
        /**
         * @type {?}
         * @protected
         */
        CartPageMetaResolver.prototype.cms;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * Withdraw from the source observable when notifier emits a value
     *
     * Withdraw will result in resubscribing to the source observable
     * Operator is useful to kill ongoing emission transformation on notifier emission
     *
     * @template T
     * @param {?} notifier
     * @return {?}
     */
    function withdrawOn(notifier) {
        return (/**
         * @param {?} source
         * @return {?}
         */
        function (source) {
            return notifier.pipe(operators.startWith(undefined), operators.switchMapTo(source));
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CartEntryConnector = /** @class */ (function () {
        function CartEntryConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?=} quantity
         * @return {?}
         */
        CartEntryConnector.prototype.add = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} productCode
         * @param {?=} quantity
         * @return {?}
         */
        function (userId, cartId, productCode, quantity) {
            return this.adapter.add(userId, cartId, productCode, quantity);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} qty
         * @param {?=} pickupStore
         * @return {?}
         */
        CartEntryConnector.prototype.update = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @param {?} qty
         * @param {?=} pickupStore
         * @return {?}
         */
        function (userId, cartId, entryNumber, qty, pickupStore) {
            return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        CartEntryConnector.prototype.remove = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} entryNumber
         * @return {?}
         */
        function (userId, cartId, entryNumber) {
            return this.adapter.remove(userId, cartId, entryNumber);
        };
        CartEntryConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CartEntryConnector.ctorParameters = function () { return [
            { type: CartEntryAdapter }
        ]; };
        /** @nocollapse */ CartEntryConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CartEntryConnector_Factory() { return new CartEntryConnector(core.ɵɵinject(CartEntryAdapter)); }, token: CartEntryConnector, providedIn: "root" });
        return CartEntryConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CartEntryConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx effects will no longer be a part of public API
     *
     * TODO(issue:#4507)
     */
    var CartEntryEffects = /** @class */ (function () {
        function CartEntryEffects(actions$, cartEntryConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.cartEntryConnector = cartEntryConnector;
            this.contextChange$ = this.actions$.pipe(effects$d.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.addEntry$ = this.actions$.pipe(effects$d.ofType(CART_ADD_ENTRY), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartEntryConnector
                    .add(payload.userId, payload.cartId, payload.productCode, payload.quantity)
                    .pipe(operators.map((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) {
                    return new CartAddEntrySuccess(__assign({}, entry, { userId: payload.userId, cartId: payload.cartId }));
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new CartAddEntryFail(makeErrorSerializable(error)),
                        new CartProcessesDecrement(payload.cartId),
                        new LoadCart({
                            cartId: payload.cartId,
                            userId: payload.userId,
                        }),
                    ]);
                })));
            })), withdrawOn(this.contextChange$));
            this.removeEntry$ = this.actions$.pipe(effects$d.ofType(CART_REMOVE_ENTRY), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartEntryConnector
                    .remove(payload.userId, payload.cartId, payload.entry)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    return new CartRemoveEntrySuccess({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    });
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new CartRemoveEntryFail(makeErrorSerializable(error)),
                        new CartProcessesDecrement(payload.cartId),
                        new LoadCart({
                            cartId: payload.cartId,
                            userId: payload.userId,
                        }),
                    ]);
                })));
            })), withdrawOn(this.contextChange$));
            this.updateEntry$ = this.actions$.pipe(effects$d.ofType(CART_UPDATE_ENTRY), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartEntryConnector
                    .update(payload.userId, payload.cartId, payload.entry, payload.qty)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    return new CartUpdateEntrySuccess({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    });
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new CartUpdateEntryFail(makeErrorSerializable(error)),
                        new CartProcessesDecrement(payload.cartId),
                        new LoadCart({
                            cartId: payload.cartId,
                            userId: payload.userId,
                        }),
                    ]);
                })));
            })), withdrawOn(this.contextChange$));
        }
        CartEntryEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CartEntryEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CartEntryConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEntryEffects.prototype, "addEntry$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEntryEffects.prototype, "removeEntry$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEntryEffects.prototype, "updateEntry$", void 0);
        return CartEntryEffects;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CartEntryEffects.prototype.contextChange$;
        /** @type {?} */
        CartEntryEffects.prototype.addEntry$;
        /** @type {?} */
        CartEntryEffects.prototype.removeEntry$;
        /** @type {?} */
        CartEntryEffects.prototype.updateEntry$;
        /**
         * @type {?}
         * @private
         */
        CartEntryEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CartEntryEffects.prototype.cartEntryConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CartVoucherConnector = /** @class */ (function () {
        function CartVoucherConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        CartVoucherConnector.prototype.add = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        function (userId, cartId, voucherId) {
            return this.adapter.add(userId, cartId, voucherId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        CartVoucherConnector.prototype.remove = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} voucherId
         * @return {?}
         */
        function (userId, cartId, voucherId) {
            return this.adapter.remove(userId, cartId, voucherId);
        };
        CartVoucherConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CartVoucherConnector.ctorParameters = function () { return [
            { type: CartVoucherAdapter }
        ]; };
        /** @nocollapse */ CartVoucherConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CartVoucherConnector_Factory() { return new CartVoucherConnector(core.ɵɵinject(CartVoucherAdapter)); }, token: CartVoucherConnector, providedIn: "root" });
        return CartVoucherConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CartVoucherConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx effects will no longer be a part of public API
     *
     * TODO(issue:#4507)
     */
    var CartVoucherEffects = /** @class */ (function () {
        function CartVoucherEffects(actions$, cartVoucherConnector, messageService) {
            var _this = this;
            this.actions$ = actions$;
            this.cartVoucherConnector = cartVoucherConnector;
            this.messageService = messageService;
            this.addCartVoucher$ = this.actions$.pipe(effects$d.ofType(CART_ADD_VOUCHER), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartVoucherConnector
                    .add(payload.userId, payload.cartId, payload.voucherId)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    _this.showGlobalMessage('voucher.applyVoucherSuccess', payload.voucherId, GlobalMessageType.MSG_TYPE_CONFIRMATION);
                    return new CartAddVoucherSuccess({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    });
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new CartAddVoucherFail(makeErrorSerializable(error)),
                        new CartProcessesDecrement(payload.cartId),
                        new LoadCart({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                    ]);
                })));
            })));
            this.removeCartVoucher$ = this.actions$.pipe(effects$d.ofType(CART_REMOVE_VOUCHER), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartVoucherConnector
                    .remove(payload.userId, payload.cartId, payload.voucherId)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    _this.showGlobalMessage('voucher.removeVoucherSuccess', payload.voucherId, GlobalMessageType.MSG_TYPE_INFO);
                    return new CartRemoveVoucherSuccess({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    });
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new CartRemoveVoucherFail(makeErrorSerializable(error)),
                        new CartProcessesDecrement(payload.cartId),
                        new LoadCart({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                    ]);
                })));
            })));
        }
        /**
         * @private
         * @param {?} text
         * @param {?} param
         * @param {?} messageType
         * @return {?}
         */
        CartVoucherEffects.prototype.showGlobalMessage = /**
         * @private
         * @param {?} text
         * @param {?} param
         * @param {?} messageType
         * @return {?}
         */
        function (text, param, messageType) {
            this.messageService.add({ key: text, params: { voucherCode: param } }, messageType);
        };
        CartVoucherEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CartVoucherEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CartVoucherConnector },
            { type: GlobalMessageService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartVoucherEffects.prototype, "addCartVoucher$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartVoucherEffects.prototype, "removeCartVoucher$", void 0);
        return CartVoucherEffects;
    }());
    if (false) {
        /** @type {?} */
        CartVoucherEffects.prototype.addCartVoucher$;
        /** @type {?} */
        CartVoucherEffects.prototype.removeCartVoucher$;
        /**
         * @type {?}
         * @private
         */
        CartVoucherEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CartVoucherEffects.prototype.cartVoucherConnector;
        /**
         * @type {?}
         * @private
         */
        CartVoucherEffects.prototype.messageService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var VERIFY_ADDRESS = '[Checkout] Verify Address';
    /** @type {?} */
    var VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';
    /** @type {?} */
    var VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';
    /** @type {?} */
    var CLEAR_ADDRESS_VERIFICATION_RESULTS = '[Checkout] Clear Address Verification Results';
    var VerifyAddress = /** @class */ (function () {
        function VerifyAddress(payload) {
            this.payload = payload;
            this.type = VERIFY_ADDRESS;
        }
        return VerifyAddress;
    }());
    if (false) {
        /** @type {?} */
        VerifyAddress.prototype.type;
        /** @type {?} */
        VerifyAddress.prototype.payload;
    }
    var VerifyAddressFail = /** @class */ (function () {
        function VerifyAddressFail(payload) {
            this.payload = payload;
            this.type = VERIFY_ADDRESS_FAIL;
        }
        return VerifyAddressFail;
    }());
    if (false) {
        /** @type {?} */
        VerifyAddressFail.prototype.type;
        /** @type {?} */
        VerifyAddressFail.prototype.payload;
    }
    var VerifyAddressSuccess = /** @class */ (function () {
        function VerifyAddressSuccess(payload) {
            this.payload = payload;
            this.type = VERIFY_ADDRESS_SUCCESS;
        }
        return VerifyAddressSuccess;
    }());
    if (false) {
        /** @type {?} */
        VerifyAddressSuccess.prototype.type;
        /** @type {?} */
        VerifyAddressSuccess.prototype.payload;
    }
    var ClearAddressVerificationResults = /** @class */ (function () {
        function ClearAddressVerificationResults() {
            this.type = CLEAR_ADDRESS_VERIFICATION_RESULTS;
        }
        return ClearAddressVerificationResults;
    }());
    if (false) {
        /** @type {?} */
        ClearAddressVerificationResults.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_CARD_TYPES = '[Checkout] Load Card Types';
    /** @type {?} */
    var LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';
    /** @type {?} */
    var LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';
    var LoadCardTypes = /** @class */ (function () {
        function LoadCardTypes() {
            this.type = LOAD_CARD_TYPES;
        }
        return LoadCardTypes;
    }());
    if (false) {
        /** @type {?} */
        LoadCardTypes.prototype.type;
    }
    var LoadCardTypesFail = /** @class */ (function () {
        function LoadCardTypesFail(payload) {
            this.payload = payload;
            this.type = LOAD_CARD_TYPES_FAIL;
        }
        return LoadCardTypesFail;
    }());
    if (false) {
        /** @type {?} */
        LoadCardTypesFail.prototype.type;
        /** @type {?} */
        LoadCardTypesFail.prototype.payload;
    }
    var LoadCardTypesSuccess = /** @class */ (function () {
        function LoadCardTypesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_CARD_TYPES_SUCCESS;
        }
        return LoadCardTypesSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadCardTypesSuccess.prototype.type;
        /** @type {?} */
        LoadCardTypesSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CHECKOUT_FEATURE = 'checkout';
    /** @type {?} */
    var CHECKOUT_DETAILS = '[Checkout] Checkout Details';
    /** @type {?} */
    var SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';
    /** @type {?} */
    var SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';
    /** @type {?} */
    var SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID = 'setSupportedDeliveryMode';
    /** @type {?} */
    var SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';
    /**
     * @record
     */
    function StateWithCheckout() { }
    if (false) {
        /* Skipping unnamed member:
        [CHECKOUT_FEATURE]: CheckoutState;*/
    }
    /**
     * @record
     */
    function AddressVerificationState() { }
    if (false) {
        /** @type {?} */
        AddressVerificationState.prototype.results;
    }
    /**
     * @record
     */
    function CardTypesState() { }
    if (false) {
        /** @type {?} */
        CardTypesState.prototype.entities;
    }
    /**
     * @record
     */
    function CheckoutStepsState() { }
    if (false) {
        /** @type {?} */
        CheckoutStepsState.prototype.address;
        /** @type {?} */
        CheckoutStepsState.prototype.deliveryMode;
        /** @type {?} */
        CheckoutStepsState.prototype.paymentDetails;
        /** @type {?} */
        CheckoutStepsState.prototype.orderDetails;
    }
    /**
     * @record
     */
    function CheckoutState() { }
    if (false) {
        /** @type {?} */
        CheckoutState.prototype.steps;
        /** @type {?} */
        CheckoutState.prototype.cardTypes;
        /** @type {?} */
        CheckoutState.prototype.addressVerification;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CLEAR_CHECKOUT_DELIVERY_ADDRESS = '[Checkout] Clear Checkout Delivery Address';
    /** @type {?} */
    var CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Clear Checkout Delivery Address Success';
    /** @type {?} */
    var CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL = '[Checkout] Clear Checkout Delivery Address Fail';
    /** @type {?} */
    var CLEAR_CHECKOUT_DELIVERY_MODE = '[Checkout] Clear Checkout Delivery Mode';
    /** @type {?} */
    var CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS = '[Checkout] Clear Checkout Delivery Mode Success';
    /** @type {?} */
    var CLEAR_CHECKOUT_DELIVERY_MODE_FAIL = '[Checkout] Clear Checkout Delivery Mode Fail';
    /** @type {?} */
    var ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';
    /** @type {?} */
    var ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';
    /** @type {?} */
    var ADD_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Add Delivery Address Success';
    /** @type {?} */
    var SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';
    /** @type {?} */
    var SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';
    /** @type {?} */
    var SET_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Set Delivery Address Success';
    /** @type {?} */
    var RESET_SET_DELIVERY_ADDRESS_PROCESS = '[Checkout] Reset Set Delivery Address Process';
    /** @type {?} */
    var LOAD_SUPPORTED_DELIVERY_MODES = '[Checkout] Load Supported Delivery Modes';
    /** @type {?} */
    var LOAD_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Load Supported Delivery Modes Fail';
    /** @type {?} */
    var LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Load Supported Delivery Modes Success';
    /** @type {?} */
    var CLEAR_SUPPORTED_DELIVERY_MODES = '[Checkout] Clear Supported Delivery Modes';
    /** @type {?} */
    var SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';
    /** @type {?} */
    var SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';
    /** @type {?} */
    var SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';
    /** @type {?} */
    var RESET_SET_DELIVERY_MODE_PROCESS = '[Checkout] Reset Set Delivery Mode Process';
    /** @type {?} */
    var SET_SUPPORTED_DELIVERY_MODES = '[Checkout] Set Supported Delivery Modes';
    /** @type {?} */
    var SET_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Set Supported Delivery Modes Fail';
    /** @type {?} */
    var SET_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Set Supported Delivery Modes Success';
    /** @type {?} */
    var RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS = '[Checkout] Reset Set Supported Delivery Modes Process';
    /** @type {?} */
    var CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';
    /** @type {?} */
    var CREATE_PAYMENT_DETAILS_FAIL = '[Checkout] Create Payment Details Fail';
    /** @type {?} */
    var CREATE_PAYMENT_DETAILS_SUCCESS = '[Checkout] Create Payment Details Success';
    /** @type {?} */
    var SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';
    /** @type {?} */
    var SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';
    /** @type {?} */
    var SET_PAYMENT_DETAILS_SUCCESS = '[Checkout] Set Payment Details Success';
    /** @type {?} */
    var RESET_SET_PAYMENT_DETAILS_PROCESS = '[Checkout] Reset Set Payment Details Process';
    /** @type {?} */
    var PLACE_ORDER = '[Checkout] Place Order';
    /** @type {?} */
    var PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';
    /** @type {?} */
    var PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';
    /** @type {?} */
    var CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';
    /** @type {?} */
    var CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';
    /** @type {?} */
    var LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';
    /** @type {?} */
    var LOAD_CHECKOUT_DETAILS_FAIL = '[Checkout] Load Checkout Details Fail';
    /** @type {?} */
    var LOAD_CHECKOUT_DETAILS_SUCCESS = '[Checkout] Load Checkout Details Success';
    /** @type {?} */
    var CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';
    /** @type {?} */
    var PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';
    var AddDeliveryAddress = /** @class */ (function () {
        function AddDeliveryAddress(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS;
        }
        return AddDeliveryAddress;
    }());
    if (false) {
        /** @type {?} */
        AddDeliveryAddress.prototype.type;
        /** @type {?} */
        AddDeliveryAddress.prototype.payload;
    }
    var AddDeliveryAddressFail = /** @class */ (function () {
        function AddDeliveryAddressFail(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS_FAIL;
        }
        return AddDeliveryAddressFail;
    }());
    if (false) {
        /** @type {?} */
        AddDeliveryAddressFail.prototype.type;
        /** @type {?} */
        AddDeliveryAddressFail.prototype.payload;
    }
    var AddDeliveryAddressSuccess = /** @class */ (function () {
        function AddDeliveryAddressSuccess(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS_SUCCESS;
        }
        return AddDeliveryAddressSuccess;
    }());
    if (false) {
        /** @type {?} */
        AddDeliveryAddressSuccess.prototype.type;
        /** @type {?} */
        AddDeliveryAddressSuccess.prototype.payload;
    }
    var SetDeliveryAddress = /** @class */ (function (_super) {
        __extends(SetDeliveryAddress, _super);
        function SetDeliveryAddress(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS;
            return _this;
        }
        return SetDeliveryAddress;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        SetDeliveryAddress.prototype.type;
        /** @type {?} */
        SetDeliveryAddress.prototype.payload;
    }
    var SetDeliveryAddressFail = /** @class */ (function (_super) {
        __extends(SetDeliveryAddressFail, _super);
        function SetDeliveryAddressFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS_FAIL;
            return _this;
        }
        return SetDeliveryAddressFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        SetDeliveryAddressFail.prototype.type;
        /** @type {?} */
        SetDeliveryAddressFail.prototype.payload;
    }
    var SetDeliveryAddressSuccess = /** @class */ (function (_super) {
        __extends(SetDeliveryAddressSuccess, _super);
        function SetDeliveryAddressSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS_SUCCESS;
            return _this;
        }
        return SetDeliveryAddressSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        SetDeliveryAddressSuccess.prototype.type;
        /** @type {?} */
        SetDeliveryAddressSuccess.prototype.payload;
    }
    var ResetSetDeliveryAddressProcess = /** @class */ (function (_super) {
        __extends(ResetSetDeliveryAddressProcess, _super);
        function ResetSetDeliveryAddressProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.type = RESET_SET_DELIVERY_ADDRESS_PROCESS;
            return _this;
        }
        return ResetSetDeliveryAddressProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetSetDeliveryAddressProcess.prototype.type;
    }
    var LoadSupportedDeliveryModes = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModes, _super);
        function LoadSupportedDeliveryModes(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES;
            return _this;
        }
        return LoadSupportedDeliveryModes;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        LoadSupportedDeliveryModes.prototype.type;
        /** @type {?} */
        LoadSupportedDeliveryModes.prototype.payload;
    }
    var LoadSupportedDeliveryModesFail = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModesFail, _super);
        function LoadSupportedDeliveryModesFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;
            return _this;
        }
        return LoadSupportedDeliveryModesFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        LoadSupportedDeliveryModesFail.prototype.type;
        /** @type {?} */
        LoadSupportedDeliveryModesFail.prototype.payload;
    }
    var LoadSupportedDeliveryModesSuccess = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModesSuccess, _super);
        function LoadSupportedDeliveryModesSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;
            return _this;
        }
        return LoadSupportedDeliveryModesSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        LoadSupportedDeliveryModesSuccess.prototype.type;
        /** @type {?} */
        LoadSupportedDeliveryModesSuccess.prototype.payload;
    }
    var ResetLoadSupportedDeliveryModesProcess = /** @class */ (function (_super) {
        __extends(ResetLoadSupportedDeliveryModesProcess, _super);
        function ResetLoadSupportedDeliveryModesProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;
            return _this;
        }
        return ResetLoadSupportedDeliveryModesProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetLoadSupportedDeliveryModesProcess.prototype.type;
    }
    var SetDeliveryMode = /** @class */ (function (_super) {
        __extends(SetDeliveryMode, _super);
        function SetDeliveryMode(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE;
            return _this;
        }
        return SetDeliveryMode;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        SetDeliveryMode.prototype.type;
        /** @type {?} */
        SetDeliveryMode.prototype.payload;
    }
    var SetDeliveryModeFail = /** @class */ (function (_super) {
        __extends(SetDeliveryModeFail, _super);
        function SetDeliveryModeFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE_FAIL;
            return _this;
        }
        return SetDeliveryModeFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        SetDeliveryModeFail.prototype.type;
        /** @type {?} */
        SetDeliveryModeFail.prototype.payload;
    }
    var SetDeliveryModeSuccess = /** @class */ (function (_super) {
        __extends(SetDeliveryModeSuccess, _super);
        function SetDeliveryModeSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE_SUCCESS;
            return _this;
        }
        return SetDeliveryModeSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        SetDeliveryModeSuccess.prototype.type;
        /** @type {?} */
        SetDeliveryModeSuccess.prototype.payload;
    }
    var ResetSetDeliveryModeProcess = /** @class */ (function (_super) {
        __extends(ResetSetDeliveryModeProcess, _super);
        function ResetSetDeliveryModeProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.type = RESET_SET_DELIVERY_MODE_PROCESS;
            return _this;
        }
        return ResetSetDeliveryModeProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetSetDeliveryModeProcess.prototype.type;
    }
    var CreatePaymentDetails = /** @class */ (function (_super) {
        __extends(CreatePaymentDetails, _super);
        function CreatePaymentDetails(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CREATE_PAYMENT_DETAILS;
            return _this;
        }
        return CreatePaymentDetails;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        CreatePaymentDetails.prototype.type;
        /** @type {?} */
        CreatePaymentDetails.prototype.payload;
    }
    var CreatePaymentDetailsFail = /** @class */ (function (_super) {
        __extends(CreatePaymentDetailsFail, _super);
        function CreatePaymentDetailsFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CREATE_PAYMENT_DETAILS_FAIL;
            return _this;
        }
        return CreatePaymentDetailsFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        CreatePaymentDetailsFail.prototype.type;
        /** @type {?} */
        CreatePaymentDetailsFail.prototype.payload;
    }
    var CreatePaymentDetailsSuccess = /** @class */ (function () {
        function CreatePaymentDetailsSuccess(payload) {
            this.payload = payload;
            this.type = CREATE_PAYMENT_DETAILS_SUCCESS;
        }
        return CreatePaymentDetailsSuccess;
    }());
    if (false) {
        /** @type {?} */
        CreatePaymentDetailsSuccess.prototype.type;
        /** @type {?} */
        CreatePaymentDetailsSuccess.prototype.payload;
    }
    var PaymentProcessSuccess = /** @class */ (function (_super) {
        __extends(PaymentProcessSuccess, _super);
        function PaymentProcessSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.type = PAYMENT_PROCESS_SUCCESS;
            return _this;
        }
        return PaymentProcessSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        PaymentProcessSuccess.prototype.type;
    }
    var SetPaymentDetails = /** @class */ (function (_super) {
        __extends(SetPaymentDetails, _super);
        function SetPaymentDetails(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS;
            return _this;
        }
        return SetPaymentDetails;
    }(EntityLoadAction));
    if (false) {
        /** @type {?} */
        SetPaymentDetails.prototype.type;
        /** @type {?} */
        SetPaymentDetails.prototype.payload;
    }
    var SetPaymentDetailsFail = /** @class */ (function (_super) {
        __extends(SetPaymentDetailsFail, _super);
        function SetPaymentDetailsFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS_FAIL;
            return _this;
        }
        return SetPaymentDetailsFail;
    }(EntityFailAction));
    if (false) {
        /** @type {?} */
        SetPaymentDetailsFail.prototype.type;
        /** @type {?} */
        SetPaymentDetailsFail.prototype.payload;
    }
    var SetPaymentDetailsSuccess = /** @class */ (function (_super) {
        __extends(SetPaymentDetailsSuccess, _super);
        function SetPaymentDetailsSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS_SUCCESS;
            return _this;
        }
        return SetPaymentDetailsSuccess;
    }(EntitySuccessAction));
    if (false) {
        /** @type {?} */
        SetPaymentDetailsSuccess.prototype.type;
        /** @type {?} */
        SetPaymentDetailsSuccess.prototype.payload;
    }
    var ResetSetPaymentDetailsProcess = /** @class */ (function (_super) {
        __extends(ResetSetPaymentDetailsProcess, _super);
        function ResetSetPaymentDetailsProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.type = RESET_SET_PAYMENT_DETAILS_PROCESS;
            return _this;
        }
        return ResetSetPaymentDetailsProcess;
    }(EntityResetAction));
    if (false) {
        /** @type {?} */
        ResetSetPaymentDetailsProcess.prototype.type;
    }
    var PlaceOrder = /** @class */ (function () {
        function PlaceOrder(payload) {
            this.payload = payload;
            this.type = PLACE_ORDER;
        }
        return PlaceOrder;
    }());
    if (false) {
        /** @type {?} */
        PlaceOrder.prototype.type;
        /** @type {?} */
        PlaceOrder.prototype.payload;
    }
    var PlaceOrderFail = /** @class */ (function () {
        function PlaceOrderFail(payload) {
            this.payload = payload;
            this.type = PLACE_ORDER_FAIL;
        }
        return PlaceOrderFail;
    }());
    if (false) {
        /** @type {?} */
        PlaceOrderFail.prototype.type;
        /** @type {?} */
        PlaceOrderFail.prototype.payload;
    }
    var PlaceOrderSuccess = /** @class */ (function () {
        function PlaceOrderSuccess(payload) {
            this.payload = payload;
            this.type = PLACE_ORDER_SUCCESS;
        }
        return PlaceOrderSuccess;
    }());
    if (false) {
        /** @type {?} */
        PlaceOrderSuccess.prototype.type;
        /** @type {?} */
        PlaceOrderSuccess.prototype.payload;
    }
    var ClearSupportedDeliveryModes = /** @class */ (function () {
        function ClearSupportedDeliveryModes() {
            this.type = CLEAR_SUPPORTED_DELIVERY_MODES;
        }
        return ClearSupportedDeliveryModes;
    }());
    if (false) {
        /** @type {?} */
        ClearSupportedDeliveryModes.prototype.type;
    }
    var ClearCheckoutStep = /** @class */ (function () {
        function ClearCheckoutStep(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_STEP;
        }
        return ClearCheckoutStep;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutStep.prototype.type;
        /** @type {?} */
        ClearCheckoutStep.prototype.payload;
    }
    var ClearCheckoutData = /** @class */ (function () {
        function ClearCheckoutData() {
            this.type = CLEAR_CHECKOUT_DATA;
        }
        return ClearCheckoutData;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutData.prototype.type;
    }
    var LoadCheckoutDetails = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetails, _super);
        function LoadCheckoutDetails(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS;
            return _this;
        }
        return LoadCheckoutDetails;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadCheckoutDetails.prototype.type;
        /** @type {?} */
        LoadCheckoutDetails.prototype.payload;
    }
    var LoadCheckoutDetailsFail = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetailsFail, _super);
        function LoadCheckoutDetailsFail(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS_FAIL;
            return _this;
        }
        return LoadCheckoutDetailsFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadCheckoutDetailsFail.prototype.type;
        /** @type {?} */
        LoadCheckoutDetailsFail.prototype.payload;
    }
    var LoadCheckoutDetailsSuccess = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetailsSuccess, _super);
        function LoadCheckoutDetailsSuccess(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS_SUCCESS;
            return _this;
        }
        return LoadCheckoutDetailsSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadCheckoutDetailsSuccess.prototype.type;
        /** @type {?} */
        LoadCheckoutDetailsSuccess.prototype.payload;
    }
    var CheckoutClearMiscsData = /** @class */ (function () {
        function CheckoutClearMiscsData() {
            this.type = CHECKOUT_CLEAR_MISCS_DATA;
        }
        return CheckoutClearMiscsData;
    }());
    if (false) {
        /** @type {?} */
        CheckoutClearMiscsData.prototype.type;
    }
    var ClearCheckoutDeliveryAddress = /** @class */ (function () {
        function ClearCheckoutDeliveryAddress(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;
        }
        return ClearCheckoutDeliveryAddress;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutDeliveryAddress.prototype.type;
        /** @type {?} */
        ClearCheckoutDeliveryAddress.prototype.payload;
    }
    var ClearCheckoutDeliveryAddressSuccess = /** @class */ (function () {
        function ClearCheckoutDeliveryAddressSuccess() {
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;
        }
        return ClearCheckoutDeliveryAddressSuccess;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutDeliveryAddressSuccess.prototype.type;
    }
    var ClearCheckoutDeliveryAddressFail = /** @class */ (function () {
        function ClearCheckoutDeliveryAddressFail(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;
        }
        return ClearCheckoutDeliveryAddressFail;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutDeliveryAddressFail.prototype.type;
        /** @type {?} */
        ClearCheckoutDeliveryAddressFail.prototype.payload;
    }
    var ClearCheckoutDeliveryMode = /** @class */ (function () {
        function ClearCheckoutDeliveryMode(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_MODE;
        }
        return ClearCheckoutDeliveryMode;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutDeliveryMode.prototype.type;
        /** @type {?} */
        ClearCheckoutDeliveryMode.prototype.payload;
    }
    var ClearCheckoutDeliveryModeSuccess = /** @class */ (function () {
        function ClearCheckoutDeliveryModeSuccess(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;
        }
        return ClearCheckoutDeliveryModeSuccess;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutDeliveryModeSuccess.prototype.type;
        /** @type {?} */
        ClearCheckoutDeliveryModeSuccess.prototype.payload;
    }
    var ClearCheckoutDeliveryModeFail = /** @class */ (function () {
        function ClearCheckoutDeliveryModeFail(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;
        }
        return ClearCheckoutDeliveryModeFail;
    }());
    if (false) {
        /** @type {?} */
        ClearCheckoutDeliveryModeFail.prototype.type;
        /** @type {?} */
        ClearCheckoutDeliveryModeFail.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var checkoutGroup_actions = /*#__PURE__*/Object.freeze({
        VERIFY_ADDRESS: VERIFY_ADDRESS,
        VERIFY_ADDRESS_FAIL: VERIFY_ADDRESS_FAIL,
        VERIFY_ADDRESS_SUCCESS: VERIFY_ADDRESS_SUCCESS,
        CLEAR_ADDRESS_VERIFICATION_RESULTS: CLEAR_ADDRESS_VERIFICATION_RESULTS,
        VerifyAddress: VerifyAddress,
        VerifyAddressFail: VerifyAddressFail,
        VerifyAddressSuccess: VerifyAddressSuccess,
        ClearAddressVerificationResults: ClearAddressVerificationResults,
        LOAD_CARD_TYPES: LOAD_CARD_TYPES,
        LOAD_CARD_TYPES_FAIL: LOAD_CARD_TYPES_FAIL,
        LOAD_CARD_TYPES_SUCCESS: LOAD_CARD_TYPES_SUCCESS,
        LoadCardTypes: LoadCardTypes,
        LoadCardTypesFail: LoadCardTypesFail,
        LoadCardTypesSuccess: LoadCardTypesSuccess,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL: CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL,
        CLEAR_CHECKOUT_DELIVERY_MODE: CLEAR_CHECKOUT_DELIVERY_MODE,
        CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS: CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS,
        CLEAR_CHECKOUT_DELIVERY_MODE_FAIL: CLEAR_CHECKOUT_DELIVERY_MODE_FAIL,
        ADD_DELIVERY_ADDRESS: ADD_DELIVERY_ADDRESS,
        ADD_DELIVERY_ADDRESS_FAIL: ADD_DELIVERY_ADDRESS_FAIL,
        ADD_DELIVERY_ADDRESS_SUCCESS: ADD_DELIVERY_ADDRESS_SUCCESS,
        SET_DELIVERY_ADDRESS: SET_DELIVERY_ADDRESS,
        SET_DELIVERY_ADDRESS_FAIL: SET_DELIVERY_ADDRESS_FAIL,
        SET_DELIVERY_ADDRESS_SUCCESS: SET_DELIVERY_ADDRESS_SUCCESS,
        RESET_SET_DELIVERY_ADDRESS_PROCESS: RESET_SET_DELIVERY_ADDRESS_PROCESS,
        LOAD_SUPPORTED_DELIVERY_MODES: LOAD_SUPPORTED_DELIVERY_MODES,
        LOAD_SUPPORTED_DELIVERY_MODES_FAIL: LOAD_SUPPORTED_DELIVERY_MODES_FAIL,
        LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS,
        CLEAR_SUPPORTED_DELIVERY_MODES: CLEAR_SUPPORTED_DELIVERY_MODES,
        SET_DELIVERY_MODE: SET_DELIVERY_MODE,
        SET_DELIVERY_MODE_FAIL: SET_DELIVERY_MODE_FAIL,
        SET_DELIVERY_MODE_SUCCESS: SET_DELIVERY_MODE_SUCCESS,
        RESET_SET_DELIVERY_MODE_PROCESS: RESET_SET_DELIVERY_MODE_PROCESS,
        SET_SUPPORTED_DELIVERY_MODES: SET_SUPPORTED_DELIVERY_MODES,
        SET_SUPPORTED_DELIVERY_MODES_FAIL: SET_SUPPORTED_DELIVERY_MODES_FAIL,
        SET_SUPPORTED_DELIVERY_MODES_SUCCESS: SET_SUPPORTED_DELIVERY_MODES_SUCCESS,
        RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS: RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS,
        CREATE_PAYMENT_DETAILS: CREATE_PAYMENT_DETAILS,
        CREATE_PAYMENT_DETAILS_FAIL: CREATE_PAYMENT_DETAILS_FAIL,
        CREATE_PAYMENT_DETAILS_SUCCESS: CREATE_PAYMENT_DETAILS_SUCCESS,
        SET_PAYMENT_DETAILS: SET_PAYMENT_DETAILS,
        SET_PAYMENT_DETAILS_FAIL: SET_PAYMENT_DETAILS_FAIL,
        SET_PAYMENT_DETAILS_SUCCESS: SET_PAYMENT_DETAILS_SUCCESS,
        RESET_SET_PAYMENT_DETAILS_PROCESS: RESET_SET_PAYMENT_DETAILS_PROCESS,
        PLACE_ORDER: PLACE_ORDER,
        PLACE_ORDER_FAIL: PLACE_ORDER_FAIL,
        PLACE_ORDER_SUCCESS: PLACE_ORDER_SUCCESS,
        CLEAR_CHECKOUT_STEP: CLEAR_CHECKOUT_STEP,
        CLEAR_CHECKOUT_DATA: CLEAR_CHECKOUT_DATA,
        LOAD_CHECKOUT_DETAILS: LOAD_CHECKOUT_DETAILS,
        LOAD_CHECKOUT_DETAILS_FAIL: LOAD_CHECKOUT_DETAILS_FAIL,
        LOAD_CHECKOUT_DETAILS_SUCCESS: LOAD_CHECKOUT_DETAILS_SUCCESS,
        CHECKOUT_CLEAR_MISCS_DATA: CHECKOUT_CLEAR_MISCS_DATA,
        PAYMENT_PROCESS_SUCCESS: PAYMENT_PROCESS_SUCCESS,
        AddDeliveryAddress: AddDeliveryAddress,
        AddDeliveryAddressFail: AddDeliveryAddressFail,
        AddDeliveryAddressSuccess: AddDeliveryAddressSuccess,
        SetDeliveryAddress: SetDeliveryAddress,
        SetDeliveryAddressFail: SetDeliveryAddressFail,
        SetDeliveryAddressSuccess: SetDeliveryAddressSuccess,
        ResetSetDeliveryAddressProcess: ResetSetDeliveryAddressProcess,
        LoadSupportedDeliveryModes: LoadSupportedDeliveryModes,
        LoadSupportedDeliveryModesFail: LoadSupportedDeliveryModesFail,
        LoadSupportedDeliveryModesSuccess: LoadSupportedDeliveryModesSuccess,
        ResetLoadSupportedDeliveryModesProcess: ResetLoadSupportedDeliveryModesProcess,
        SetDeliveryMode: SetDeliveryMode,
        SetDeliveryModeFail: SetDeliveryModeFail,
        SetDeliveryModeSuccess: SetDeliveryModeSuccess,
        ResetSetDeliveryModeProcess: ResetSetDeliveryModeProcess,
        CreatePaymentDetails: CreatePaymentDetails,
        CreatePaymentDetailsFail: CreatePaymentDetailsFail,
        CreatePaymentDetailsSuccess: CreatePaymentDetailsSuccess,
        PaymentProcessSuccess: PaymentProcessSuccess,
        SetPaymentDetails: SetPaymentDetails,
        SetPaymentDetailsFail: SetPaymentDetailsFail,
        SetPaymentDetailsSuccess: SetPaymentDetailsSuccess,
        ResetSetPaymentDetailsProcess: ResetSetPaymentDetailsProcess,
        PlaceOrder: PlaceOrder,
        PlaceOrderFail: PlaceOrderFail,
        PlaceOrderSuccess: PlaceOrderSuccess,
        ClearSupportedDeliveryModes: ClearSupportedDeliveryModes,
        ClearCheckoutStep: ClearCheckoutStep,
        ClearCheckoutData: ClearCheckoutData,
        LoadCheckoutDetails: LoadCheckoutDetails,
        LoadCheckoutDetailsFail: LoadCheckoutDetailsFail,
        LoadCheckoutDetailsSuccess: LoadCheckoutDetailsSuccess,
        CheckoutClearMiscsData: CheckoutClearMiscsData,
        ClearCheckoutDeliveryAddress: ClearCheckoutDeliveryAddress,
        ClearCheckoutDeliveryAddressSuccess: ClearCheckoutDeliveryAddressSuccess,
        ClearCheckoutDeliveryAddressFail: ClearCheckoutDeliveryAddressFail,
        ClearCheckoutDeliveryMode: ClearCheckoutDeliveryMode,
        ClearCheckoutDeliveryModeSuccess: ClearCheckoutDeliveryModeSuccess,
        ClearCheckoutDeliveryModeFail: ClearCheckoutDeliveryModeFail
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CartConnector = /** @class */ (function () {
        function CartConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        CartConnector.prototype.loadAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.adapter.loadAll(userId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CartConnector.prototype.load = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.load(userId, cartId);
        };
        /**
         * @param {?} userId
         * @param {?=} oldCartId
         * @param {?=} toMergeCartGuid
         * @return {?}
         */
        CartConnector.prototype.create = /**
         * @param {?} userId
         * @param {?=} oldCartId
         * @param {?=} toMergeCartGuid
         * @return {?}
         */
        function (userId, oldCartId, toMergeCartGuid) {
            return this.adapter.create(userId, oldCartId, toMergeCartGuid);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CartConnector.prototype.delete = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.delete(userId, cartId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} email
         * @return {?}
         */
        CartConnector.prototype.addEmail = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} email
         * @return {?}
         */
        function (userId, cartId, email) {
            return this.adapter.addEmail(userId, cartId, email);
        };
        CartConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CartConnector.ctorParameters = function () { return [
            { type: CartAdapter }
        ]; };
        /** @nocollapse */ CartConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CartConnector_Factory() { return new CartConnector(core.ɵɵinject(CartAdapter)); }, token: CartConnector, providedIn: "root" });
        return CartConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CartConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx effects will no longer be a part of public API
     *
     * TODO(issue:#4507)
     */
    var CartEffects = /** @class */ (function () {
        function CartEffects(actions$, cartConnector, cartData, store$1) {
            var _this = this;
            this.actions$ = actions$;
            this.cartConnector = cartConnector;
            this.cartData = cartData;
            this.store = store$1;
            this.contextChange$ = this.actions$.pipe(effects$d.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.loadCart$ = this.actions$.pipe(effects$d.ofType(LOAD_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.groupBy((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) { return payload.cartId; })), operators.mergeMap((/**
             * @param {?} group$
             * @return {?}
             */
            function (group$) {
                return group$.pipe(operators.switchMap((/**
                 * @param {?} payload
                 * @return {?}
                 */
                function (payload) {
                    return rxjs.of(payload).pipe(operators.withLatestFrom(
                    // TODO: deprecated -> remove check for store in 2.0 when store will be required
                    !_this.store
                        ? rxjs.of(false)
                        : _this.store.pipe(store.select(getCartHasPendingProcessesSelectorFactory(payload.cartId)))));
                })), operators.filter((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], hasPendingProcesses = _b[1];
                    return !hasPendingProcesses;
                })), operators.map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 1), payload = _b[0];
                    return payload;
                })), operators.switchMap((/**
                 * @param {?} payload
                 * @return {?}
                 */
                function (payload) {
                    /** @type {?} */
                    var loadCartParams = {
                        userId: (payload && payload.userId) || _this.cartData.userId,
                        cartId: (payload && payload.cartId) || _this.cartData.cartId,
                    };
                    if (_this.isMissingData(loadCartParams)) {
                        return rxjs.from([
                            new LoadCartFail({}),
                            new LoadMultiCartFail({
                                cartId: loadCartParams.cartId,
                            }),
                        ]);
                    }
                    return _this.cartConnector
                        .load(loadCartParams.userId, loadCartParams.cartId)
                        .pipe(
                    // TODO: remove with the `cart` store feature
                    operators.withLatestFrom(
                    // TODO: deprecated -> remove check for store in 2.0 when store will be required
                    !_this.store
                        ? rxjs.of(payload.cartId)
                        : _this.store.pipe(store.select(getActiveCartId))), operators.mergeMap((/**
                     * @param {?} __0
                     * @return {?}
                     */
                    function (_a) {
                        var _b = __read(_a, 2), cart = _b[0], activeCartId = _b[1];
                        /** @type {?} */
                        var actions = [];
                        if (cart) {
                            // `cart` store branch should only be updated for active cart
                            // avoid dispatching LoadCartSuccess action on different cart loads
                            if (loadCartParams.cartId === activeCartId ||
                                loadCartParams.cartId === OCC_CART_ID_CURRENT) {
                                actions.push(new LoadCartSuccess(cart));
                            }
                            actions.push(new LoadMultiCartSuccess({
                                cart: cart,
                                userId: loadCartParams.userId,
                                extraData: payload.extraData,
                            }));
                            if (loadCartParams.cartId === OCC_CART_ID_CURRENT) {
                                // Removing cart from entity object under `current` key as it is no longer needed.
                                // Current cart is loaded under it's code entity.
                                actions.push(new RemoveCart(OCC_CART_ID_CURRENT));
                            }
                        }
                        else {
                            actions = [
                                new LoadCartFail({}),
                                new LoadMultiCartFail({
                                    cartId: loadCartParams.cartId,
                                }),
                            ];
                        }
                        return actions;
                    })), operators.catchError((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        if (error && error.error && error.error.errors) {
                            /** @type {?} */
                            var couponExpiredErrors = error.error.errors.filter((/**
                             * @param {?} err
                             * @return {?}
                             */
                            function (err) { return err.reason === 'invalid'; }));
                            if (couponExpiredErrors.length > 0) {
                                // clear coupons actions just wanted to reload cart again
                                // no need to do it in refresh or keep that action
                                // however removing this action will be a breaking change
                                // remove that action in 2.0 release
                                // @deprecated since 1.4
                                return rxjs.from([
                                    new LoadCart(__assign({}, payload)),
                                    new ClearExpiredCoupons({}),
                                ]);
                            }
                            /** @type {?} */
                            var cartNotFoundErrors = error.error.errors.filter((/**
                             * @param {?} err
                             * @return {?}
                             */
                            function (err) { return err.reason === 'notFound' || 'UnknownResourceError'; }));
                            if (cartNotFoundErrors.length > 0 &&
                                payload.extraData &&
                                payload.extraData.active) {
                                // Clear cart is responsible for removing cart in `cart` store feature.
                                // Remove cart does the same thing, but in `multi-cart` store feature.
                                return rxjs.from([
                                    new ClearCart(),
                                    new RemoveCart(loadCartParams.cartId),
                                ]);
                            }
                        }
                        return rxjs.from([
                            new LoadCartFail(makeErrorSerializable(error)),
                            new LoadMultiCartFail({
                                cartId: loadCartParams.cartId,
                                error: makeErrorSerializable(error),
                            }),
                        ]);
                    })));
                })));
            })), withdrawOn(this.contextChange$));
            this.createCart$ = this.actions$.pipe(effects$d.ofType(CREATE_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartConnector
                    .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)
                    .pipe(operators.switchMap((/**
                 * @param {?} cart
                 * @return {?}
                 */
                function (cart) {
                    /** @type {?} */
                    var conditionalActions = [];
                    if (payload.oldCartId) {
                        conditionalActions.push(new MergeCartSuccess({
                            userId: payload.userId,
                            cartId: cart.code,
                        }));
                        conditionalActions.push(new MergeMultiCartSuccess({
                            userId: payload.userId,
                            cartId: cart.code,
                            oldCartId: payload.oldCartId,
                        }));
                    }
                    // `cart` store branch should only be updated for active cart
                    // avoid dispatching CreateCartSuccess action on different cart loads
                    if (payload.extraData && payload.extraData.active) {
                        conditionalActions.push(new CreateCartSuccess(cart));
                    }
                    return __spread([
                        new CreateMultiCartSuccess({
                            cart: cart,
                            userId: payload.userId,
                            extraData: payload.extraData,
                        }),
                        new SetTempCart({
                            cart: cart,
                            tempCartId: payload.tempCartId,
                        })
                    ], conditionalActions);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new CreateCartFail(makeErrorSerializable(error)),
                        new CreateMultiCartFail({
                            tempCartId: payload.tempCartId,
                            error: makeErrorSerializable(error),
                        }),
                    ]);
                })));
            })), withdrawOn(this.contextChange$));
            this.mergeCart$ = this.actions$.pipe(effects$d.ofType(MERGE_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(operators.mergeMap((/**
                 * @param {?} currentCart
                 * @return {?}
                 */
                function (currentCart) {
                    return [
                        new CreateCart({
                            userId: payload.userId,
                            oldCartId: payload.cartId,
                            toMergeCartGuid: currentCart ? currentCart.guid : undefined,
                            extraData: payload.extraData,
                            tempCartId: payload.tempCartId,
                        }),
                    ];
                })));
            })), withdrawOn(this.contextChange$));
            this.refresh$ = this.actions$.pipe(effects$d.ofType(CART_ADD_ENTRY_SUCCESS, CART_UPDATE_ENTRY_SUCCESS, CART_REMOVE_ENTRY_SUCCESS, ADD_EMAIL_TO_CART_SUCCESS, CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS, CART_ADD_VOUCHER_SUCCESS, CART_REMOVE_VOUCHER_SUCCESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return rxjs.from([
                    new CartProcessesDecrement(payload.cartId),
                    new LoadCart({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]);
            })));
            this.refreshWithoutProcesses$ = this.actions$.pipe(effects$d.ofType(MERGE_CART_SUCCESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.map((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return new LoadCart({
                    userId: payload.userId,
                    cartId: payload.cartId,
                });
            })));
            this.resetCartDetailsOnSiteContextChange$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE, CURRENCY_CHANGE), operators.mergeMap((/**
             * @return {?}
             */
            function () {
                return [
                    new ResetCartDetails(),
                    new ResetMultiCartDetails(),
                ];
            })));
            this.addEmail$ = this.actions$.pipe(effects$d.ofType(ADD_EMAIL_TO_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartConnector
                    .addEmail(payload.userId, payload.cartId, payload.email)
                    .pipe(operators.mergeMap((/**
                 * @return {?}
                 */
                function () {
                    return [
                        new AddEmailToCartSuccess({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                        new AddEmailToMultiCartSuccess({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                    ];
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new AddEmailToCartFail(makeErrorSerializable(error)),
                        new AddEmailToMultiCartFail({
                            error: makeErrorSerializable(error),
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                        new CartProcessesDecrement(payload.cartId),
                        new LoadCart({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                    ]);
                })));
            })), withdrawOn(this.contextChange$));
            this.deleteCart$ = this.actions$.pipe(effects$d.ofType(DELETE_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.exhaustMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartConnector.delete(payload.userId, payload.cartId).pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    return new ClearCart();
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new DeleteCartFail(makeErrorSerializable(error)));
                })));
            })));
        }
        /**
         * @private
         * @param {?} payload
         * @return {?}
         */
        CartEffects.prototype.isMissingData = /**
         * @private
         * @param {?} payload
         * @return {?}
         */
        function (payload) {
            return payload.userId === undefined || payload.cartId === undefined;
        };
        CartEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CartEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CartConnector },
            { type: CartDataService },
            { type: store.Store }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "loadCart$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "createCart$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "mergeCart$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "refresh$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "refreshWithoutProcesses$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "resetCartDetailsOnSiteContextChange$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "addEmail$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CartEffects.prototype, "deleteCart$", void 0);
        return CartEffects;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CartEffects.prototype.contextChange$;
        /** @type {?} */
        CartEffects.prototype.loadCart$;
        /** @type {?} */
        CartEffects.prototype.createCart$;
        /** @type {?} */
        CartEffects.prototype.mergeCart$;
        /** @type {?} */
        CartEffects.prototype.refresh$;
        /** @type {?} */
        CartEffects.prototype.refreshWithoutProcesses$;
        /** @type {?} */
        CartEffects.prototype.resetCartDetailsOnSiteContextChange$;
        /** @type {?} */
        CartEffects.prototype.addEmail$;
        /** @type {?} */
        CartEffects.prototype.deleteCart$;
        /**
         * @type {?}
         * @private
         */
        CartEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CartEffects.prototype.cartConnector;
        /**
         * @type {?}
         * @private
         */
        CartEffects.prototype.cartData;
        /**
         * @type {?}
         * @private
         */
        CartEffects.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SaveCartConnector = /** @class */ (function () {
        function SaveCartConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?=} saveCartName
         * @param {?=} saveCartDescription
         * @return {?}
         */
        SaveCartConnector.prototype.saveCart = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?=} saveCartName
         * @param {?=} saveCartDescription
         * @return {?}
         */
        function (userId, cartId, saveCartName, saveCartDescription) {
            return this.adapter.saveCart(userId, cartId, saveCartName, saveCartDescription);
        };
        SaveCartConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        SaveCartConnector.ctorParameters = function () { return [
            { type: SaveCartAdapter }
        ]; };
        /** @nocollapse */ SaveCartConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SaveCartConnector_Factory() { return new SaveCartConnector(core.ɵɵinject(SaveCartAdapter)); }, token: SaveCartConnector, providedIn: "root" });
        return SaveCartConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        SaveCartConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx effects will no longer be a part of public API
     *
     * TODO(issue:#4507)
     */
    var WishListEffects = /** @class */ (function () {
        function WishListEffects(actions$, cartConnector, saveCartConnector, authService, store$1) {
            var _this = this;
            this.actions$ = actions$;
            this.cartConnector = cartConnector;
            this.saveCartConnector = saveCartConnector;
            this.authService = authService;
            this.store = store$1;
            this.createWishList$ = this.actions$.pipe(effects$d.ofType(CREATE_WISH_LIST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.cartConnector.create(payload.userId).pipe(operators.switchMap((/**
                 * @param {?} cart
                 * @return {?}
                 */
                function (cart) {
                    return _this.saveCartConnector
                        .saveCart(payload.userId, cart.code, payload.name, payload.description)
                        .pipe(operators.switchMap((/**
                     * @param {?} saveCartResult
                     * @return {?}
                     */
                    function (saveCartResult) { return [
                        new CreateWishListSuccess({
                            cart: saveCartResult.savedCartData,
                            userId: payload.userId,
                        }),
                    ]; })), operators.catchError((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        return rxjs.from([
                            new CreateWishListFail({
                                cartId: cart.code,
                                error: makeErrorSerializable(error),
                            }),
                        ]);
                    })));
                })));
            })));
            this.loadWishList$ = this.actions$.pipe(effects$d.ofType(LOAD_WISH_LIST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                var userId = payload.userId, customerId = payload.customerId;
                return _this.cartConnector.loadAll(userId).pipe(operators.switchMap((/**
                 * @param {?} carts
                 * @return {?}
                 */
                function (carts) {
                    if (carts) {
                        /** @type {?} */
                        var wishList = carts.find((/**
                         * @param {?} cart
                         * @return {?}
                         */
                        function (cart) { return cart.name === "wishlist" + customerId; }));
                        if (Boolean(wishList)) {
                            return [
                                new LoadWishListSuccess({
                                    cart: wishList,
                                    userId: userId,
                                }),
                            ];
                        }
                        else {
                            return [
                                new CreateWishList({
                                    userId: userId,
                                    name: "wishlist" + customerId,
                                }),
                            ];
                        }
                    }
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([new LoadCartFail(makeErrorSerializable(error))]);
                })));
            })));
            this.resetWishList$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE, CURRENCY_CHANGE), operators.withLatestFrom(this.authService.getOccUserId(), this.store.pipe(store.select(getWishListId))), operators.switchMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), userId = _b[1], wishListId = _b[2];
                if (Boolean(wishListId)) {
                    return _this.cartConnector.load(userId, wishListId).pipe(operators.switchMap((/**
                     * @param {?} wishList
                     * @return {?}
                     */
                    function (wishList) { return [
                        new LoadWishListSuccess({ cart: wishList, userId: userId }),
                    ]; })), operators.catchError((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        return rxjs.from([new LoadCartFail(makeErrorSerializable(error))]);
                    })));
                }
                return rxjs.EMPTY;
            })));
        }
        WishListEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WishListEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CartConnector },
            { type: SaveCartConnector },
            { type: AuthService },
            { type: store.Store }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], WishListEffects.prototype, "createWishList$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], WishListEffects.prototype, "loadWishList$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], WishListEffects.prototype, "resetWishList$", void 0);
        return WishListEffects;
    }());
    if (false) {
        /** @type {?} */
        WishListEffects.prototype.createWishList$;
        /** @type {?} */
        WishListEffects.prototype.loadWishList$;
        /** @type {?} */
        WishListEffects.prototype.resetWishList$;
        /**
         * @type {?}
         * @private
         */
        WishListEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        WishListEffects.prototype.cartConnector;
        /**
         * @type {?}
         * @private
         */
        WishListEffects.prototype.saveCartConnector;
        /**
         * @type {?}
         * @private
         */
        WishListEffects.prototype.authService;
        /**
         * @type {?}
         * @private
         */
        WishListEffects.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$9 = {
        content: {},
        entries: {},
        refresh: false,
        cartMergeComplete: false,
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$9(state, action) {
        if (state === void 0) { state = initialState$9; }
        switch (action.type) {
            case MERGE_CART: {
                return __assign({}, state, { cartMergeComplete: false });
            }
            case MERGE_CART_SUCCESS: {
                return __assign({}, state, { cartMergeComplete: true, refresh: true });
            }
            case LOAD_CART_SUCCESS:
            case CREATE_CART_SUCCESS: {
                /** @type {?} */
                var content = __assign({}, action.payload);
                /** @type {?} */
                var entries = {};
                if (content.entries) {
                    entries = content.entries.reduce((/**
                     * @param {?} entryMap
                     * @param {?} entry
                     * @return {?}
                     */
                    function (entryMap, entry) {
                        var _a;
                        return __assign({}, entryMap, (_a = {}, _a[entry.product.code] = state.entries && state.entries[entry.product.code]
                            ? __assign({}, state.entries[entry.product.code], entry) : entry, _a));
                    }), __assign({}, entries));
                    delete content['entries'];
                }
                return __assign({}, state, { content: content,
                    entries: entries, refresh: false });
            }
            case CART_ADD_VOUCHER_SUCCESS:
            case CART_REMOVE_VOUCHER_SUCCESS:
            case CART_REMOVE_ENTRY_SUCCESS:
            case CART_UPDATE_ENTRY_SUCCESS:
            case CART_ADD_ENTRY_SUCCESS:
            case ADD_EMAIL_TO_CART_SUCCESS: {
                return __assign({}, state, { refresh: true });
            }
            case RESET_CART_DETAILS: {
                return {
                    content: {
                        guid: state.content.guid,
                        code: state.content.code,
                        user: state.content.user,
                    },
                    entries: {},
                    refresh: false,
                    cartMergeComplete: false,
                };
            }
            case CLEAR_CART: {
                return initialState$9;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var activeCartInitialState = '';
    /** @type {?} */
    var wishListInitialState = '';
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function activeCartReducer(state, action) {
        if (state === void 0) { state = activeCartInitialState; }
        switch (action.type) {
            case LOAD_MULTI_CART_SUCCESS:
            case CREATE_MULTI_CART_SUCCESS:
            // point to `temp-${uuid}` cart when we are creating/merging cart
            case CREATE_MULTI_CART:
                if (action.payload &&
                    action.payload.extraData &&
                    action.payload.extraData.active) {
                    return (/** @type {?} */ (action.meta.entityId));
                }
                else {
                    return state;
                }
            case REMOVE_CART:
                if (action.payload === state) {
                    return activeCartInitialState;
                }
                else {
                    return state;
                }
        }
        return state;
    }
    /** @type {?} */
    var cartEntitiesInitialState = undefined;
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function cartEntitiesReducer(state, action) {
        if (state === void 0) { state = cartEntitiesInitialState; }
        switch (action.type) {
            case LOAD_MULTI_CART_SUCCESS:
            case CREATE_MULTI_CART_SUCCESS:
            case CREATE_WISH_LIST_SUCCESS:
            case LOAD_WISH_LIST_SUCCESS:
            case SET_TEMP_CART:
                return action.payload.cart;
        }
        return state;
    }
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function wishListReducer(state, action) {
        if (state === void 0) { state = wishListInitialState; }
        switch (action.type) {
            case CREATE_WISH_LIST_SUCCESS:
            case LOAD_WISH_LIST_SUCCESS:
                return (/** @type {?} */ (action.meta.entityId));
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @return {?}
     */
    function getReducers$5() {
        return {
            active: loaderReducer(CART_DATA, reducer$9),
        };
    }
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @type {?}
     */
    var reducerToken$5 = new core.InjectionToken('CartReducers');
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @type {?}
     */
    var reducerProvider$5 = {
        provide: reducerToken$5,
        useFactory: getReducers$5,
    };
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @param {?} reducer
     * @return {?}
     */
    function clearCartState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LOGOUT ||
                action.type === PLACE_ORDER_SUCCESS) {
                state = undefined;
            }
            return reducer(state, action);
        });
    }
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @type {?}
     */
    var metaReducers$3 = [clearCartState];
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @param {?} reducer
     * @return {?}
     */
    function clearMultiCartState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LOGOUT) {
                state = undefined;
            }
            return reducer(state, action);
        });
    }
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @type {?}
     */
    var multiCartMetaReducers = [clearMultiCartState];
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @type {?}
     */
    var multiCartReducerToken = new core.InjectionToken('MultiCartReducers');
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @return {?}
     */
    function getMultiCartReducers() {
        return {
            carts: entityProcessesLoaderReducer(MULTI_CART_FEATURE, cartEntitiesReducer),
            active: activeCartReducer,
            wishList: wishListReducer,
        };
    }
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx reducers will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @type {?}
     */
    var multiCartReducerProvider = {
        provide: multiCartReducerToken,
        useFactory: getMultiCartReducers,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$4 = [
        CartEffects,
        CartEntryEffects,
        CartVoucherEffects,
        WishListEffects,
    ];
    /**
     * @return {?}
     */
    function cartStoreConfigFactory() {
        var _a;
        /** @type {?} */
        var config = {
            state: {
                storageSync: {
                    keys: (_a = {},
                        _a[CART_FEATURE + ".active.value.content.guid"] = StorageSyncType.LOCAL_STORAGE,
                        _a[CART_FEATURE + ".active.value.content.code"] = StorageSyncType.LOCAL_STORAGE,
                        _a[CART_FEATURE + ".active.value.content.user"] = StorageSyncType.LOCAL_STORAGE,
                        _a),
                },
            },
        };
        return config;
    }
    var CartStoreModule = /** @class */ (function () {
        function CartStoreModule() {
        }
        CartStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            StateModule,
                            store.StoreModule.forFeature(CART_FEATURE, reducerToken$5, { metaReducers: metaReducers$3 }),
                            effects$d.EffectsModule.forFeature(effects$4),
                            ConfigModule.withConfigFactory(cartStoreConfigFactory),
                        ],
                        providers: [reducerProvider$5],
                    },] }
        ];
        return CartStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MultiCartEffects = /** @class */ (function () {
        function MultiCartEffects(actions$) {
            this.actions$ = actions$;
            this.loadCart2$ = this.actions$.pipe(effects$d.ofType(LOAD_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return new LoadMultiCart(action.payload);
            })));
            this.createCart2$ = this.actions$.pipe(effects$d.ofType(CREATE_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return new CreateMultiCart(action.payload);
            })));
            this.setTempCart$ = this.actions$.pipe(effects$d.ofType(SET_TEMP_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return new RemoveTempCart(action.payload);
            })));
            this.mergeCart2$ = this.actions$.pipe(effects$d.ofType(MERGE_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return new MergeMultiCart(action.payload);
            })));
            this.addEmail2$ = this.actions$.pipe(effects$d.ofType(ADD_EMAIL_TO_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return new AddEmailToMultiCart(action.payload);
            })));
            this.removeCart$ = this.actions$.pipe(effects$d.ofType(DELETE_CART), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.map((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) { return new RemoveCart(payload.cartId); })));
            // TODO: Change actions to extend Increment action instead of doing extra dispatch in this effect
            // Change for 2.0 release
            this.processesIncrement$ = this.actions$.pipe(effects$d.ofType(CART_ADD_ENTRY, CART_UPDATE_ENTRY, CART_REMOVE_ENTRY, ADD_EMAIL_TO_CART, CLEAR_CHECKOUT_DELIVERY_MODE, CART_ADD_VOUCHER, CART_REMOVE_VOUCHER), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.map((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) { return new CartProcessesIncrement(payload.cartId); })));
        }
        MultiCartEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        MultiCartEffects.ctorParameters = function () { return [
            { type: effects$d.Actions }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], MultiCartEffects.prototype, "loadCart2$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], MultiCartEffects.prototype, "createCart2$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", Object)
        ], MultiCartEffects.prototype, "setTempCart$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], MultiCartEffects.prototype, "mergeCart2$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], MultiCartEffects.prototype, "addEmail2$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], MultiCartEffects.prototype, "removeCart$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], MultiCartEffects.prototype, "processesIncrement$", void 0);
        return MultiCartEffects;
    }());
    if (false) {
        /** @type {?} */
        MultiCartEffects.prototype.loadCart2$;
        /** @type {?} */
        MultiCartEffects.prototype.createCart2$;
        /** @type {?} */
        MultiCartEffects.prototype.setTempCart$;
        /** @type {?} */
        MultiCartEffects.prototype.mergeCart2$;
        /** @type {?} */
        MultiCartEffects.prototype.addEmail2$;
        /** @type {?} */
        MultiCartEffects.prototype.removeCart$;
        /** @type {?} */
        MultiCartEffects.prototype.processesIncrement$;
        /**
         * @type {?}
         * @private
         */
        MultiCartEffects.prototype.actions$;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function multiCartStoreConfigFactory() {
        var _a;
        /** @type {?} */
        var config = {
            state: {
                storageSync: {
                    keys: (_a = {},
                        _a[MULTI_CART_FEATURE + ".active"] = StorageSyncType.LOCAL_STORAGE,
                        _a),
                },
            },
        };
        return config;
    }
    var MultiCartStoreModule = /** @class */ (function () {
        function MultiCartStoreModule() {
        }
        MultiCartStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            StateModule,
                            store.StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {
                                metaReducers: multiCartMetaReducers,
                            }),
                            effects$d.EffectsModule.forFeature([MultiCartEffects]),
                            ConfigModule.withConfigFactory(multiCartStoreConfigFactory),
                        ],
                        providers: [multiCartReducerProvider],
                    },] }
        ];
        return MultiCartStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CartModule = /** @class */ (function () {
        function CartModule() {
        }
        /**
         * @return {?}
         */
        CartModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: CartModule,
                providers: [
                    CartDataService,
                    CartVoucherService,
                    CartService,
                    MultiCartService,
                    WishListService,
                    ActiveCartService,
                    SelectiveCartService,
                    {
                        provide: PageMetaResolver,
                        useExisting: CartPageMetaResolver,
                        multi: true,
                    },
                ],
            };
        };
        CartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [CartStoreModule, MultiCartStoreModule],
                    },] }
        ];
        return CartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @deprecated since version 1.5
     *
     * spartacus ngrx effects will no longer be a part of public API
     *
     * TODO(issue:#4507)
     * @type {?}
     */
    var effects$5 = [
        CartEffects,
        CartEntryEffects,
        CartVoucherEffects,
        WishListEffects,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$a = {
        results: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$a(state, action) {
        if (state === void 0) { state = initialState$a; }
        switch (action.type) {
            case VERIFY_ADDRESS_SUCCESS: {
                /** @type {?} */
                var results = action.payload;
                return __assign({}, state, { results: results });
            }
            case VERIFY_ADDRESS_FAIL: {
                return __assign({}, state, { results: 'FAIL' });
            }
            case CLEAR_ADDRESS_VERIFICATION_RESULTS: {
                return __assign({}, state, { results: {} });
            }
        }
        return state;
    }
    /** @type {?} */
    var getAddressVerificationResults = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.results; });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getDeliveryAddressSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.address; });
    var ɵ0$A = getDeliveryAddressSelector;
    /** @type {?} */
    var getDeliveryModeSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.deliveryMode;
    });
    var ɵ1$r = getDeliveryModeSelector;
    /** @type {?} */
    var getPaymentDetailsSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.paymentDetails;
    });
    var ɵ2$k = getPaymentDetailsSelector;
    /** @type {?} */
    var getOrderDetailsSelector = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.orderDetails;
    });
    var ɵ3$b = getOrderDetailsSelector;
    /** @type {?} */
    var getCheckoutState = store.createFeatureSelector(CHECKOUT_FEATURE);
    var ɵ4$4 = /**
     * @param {?} checkoutState
     * @return {?}
     */
    function (checkoutState) { return checkoutState.steps; };
    /** @type {?} */
    var getCheckoutStepsState = store.createSelector(getCheckoutState, (ɵ4$4));
    var ɵ5$3 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getCheckoutSteps = store.createSelector(getCheckoutStepsState, (ɵ5$3));
    /** @type {?} */
    var getDeliveryAddress = store.createSelector(getCheckoutSteps, getDeliveryAddressSelector);
    /** @type {?} */
    var getDeliveryMode = store.createSelector(getCheckoutSteps, getDeliveryModeSelector);
    var ɵ6$1 = /**
     * @param {?} deliveryMode
     * @return {?}
     */
    function (deliveryMode) {
        return (deliveryMode &&
            Object.keys(deliveryMode.supported).map((/**
             * @param {?} code
             * @return {?}
             */
            function (code) { return deliveryMode.supported[code]; })));
    };
    /** @type {?} */
    var getSupportedDeliveryModes = store.createSelector(getDeliveryMode, (ɵ6$1));
    var ɵ7$1 = /**
     * @param {?} deliveryMode
     * @return {?}
     */
    function (deliveryMode) {
        return deliveryMode && deliveryMode.selected;
    };
    /** @type {?} */
    var getSelectedDeliveryModeCode = store.createSelector(getDeliveryMode, (ɵ7$1));
    var ɵ8$1 = /**
     * @param {?} deliveryMode
     * @return {?}
     */
    function (deliveryMode) {
        if (deliveryMode.selected !== '') {
            if (Object.keys(deliveryMode.supported).length === 0) {
                return null;
            }
            return deliveryMode.supported[deliveryMode.selected];
        }
    };
    /** @type {?} */
    var getSelectedDeliveryMode = store.createSelector(getDeliveryMode, (ɵ8$1));
    /** @type {?} */
    var getPaymentDetails = store.createSelector(getCheckoutSteps, getPaymentDetailsSelector);
    /** @type {?} */
    var getCheckoutOrderDetails = store.createSelector(getCheckoutSteps, getOrderDetailsSelector);
    var ɵ9$1 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return loaderSuccessSelector(state) &&
            !loaderLoadingSelector(state);
    };
    /** @type {?} */
    var getCheckoutDetailsLoaded = store.createSelector(getCheckoutStepsState, (ɵ9$1));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$B = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.addressVerification; };
    /** @type {?} */
    var getAddressVerificationResultsState = store.createSelector(getCheckoutState, (ɵ0$B));
    /** @type {?} */
    var getAddressVerificationResults$1 = store.createSelector(getAddressVerificationResultsState, getAddressVerificationResults);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$b = {
        entities: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$b(state, action) {
        if (state === void 0) { state = initialState$b; }
        switch (action.type) {
            case LOAD_CARD_TYPES_SUCCESS: {
                /** @type {?} */
                var cardTypes = action.payload;
                /** @type {?} */
                var entities = cardTypes.reduce((/**
                 * @param {?} cardTypesEntities
                 * @param {?} name
                 * @return {?}
                 */
                function (cardTypesEntities, name) {
                    var _a;
                    return __assign({}, cardTypesEntities, (_a = {}, _a[name.code] = name, _a));
                }), __assign({}, state.entities));
                return __assign({}, state, { entities: entities });
            }
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return initialState$b;
            }
        }
        return state;
    }
    /** @type {?} */
    var getCardTypesEntites = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.entities; });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$C = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.cardTypes; };
    /** @type {?} */
    var getCardTypesState = store.createSelector(getCheckoutState, (ɵ0$C));
    /** @type {?} */
    var getCardTypesEntites$1 = store.createSelector(getCardTypesState, getCardTypesEntites);
    var ɵ1$s = /**
     * @param {?} entites
     * @return {?}
     */
    function (entites) {
        return Object.keys(entites).map((/**
         * @param {?} code
         * @return {?}
         */
        function (code) { return entites[code]; }));
    };
    /** @type {?} */
    var getAllCardTypes = store.createSelector(getCardTypesEntites$1, (ɵ1$s));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var checkoutGroup_selectors = /*#__PURE__*/Object.freeze({
        getAddressVerificationResultsState: getAddressVerificationResultsState,
        getAddressVerificationResults: getAddressVerificationResults$1,
        getCardTypesState: getCardTypesState,
        getCardTypesEntites: getCardTypesEntites$1,
        getAllCardTypes: getAllCardTypes,
        getCheckoutState: getCheckoutState,
        getCheckoutStepsState: getCheckoutStepsState,
        getCheckoutSteps: getCheckoutSteps,
        getDeliveryAddress: getDeliveryAddress,
        getDeliveryMode: getDeliveryMode,
        getSupportedDeliveryModes: getSupportedDeliveryModes,
        getSelectedDeliveryModeCode: getSelectedDeliveryModeCode,
        getSelectedDeliveryMode: getSelectedDeliveryMode,
        getPaymentDetails: getPaymentDetails,
        getCheckoutOrderDetails: getCheckoutOrderDetails,
        getCheckoutDetailsLoaded: getCheckoutDetailsLoaded
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutService = /** @class */ (function () {
        function CheckoutService(checkoutStore, cartData) {
            this.checkoutStore = checkoutStore;
            this.cartData = cartData;
        }
        /**
         * Places an order
         */
        /**
         * Places an order
         * @return {?}
         */
        CheckoutService.prototype.placeOrder = /**
         * Places an order
         * @return {?}
         */
        function () {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new PlaceOrder({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                }));
            }
        };
        /**
         * Clear checkout data
         */
        /**
         * Clear checkout data
         * @return {?}
         */
        CheckoutService.prototype.clearCheckoutData = /**
         * Clear checkout data
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ClearCheckoutData());
        };
        /**
         * Clear checkout step
         * @param stepNumber : the step number to be cleared
         */
        /**
         * Clear checkout step
         * @param {?} stepNumber : the step number to be cleared
         * @return {?}
         */
        CheckoutService.prototype.clearCheckoutStep = /**
         * Clear checkout step
         * @param {?} stepNumber : the step number to be cleared
         * @return {?}
         */
        function (stepNumber) {
            this.checkoutStore.dispatch(new ClearCheckoutStep(stepNumber));
        };
        /**
         * Load checkout details data
         * @param cartId : string Cart ID of loaded cart
         */
        /**
         * Load checkout details data
         * @param {?} cartId : string Cart ID of loaded cart
         * @return {?}
         */
        CheckoutService.prototype.loadCheckoutDetails = /**
         * Load checkout details data
         * @param {?} cartId : string Cart ID of loaded cart
         * @return {?}
         */
        function (cartId) {
            this.checkoutStore.dispatch(new LoadCheckoutDetails({
                userId: this.cartData.userId,
                cartId: cartId,
            }));
        };
        /**
         * Get status of checkout details loaded
         */
        /**
         * Get status of checkout details loaded
         * @return {?}
         */
        CheckoutService.prototype.getCheckoutDetailsLoaded = /**
         * Get status of checkout details loaded
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getCheckoutDetailsLoaded));
        };
        /**
         * Get order details
         */
        /**
         * Get order details
         * @return {?}
         */
        CheckoutService.prototype.getOrderDetails = /**
         * Get order details
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getCheckoutOrderDetails));
        };
        /**
         * @protected
         * @return {?}
         */
        CheckoutService.prototype.actionAllowed = /**
         * @protected
         * @return {?}
         */
        function () {
            return (this.cartData.userId !== OCC_USER_ID_ANONYMOUS ||
                this.cartData.isGuestCart);
        };
        CheckoutService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CheckoutService.ctorParameters = function () { return [
            { type: store.Store },
            { type: CartDataService }
        ]; };
        return CheckoutService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CheckoutService.prototype.checkoutStore;
        /**
         * @type {?}
         * @protected
         */
        CheckoutService.prototype.cartData;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    TranslationService = /** @class */ (function () {
        function TranslationService() {
        }
        return TranslationService;
    }());
    if (false) {
        /**
         * Translates given key with options.
         * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.
         * If key is missing after loaded chunk, a fallback value is emitted
         *
         * \@param key translation key
         * \@param options values for interpolation in translation
         * \@param whitespaceUntilLoaded if true, immediately emits a non-breaking space
         * @type {?}
         */
        TranslationService.prototype.translate;
        /**
         * Loads chunks with translations
         *
         * \@param chunkNames array of chunk names to be loaded
         * @type {?}
         */
        TranslationService.prototype.loadChunks;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`
     * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,
     * the more generic `ContentPageMetaResolver` is overriden by this resolver.
     *
     * The page title and robots are resolved in this implementation only.
     */
    var CheckoutPageMetaResolver = /** @class */ (function (_super) {
        __extends(CheckoutPageMetaResolver, _super);
        function CheckoutPageMetaResolver(cartService, translation) {
            var _this = _super.call(this) || this;
            _this.cartService = cartService;
            _this.translation = translation;
            _this.cart$ = _this.cartService.getActive();
            _this.pageType = PageType.CONTENT_PAGE;
            _this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';
            return _this;
        }
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         */
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        CheckoutPageMetaResolver.prototype.resolve = /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.cart$.pipe(operators.switchMap((/**
             * @param {?} cart
             * @return {?}
             */
            function (cart) {
                return rxjs.combineLatest([_this.resolveTitle(cart), _this.resolveRobots()]);
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), title = _b[0], robots = _b[1];
                return ({ title: title, robots: robots });
            })));
        };
        /**
         * @param {?=} cart
         * @return {?}
         */
        CheckoutPageMetaResolver.prototype.resolveTitle = /**
         * @param {?=} cart
         * @return {?}
         */
        function (cart) {
            var _this = this;
            /** @type {?} */
            var cart$ = cart ? rxjs.of(cart) : this.cart$;
            return cart$.pipe(operators.switchMap((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return _this.translation.translate('pageMetaResolver.checkout.title', {
                    count: c.totalItems,
                });
            })));
        };
        /**
         * @return {?}
         */
        CheckoutPageMetaResolver.prototype.resolveRobots = /**
         * @return {?}
         */
        function () {
            return rxjs.of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);
        };
        CheckoutPageMetaResolver.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CheckoutPageMetaResolver.ctorParameters = function () { return [
            { type: CartService },
            { type: TranslationService }
        ]; };
        /** @nocollapse */ CheckoutPageMetaResolver.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CheckoutPageMetaResolver_Factory() { return new CheckoutPageMetaResolver(core.ɵɵinject(CartService), core.ɵɵinject(TranslationService)); }, token: CheckoutPageMetaResolver, providedIn: "root" });
        return CheckoutPageMetaResolver;
    }(PageMetaResolver));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CheckoutPageMetaResolver.prototype.cart$;
        /**
         * @type {?}
         * @protected
         */
        CheckoutPageMetaResolver.prototype.cartService;
        /**
         * @type {?}
         * @protected
         */
        CheckoutPageMetaResolver.prototype.translation;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$c = {
        address: {},
        deliveryMode: {
            supported: {},
            selected: '',
        },
        paymentDetails: {},
        orderDetails: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$c(state, action) {
        if (state === void 0) { state = initialState$c; }
        switch (action.type) {
            case ADD_DELIVERY_ADDRESS_SUCCESS:
            case SET_DELIVERY_ADDRESS_SUCCESS: {
                /** @type {?} */
                var address = action.payload;
                return __assign({}, state, { address: address });
            }
            case LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {
                /** @type {?} */
                var supportedModes = action.payload;
                if (!supportedModes) {
                    return state;
                }
                /** @type {?} */
                var supported = supportedModes.reduce((/**
                 * @param {?} modes
                 * @param {?} mode
                 * @return {?}
                 */
                function (modes, mode) {
                    var _a;
                    return __assign({}, modes, (_a = {}, _a[mode.code] = mode, _a));
                }), __assign({}, state.deliveryMode.supported));
                return __assign({}, state, { deliveryMode: __assign({}, state.deliveryMode, { supported: supported }) });
            }
            case SET_DELIVERY_MODE_SUCCESS: {
                /** @type {?} */
                var selected = action.payload;
                return __assign({}, state, { deliveryMode: __assign({}, state.deliveryMode, { selected: selected }) });
            }
            case CREATE_PAYMENT_DETAILS_SUCCESS:
            case SET_PAYMENT_DETAILS_SUCCESS: {
                return __assign({}, state, { paymentDetails: action.payload });
            }
            case CREATE_PAYMENT_DETAILS_FAIL: {
                /** @type {?} */
                var paymentDetails = action.payload;
                if (paymentDetails['hasError']) {
                    return __assign({}, state, { paymentDetails: paymentDetails });
                }
                return state;
            }
            case PLACE_ORDER_SUCCESS: {
                /** @type {?} */
                var orderDetails = action.payload;
                return __assign({}, state, { orderDetails: orderDetails });
            }
            case CLEAR_CHECKOUT_DATA: {
                return initialState$c;
            }
            case CLEAR_CHECKOUT_STEP: {
                /** @type {?} */
                var stepNumber = action.payload;
                switch (stepNumber) {
                    case 1: {
                        return __assign({}, state, { address: {} });
                    }
                    case 2: {
                        return __assign({}, state, { deliveryMode: __assign({}, state.deliveryMode, { supported: {}, selected: '' }) });
                    }
                    case 3: {
                        return __assign({}, state, { paymentDetails: {} });
                    }
                }
                return state;
            }
            case CLEAR_SUPPORTED_DELIVERY_MODES:
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return __assign({}, state, { deliveryMode: __assign({}, state.deliveryMode, { supported: {} }) });
            }
            case LOAD_CHECKOUT_DETAILS_SUCCESS: {
                return __assign({}, state, { address: action.payload.deliveryAddress, deliveryMode: __assign({}, state.deliveryMode, { selected: action.payload.deliveryMode && action.payload.deliveryMode.code }), paymentDetails: action.payload.paymentInfo });
            }
            case CLEAR_CHECKOUT_DELIVERY_ADDRESS: {
                return __assign({}, state, { address: {} });
            }
            case CLEAR_CHECKOUT_DELIVERY_MODE: {
                return __assign({}, state, { deliveryMode: __assign({}, state.deliveryMode, { selected: '' }) });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$6() {
        return {
            steps: loaderReducer(CHECKOUT_DETAILS, reducer$c),
            cardTypes: reducer$b,
            addressVerification: reducer$a,
        };
    }
    /** @type {?} */
    var reducerToken$6 = new core.InjectionToken('CheckoutReducers');
    /** @type {?} */
    var reducerProvider$6 = {
        provide: reducerToken$6,
        useFactory: getReducers$6,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserAddressConnector = /** @class */ (function () {
        function UserAddressConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        UserAddressConnector.prototype.getAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.adapter.loadAll(userId);
        };
        /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        UserAddressConnector.prototype.add = /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        function (userId, address) {
            return this.adapter.add(userId, address);
        };
        /**
         * @param {?} userId
         * @param {?} addressId
         * @param {?} address
         * @return {?}
         */
        UserAddressConnector.prototype.update = /**
         * @param {?} userId
         * @param {?} addressId
         * @param {?} address
         * @return {?}
         */
        function (userId, addressId, address) {
            return this.adapter.update(userId, addressId, address);
        };
        /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        UserAddressConnector.prototype.verify = /**
         * @param {?} userId
         * @param {?} address
         * @return {?}
         */
        function (userId, address) {
            return this.adapter.verify(userId, address);
        };
        /**
         * @param {?} userId
         * @param {?} addressId
         * @return {?}
         */
        UserAddressConnector.prototype.delete = /**
         * @param {?} userId
         * @param {?} addressId
         * @return {?}
         */
        function (userId, addressId) {
            return this.adapter.delete(userId, addressId);
        };
        UserAddressConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserAddressConnector.ctorParameters = function () { return [
            { type: UserAddressAdapter }
        ]; };
        /** @nocollapse */ UserAddressConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserAddressConnector_Factory() { return new UserAddressConnector(core.ɵɵinject(UserAddressAdapter)); }, token: UserAddressConnector, providedIn: "root" });
        return UserAddressConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserAddressConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AddressVerificationEffect = /** @class */ (function () {
        function AddressVerificationEffect(actions$, userAddressConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAddressConnector = userAddressConnector;
            this.verifyAddress$ = this.actions$.pipe(effects$d.ofType(VERIFY_ADDRESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userAddressConnector.verify(payload.userId, payload.address).pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return new VerifyAddressSuccess(data); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new VerifyAddressFail(makeErrorSerializable(error)));
                })));
            })));
        }
        AddressVerificationEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AddressVerificationEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserAddressConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], AddressVerificationEffect.prototype, "verifyAddress$", void 0);
        return AddressVerificationEffect;
    }());
    if (false) {
        /** @type {?} */
        AddressVerificationEffect.prototype.verifyAddress$;
        /**
         * @type {?}
         * @private
         */
        AddressVerificationEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        AddressVerificationEffect.prototype.userAddressConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutPaymentConnector = /** @class */ (function () {
        function CheckoutPaymentConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetails
         * @return {?}
         */
        CheckoutPaymentConnector.prototype.create = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetails
         * @return {?}
         */
        function (userId, cartId, paymentDetails) {
            return this.adapter.create(userId, cartId, paymentDetails);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetailsId
         * @return {?}
         */
        CheckoutPaymentConnector.prototype.set = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} paymentDetailsId
         * @return {?}
         */
        function (userId, cartId, paymentDetailsId) {
            return this.adapter.set(userId, cartId, paymentDetailsId);
        };
        /**
         * @return {?}
         */
        CheckoutPaymentConnector.prototype.getCardTypes = /**
         * @return {?}
         */
        function () {
            return this.adapter.loadCardTypes();
        };
        CheckoutPaymentConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CheckoutPaymentConnector.ctorParameters = function () { return [
            { type: CheckoutPaymentAdapter }
        ]; };
        /** @nocollapse */ CheckoutPaymentConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CheckoutPaymentConnector_Factory() { return new CheckoutPaymentConnector(core.ɵɵinject(CheckoutPaymentAdapter)); }, token: CheckoutPaymentConnector, providedIn: "root" });
        return CheckoutPaymentConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CheckoutPaymentConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CardTypesEffects = /** @class */ (function () {
        function CardTypesEffects(actions$, checkoutPaymentConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutPaymentConnector = checkoutPaymentConnector;
            this.loadCardTypes$ = this.actions$.pipe(effects$d.ofType(LOAD_CARD_TYPES), operators.switchMap((/**
             * @return {?}
             */
            function () {
                return _this.checkoutPaymentConnector.getCardTypes().pipe(operators.map((/**
                 * @param {?} cardTypes
                 * @return {?}
                 */
                function (cardTypes) { return new LoadCardTypesSuccess(cardTypes); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadCardTypesFail(makeErrorSerializable(error)));
                })));
            })));
        }
        CardTypesEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CardTypesEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CheckoutPaymentConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CardTypesEffects.prototype, "loadCardTypes$", void 0);
        return CardTypesEffects;
    }());
    if (false) {
        /** @type {?} */
        CardTypesEffects.prototype.loadCardTypes$;
        /**
         * @type {?}
         * @private
         */
        CardTypesEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CardTypesEffects.prototype.checkoutPaymentConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutConnector = /** @class */ (function () {
        function CheckoutConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutConnector.prototype.placeOrder = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.placeOrder(userId, cartId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutConnector.prototype.loadCheckoutDetails = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.loadCheckoutDetails(userId, cartId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutConnector.prototype.clearCheckoutDeliveryAddress = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutConnector.prototype.clearCheckoutDeliveryMode = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.clearCheckoutDeliveryMode(userId, cartId);
        };
        CheckoutConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CheckoutConnector.ctorParameters = function () { return [
            { type: CheckoutAdapter }
        ]; };
        /** @nocollapse */ CheckoutConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CheckoutConnector_Factory() { return new CheckoutConnector(core.ɵɵinject(CheckoutAdapter)); }, token: CheckoutConnector, providedIn: "root" });
        return CheckoutConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CheckoutConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutDeliveryConnector = /** @class */ (function () {
        function CheckoutDeliveryConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} address
         * @return {?}
         */
        CheckoutDeliveryConnector.prototype.createAddress = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} address
         * @return {?}
         */
        function (userId, cartId, address) {
            return this.adapter.createAddress(userId, cartId, address);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} addressId
         * @return {?}
         */
        CheckoutDeliveryConnector.prototype.setAddress = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} addressId
         * @return {?}
         */
        function (userId, cartId, addressId) {
            return this.adapter.setAddress(userId, cartId, addressId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} deliveryModeId
         * @return {?}
         */
        CheckoutDeliveryConnector.prototype.setMode = /**
         * @param {?} userId
         * @param {?} cartId
         * @param {?} deliveryModeId
         * @return {?}
         */
        function (userId, cartId, deliveryModeId) {
            return this.adapter.setMode(userId, cartId, deliveryModeId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutDeliveryConnector.prototype.getMode = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.getMode(userId, cartId);
        };
        /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        CheckoutDeliveryConnector.prototype.getSupportedModes = /**
         * @param {?} userId
         * @param {?} cartId
         * @return {?}
         */
        function (userId, cartId) {
            return this.adapter.getSupportedModes(userId, cartId);
        };
        CheckoutDeliveryConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CheckoutDeliveryConnector.ctorParameters = function () { return [
            { type: CheckoutDeliveryAdapter }
        ]; };
        /** @nocollapse */ CheckoutDeliveryConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CheckoutDeliveryConnector_Factory() { return new CheckoutDeliveryConnector(core.ɵɵinject(CheckoutDeliveryAdapter)); }, token: CheckoutDeliveryConnector, providedIn: "root" });
        return CheckoutDeliveryConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CheckoutDeliveryConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutEffects = /** @class */ (function () {
        function CheckoutEffects(actions$, checkoutDeliveryConnector, checkoutPaymentConnector, checkoutConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutDeliveryConnector = checkoutDeliveryConnector;
            this.checkoutPaymentConnector = checkoutPaymentConnector;
            this.checkoutConnector = checkoutConnector;
            this.contextChange$ = this.actions$.pipe(effects$d.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.addDeliveryAddress$ = this.actions$.pipe(effects$d.ofType(ADD_DELIVERY_ADDRESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutDeliveryConnector
                    .createAddress(payload.userId, payload.cartId, payload.address)
                    .pipe(operators.mergeMap((/**
                 * @param {?} address
                 * @return {?}
                 */
                function (address) {
                    address['titleCode'] = payload.address.titleCode;
                    if (payload.address.region && payload.address.region.isocodeShort) {
                        Object.assign(address.region, {
                            isocodeShort: payload.address.region.isocodeShort,
                        });
                    }
                    if (payload.userId === OCC_USER_ID_ANONYMOUS) {
                        return [
                            new SetDeliveryAddress({
                                userId: payload.userId,
                                cartId: payload.cartId,
                                address: address,
                            }),
                        ];
                    }
                    else {
                        return [
                            new LoadUserAddresses(payload.userId),
                            new SetDeliveryAddress({
                                userId: payload.userId,
                                cartId: payload.cartId,
                                address: address,
                            }),
                        ];
                    }
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new AddDeliveryAddressFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.setDeliveryAddress$ = this.actions$.pipe(effects$d.ofType(SET_DELIVERY_ADDRESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutDeliveryConnector
                    .setAddress(payload.userId, payload.cartId, payload.address.id)
                    .pipe(operators.mergeMap((/**
                 * @return {?}
                 */
                function () { return [
                    new SetDeliveryAddressSuccess(payload.address),
                    new ClearCheckoutDeliveryMode({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                    new ClearSupportedDeliveryModes(),
                    new ResetLoadSupportedDeliveryModesProcess(),
                    new LoadSupportedDeliveryModes({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new SetDeliveryAddressFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.loadSupportedDeliveryModes$ = this.actions$.pipe(effects$d.ofType(LOAD_SUPPORTED_DELIVERY_MODES), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutDeliveryConnector
                    .getSupportedModes(payload.userId, payload.cartId)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new LoadSupportedDeliveryModesSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadSupportedDeliveryModesFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.clearCheckoutMiscsDataOnLanguageChange$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE), operators.mergeMap((/**
             * @return {?}
             */
            function () { return [
                new CheckoutClearMiscsData(),
                new ResetLoadSupportedDeliveryModesProcess(),
            ]; })));
            this.clearDeliveryModesOnCurrencyChange$ = this.actions$.pipe(effects$d.ofType(CURRENCY_CHANGE), operators.map((/**
             * @return {?}
             */
            function () { return new ClearSupportedDeliveryModes(); })));
            this.clearCheckoutDataOnLogout$ = this.actions$.pipe(effects$d.ofType(LOGOUT), operators.map((/**
             * @return {?}
             */
            function () { return new ClearCheckoutData(); })));
            this.clearCheckoutDataOnLogin$ = this.actions$.pipe(effects$d.ofType(LOGIN), operators.map((/**
             * @return {?}
             */
            function () { return new ClearCheckoutData(); })));
            this.setDeliveryMode$ = this.actions$.pipe(effects$d.ofType(SET_DELIVERY_MODE), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutDeliveryConnector
                    .setMode(payload.userId, payload.cartId, payload.selectedModeId)
                    .pipe(operators.mergeMap((/**
                 * @return {?}
                 */
                function () {
                    return [
                        new SetDeliveryModeSuccess(payload.selectedModeId),
                        new LoadCart({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                    ];
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new SetDeliveryModeFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.createPaymentDetails$ = this.actions$.pipe(effects$d.ofType(CREATE_PAYMENT_DETAILS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                // get information for creating a subscription directly with payment provider
                return _this.checkoutPaymentConnector
                    .create(payload.userId, payload.cartId, payload.paymentDetails)
                    .pipe(operators.mergeMap((/**
                 * @param {?} details
                 * @return {?}
                 */
                function (details) {
                    if (payload.userId === OCC_USER_ID_ANONYMOUS) {
                        return [new CreatePaymentDetailsSuccess(details)];
                    }
                    else {
                        return [
                            new LoadUserPaymentMethods(payload.userId),
                            new CreatePaymentDetailsSuccess(details),
                        ];
                    }
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new CreatePaymentDetailsFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.setPaymentDetails$ = this.actions$.pipe(effects$d.ofType(SET_PAYMENT_DETAILS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutPaymentConnector
                    .set(payload.userId, payload.cartId, payload.paymentDetails.id)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    return new SetPaymentDetailsSuccess(payload.paymentDetails);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new SetPaymentDetailsFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.placeOrder$ = this.actions$.pipe(effects$d.ofType(PLACE_ORDER), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutConnector
                    .placeOrder(payload.userId, payload.cartId)
                    .pipe(operators.switchMap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return [
                    new RemoveCart(payload.cartId),
                    new PlaceOrderSuccess(data),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new PlaceOrderFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.loadCheckoutDetails$ = this.actions$.pipe(effects$d.ofType(LOAD_CHECKOUT_DETAILS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutConnector
                    .loadCheckoutDetails(payload.userId, payload.cartId)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new LoadCheckoutDetailsSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadCheckoutDetailsFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.reloadDetailsOnMergeCart$ = this.actions$.pipe(effects$d.ofType(MERGE_CART_SUCCESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.map((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return new LoadCheckoutDetails({
                    userId: payload.userId,
                    cartId: payload.cartId ? payload.cartId : OCC_CART_ID_CURRENT,
                });
            })));
            this.clearCheckoutDeliveryAddress$ = this.actions$.pipe(effects$d.ofType(CLEAR_CHECKOUT_DELIVERY_ADDRESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.filter((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) { return Boolean(payload.cartId); })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutConnector
                    .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () { return new ClearCheckoutDeliveryAddressSuccess(); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new ClearCheckoutDeliveryAddressFail(makeErrorSerializable(error)));
                })));
            })), withdrawOn(this.contextChange$));
            this.clearCheckoutDeliveryMode$ = this.actions$.pipe(effects$d.ofType(CLEAR_CHECKOUT_DELIVERY_MODE), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.filter((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) { return Boolean(payload.cartId); })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.checkoutConnector
                    .clearCheckoutDeliveryMode(payload.userId, payload.cartId)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    return new ClearCheckoutDeliveryModeSuccess({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    });
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.from([
                        new ClearCheckoutDeliveryModeFail(makeErrorSerializable(error)),
                        new CartProcessesDecrement(payload.cartId),
                        new LoadCart({
                            cartId: payload.cartId,
                            userId: payload.userId,
                        }),
                    ]);
                })));
            })), withdrawOn(this.contextChange$));
        }
        CheckoutEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CheckoutEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CheckoutDeliveryConnector },
            { type: CheckoutPaymentConnector },
            { type: CheckoutConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "addDeliveryAddress$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "setDeliveryAddress$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "loadSupportedDeliveryModes$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "clearCheckoutMiscsDataOnLanguageChange$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "clearDeliveryModesOnCurrencyChange$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "clearCheckoutDataOnLogout$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "clearCheckoutDataOnLogin$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "setDeliveryMode$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "createPaymentDetails$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "setPaymentDetails$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "placeOrder$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "loadCheckoutDetails$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "reloadDetailsOnMergeCart$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "clearCheckoutDeliveryAddress$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CheckoutEffects.prototype, "clearCheckoutDeliveryMode$", void 0);
        return CheckoutEffects;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CheckoutEffects.prototype.contextChange$;
        /** @type {?} */
        CheckoutEffects.prototype.addDeliveryAddress$;
        /** @type {?} */
        CheckoutEffects.prototype.setDeliveryAddress$;
        /** @type {?} */
        CheckoutEffects.prototype.loadSupportedDeliveryModes$;
        /** @type {?} */
        CheckoutEffects.prototype.clearCheckoutMiscsDataOnLanguageChange$;
        /** @type {?} */
        CheckoutEffects.prototype.clearDeliveryModesOnCurrencyChange$;
        /** @type {?} */
        CheckoutEffects.prototype.clearCheckoutDataOnLogout$;
        /** @type {?} */
        CheckoutEffects.prototype.clearCheckoutDataOnLogin$;
        /** @type {?} */
        CheckoutEffects.prototype.setDeliveryMode$;
        /** @type {?} */
        CheckoutEffects.prototype.createPaymentDetails$;
        /** @type {?} */
        CheckoutEffects.prototype.setPaymentDetails$;
        /** @type {?} */
        CheckoutEffects.prototype.placeOrder$;
        /** @type {?} */
        CheckoutEffects.prototype.loadCheckoutDetails$;
        /** @type {?} */
        CheckoutEffects.prototype.reloadDetailsOnMergeCart$;
        /** @type {?} */
        CheckoutEffects.prototype.clearCheckoutDeliveryAddress$;
        /** @type {?} */
        CheckoutEffects.prototype.clearCheckoutDeliveryMode$;
        /**
         * @type {?}
         * @private
         */
        CheckoutEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CheckoutEffects.prototype.checkoutDeliveryConnector;
        /**
         * @type {?}
         * @private
         */
        CheckoutEffects.prototype.checkoutPaymentConnector;
        /**
         * @type {?}
         * @private
         */
        CheckoutEffects.prototype.checkoutConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$6 = [
        CheckoutEffects,
        AddressVerificationEffect,
        CardTypesEffects,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutStoreModule = /** @class */ (function () {
        function CheckoutStoreModule() {
        }
        CheckoutStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            store.StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken$6),
                            effects$d.EffectsModule.forFeature(effects$6),
                        ],
                        providers: [reducerProvider$6],
                    },] }
        ];
        return CheckoutStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutModule = /** @class */ (function () {
        function CheckoutModule() {
        }
        /**
         * @return {?}
         */
        CheckoutModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: CheckoutModule,
                providers: [
                    CheckoutService,
                    {
                        provide: PageMetaResolver,
                        useExisting: CheckoutPageMetaResolver,
                        multi: true,
                    },
                ],
            };
        };
        CheckoutModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [CheckoutStoreModule],
                    },] }
        ];
        return CheckoutModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutDeliveryService = /** @class */ (function () {
        function CheckoutDeliveryService(checkoutStore, cartData) {
            this.checkoutStore = checkoutStore;
            this.cartData = cartData;
        }
        /**
         * Get supported delivery modes
         */
        /**
         * Get supported delivery modes
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getSupportedDeliveryModes = /**
         * Get supported delivery modes
         * @return {?}
         */
        function () {
            var _this = this;
            return this.checkoutStore.pipe(store.select(getSupportedDeliveryModes), operators.withLatestFrom(this.checkoutStore.pipe(store.select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)))), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), loadingState = _b[1];
                if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                    _this.loadSupportedDeliveryModes();
                }
            })), operators.pluck(0), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Get selected delivery mode
         */
        /**
         * Get selected delivery mode
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getSelectedDeliveryMode = /**
         * Get selected delivery mode
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getSelectedDeliveryMode));
        };
        /**
         * Get selected delivery mode code
         */
        /**
         * Get selected delivery mode code
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getSelectedDeliveryModeCode = /**
         * Get selected delivery mode code
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getSelectedDeliveryModeCode));
        };
        /**
         * Get delivery address
         */
        /**
         * Get delivery address
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getDeliveryAddress = /**
         * Get delivery address
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getDeliveryAddress));
        };
        /**
         * Get status about successfully set Delivery Address
         */
        /**
         * Get status about successfully set Delivery Address
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getSetDeliveryAddressProcess = /**
         * Get status about successfully set Delivery Address
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Delivery Address
         */
        /**
         * Clear info about process of setting Delivery Address
         * @return {?}
         */
        CheckoutDeliveryService.prototype.resetSetDeliveryAddressProcess = /**
         * Clear info about process of setting Delivery Address
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ResetSetDeliveryAddressProcess());
        };
        /**
         * Get status about of set Delivery Mode process
         */
        /**
         * Get status about of set Delivery Mode process
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getSetDeliveryModeProcess = /**
         * Get status about of set Delivery Mode process
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Delivery Mode
         */
        /**
         * Clear info about process of setting Delivery Mode
         * @return {?}
         */
        CheckoutDeliveryService.prototype.resetSetDeliveryModeProcess = /**
         * Clear info about process of setting Delivery Mode
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ResetSetDeliveryModeProcess());
        };
        /**
         * Clear info about process of setting Supported Delivery Modes
         */
        /**
         * Clear info about process of setting Supported Delivery Modes
         * @return {?}
         */
        CheckoutDeliveryService.prototype.resetLoadSupportedDeliveryModesProcess = /**
         * Clear info about process of setting Supported Delivery Modes
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ResetLoadSupportedDeliveryModesProcess());
        };
        /**
         * Get status about of set supported Delivery Modes process
         */
        /**
         * Get status about of set supported Delivery Modes process
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getLoadSupportedDeliveryModeProcess = /**
         * Get status about of set supported Delivery Modes process
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)));
        };
        /**
         * Clear supported delivery modes loaded in last checkout process
         */
        /**
         * Clear supported delivery modes loaded in last checkout process
         * @return {?}
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryModes = /**
         * Clear supported delivery modes loaded in last checkout process
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ClearSupportedDeliveryModes());
        };
        /**
         * Get address verification results
         */
        /**
         * Get address verification results
         * @return {?}
         */
        CheckoutDeliveryService.prototype.getAddressVerificationResults = /**
         * Get address verification results
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getAddressVerificationResults$1), operators.filter((/**
             * @param {?} results
             * @return {?}
             */
            function (results) { return Object.keys(results).length !== 0; })));
        };
        /**
         * Create and set a delivery address using the address param
         * @param address : the Address to be created and set
         */
        /**
         * Create and set a delivery address using the address param
         * @param {?} address : the Address to be created and set
         * @return {?}
         */
        CheckoutDeliveryService.prototype.createAndSetAddress = /**
         * Create and set a delivery address using the address param
         * @param {?} address : the Address to be created and set
         * @return {?}
         */
        function (address) {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new AddDeliveryAddress({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                    address: address,
                }));
            }
        };
        /**
         * Load supported delivery modes
         */
        /**
         * Load supported delivery modes
         * @return {?}
         */
        CheckoutDeliveryService.prototype.loadSupportedDeliveryModes = /**
         * Load supported delivery modes
         * @return {?}
         */
        function () {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new LoadSupportedDeliveryModes({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                }));
            }
        };
        /**
         * Set delivery mode
         * @param mode : The delivery mode to be set
         */
        /**
         * Set delivery mode
         * @param {?} mode : The delivery mode to be set
         * @return {?}
         */
        CheckoutDeliveryService.prototype.setDeliveryMode = /**
         * Set delivery mode
         * @param {?} mode : The delivery mode to be set
         * @return {?}
         */
        function (mode) {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new SetDeliveryMode({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                    selectedModeId: mode,
                }));
            }
        };
        /**
         * Verifies the address
         * @param address : the address to be verified
         */
        /**
         * Verifies the address
         * @param {?} address : the address to be verified
         * @return {?}
         */
        CheckoutDeliveryService.prototype.verifyAddress = /**
         * Verifies the address
         * @param {?} address : the address to be verified
         * @return {?}
         */
        function (address) {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new VerifyAddress({
                    userId: this.cartData.userId,
                    address: address,
                }));
            }
        };
        /**
         * Set delivery address
         * @param address : The address to be set
         */
        /**
         * Set delivery address
         * @param {?} address : The address to be set
         * @return {?}
         */
        CheckoutDeliveryService.prototype.setDeliveryAddress = /**
         * Set delivery address
         * @param {?} address : The address to be set
         * @return {?}
         */
        function (address) {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new SetDeliveryAddress({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cart.code,
                    address: address,
                }));
            }
        };
        /**
         * Clear address verification results
         */
        /**
         * Clear address verification results
         * @return {?}
         */
        CheckoutDeliveryService.prototype.clearAddressVerificationResults = /**
         * Clear address verification results
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ClearAddressVerificationResults());
        };
        /**
         * Clear address already setup in last checkout process
         */
        /**
         * Clear address already setup in last checkout process
         * @return {?}
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryAddress = /**
         * Clear address already setup in last checkout process
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ClearCheckoutDeliveryAddress({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
            }));
        };
        /**
         * Clear selected delivery mode setup in last checkout process
         */
        /**
         * Clear selected delivery mode setup in last checkout process
         * @return {?}
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryMode = /**
         * Clear selected delivery mode setup in last checkout process
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ClearCheckoutDeliveryMode({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
            }));
        };
        /**
         * Clear address and delivery mode already setup in last checkout process
         */
        /**
         * Clear address and delivery mode already setup in last checkout process
         * @return {?}
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryDetails = /**
         * Clear address and delivery mode already setup in last checkout process
         * @return {?}
         */
        function () {
            this.clearCheckoutDeliveryAddress();
            this.clearCheckoutDeliveryMode();
            this.clearCheckoutDeliveryModes();
        };
        /**
         * @protected
         * @return {?}
         */
        CheckoutDeliveryService.prototype.actionAllowed = /**
         * @protected
         * @return {?}
         */
        function () {
            return (this.cartData.userId !== OCC_USER_ID_ANONYMOUS ||
                this.cartData.isGuestCart);
        };
        CheckoutDeliveryService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CheckoutDeliveryService.ctorParameters = function () { return [
            { type: store.Store },
            { type: CartDataService }
        ]; };
        /** @nocollapse */ CheckoutDeliveryService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CheckoutDeliveryService_Factory() { return new CheckoutDeliveryService(core.ɵɵinject(store.Store), core.ɵɵinject(CartDataService)); }, token: CheckoutDeliveryService, providedIn: "root" });
        return CheckoutDeliveryService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CheckoutDeliveryService.prototype.checkoutStore;
        /**
         * @type {?}
         * @protected
         */
        CheckoutDeliveryService.prototype.cartData;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckoutPaymentService = /** @class */ (function () {
        function CheckoutPaymentService(checkoutStore, cartData) {
            this.checkoutStore = checkoutStore;
            this.cartData = cartData;
        }
        /**
         * Get card types
         */
        /**
         * Get card types
         * @return {?}
         */
        CheckoutPaymentService.prototype.getCardTypes = /**
         * Get card types
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getAllCardTypes));
        };
        /**
         * Get payment details
         */
        /**
         * Get payment details
         * @return {?}
         */
        CheckoutPaymentService.prototype.getPaymentDetails = /**
         * Get payment details
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getPaymentDetails));
        };
        /**
         * Get status about set Payment Details process
         */
        /**
         * Get status about set Payment Details process
         * @return {?}
         */
        CheckoutPaymentService.prototype.getSetPaymentDetailsResultProcess = /**
         * Get status about set Payment Details process
         * @return {?}
         */
        function () {
            return this.checkoutStore.pipe(store.select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Payment Details
         */
        /**
         * Clear info about process of setting Payment Details
         * @return {?}
         */
        CheckoutPaymentService.prototype.resetSetPaymentDetailsProcess = /**
         * Clear info about process of setting Payment Details
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new ResetSetPaymentDetailsProcess());
        };
        /**
         * Load the supported card types
         */
        /**
         * Load the supported card types
         * @return {?}
         */
        CheckoutPaymentService.prototype.loadSupportedCardTypes = /**
         * Load the supported card types
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new LoadCardTypes());
        };
        /**
         * Create payment details using the given paymentDetails param
         * @param paymentDetails: the PaymentDetails to be created
         */
        /**
         * Create payment details using the given paymentDetails param
         * @param {?} paymentDetails
         * @return {?}
         */
        CheckoutPaymentService.prototype.createPaymentDetails = /**
         * Create payment details using the given paymentDetails param
         * @param {?} paymentDetails
         * @return {?}
         */
        function (paymentDetails) {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new CreatePaymentDetails({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cartId,
                    paymentDetails: paymentDetails,
                }));
            }
        };
        /**
         * Set payment details
         * @param paymentDetails : the PaymentDetails to be set
         */
        /**
         * Set payment details
         * @param {?} paymentDetails : the PaymentDetails to be set
         * @return {?}
         */
        CheckoutPaymentService.prototype.setPaymentDetails = /**
         * Set payment details
         * @param {?} paymentDetails : the PaymentDetails to be set
         * @return {?}
         */
        function (paymentDetails) {
            if (this.actionAllowed()) {
                this.checkoutStore.dispatch(new SetPaymentDetails({
                    userId: this.cartData.userId,
                    cartId: this.cartData.cart.code,
                    paymentDetails: paymentDetails,
                }));
            }
        };
        /**
         * Sets payment loading to true without having the flicker issue (GH-3102)
         */
        /**
         * Sets payment loading to true without having the flicker issue (GH-3102)
         * @return {?}
         */
        CheckoutPaymentService.prototype.paymentProcessSuccess = /**
         * Sets payment loading to true without having the flicker issue (GH-3102)
         * @return {?}
         */
        function () {
            this.checkoutStore.dispatch(new PaymentProcessSuccess());
        };
        /**
         * @protected
         * @return {?}
         */
        CheckoutPaymentService.prototype.actionAllowed = /**
         * @protected
         * @return {?}
         */
        function () {
            return (this.cartData.userId !== OCC_USER_ID_ANONYMOUS ||
                this.cartData.isGuestCart);
        };
        CheckoutPaymentService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CheckoutPaymentService.ctorParameters = function () { return [
            { type: store.Store },
            { type: CartDataService }
        ]; };
        /** @nocollapse */ CheckoutPaymentService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CheckoutPaymentService_Factory() { return new CheckoutPaymentService(core.ɵɵinject(store.Store), core.ɵɵinject(CartDataService)); }, token: CheckoutPaymentService, providedIn: "root" });
        return CheckoutPaymentService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CheckoutPaymentService.prototype.checkoutStore;
        /**
         * @type {?}
         * @protected
         */
        CheckoutPaymentService.prototype.cartData;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * The `CmsPageConfig` is used to build pages by configuration.
     * The interfaces are designed to have a clean configuration for
     * static CMS structure. Ordinary attributes that are not
     * required for configurable pages have been left out and
     * will not be serialized in the adapter logic.
     * @record
     */
    function CmsPageConfig() { }
    if (false) {
        /**
         * When the `ignoreBackend` is set to true, the CMS backend
         * will not be consumed. This saves network latency and is
         * useful for commodity commerce pages.
         *
         * @type {?|undefined}
         */
        CmsPageConfig.prototype.ignoreBackend;
        /** @type {?|undefined} */
        CmsPageConfig.prototype.pageId;
        /** @type {?|undefined} */
        CmsPageConfig.prototype.type;
        /**
         * The page title is typically used to display the page heading
         * as well as for the page title tag. The latter is used for browser
         * navigation as well as SEO and social share platforms.
         * @type {?|undefined}
         */
        CmsPageConfig.prototype.title;
        /**
         * the template is used to bind to the layout
         * configuration and css layout class
         * @type {?|undefined}
         */
        CmsPageConfig.prototype.template;
        /**
         * The page slots represent various sections on the page that
         * can contain components.
         * @type {?}
         */
        CmsPageConfig.prototype.slots;
    }
    /**
     * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.
     * @record
     */
    function CmsPageSlotsConfig() { }
    /**
     * The `CmsPageSlotConfig` is a simplified configuration model
     * that can be used to configure slots in static configuration,
     * rather than loading from a backend.
     * @record
     */
    function CmsPageSlotConfig() { }
    if (false) {
        /** @type {?|undefined} */
        CmsPageSlotConfig.prototype.componentIds;
        /** @type {?|undefined} */
        CmsPageSlotConfig.prototype.properties;
    }
    /**
     * The `CmsStructureConfig` is used to build pages in Spartacus by configuration
     * instead of using a backend CMS system. The configuration can be used to build
     * complete pages or parts of a page. The `CmsStructureConfig` is optimized to
     * only require the necessary properties. Adapter logic is applied to serialize
     * the `CmsStructureConfig` into the required UI model.
     * @abstract
     */
    var   /**
     * The `CmsStructureConfig` is used to build pages in Spartacus by configuration
     * instead of using a backend CMS system. The configuration can be used to build
     * complete pages or parts of a page. The `CmsStructureConfig` is optimized to
     * only require the necessary properties. Adapter logic is applied to serialize
     * the `CmsStructureConfig` into the required UI model.
     * @abstract
     */
    CmsStructureConfig = /** @class */ (function (_super) {
        __extends(CmsStructureConfig, _super);
        function CmsStructureConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CmsStructureConfig;
    }(CmsConfig));
    if (false) {
        /** @type {?} */
        CmsStructureConfig.prototype.cmsStructure;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultCmsModuleConfig = {
        backend: {
            occ: {
                endpoints: {
                    component: 'cms/components/${id}',
                    components: 'cms/components',
                    pages: 'cms/pages',
                    page: 'cms/pages/${id}',
                },
                legacy: false,
            },
        },
        cmsComponents: {},
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.
     * More specific resolvers for content pages can be implemented by making them more
     * specific, for example by using the page template (see `CartPageMetaResolver`).
     *
     * The page title, and breadcrumbs are resolved in this implementation only.
     */
    var ContentPageMetaResolver = /** @class */ (function (_super) {
        __extends(ContentPageMetaResolver, _super);
        function ContentPageMetaResolver(cms, translation) {
            var _this = _super.call(this) || this;
            _this.cms = cms;
            _this.translation = translation;
            _this.cms$ = _this.cms
                .getCurrentPage()
                .pipe(operators.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return !!p; })));
            _this.pageType = PageType.CONTENT_PAGE;
            return _this;
        }
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         */
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        ContentPageMetaResolver.prototype.resolve = /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.cms$.pipe(operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                return rxjs.combineLatest([
                    _this.resolveTitle(page),
                    _this.resolveBreadcrumbLabel().pipe(operators.switchMap((/**
                     * @param {?} label
                     * @return {?}
                     */
                    function (label) { return _this.resolveBreadcrumbs(page, label); }))),
                ]);
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), title = _b[0], breadcrumbs = _b[1];
                return ({ title: title, breadcrumbs: breadcrumbs });
            })));
        };
        /**
         * @param {?=} page
         * @return {?}
         */
        ContentPageMetaResolver.prototype.resolveTitle = /**
         * @param {?=} page
         * @return {?}
         */
        function (page) {
            return page ? rxjs.of(page.title) : this.cms$.pipe(operators.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.title; })));
        };
        /**
         * @deprecated since version 1.3
         * This method will removed with with 2.0
         */
        /**
         * @deprecated since version 1.3
         * This method will removed with with 2.0
         * @return {?}
         */
        ContentPageMetaResolver.prototype.resolveBreadcrumbLabel = /**
         * @deprecated since version 1.3
         * This method will removed with with 2.0
         * @return {?}
         */
        function () {
            return this.translation.translate('common.home');
        };
        /**
         * @param {?=} _page
         * @param {?=} breadcrumbLabel
         * @return {?}
         */
        ContentPageMetaResolver.prototype.resolveBreadcrumbs = /**
         * @param {?=} _page
         * @param {?=} breadcrumbLabel
         * @return {?}
         */
        function (_page, breadcrumbLabel) {
            if (breadcrumbLabel) {
                return rxjs.of([{ label: breadcrumbLabel, link: '/' }]);
            }
            else {
                return this.translation
                    .translate('common.home')
                    .pipe(operators.map((/**
                 * @param {?} label
                 * @return {?}
                 */
                function (label) { return [{ label: label, link: '/' }]; })));
            }
        };
        ContentPageMetaResolver.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ContentPageMetaResolver.ctorParameters = function () { return [
            { type: CmsService },
            { type: TranslationService }
        ]; };
        /** @nocollapse */ ContentPageMetaResolver.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ContentPageMetaResolver_Factory() { return new ContentPageMetaResolver(core.ɵɵinject(CmsService), core.ɵɵinject(TranslationService)); }, token: ContentPageMetaResolver, providedIn: "root" });
        return ContentPageMetaResolver;
    }(PageMetaResolver));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ContentPageMetaResolver.prototype.cms$;
        /**
         * @type {?}
         * @protected
         */
        ContentPageMetaResolver.prototype.cms;
        /**
         * @type {?}
         * @protected
         */
        ContentPageMetaResolver.prototype.translation;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmsPageTitleModule = /** @class */ (function () {
        function CmsPageTitleModule() {
        }
        CmsPageTitleModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            {
                                provide: PageMetaResolver,
                                useExisting: ContentPageMetaResolver,
                                multi: true,
                            },
                        ],
                    },] }
        ];
        return CmsPageTitleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UrlMatcherFactoryService = /** @class */ (function () {
        function UrlMatcherFactoryService(globService) {
            this.globService = globService;
        }
        /**
         * Returns a matcher that is always fails
         */
        /**
         * Returns a matcher that is always fails
         * @return {?}
         */
        UrlMatcherFactoryService.prototype.getFalsyUrlMatcher = /**
         * Returns a matcher that is always fails
         * @return {?}
         */
        function () {
            return (/**
             * @return {?}
             */
            function falsyUrlMatcher() {
                return null;
            });
        };
        /**
         * Returns a matcher for given list of paths
         */
        /**
         * Returns a matcher for given list of paths
         * @param {?} paths
         * @return {?}
         */
        UrlMatcherFactoryService.prototype.getMultiplePathsUrlMatcher = /**
         * Returns a matcher for given list of paths
         * @param {?} paths
         * @return {?}
         */
        function (paths) {
            /** @type {?} */
            var self = this;
            /** @type {?} */
            var matcher = (/**
             * @param {?} segments
             * @param {?} segmentGroup
             * @param {?} route
             * @return {?}
             */
            function multiplePathsUrlMatcher(segments, segmentGroup, route) {
                for (var i = 0; i < paths.length; i++) {
                    /** @type {?} */
                    var result = self.getPathUrlMatcher(paths[i])(segments, segmentGroup, route);
                    if (result) {
                        return result;
                    }
                }
                return null;
            });
            matcher.paths = paths; // property added for easier debugging of routes
            return matcher;
        };
        /**
         * Similar to Angular's defaultUrlMatcher. Differences:
         * - the `path` comes from function's argument, not from `route.path`
         * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function
         */
        /**
         * Similar to Angular's defaultUrlMatcher. Differences:
         * - the `path` comes from function's argument, not from `route.path`
         * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function
         * @protected
         * @param {?=} path
         * @return {?}
         */
        UrlMatcherFactoryService.prototype.getPathUrlMatcher = /**
         * Similar to Angular's defaultUrlMatcher. Differences:
         * - the `path` comes from function's argument, not from `route.path`
         * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function
         * @protected
         * @param {?=} path
         * @return {?}
         */
        function (path) {
            if (path === void 0) { path = ''; }
            return (/**
             * @param {?} segments
             * @param {?} segmentGroup
             * @param {?} route
             * @return {?}
             */
            function (segments, segmentGroup, route) {
                /**
                 * @license
                 * The MIT License
                 * Copyright (c) 2010-2019 Google LLC. http://angular.io/license
                 *
                 * See:
                 * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121
                 */
                // use function's argument, not the `route.path`
                if (path === '') {
                    if (route.pathMatch === 'full' &&
                        (segmentGroup.hasChildren() || segments.length > 0)) {
                        return null;
                    }
                    return { consumed: [], posParams: {} };
                }
                /** @type {?} */
                var parts = path.split('/');
                if (parts.length > segments.length) {
                    // The actual URL is shorter than the config, no match
                    return null;
                }
                if (route.pathMatch === 'full' &&
                    (segmentGroup.hasChildren() || parts.length < segments.length)) {
                    // The config is longer than the actual URL but we are looking for a full match, return null
                    return null;
                }
                /** @type {?} */
                var posParams = {};
                // Check each config part against the actual URL
                for (var index = 0; index < parts.length; index++) {
                    /** @type {?} */
                    var part = parts[index];
                    /** @type {?} */
                    var segment = segments[index];
                    /** @type {?} */
                    var isParameter = part.startsWith(':');
                    if (isParameter) {
                        posParams[part.substring(1)] = segment;
                    }
                    else if (part !== segment.path) {
                        // The actual URL part does not match the config, no match
                        return null;
                    }
                }
                return { consumed: segments.slice(0, parts.length), posParams: posParams };
            });
        };
        /**
         * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher
         */
        /**
         * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher
         * @param {?} originalMatcher
         * @return {?}
         */
        UrlMatcherFactoryService.prototype.getOppositeUrlMatcher = /**
         * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher
         * @param {?} originalMatcher
         * @return {?}
         */
        function (originalMatcher) {
            /** @type {?} */
            var matcher = (/**
             * @param {?} segments
             * @param {?} group
             * @param {?} route
             * @return {?}
             */
            function oppositeUrlMatcher(segments, group, route) {
                return originalMatcher(segments, group, route)
                    ? null
                    : { consumed: segments, posParams: {} };
            });
            matcher.originalMatcher = originalMatcher; // property added for easier debugging of routes
            return matcher;
        };
        /**
         * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.
         */
        /**
         * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.
         * @param {?} globPatterns
         * @return {?}
         */
        UrlMatcherFactoryService.prototype.getGlobUrlMatcher = /**
         * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.
         * @param {?} globPatterns
         * @return {?}
         */
        function (globPatterns) {
            /** @type {?} */
            var globValidator = this.globService.getValidator(globPatterns);
            /** @type {?} */
            var matcher = (/**
             * @param {?} segments
             * @return {?}
             */
            function globUrlMatcher(segments) {
                /** @type {?} */
                var fullPath = "/" + segments.map((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) { return s.path; })).join('/');
                return globValidator(fullPath)
                    ? { consumed: segments, posParams: {} }
                    : null;
            });
            matcher.globPatterns = globPatterns; // property added for easier debugging of routes
            return matcher;
        };
        UrlMatcherFactoryService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        UrlMatcherFactoryService.ctorParameters = function () { return [
            { type: GlobService }
        ]; };
        /** @nocollapse */ UrlMatcherFactoryService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UrlMatcherFactoryService_Factory() { return new UrlMatcherFactoryService(core.ɵɵinject(GlobService)); }, token: UrlMatcherFactoryService, providedIn: "root" });
        return UrlMatcherFactoryService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UrlMatcherFactoryService.prototype.globService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConfigurableRoutesService = /** @class */ (function () {
        function ConfigurableRoutesService(injector, routingConfigService, urlMatcherFactory) {
            this.injector = injector;
            this.routingConfigService = routingConfigService;
            this.urlMatcherFactory = urlMatcherFactory;
            this.initCalled = false; // guard not to call init() more than once
        }
        /**
         * Configures all existing Routes in the Router
         */
        // guard not to call init() more than once
        /**
         * Configures all existing Routes in the Router
         * @return {?}
         */
        ConfigurableRoutesService.prototype.init = 
        // guard not to call init() more than once
        /**
         * Configures all existing Routes in the Router
         * @return {?}
         */
        function () {
            if (!this.initCalled) {
                this.initCalled = true;
                this.configureRouter();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ConfigurableRoutesService.prototype.configureRouter = /**
         * @private
         * @return {?}
         */
        function () {
            // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:
            /** @type {?} */
            var router$1 = this.injector.get(router.Router);
            /** @type {?} */
            var configuredRoutes = this.configureRoutes(router$1.config);
            router$1.resetConfig(configuredRoutes);
        };
        /**
         * @private
         * @param {?} routes
         * @return {?}
         */
        ConfigurableRoutesService.prototype.configureRoutes = /**
         * @private
         * @param {?} routes
         * @return {?}
         */
        function (routes) {
            var _this = this;
            /** @type {?} */
            var result = [];
            routes.forEach((/**
             * @param {?} route
             * @return {?}
             */
            function (route) {
                /** @type {?} */
                var configuredRoute = _this.configureRoute(route);
                if (route.children && route.children.length) {
                    configuredRoute.children = _this.configureRoutes(route.children);
                }
                result.push(configuredRoute);
            }));
            return result;
        };
        /**
         * @private
         * @param {?} route
         * @return {?}
         */
        ConfigurableRoutesService.prototype.configureRoute = /**
         * @private
         * @param {?} route
         * @return {?}
         */
        function (route) {
            /** @type {?} */
            var routeName = this.getRouteName(route);
            if (routeName) {
                /** @type {?} */
                var routeConfig = this.routingConfigService.getRouteConfig(routeName);
                /** @type {?} */
                var paths = this.getConfiguredPaths(routeConfig, routeName, route);
                /** @type {?} */
                var isDisabled = routeConfig && routeConfig.disabled;
                if (isDisabled || !paths.length) {
                    delete route.path;
                    return __assign({}, route, { matcher: this.urlMatcherFactory.getFalsyUrlMatcher() });
                }
                else if (paths.length === 1) {
                    delete route.matcher;
                    return __assign({}, route, { path: paths[0] });
                }
                else {
                    delete route.path;
                    return __assign({}, route, { matcher: this.urlMatcherFactory.getMultiplePathsUrlMatcher(paths) });
                }
            }
            return route; // if route doesn't have a name, just pass the original route
        };
        /**
         * @private
         * @param {?} route
         * @return {?}
         */
        ConfigurableRoutesService.prototype.getRouteName = /**
         * @private
         * @param {?} route
         * @return {?}
         */
        function (route) {
            return route.data && route.data.cxRoute;
        };
        /**
         * @private
         * @param {?} routeConfig
         * @param {?} routeName
         * @param {?} route
         * @return {?}
         */
        ConfigurableRoutesService.prototype.getConfiguredPaths = /**
         * @private
         * @param {?} routeConfig
         * @param {?} routeName
         * @param {?} route
         * @return {?}
         */
        function (routeConfig, routeName, route) {
            if (routeConfig === undefined) {
                this.warn("Could not configure the named route '" + routeName + "'", route, "due to undefined key '" + routeName + "' in the routes config");
                return [];
            }
            if (routeConfig && routeConfig.paths === undefined) {
                this.warn("Could not configure the named route '" + routeName + "'", route, "due to undefined 'paths' for the named route '" + routeName + "' in the routes config");
                return [];
            }
            // routeConfig or routeConfig.paths can be null - which means switching off the route
            return (routeConfig && routeConfig.paths) || [];
        };
        /**
         * @private
         * @param {...?} args
         * @return {?}
         */
        ConfigurableRoutesService.prototype.warn = /**
         * @private
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (core.isDevMode()) {
                console.warn.apply(console, __spread(args));
            }
        };
        ConfigurableRoutesService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ConfigurableRoutesService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: RoutingConfigService },
            { type: UrlMatcherFactoryService }
        ]; };
        /** @nocollapse */ ConfigurableRoutesService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ConfigurableRoutesService_Factory() { return new ConfigurableRoutesService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(RoutingConfigService), core.ɵɵinject(UrlMatcherFactoryService)); }, token: ConfigurableRoutesService, providedIn: "root" });
        return ConfigurableRoutesService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ConfigurableRoutesService.prototype.initCalled;
        /**
         * @type {?}
         * @private
         */
        ConfigurableRoutesService.prototype.injector;
        /**
         * @type {?}
         * @private
         */
        ConfigurableRoutesService.prototype.routingConfigService;
        /**
         * @type {?}
         * @private
         */
        ConfigurableRoutesService.prototype.urlMatcherFactory;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function RoutesConfig() { }
    /**
     * @record
     */
    function RouteConfig() { }
    if (false) {
        /**
         * List of path aliases to match with URL. Also used to build the semantic links.
         * @type {?|undefined}
         */
        RouteConfig.prototype.paths;
        /**
         * Maps names of route params with params used to build the semantic link.
         * @type {?|undefined}
         */
        RouteConfig.prototype.paramsMapping;
        /**
         * Disables the url matcher for the route. But still allows for generation of semantic links.
         * @type {?|undefined}
         */
        RouteConfig.prototype.disabled;
        /**
         * When false, the route is public for unauthorized users even when the global flag `routing.protected` is true.
         * Other values (true, undefined) are ignored.
         * @type {?|undefined}
         */
        RouteConfig.prototype.protected;
    }
    /**
     * @record
     */
    function ParamsMapping() { }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UrlPipe = /** @class */ (function () {
        function UrlPipe(urlService) {
            this.urlService = urlService;
        }
        /**
         * @param {?} commands
         * @return {?}
         */
        UrlPipe.prototype.transform = /**
         * @param {?} commands
         * @return {?}
         */
        function (commands) {
            return this.urlService.transform(commands);
        };
        UrlPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'cxUrl',
                    },] }
        ];
        /** @nocollapse */
        UrlPipe.ctorParameters = function () { return [
            { type: SemanticPathService }
        ]; };
        return UrlPipe;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        UrlPipe.prototype.urlService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductURLPipe = /** @class */ (function () {
        function ProductURLPipe(semanticPath) {
            this.semanticPath = semanticPath;
        }
        /**
         * @param {?} product
         * @return {?}
         */
        ProductURLPipe.prototype.transform = /**
         * @param {?} product
         * @return {?}
         */
        function (product) {
            return this.semanticPath.transform({ cxRoute: 'product', params: product });
        };
        ProductURLPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'cxProductUrl',
                    },] }
        ];
        /** @nocollapse */
        ProductURLPipe.ctorParameters = function () { return [
            { type: SemanticPathService }
        ]; };
        return ProductURLPipe;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ProductURLPipe.prototype.semanticPath;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UrlModule = /** @class */ (function () {
        function UrlModule() {
        }
        UrlModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [UrlPipe, ProductURLPipe],
                        exports: [UrlPipe, ProductURLPipe],
                    },] }
        ];
        return UrlModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function UrlCommandRoute() { }
    if (false) {
        /** @type {?|undefined} */
        UrlCommandRoute.prototype.cxRoute;
        /** @type {?|undefined} */
        UrlCommandRoute.prototype.params;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    ExternalRoutesConfig = /** @class */ (function () {
        function ExternalRoutesConfig() {
        }
        return ExternalRoutesConfig;
    }());
    if (false) {
        /** @type {?} */
        ExternalRoutesConfig.prototype.routing;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExternalRoutesGuard = /** @class */ (function () {
        function ExternalRoutesGuard(winRef, platformId) {
            this.winRef = winRef;
            this.platformId = platformId;
        }
        /**
         * Redirects to different storefront system for anticipated URL
         */
        /**
         * Redirects to different storefront system for anticipated URL
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        ExternalRoutesGuard.prototype.canActivate = /**
         * Redirects to different storefront system for anticipated URL
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        function (route, state) {
            if (common.isPlatformBrowser(this.platformId)) {
                this.redirect(route, state);
            }
            return false;
        };
        /**
         * Redirects to anticipated URL using full page reload, not Angular routing
         */
        /**
         * Redirects to anticipated URL using full page reload, not Angular routing
         * @protected
         * @param {?} _
         * @param {?} state
         * @return {?}
         */
        ExternalRoutesGuard.prototype.redirect = /**
         * Redirects to anticipated URL using full page reload, not Angular routing
         * @protected
         * @param {?} _
         * @param {?} state
         * @return {?}
         */
        function (_, state) {
            /** @type {?} */
            var window = this.winRef.nativeWindow;
            if (window && window.location) {
                window.location.href = state.url;
            }
        };
        ExternalRoutesGuard.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ExternalRoutesGuard.ctorParameters = function () { return [
            { type: WindowRef },
            { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        /** @nocollapse */ ExternalRoutesGuard.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ExternalRoutesGuard_Factory() { return new ExternalRoutesGuard(core.ɵɵinject(WindowRef), core.ɵɵinject(core.PLATFORM_ID)); }, token: ExternalRoutesGuard, providedIn: "root" });
        return ExternalRoutesGuard;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ExternalRoutesGuard.prototype.winRef;
        /**
         * @type {?}
         * @protected
         */
        ExternalRoutesGuard.prototype.platformId;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} service
     * @return {?}
     */
    function addExternalRoutesFactory(service) {
        /** @type {?} */
        var result = (/**
         * @return {?}
         */
        function () {
            service.addRoutes();
        });
        return result;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Service that helps redirecting to different storefront systems for configured URLs
     */
    var ExternalRoutesService = /** @class */ (function () {
        function ExternalRoutesService(config, matcherFactory, injector) {
            this.config = config;
            this.matcherFactory = matcherFactory;
            this.injector = injector;
        }
        Object.defineProperty(ExternalRoutesService.prototype, "internalUrlPatterns", {
            get: /**
             * @protected
             * @return {?}
             */
            function () {
                return ((this.config && this.config.routing && this.config.routing.internal) || []);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system
         */
        /**
         * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system
         * @return {?}
         */
        ExternalRoutesService.prototype.addRoutes = /**
         * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system
         * @return {?}
         */
        function () {
            /** @type {?} */
            var router$1 = this.injector.get(router.Router);
            /** @type {?} */
            var newRoutes = this.getRoutes();
            if (newRoutes.length) {
                router$1.resetConfig(__spread(newRoutes, router$1.config));
            }
        };
        /**
         * Returns routes that are responsible for redirection to different storefront systems
         */
        /**
         * Returns routes that are responsible for redirection to different storefront systems
         * @protected
         * @return {?}
         */
        ExternalRoutesService.prototype.getRoutes = /**
         * Returns routes that are responsible for redirection to different storefront systems
         * @protected
         * @return {?}
         */
        function () {
            if (!this.internalUrlPatterns.length) {
                return [];
            }
            /** @type {?} */
            var routes = [];
            routes.push({
                pathMatch: 'full',
                matcher: this.getUrlMatcher(),
                canActivate: [ExternalRoutesGuard],
                component: (/** @type {?} */ ({})),
            });
            return routes;
        };
        /**
         * Returns the URL matcher for the external route
         */
        /**
         * Returns the URL matcher for the external route
         * @protected
         * @return {?}
         */
        ExternalRoutesService.prototype.getUrlMatcher = /**
         * Returns the URL matcher for the external route
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var matcher = this.matcherFactory.getGlobUrlMatcher(this.internalUrlPatterns);
            return this.matcherFactory.getOppositeUrlMatcher(matcher); // the external route should be activated only when it's NOT an internal route
        };
        ExternalRoutesService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExternalRoutesService.ctorParameters = function () { return [
            { type: ExternalRoutesConfig },
            { type: UrlMatcherFactoryService },
            { type: core.Injector }
        ]; };
        return ExternalRoutesService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ExternalRoutesService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        ExternalRoutesService.prototype.matcherFactory;
        /**
         * @type {?}
         * @protected
         */
        ExternalRoutesService.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Prepends the external route that redirects to a different storefront system for configured URLs
     */
    var ExternalRoutesModule = /** @class */ (function () {
        function ExternalRoutesModule() {
        }
        /**
         * @return {?}
         */
        ExternalRoutesModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: ExternalRoutesModule,
                providers: [
                    ExternalRoutesService,
                    { provide: ExternalRoutesConfig, useExisting: Config },
                    {
                        provide: core.APP_INITIALIZER,
                        multi: true,
                        useFactory: addExternalRoutesFactory,
                        deps: [ExternalRoutesService],
                    },
                ],
            };
        };
        ExternalRoutesModule.decorators = [
            { type: core.NgModule }
        ];
        return ExternalRoutesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function CmsRouteData() { }
    if (false) {
        /** @type {?|undefined} */
        CmsRouteData.prototype.cxCmsRouteContext;
        /** @type {?|undefined} */
        CmsRouteData.prototype.pageLabel;
    }
    /**
     * @record
     */
    function CmsRoute() { }
    if (false) {
        /** @type {?|undefined} */
        CmsRoute.prototype.data;
    }
    /**
     * @record
     */
    function CmsActivatedRouteSnapshot() { }
    if (false) {
        /** @type {?} */
        CmsActivatedRouteSnapshot.prototype.data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PageContext = /** @class */ (function () {
        function PageContext(id, type) {
            this.id = id;
            this.type = type;
        }
        return PageContext;
    }());
    if (false) {
        /** @type {?} */
        PageContext.prototype.id;
        /** @type {?} */
        PageContext.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProtectedRoutesService = /** @class */ (function () {
        function ProtectedRoutesService(config) {
            var _this = this;
            this.config = config;
            this.nonProtectedPaths = []; // arrays of paths' segments list
            if (this.shouldProtect) {
                // pre-process config for performance:
                this.nonProtectedPaths = this.getNonProtectedPaths().map((/**
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return _this.getSegments(path);
                }));
            }
        }
        Object.defineProperty(ProtectedRoutesService.prototype, "routingConfig", {
            get: 
            // arrays of paths' segments list
            /**
             * @protected
             * @return {?}
             */
            function () {
                return this.config && this.config.routing;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProtectedRoutesService.prototype, "shouldProtect", {
            /**
             * Returns 'protected' property (boolean) from routing config
             *
             * @returns boolean
             */
            get: /**
             * Returns 'protected' property (boolean) from routing config
             *
             * @return {?} boolean
             */
            function () {
                return this.routingConfig.protected;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Tells if the url is protected
         */
        /**
         * Tells if the url is protected
         * @param {?} urlSegments
         * @return {?}
         */
        ProtectedRoutesService.prototype.isUrlProtected = /**
         * Tells if the url is protected
         * @param {?} urlSegments
         * @return {?}
         */
        function (urlSegments) {
            return (this.shouldProtect &&
                !this.matchAnyPath(urlSegments, this.nonProtectedPaths));
        };
        /**
         * Tells whether the url matches at least one of the paths
         */
        /**
         * Tells whether the url matches at least one of the paths
         * @protected
         * @param {?} urlSegments
         * @param {?} pathsSegments
         * @return {?}
         */
        ProtectedRoutesService.prototype.matchAnyPath = /**
         * Tells whether the url matches at least one of the paths
         * @protected
         * @param {?} urlSegments
         * @param {?} pathsSegments
         * @return {?}
         */
        function (urlSegments, pathsSegments) {
            var _this = this;
            return pathsSegments.some((/**
             * @param {?} pathSegments
             * @return {?}
             */
            function (pathSegments) {
                return _this.matchPath(urlSegments, pathSegments);
            }));
        };
        /**
         * Tells whether the url matches the path
         */
        /**
         * Tells whether the url matches the path
         * @protected
         * @param {?} urlSegments
         * @param {?} pathSegments
         * @return {?}
         */
        ProtectedRoutesService.prototype.matchPath = /**
         * Tells whether the url matches the path
         * @protected
         * @param {?} urlSegments
         * @param {?} pathSegments
         * @return {?}
         */
        function (urlSegments, pathSegments) {
            if (urlSegments.length !== pathSegments.length) {
                return false;
            }
            for (var i = 0; i < pathSegments.length; i++) {
                /** @type {?} */
                var pathSeg = pathSegments[i];
                /** @type {?} */
                var urlSeg = urlSegments[i];
                // compare only static segments:
                if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {
                    return false;
                }
            }
            return true;
        };
        /**
         * Returns a list of paths that are not protected
         */
        /**
         * Returns a list of paths that are not protected
         * @protected
         * @return {?}
         */
        ProtectedRoutesService.prototype.getNonProtectedPaths = /**
         * Returns a list of paths that are not protected
         * @protected
         * @return {?}
         */
        function () {
            return Object.values(this.routingConfig.routes).reduce((/**
             * @param {?} acc
             * @param {?} routeConfig
             * @return {?}
             */
            function (acc, routeConfig) {
                return routeConfig.protected === false && // must be explicitly false, ignore undefined
                    routeConfig.paths &&
                    routeConfig.paths.length
                    ? acc.concat(routeConfig.paths)
                    : acc;
            }), []);
        };
        /**
         * Splits the url by slashes
         */
        /**
         * Splits the url by slashes
         * @protected
         * @param {?} url
         * @return {?}
         */
        ProtectedRoutesService.prototype.getSegments = /**
         * Splits the url by slashes
         * @protected
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return (url || '').split('/');
        };
        ProtectedRoutesService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ProtectedRoutesService.ctorParameters = function () { return [
            { type: RoutingConfig }
        ]; };
        /** @nocollapse */ ProtectedRoutesService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProtectedRoutesService_Factory() { return new ProtectedRoutesService(core.ɵɵinject(RoutingConfig)); }, token: ProtectedRoutesService, providedIn: "root" });
        return ProtectedRoutesService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ProtectedRoutesService.prototype.nonProtectedPaths;
        /**
         * @type {?}
         * @protected
         */
        ProtectedRoutesService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProtectedRoutesGuard = /** @class */ (function () {
        function ProtectedRoutesGuard(service, authGuard) {
            this.service = service;
            this.authGuard = authGuard;
        }
        /**
         * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.
         */
        /**
         * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.
         * @param {?} route
         * @return {?}
         */
        ProtectedRoutesGuard.prototype.canActivate = /**
         * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.
         * @param {?} route
         * @return {?}
         */
        function (route) {
            /** @type {?} */
            var urlSegments = route.url.map((/**
             * @param {?} seg
             * @return {?}
             */
            function (seg) { return seg.path; }));
            // For the root path `/` ActivatedRoute contains an empty array of segments:
            urlSegments = urlSegments.length ? urlSegments : [''];
            if (this.service.isUrlProtected(urlSegments)) {
                return this.authGuard.canActivate();
            }
            return rxjs.of(true);
        };
        ProtectedRoutesGuard.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ProtectedRoutesGuard.ctorParameters = function () { return [
            { type: ProtectedRoutesService },
            { type: AuthGuard }
        ]; };
        /** @nocollapse */ ProtectedRoutesGuard.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProtectedRoutesGuard_Factory() { return new ProtectedRoutesGuard(core.ɵɵinject(ProtectedRoutesService), core.ɵɵinject(AuthGuard)); }, token: ProtectedRoutesGuard, providedIn: "root" });
        return ProtectedRoutesGuard;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProtectedRoutesGuard.prototype.service;
        /**
         * @type {?}
         * @protected
         */
        ProtectedRoutesGuard.prototype.authGuard;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RouterEffects = /** @class */ (function () {
        function RouterEffects(actions$, router, location) {
            var _this = this;
            this.actions$ = actions$;
            this.router = router;
            this.location = location;
            this.navigate$ = this.actions$.pipe(effects$d.ofType(ROUTER_GO), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var path = _a.path, queryParams = _a.query, extras = _a.extras;
                _this.router.navigate(path, __assign({ queryParams: queryParams }, extras));
            })));
            this.navigateBuUrl$ = this.actions$.pipe(effects$d.ofType(ROUTER_GO_BY_URL), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.tap((/**
             * @param {?} url
             * @return {?}
             */
            function (url) {
                _this.router.navigateByUrl(url);
            })));
            this.clearCmsRoutes$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE, LOGOUT, LOGIN), operators.tap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                /** @type {?} */
                var filteredConfig = _this.router.config.filter((/**
                 * @param {?} route
                 * @return {?}
                 */
                function (route) { return !(route.data && route.data.cxCmsRouteContext); }));
                if (filteredConfig.length !== _this.router.config.length) {
                    _this.router.resetConfig(filteredConfig);
                }
            })));
            this.navigateBack$ = this.actions$.pipe(effects$d.ofType(ROUTER_BACK), operators.tap((/**
             * @return {?}
             */
            function () { return _this.location.back(); })));
            this.navigateForward$ = this.actions$.pipe(effects$d.ofType(ROUTER_FORWARD), operators.tap((/**
             * @return {?}
             */
            function () { return _this.location.forward(); })));
        }
        RouterEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RouterEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: router.Router },
            { type: common.Location }
        ]; };
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], RouterEffects.prototype, "navigate$", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], RouterEffects.prototype, "navigateBuUrl$", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], RouterEffects.prototype, "clearCmsRoutes$", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], RouterEffects.prototype, "navigateBack$", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], RouterEffects.prototype, "navigateForward$", void 0);
        return RouterEffects;
    }());
    if (false) {
        /** @type {?} */
        RouterEffects.prototype.navigate$;
        /** @type {?} */
        RouterEffects.prototype.navigateBuUrl$;
        /** @type {?} */
        RouterEffects.prototype.clearCmsRoutes$;
        /** @type {?} */
        RouterEffects.prototype.navigateBack$;
        /** @type {?} */
        RouterEffects.prototype.navigateForward$;
        /**
         * @type {?}
         * @private
         */
        RouterEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        RouterEffects.prototype.router;
        /**
         * @type {?}
         * @private
         */
        RouterEffects.prototype.location;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$7 = [RouterEffects];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$d = {
        navigationId: 0,
        state: {
            url: '',
            queryParams: {},
            params: {},
            context: {
                id: '',
            },
            cmsRequired: false,
        },
        nextState: undefined,
    };
    /**
     * @return {?}
     */
    function getReducers$7() {
        return {
            router: reducer$d,
        };
    }
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$d(state, action) {
        if (state === void 0) { state = initialState$d; }
        switch (action.type) {
            case routerStore.ROUTER_NAVIGATION: {
                return __assign({}, state, { nextState: action.payload.routerState, navigationId: action.payload.event.id });
            }
            case routerStore.ROUTER_ERROR:
            case routerStore.ROUTER_CANCEL: {
                return __assign({}, state, { nextState: undefined });
            }
            case routerStore.ROUTER_NAVIGATED: {
                return {
                    state: action.payload.routerState,
                    navigationId: action.payload.event.id,
                    nextState: undefined,
                };
            }
            default: {
                return state;
            }
        }
    }
    /** @type {?} */
    var reducerToken$7 = new core.InjectionToken('RouterReducers');
    /** @type {?} */
    var reducerProvider$7 = {
        provide: reducerToken$7,
        useFactory: getReducers$7,
    };
    /* The serializer is there to parse the RouterStateSnapshot,
    and to reduce the amount of properties to be passed to the reducer.
     */
    var   /* The serializer is there to parse the RouterStateSnapshot,
    and to reduce the amount of properties to be passed to the reducer.
     */
    CustomSerializer = /** @class */ (function () {
        function CustomSerializer() {
        }
        /**
         * @param {?} routerState
         * @return {?}
         */
        CustomSerializer.prototype.serialize = /**
         * @param {?} routerState
         * @return {?}
         */
        function (routerState) {
            var url = routerState.url;
            var queryParams = routerState.root.queryParams;
            /** @type {?} */
            var state = (/** @type {?} */ (routerState.root));
            /** @type {?} */
            var cmsRequired = false;
            /** @type {?} */
            var context;
            while (state.firstChild) {
                state = (/** @type {?} */ (state.firstChild));
                // we use context information embedded in Cms driven routes from any parent route
                if (state.data && state.data.cxCmsRouteContext) {
                    context = state.data.cxCmsRouteContext;
                }
                // we assume, that any route that has CmsPageGuard or it's child
                // is cmsRequired
                if (!cmsRequired &&
                    (context ||
                        (state.routeConfig &&
                            state.routeConfig.canActivate &&
                            state.routeConfig.canActivate.find((/**
                             * @param {?} x
                             * @return {?}
                             */
                            function (x) { return x && x.guardName === 'CmsPageGuard'; }))))) {
                    cmsRequired = true;
                }
            }
            var params = state.params;
            // we give smartedit preview page a PageContext
            if (state.url.length > 0 && state.url[0].path === 'cx-preview') {
                context = {
                    id: 'smartedit-preview',
                    type: PageType.CONTENT_PAGE,
                };
            }
            else {
                if (params['productCode']) {
                    context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };
                }
                else if (params['categoryCode']) {
                    context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };
                }
                else if (params['brandCode']) {
                    context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };
                }
                else if (state.data.pageLabel !== undefined) {
                    context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };
                }
                else if (!context) {
                    if (state.url.length > 0) {
                        /** @type {?} */
                        var pageLabel = '/' + state.url.map((/**
                         * @param {?} urlSegment
                         * @return {?}
                         */
                        function (urlSegment) { return urlSegment.path; })).join('/');
                        context = {
                            id: pageLabel,
                            type: PageType.CONTENT_PAGE,
                        };
                    }
                    else {
                        context = {
                            id: 'homepage',
                            type: PageType.CONTENT_PAGE,
                        };
                    }
                }
            }
            return { url: url, queryParams: queryParams, params: params, context: context, cmsRequired: cmsRequired };
        };
        return CustomSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} service
     * @return {?}
     */
    function initConfigurableRoutes(service) {
        /** @type {?} */
        var result = (/**
         * @return {?}
         */
        function () { return service.init(); });
        return result;
    }
    var RoutingModule = /** @class */ (function () {
        function RoutingModule() {
        }
        /**
         * @return {?}
         */
        RoutingModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: RoutingModule,
                providers: [
                    reducerProvider$7,
                    {
                        provide: routerStore.RouterStateSerializer,
                        useClass: CustomSerializer,
                    },
                    {
                        provide: core.APP_INITIALIZER,
                        useFactory: initConfigurableRoutes,
                        deps: [ConfigurableRoutesService],
                        multi: true,
                    },
                    { provide: RoutingConfig, useExisting: Config },
                ],
            };
        };
        RoutingModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            store.StoreModule.forFeature(ROUTING_FEATURE, reducerToken$7),
                            effects$d.EffectsModule.forFeature(effects$7),
                            routerStore.StoreRouterConnectingModule.forRoot({
                                routerState: 1 /* Minimal */,
                                stateKey: ROUTING_FEATURE,
                            }),
                        ],
                    },] }
        ];
        return RoutingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Service that provides access to CMS structure from a static
     * configuration or configuration file. This class uses static
     * configuration is designed in async fashion so that configurations
     * can be loaded from a file or stream.
     *
     * The intent of the `CmsStructureConfigService` however is to provide
     * fast loading pages and default cms structure for commodity commerce.
     * @abstract
     */
    var CmsStructureConfigService = /** @class */ (function () {
        function CmsStructureConfigService(cmsDataConfig) {
            this.cmsDataConfig = cmsDataConfig;
        }
        /**
         * Merge the cms structure to the pageStructure. The page structure
         * can either hold complete page structures or global structures that
         * might apply to all pages (such has header coponents).
         */
        /**
         * Merge the cms structure to the pageStructure. The page structure
         * can either hold complete page structures or global structures that
         * might apply to all pages (such has header coponents).
         * @param {?} pageId
         * @param {?} pageStructure
         * @return {?}
         */
        CmsStructureConfigService.prototype.mergePageStructure = /**
         * Merge the cms structure to the pageStructure. The page structure
         * can either hold complete page structures or global structures that
         * might apply to all pages (such has header coponents).
         * @param {?} pageId
         * @param {?} pageStructure
         * @return {?}
         */
        function (pageId, pageStructure) {
            var _this = this;
            return this.mergePage(pageId, pageStructure).pipe(operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) { return _this.mergeSlots(page); })));
        };
        /**
         *
         * Returns boolean observable to indicate whether the page should not be
         * loaded from the backend. This is useful for pages which are comoditized
         * and follow best practice.
         *
         * By default, configurable pages are driven by static configuration,
         * in order to allow for fast loading pages (preventing network delays).
         */
        /**
         *
         * Returns boolean observable to indicate whether the page should not be
         * loaded from the backend. This is useful for pages which are comoditized
         * and follow best practice.
         *
         * By default, configurable pages are driven by static configuration,
         * in order to allow for fast loading pages (preventing network delays).
         * @param {?} pageId
         * @return {?}
         */
        CmsStructureConfigService.prototype.shouldIgnoreBackend = /**
         *
         * Returns boolean observable to indicate whether the page should not be
         * loaded from the backend. This is useful for pages which are comoditized
         * and follow best practice.
         *
         * By default, configurable pages are driven by static configuration,
         * in order to allow for fast loading pages (preventing network delays).
         * @param {?} pageId
         * @return {?}
         */
        function (pageId) {
            return this.getPageFromConfig(pageId).pipe(operators.map((/**
             * @param {?} page
             * @return {?}
             */
            function (page) { return !!page && !!page.ignoreBackend; })));
        };
        /**
         * returns an Observable component data from the static configuration.
         */
        /**
         * returns an Observable component data from the static configuration.
         * @param {?} componentId
         * @return {?}
         */
        CmsStructureConfigService.prototype.getComponentFromConfig = /**
         * returns an Observable component data from the static configuration.
         * @param {?} componentId
         * @return {?}
         */
        function (componentId) {
            return rxjs.of(this.getComponentById(componentId));
        };
        /**
         * returns an Observable components data from the static configuration.
         */
        /**
         * returns an Observable components data from the static configuration.
         * @param {?} ids
         * @return {?}
         */
        CmsStructureConfigService.prototype.getComponentsFromConfig = /**
         * returns an Observable components data from the static configuration.
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            var _this = this;
            return rxjs.of(ids.map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.getComponentById(id); })));
        };
        /**
         * returns an observable with the `PageConfig`.
         */
        /**
         * returns an observable with the `PageConfig`.
         * @protected
         * @param {?} pageId
         * @return {?}
         */
        CmsStructureConfigService.prototype.getPageFromConfig = /**
         * returns an observable with the `PageConfig`.
         * @protected
         * @param {?} pageId
         * @return {?}
         */
        function (pageId) {
            return rxjs.of(this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages
                ? this.cmsDataConfig.cmsStructure.pages.find((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.pageId === pageId; }))
                : null);
        };
        /**
         * Merge page data from the configuration into the given structure, if any.
         * If the given page structure is empty, a page is created and the page slots are
         * are merged into the page.
         */
        /**
         * Merge page data from the configuration into the given structure, if any.
         * If the given page structure is empty, a page is created and the page slots are
         * are merged into the page.
         * @protected
         * @param {?} pageId
         * @param {?} pageStructure
         * @return {?}
         */
        CmsStructureConfigService.prototype.mergePage = /**
         * Merge page data from the configuration into the given structure, if any.
         * If the given page structure is empty, a page is created and the page slots are
         * are merged into the page.
         * @protected
         * @param {?} pageId
         * @param {?} pageStructure
         * @return {?}
         */
        function (pageId, pageStructure) {
            var _this = this;
            return this.getPageFromConfig(pageId).pipe(operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                if (page) {
                    // serialize page data
                    if (!pageStructure.page) {
                        pageStructure.page = __assign({}, page);
                        pageStructure.page.slots = {};
                    }
                    if (!pageStructure.page.slots) {
                        pageStructure.page.slots = {};
                    }
                    return _this.mergeSlots(pageStructure, page.slots);
                }
                else {
                    return rxjs.of(pageStructure);
                }
            })));
        };
        /**
         * Adds any pre-configured slots for pages that do not use them.
         * If pages have a slot for the given position, the configiuration
         * is ingored. Even if the slot does not have inner structure (such as
         * components), so that the cms structure is able to override the (static)
         * configuration.
         */
        /**
         * Adds any pre-configured slots for pages that do not use them.
         * If pages have a slot for the given position, the configiuration
         * is ingored. Even if the slot does not have inner structure (such as
         * components), so that the cms structure is able to override the (static)
         * configuration.
         * @protected
         * @param {?} pageStructure
         * @param {?=} slots
         * @return {?}
         */
        CmsStructureConfigService.prototype.mergeSlots = /**
         * Adds any pre-configured slots for pages that do not use them.
         * If pages have a slot for the given position, the configiuration
         * is ingored. Even if the slot does not have inner structure (such as
         * components), so that the cms structure is able to override the (static)
         * configuration.
         * @protected
         * @param {?} pageStructure
         * @param {?=} slots
         * @return {?}
         */
        function (pageStructure, slots) {
            var e_1, _a, e_2, _b;
            // if no slots have been given, we use the global configured slots
            if (!slots &&
                this.cmsDataConfig.cmsStructure &&
                this.cmsDataConfig.cmsStructure.slots) {
                slots = this.cmsDataConfig.cmsStructure.slots;
            }
            if (!slots) {
                return rxjs.of(pageStructure);
            }
            try {
                for (var _c = __values(Object.keys(slots)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var position = _d.value;
                    if (!Object.keys(pageStructure.page.slots).includes(position)) {
                        // the global slot isn't yet part of the page structure
                        pageStructure.page.slots[position] = {};
                        try {
                            for (var _e = (e_2 = void 0, __values(this.getComponentsByPosition(slots, position))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var component = _f.value;
                                if (!pageStructure.page.slots[position].components) {
                                    pageStructure.page.slots[position].components = [];
                                }
                                pageStructure.page.slots[position].components.push({
                                    uid: component.uid,
                                    flexType: component.flexType,
                                    typeCode: component.typeCode,
                                });
                                if (!pageStructure.components) {
                                    pageStructure.components = [];
                                }
                                pageStructure.components.push(component);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return rxjs.of(pageStructure);
        };
        /**
         * @protected
         * @param {?} slots
         * @param {?} position
         * @return {?}
         */
        CmsStructureConfigService.prototype.getComponentsByPosition = /**
         * @protected
         * @param {?} slots
         * @param {?} position
         * @return {?}
         */
        function (slots, position) {
            var e_3, _a;
            /** @type {?} */
            var components = [];
            if (slots[position] && slots[position].componentIds) {
                try {
                    for (var _b = __values(slots[position].componentIds), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var componentId = _c.value;
                        if (this.cmsDataConfig.cmsStructure &&
                            this.cmsDataConfig.cmsStructure.components) {
                            /** @type {?} */
                            var component = this.cmsDataConfig.cmsStructure.components[componentId];
                            if (component) {
                                components.push(__assign({ uid: componentId }, component));
                            }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            return components;
        };
        /**
         * @protected
         * @param {?} componentId
         * @return {?}
         */
        CmsStructureConfigService.prototype.getComponentById = /**
         * @protected
         * @param {?} componentId
         * @return {?}
         */
        function (componentId) {
            return this.cmsDataConfig.cmsStructure &&
                this.cmsDataConfig.cmsStructure.components
                ? this.cmsDataConfig.cmsStructure.components[componentId]
                : undefined;
        };
        CmsStructureConfigService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CmsStructureConfigService.ctorParameters = function () { return [
            { type: CmsStructureConfig }
        ]; };
        /** @nocollapse */ CmsStructureConfigService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CmsStructureConfigService_Factory() { return new CmsStructureConfigService(core.ɵɵinject(CmsStructureConfig)); }, token: CmsStructureConfigService, providedIn: "root" });
        return CmsStructureConfigService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CmsStructureConfigService.prototype.cmsDataConfig;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmsPageConnector = /** @class */ (function () {
        function CmsPageConnector(cmsPageAdapter, cmsStructureConfigService) {
            this.cmsPageAdapter = cmsPageAdapter;
            this.cmsStructureConfigService = cmsStructureConfigService;
        }
        /**
         * Returns an observable with the page structure. The page structure is
         * typically loaded from a backend, but can also be returned from static
         * configuration (see `CmsStructureConfigService`).
         */
        /**
         * Returns an observable with the page structure. The page structure is
         * typically loaded from a backend, but can also be returned from static
         * configuration (see `CmsStructureConfigService`).
         * @param {?} pageContext
         * @return {?}
         */
        CmsPageConnector.prototype.get = /**
         * Returns an observable with the page structure. The page structure is
         * typically loaded from a backend, but can also be returned from static
         * configuration (see `CmsStructureConfigService`).
         * @param {?} pageContext
         * @return {?}
         */
        function (pageContext) {
            var _this = this;
            return this.cmsStructureConfigService
                .shouldIgnoreBackend(pageContext.id)
                .pipe(operators.switchMap((/**
             * @param {?} loadFromConfig
             * @return {?}
             */
            function (loadFromConfig) {
                if (!loadFromConfig) {
                    return _this.cmsPageAdapter.load(pageContext).pipe(operators.catchError((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        if (error instanceof http.HttpErrorResponse &&
                            error.status === 400) {
                            return rxjs.of({});
                        }
                        else {
                            return rxjs.throwError(error);
                        }
                    })));
                }
                else {
                    return rxjs.of({});
                }
            })), operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) { return _this.mergeDefaultPageStructure(pageContext, page); })));
        };
        /**
         *
         * Merge default page structure inot the given `CmsStructureModel`.
         * This is benefitial for a fast setup of the UI without necessary
         * finegrained CMS setup.
         */
        /**
         *
         * Merge default page structure inot the given `CmsStructureModel`.
         * This is benefitial for a fast setup of the UI without necessary
         * finegrained CMS setup.
         * @private
         * @param {?} pageContext
         * @param {?} pageStructure
         * @return {?}
         */
        CmsPageConnector.prototype.mergeDefaultPageStructure = /**
         *
         * Merge default page structure inot the given `CmsStructureModel`.
         * This is benefitial for a fast setup of the UI without necessary
         * finegrained CMS setup.
         * @private
         * @param {?} pageContext
         * @param {?} pageStructure
         * @return {?}
         */
        function (pageContext, pageStructure) {
            return this.cmsStructureConfigService.mergePageStructure(pageContext.id, pageStructure);
        };
        CmsPageConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CmsPageConnector.ctorParameters = function () { return [
            { type: CmsPageAdapter },
            { type: CmsStructureConfigService }
        ]; };
        /** @nocollapse */ CmsPageConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CmsPageConnector_Factory() { return new CmsPageConnector(core.ɵɵinject(CmsPageAdapter), core.ɵɵinject(CmsStructureConfigService)); }, token: CmsPageConnector, providedIn: "root" });
        return CmsPageConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CmsPageConnector.prototype.cmsPageAdapter;
        /**
         * @type {?}
         * @protected
         */
        CmsPageConnector.prototype.cmsStructureConfigService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PageEffects = /** @class */ (function () {
        function PageEffects(actions$, cmsPageConnector, routingService) {
            var _this = this;
            this.actions$ = actions$;
            this.cmsPageConnector = cmsPageConnector;
            this.routingService = routingService;
            this.refreshPage$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE, LOGOUT, LOGIN), operators.switchMap((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                return _this.routingService.getRouterState().pipe(operators.filter((/**
                 * @param {?} routerState
                 * @return {?}
                 */
                function (routerState) {
                    return routerState &&
                        routerState.state &&
                        routerState.state.cmsRequired &&
                        !routerState.nextState;
                })), operators.take(1), operators.map((/**
                 * @param {?} routerState
                 * @return {?}
                 */
                function (routerState) { return routerState.state.context; })), operators.mergeMap((/**
                 * @param {?} context
                 * @return {?}
                 */
                function (context) { return rxjs.of(new LoadCmsPageData(context)); })));
            })));
            this.loadPageData$ = this.actions$.pipe(effects$d.ofType(LOAD_CMS_PAGE_DATA), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.groupBy((/**
             * @param {?} pageContext
             * @return {?}
             */
            function (pageContext) { return serializePageContext(pageContext); })), operators.mergeMap((/**
             * @param {?} group
             * @return {?}
             */
            function (group) {
                return group.pipe(operators.switchMap((/**
                 * @param {?} pageContext
                 * @return {?}
                 */
                function (pageContext) {
                    return _this.cmsPageConnector.get(pageContext).pipe(operators.mergeMap((/**
                     * @param {?} cmsStructure
                     * @return {?}
                     */
                    function (cmsStructure) {
                        /** @type {?} */
                        var actions = [
                            new CmsGetComponentFromPage(cmsStructure.components, pageContext),
                            new LoadCmsPageDataSuccess(pageContext, cmsStructure.page),
                        ];
                        /** @type {?} */
                        var pageLabel = cmsStructure.page.label;
                        // For content pages the page label returned from backend can be different than page ID initially assumed from route.
                        // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.
                        if (pageLabel && pageLabel !== pageContext.id) {
                            actions.unshift(new CmsSetPageSuccessIndex({ id: pageLabel, type: pageContext.type }, cmsStructure.page));
                        }
                        return actions;
                    })), operators.catchError((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        return rxjs.of(new LoadCmsPageDataFail(pageContext, makeErrorSerializable(error)));
                    })));
                })));
            })));
        }
        PageEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PageEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CmsPageConnector },
            { type: RoutingService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], PageEffects.prototype, "refreshPage$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], PageEffects.prototype, "loadPageData$", void 0);
        return PageEffects;
    }());
    if (false) {
        /** @type {?} */
        PageEffects.prototype.refreshPage$;
        /** @type {?} */
        PageEffects.prototype.loadPageData$;
        /**
         * @type {?}
         * @private
         */
        PageEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        PageEffects.prototype.cmsPageConnector;
        /**
         * @type {?}
         * @private
         */
        PageEffects.prototype.routingService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?=} time
     * @param {?=} scheduler
     * @return {?}
     */
    function bufferDebounceTime(time, scheduler) {
        if (time === void 0) { time = 0; }
        return (/**
         * @param {?} source
         * @return {?}
         */
        function (source) {
            /** @type {?} */
            var bufferedValues = [];
            return source.pipe(operators.tap((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return bufferedValues.push(value); })), operators.debounceTime(time, scheduler), operators.map((/**
             * @return {?}
             */
            function () { return bufferedValues; })), operators.tap((/**
             * @return {?}
             */
            function () { return (bufferedValues = []); })));
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmsComponentConnector = /** @class */ (function () {
        function CmsComponentConnector(cmsStructureConfigService, adapter, config) {
            this.cmsStructureConfigService = cmsStructureConfigService;
            this.adapter = adapter;
            this.config = config;
        }
        /**
         * @template T
         * @param {?} id
         * @param {?} pageContext
         * @return {?}
         */
        CmsComponentConnector.prototype.get = /**
         * @template T
         * @param {?} id
         * @param {?} pageContext
         * @return {?}
         */
        function (id, pageContext) {
            var _this = this;
            return this.cmsStructureConfigService
                .getComponentFromConfig(id)
                .pipe(operators.switchMap((/**
             * @param {?} configuredComponent
             * @return {?}
             */
            function (configuredComponent) {
                return configuredComponent
                    ? rxjs.of(configuredComponent)
                    : _this.adapter.load(id, pageContext);
            })));
        };
        /**
         * @param {?} ids
         * @param {?} pageContext
         * @return {?}
         */
        CmsComponentConnector.prototype.getList = /**
         * @param {?} ids
         * @param {?} pageContext
         * @return {?}
         */
        function (ids, pageContext) {
            var _this = this;
            return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(operators.switchMap((/**
             * @param {?} configuredComponents
             * @return {?}
             */
            function (configuredComponents) {
                // check if we have some components that are not loaded from configuration
                /** @type {?} */
                var missingIds = configuredComponents.reduce((/**
                 * @param {?} acc
                 * @param {?} component
                 * @param {?} index
                 * @return {?}
                 */
                function (acc, component, index) {
                    if (component === undefined) {
                        acc.push(ids[index]);
                    }
                    return acc;
                }), []);
                if (missingIds.length > 0) {
                    return (_this.config.backend.occ.legacy
                        ? _this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)
                        : _this.adapter.findComponentsByIds(missingIds, pageContext)).pipe(operators.map((/**
                     * @param {?} loadedComponents
                     * @return {?}
                     */
                    function (loadedComponents) { return __spread(configuredComponents.filter(Boolean), loadedComponents); })));
                }
                else {
                    return rxjs.of(configuredComponents);
                }
            })));
        };
        CmsComponentConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CmsComponentConnector.ctorParameters = function () { return [
            { type: CmsStructureConfigService },
            { type: CmsComponentAdapter },
            { type: OccConfig }
        ]; };
        /** @nocollapse */ CmsComponentConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CmsComponentConnector_Factory() { return new CmsComponentConnector(core.ɵɵinject(CmsStructureConfigService), core.ɵɵinject(CmsComponentAdapter), core.ɵɵinject(OccConfig)); }, token: CmsComponentConnector, providedIn: "root" });
        return CmsComponentConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CmsComponentConnector.prototype.cmsStructureConfigService;
        /**
         * @type {?}
         * @protected
         */
        CmsComponentConnector.prototype.adapter;
        /**
         * @type {?}
         * @protected
         */
        CmsComponentConnector.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ComponentEffects = /** @class */ (function () {
        function ComponentEffects(actions$, cmsComponentLoader, featureConfigService) {
            var _this = this;
            this.actions$ = actions$;
            this.cmsComponentLoader = cmsComponentLoader;
            this.featureConfigService = featureConfigService;
            this.contextChange$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE, LOGOUT, LOGIN));
            this.loadComponent$ = effects$d.createEffect((/**
             * @return {?}
             */
            function () { return (/**
             * @param {?=} __0
             * @return {?}
             */
            function (_a) {
                var _b = _a === void 0 ? {} : _a, scheduler = _b.scheduler, _c = _b.debounce, debounce = _c === void 0 ? 0 : _c;
                return _this.actions$.pipe(effects$d.ofType(LOAD_CMS_COMPONENT), operators.groupBy((/**
                 * @param {?} actions
                 * @return {?}
                 */
                function (actions) { return serializePageContext(actions.pageContext); })), operators.mergeMap((/**
                 * @param {?} actionGroup
                 * @return {?}
                 */
                function (actionGroup) {
                    return actionGroup.pipe(bufferDebounceTime(debounce, scheduler), operators.mergeMap((/**
                     * @param {?} actions
                     * @return {?}
                     */
                    function (actions) {
                        return _this.loadComponentsEffect(actions.map((/**
                         * @param {?} action
                         * @return {?}
                         */
                        function (action) { return action.payload; })), actions[0].pageContext);
                    })));
                })), withdrawOn(_this.contextChange$));
            }); }));
        }
        /**
         * @private
         * @param {?} componentUids
         * @param {?} pageContext
         * @return {?}
         */
        ComponentEffects.prototype.loadComponentsEffect = /**
         * @private
         * @param {?} componentUids
         * @param {?} pageContext
         * @return {?}
         */
        function (componentUids, pageContext) {
            var _this = this;
            // TODO: remove, deprecated behavior since 1.4
            if (!this.featureConfigService.isLevel('1.4')) {
                return rxjs.merge.apply(void 0, __spread(componentUids.map((/**
                 * @param {?} componentUid
                 * @return {?}
                 */
                function (componentUid) {
                    return _this.cmsComponentLoader.get(componentUid, pageContext).pipe(operators.map((/**
                     * @param {?} component
                     * @return {?}
                     */
                    function (component) {
                        return new LoadCmsComponentSuccess(component, component.uid, pageContext);
                    })), operators.catchError((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        return rxjs.of(new LoadCmsComponentFail(componentUid, makeErrorSerializable(error), pageContext));
                    })));
                }))));
            }
            // END OF (TODO: remove, deprecated behavior since 1.4)
            return this.cmsComponentLoader.getList(componentUids, pageContext).pipe(operators.switchMap((/**
             * @param {?} components
             * @return {?}
             */
            function (components) {
                return rxjs.from(components.map((/**
                 * @param {?} component
                 * @return {?}
                 */
                function (component) {
                    return new LoadCmsComponentSuccess(component, component.uid, pageContext);
                })));
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return rxjs.from(componentUids.map((/**
                 * @param {?} uid
                 * @return {?}
                 */
                function (uid) {
                    return new LoadCmsComponentFail(uid, makeErrorSerializable(error), pageContext);
                })));
            })));
        };
        ComponentEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ComponentEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CmsComponentConnector },
            { type: FeatureConfigService }
        ]; };
        return ComponentEffects;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ComponentEffects.prototype.contextChange$;
        /** @type {?} */
        ComponentEffects.prototype.loadComponent$;
        /**
         * @type {?}
         * @private
         */
        ComponentEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ComponentEffects.prototype.cmsComponentLoader;
        /**
         * @type {?}
         * @private
         */
        ComponentEffects.prototype.featureConfigService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NavigationEntryItemEffects = /** @class */ (function () {
        function NavigationEntryItemEffects(actions$, cmsComponentConnector, routingService) {
            var _this = this;
            this.actions$ = actions$;
            this.cmsComponentConnector = cmsComponentConnector;
            this.routingService = routingService;
            this.loadNavigationItems$ = this.actions$.pipe(effects$d.ofType(LOAD_CMS_NAVIGATION_ITEMS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.map((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return {
                    ids: _this.getIdListByItemType(payload.items),
                    nodeId: payload.nodeId,
                };
            })), operators.mergeMap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data.ids.componentIds.length > 0) {
                    return _this.routingService.getRouterState().pipe(operators.filter((/**
                     * @param {?} routerState
                     * @return {?}
                     */
                    function (routerState) { return routerState !== undefined; })), operators.map((/**
                     * @param {?} routerState
                     * @return {?}
                     */
                    function (routerState) { return routerState.state.context; })), operators.take(1), operators.mergeMap((/**
                     * @param {?} pageContext
                     * @return {?}
                     */
                    function (pageContext) {
                        // download all items in one request
                        return _this.cmsComponentConnector
                            .getList(data.ids.componentIds, pageContext)
                            .pipe(operators.map((/**
                         * @param {?} components
                         * @return {?}
                         */
                        function (components) {
                            return new LoadCmsNavigationItemsSuccess({
                                nodeId: data.nodeId,
                                components: components,
                            });
                        })), operators.catchError((/**
                         * @param {?} error
                         * @return {?}
                         */
                        function (error) {
                            return rxjs.of(new LoadCmsNavigationItemsFail(data.nodeId, makeErrorSerializable(error)));
                        })));
                    })));
                }
                else if (data.ids.pageIds.length > 0) {
                    // TODO: future work
                    // dispatch action to load cms page one by one
                }
                else if (data.ids.mediaIds.length > 0) {
                    // TODO: future work
                    // send request to get list of media
                }
                else {
                    return rxjs.of(new LoadCmsNavigationItemsFail(data.nodeId, 'navigation nodes are empty'));
                }
            })));
        }
        // We only consider 3 item types: cms page, cms component, and media.
        // We only consider 3 item types: cms page, cms component, and media.
        /**
         * @param {?} itemList
         * @return {?}
         */
        NavigationEntryItemEffects.prototype.getIdListByItemType = 
        // We only consider 3 item types: cms page, cms component, and media.
        /**
         * @param {?} itemList
         * @return {?}
         */
        function (itemList) {
            /** @type {?} */
            var pageIds = [];
            /** @type {?} */
            var componentIds = [];
            /** @type {?} */
            var mediaIds = [];
            itemList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.superType === 'AbstractCMSComponent') {
                    componentIds.push(item.id);
                }
                else if (item.superType === 'AbstractPage') {
                    pageIds.push(item.id);
                }
                else if (item.superType === 'AbstractMedia') {
                    mediaIds.push(item.id);
                }
            }));
            return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };
        };
        NavigationEntryItemEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NavigationEntryItemEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CmsComponentConnector },
            { type: RoutingService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], NavigationEntryItemEffects.prototype, "loadNavigationItems$", void 0);
        return NavigationEntryItemEffects;
    }());
    if (false) {
        /** @type {?} */
        NavigationEntryItemEffects.prototype.loadNavigationItems$;
        /**
         * @type {?}
         * @private
         */
        NavigationEntryItemEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        NavigationEntryItemEffects.prototype.cmsComponentConnector;
        /**
         * @type {?}
         * @private
         */
        NavigationEntryItemEffects.prototype.routingService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$8 = [
        PageEffects,
        ComponentEffects,
        NavigationEntryItemEffects,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$e = {
        component: undefined,
        pageContext: {},
    };
    /**
     * @template T
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function componentExistsReducer(state, action) {
        if (state === void 0) { state = false; }
        switch (action.type) {
            case LOAD_CMS_COMPONENT_FAIL:
                return false;
            case CMS_GET_COMPONENET_FROM_PAGE:
            case LOAD_CMS_COMPONENT_SUCCESS:
                return true;
        }
        return state;
    }
    /**
     * @template T
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$e(state, action) {
        var _a, _b, _c;
        if (state === void 0) { state = initialState$e; }
        switch (action.type) {
            case LOAD_CMS_COMPONENT: {
                /** @type {?} */
                var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
                /** @type {?} */
                var context = serializePageContext(action.pageContext, true);
                return __assign({}, state, { pageContext: __assign({}, state.pageContext, (_a = {}, _a[context] = pageContextReducer(state.pageContext[context], action), _a)) });
            }
            case LOAD_CMS_COMPONENT_FAIL: {
                /** @type {?} */
                var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
                /** @type {?} */
                var context = serializePageContext(action.pageContext, true);
                return __assign({}, state, { pageContext: __assign({}, state.pageContext, (_b = {}, _b[context] = pageContextReducer(state.pageContext[context], action), _b)) });
            }
            case CMS_GET_COMPONENET_FROM_PAGE:
            case LOAD_CMS_COMPONENT_SUCCESS: {
                /** @type {?} */
                var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
                /** @type {?} */
                var context = serializePageContext(action.pageContext, true);
                return __assign({}, state, { component: (/** @type {?} */ (action.payload)), pageContext: __assign({}, state.pageContext, (_c = {}, _c[context] = pageContextReducer(state.pageContext[context], action), _c)) });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$f = undefined;
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$f(state, action) {
        if (state === void 0) { state = initialState$f; }
        switch (action.type) {
            case LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {
                if (action.payload.components) {
                    /** @type {?} */
                    var components = action.payload.components;
                    /** @type {?} */
                    var newItem = components.reduce((/**
                     * @param {?} compItems
                     * @param {?} component
                     * @return {?}
                     */
                    function (compItems, component) {
                        var _a;
                        return __assign({}, compItems, (_a = {}, _a[component.uid + "_AbstractCMSComponent"] = component, _a));
                    }), __assign({}));
                    return __assign({}, state, newItem);
                }
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$g = { entities: {} };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$g(state, action) {
        var _a;
        if (state === void 0) { state = initialState$g; }
        switch (action.type) {
            case LOAD_CMS_PAGE_DATA_SUCCESS: {
                /** @type {?} */
                var page = action.payload;
                return __assign({}, state, { entities: __assign({}, state.entities, (_a = {}, _a[page.pageId] = page, _a)) });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$h = undefined;
    /**
     * @param {?} entityType
     * @return {?}
     */
    function reducer$h(entityType) {
        return (/**
         * @param {?=} state
         * @param {?=} action
         * @return {?}
         */
        function (state, action) {
            if (state === void 0) { state = initialState$h; }
            if (action.meta && action.meta.entityType === entityType) {
                switch (action.type) {
                    case LOAD_CMS_PAGE_DATA_SUCCESS: {
                        return action.payload.pageId;
                    }
                    case LOAD_CMS_PAGE_DATA_FAIL: {
                        return initialState$h;
                    }
                    case CMS_SET_PAGE_FAIL_INDEX: {
                        return action.payload;
                    }
                    case CMS_SET_PAGE_SUCCESS_INDEX: {
                        return action.payload.pageId;
                    }
                }
            }
            return state;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$8() {
        return {
            page: store.combineReducers({
                pageData: reducer$g,
                index: store.combineReducers({
                    content: entityLoaderReducer(PageType.CONTENT_PAGE, reducer$h(PageType.CONTENT_PAGE)),
                    product: entityLoaderReducer(PageType.PRODUCT_PAGE, reducer$h(PageType.PRODUCT_PAGE)),
                    category: entityLoaderReducer(PageType.CATEGORY_PAGE, reducer$h(PageType.CATEGORY_PAGE)),
                    catalog: entityLoaderReducer(PageType.CATALOG_PAGE, reducer$h(PageType.CATALOG_PAGE)),
                }),
            }),
            /**
             * @deprecated in favour of `components`. From 2.0, this will be removed.
             */
            // TODO(issue:6027) - remove this `component` slice
            component: entityLoaderReducer(COMPONENT_ENTITY),
            components: entityReducer(COMPONENT_ENTITY, reducer$e),
            navigation: entityLoaderReducer(NAVIGATION_DETAIL_ENTITY, reducer$f),
        };
    }
    /** @type {?} */
    var reducerToken$8 = new core.InjectionToken('CmsReducers');
    /** @type {?} */
    var reducerProvider$8 = {
        provide: reducerToken$8,
        useFactory: getReducers$8,
    };
    /**
     * @param {?} reducer
     * @return {?}
     */
    function clearCmsState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LANGUAGE_CHANGE ||
                action.type === LOGOUT ||
                action.type === LOGIN) {
                state = undefined;
            }
            return reducer(state, action);
        });
    }
    /** @type {?} */
    var metaReducers$4 = [clearCmsState];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function cmsStoreConfigFactory() {
        var _a;
        // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object
        /** @type {?} */
        var config = {
            state: {
                ssrTransfer: {
                    keys: (_a = {}, _a[CMS_FEATURE] = StateTransferType.TRANSFER_STATE, _a),
                },
            },
        };
        return config;
    }
    var CmsStoreModule = /** @class */ (function () {
        function CmsStoreModule() {
        }
        CmsStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            StateModule,
                            store.StoreModule.forFeature(CMS_FEATURE, reducerToken$8, { metaReducers: metaReducers$4 }),
                            effects$d.EffectsModule.forFeature(effects$8),
                            ConfigModule.withConfigFactory(cmsStoreConfigFactory),
                        ],
                        providers: [reducerProvider$8],
                    },] }
        ];
        return CmsStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmsModule = /** @class */ (function () {
        function CmsModule() {
        }
        /**
         * @return {?}
         */
        CmsModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: CmsModule,
                providers: [
                    CmsService,
                    { provide: CmsConfig, useExisting: Config },
                    { provide: CmsStructureConfig, useExisting: Config },
                    provideConfig(defaultCmsModuleConfig),
                ],
            };
        };
        CmsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [CmsStoreModule, CmsPageTitleModule],
                    },] }
        ];
        return CmsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PageMetaService = /** @class */ (function () {
        function PageMetaService(resolvers, cms, featureConfigService) {
            this.resolvers = resolvers;
            this.cms = cms;
            this.featureConfigService = featureConfigService;
            /**
             * The list of resolver interfaces will be evaluated for the pageResolvers.
             *
             * TOOD: optimize browser vs SSR resolvers; image, robots and description
             *       aren't needed during browsing.
             * TODO: we can make the list of resolver types configurable
             */
            this.resolverMethods = {
                title: 'resolveTitle',
                heading: 'resolveHeading',
                description: 'resolveDescription',
                breadcrumbs: 'resolveBreadcrumbs',
                image: 'resolveImage',
                robots: 'resolveRobots',
            };
            this.resolvers = this.resolvers || [];
        }
        /**
         * @return {?}
         */
        PageMetaService.prototype.getMeta = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.cms.getCurrentPage().pipe(operators.filter(Boolean), operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                /** @type {?} */
                var metaResolver = _this.getMetaResolver(page);
                if (metaResolver) {
                    return _this.resolve(metaResolver);
                }
                else {
                    // we do not have a page resolver
                    return rxjs.of(null);
                }
            })));
        };
        /**
         * If a pageResolver has implemented a resolver interface, the resolved data
         * is merged into the `PageMeta` object.
         * @param metaResolver
         */
        /**
         * If a pageResolver has implemented a resolver interface, the resolved data
         * is merged into the `PageMeta` object.
         * @private
         * @param {?} metaResolver
         * @return {?}
         */
        PageMetaService.prototype.resolve = /**
         * If a pageResolver has implemented a resolver interface, the resolved data
         * is merged into the `PageMeta` object.
         * @private
         * @param {?} metaResolver
         * @return {?}
         */
        function (metaResolver) {
            var _this = this;
            if (metaResolver.resolve &&
                (!this.featureConfigService || !this.featureConfigService.isLevel('1.3'))) {
                return metaResolver.resolve();
            }
            else {
                // resolve individual resolvers to make the extension mechanism more flexible
                /** @type {?} */
                var resolveMethods = Object.keys(this.resolverMethods)
                    .filter((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) { return metaResolver[_this.resolverMethods[key]]; }))
                    .map((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    return metaResolver[_this.resolverMethods[key]]().pipe(operators.map((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        var _a;
                        return (_a = {},
                            _a[key] = data,
                            _a);
                    })));
                }));
                return rxjs.combineLatest(resolveMethods).pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return Object.assign.apply(Object, __spread([{}], data)); })));
            }
        };
        /**
         * return the resolver with the best match
         * resovers can by default match on PageType and page template
         * but custom match comparisors can be implemented.
         */
        /**
         * return the resolver with the best match
         * resovers can by default match on PageType and page template
         * but custom match comparisors can be implemented.
         * @protected
         * @param {?} page
         * @return {?}
         */
        PageMetaService.prototype.getMetaResolver = /**
         * return the resolver with the best match
         * resovers can by default match on PageType and page template
         * but custom match comparisors can be implemented.
         * @protected
         * @param {?} page
         * @return {?}
         */
        function (page) {
            /** @type {?} */
            var matchingResolvers = this.resolvers.filter((/**
             * @param {?} resolver
             * @return {?}
             */
            function (resolver) { return resolver.getScore(page) > 0; }));
            matchingResolvers.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return b.getScore(page) - a.getScore(page);
            }));
            return matchingResolvers[0];
        };
        PageMetaService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        PageMetaService.ctorParameters = function () { return [
            { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [PageMetaResolver,] }] },
            { type: CmsService },
            { type: FeatureConfigService }
        ]; };
        /** @nocollapse */ PageMetaService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(core.ɵɵinject(PageMetaResolver, 8), core.ɵɵinject(CmsService), core.ɵɵinject(FeatureConfigService)); }, token: PageMetaService, providedIn: "root" });
        return PageMetaService;
    }());
    if (false) {
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         * @type {?}
         */
        PageMetaService.prototype.resolverMethods;
        /**
         * @type {?}
         * @protected
         */
        PageMetaService.prototype.resolvers;
        /**
         * @type {?}
         * @protected
         */
        PageMetaService.prototype.cms;
        /**
         * @type {?}
         * @protected
         */
        PageMetaService.prototype.featureConfigService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ContentSlotComponentData() { }
    if (false) {
        /** @type {?|undefined} */
        ContentSlotComponentData.prototype.uid;
        /** @type {?|undefined} */
        ContentSlotComponentData.prototype.typeCode;
        /** @type {?|undefined} */
        ContentSlotComponentData.prototype.flexType;
        /** @type {?|undefined} */
        ContentSlotComponentData.prototype.properties;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ContentSlotData() { }
    if (false) {
        /** @type {?|undefined} */
        ContentSlotData.prototype.components;
        /** @type {?|undefined} */
        ContentSlotData.prototype.properties;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function NodeItem() { }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Resolves the page heading which is used in the UI. The page
     * heading might differ from the page title, which is used to address
     * the page in the browser (history, tabs) and outside the storefront
     * (Goolge, bots, etc).
     * @record
     */
    function PageHeadingResolver() { }
    if (false) {
        /**
         * Resolves the page heading.
         *
         * @deprecated since version 1.3
         * Use `resolveHeading()` instead.
         * @param {...?} args
         * @return {?}
         */
        PageHeadingResolver.prototype.resolveHeading = function (args) { };
        /**
         * Resolves the page heading.
         * @return {?}
         */
        PageHeadingResolver.prototype.resolveHeading = function () { };
    }
    /**
     * Resolves the page title which is first and foremost used
     * for the page title tag, but could also be used for the
     * page heading in the UI.
     * @record
     */
    function PageTitleResolver() { }
    if (false) {
        /**
         * Resolves the page title.
         *
         * @deprecated since version 1.3
         * Use `resolveTitle()` instead.
         * @param {...?} args
         * @return {?}
         */
        PageTitleResolver.prototype.resolveTitle = function (args) { };
        /**
         * Resolves the page title.
         * @return {?}
         */
        PageTitleResolver.prototype.resolveTitle = function () { };
    }
    /**
     * Resolves the page description. The page description is typically used
     * in the Search Engine Result Page (SERP).
     * @record
     */
    function PageDescriptionResolver() { }
    if (false) {
        /**
         * Resolves the page description.
         *
         * @deprecated since version 1.3
         * Use `resolveHeading()` instead.
         * @param {...?} args
         * @return {?}
         */
        PageDescriptionResolver.prototype.resolveDescription = function (args) { };
        /**
         * Resolves the page description.
         * @return {?}
         */
        PageDescriptionResolver.prototype.resolveDescription = function () { };
    }
    /**
     * Resolves breadcrumbs for the page, which is used in the `BreadcrumbComponent`
     * @record
     */
    function PageBreadcrumbResolver() { }
    if (false) {
        /**
         * Resolves the breadcrumbs for the page.
         *
         * @deprecated since version 1.3
         * Use `resolveBreadcrumbs()` instead.
         * @param {...?} args
         * @return {?}
         */
        PageBreadcrumbResolver.prototype.resolveBreadcrumbs = function (args) { };
        /**
         * Resolves the breadcrumbs for the page.
         * @return {?}
         */
        PageBreadcrumbResolver.prototype.resolveBreadcrumbs = function () { };
    }
    /**
     * Provides a method to resolve the the main image for the page.
     * This is typically used for social sharing (for example by using
     * the `og:image` metatag).
     * @record
     */
    function PageImageResolver() { }
    if (false) {
        /**
         * Resolves the main image for the page.
         *
         * @deprecated since version 1.3
         * Use `resolveImage()` instead.
         * @param {...?} args
         * @return {?}
         */
        PageImageResolver.prototype.resolveImage = function (args) { };
        /**
         * Resolves the main image for the page.
         * @return {?}
         */
        PageImageResolver.prototype.resolveImage = function () { };
    }
    /**
     * Resolves the robot information for the page. This is used by
     * search engines to understand whether the page and subsequential links
     * should be indexed.
     *
     * @record
     */
    function PageRobotsResolver() { }
    if (false) {
        /**
         * Resolves the robots for the page.
         *
         * @deprecated since version 1.3
         * Use `resolveRobots()` instead.
         * @param {...?} args
         * @return {?}
         */
        PageRobotsResolver.prototype.resolveRobots = function (args) { };
        /**
         * Resolves the robots for the page.
         * @return {?}
         */
        PageRobotsResolver.prototype.resolveRobots = function () { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicAttributeService = /** @class */ (function () {
        function DynamicAttributeService() {
        }
        /**
         * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.
         * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.
         * For example, personalization may add 'script' group etc.
         * @param properties: properties in each cms item response data
         * @param element: slot or cms component element
         * @param renderer
         */
        /**
         * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.
         * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.
         * For example, personalization may add 'script' group etc.
         * @param {?} properties
         * @param {?} element
         * @param {?} renderer
         * @return {?}
         */
        DynamicAttributeService.prototype.addDynamicAttributes = /**
         * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.
         * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.
         * For example, personalization may add 'script' group etc.
         * @param {?} properties
         * @param {?} element
         * @param {?} renderer
         * @return {?}
         */
        function (properties, element, renderer) {
            if (properties) {
                // check each group of properties, e.g. smartedit
                Object.keys(properties).forEach((/**
                 * @param {?} group
                 * @return {?}
                 */
                function (group) {
                    /** @type {?} */
                    var name = 'data-' + group + '-';
                    /** @type {?} */
                    var groupProps = properties[group];
                    // check each property in the group
                    Object.keys(groupProps).forEach((/**
                     * @param {?} propName
                     * @return {?}
                     */
                    function (propName) {
                        /** @type {?} */
                        var propValue = groupProps[propName];
                        if (propName === 'classes') {
                            /** @type {?} */
                            var classes = propValue.split(' ');
                            classes.forEach((/**
                             * @param {?} classItem
                             * @return {?}
                             */
                            function (classItem) {
                                element.classList.add(classItem);
                            }));
                        }
                        else {
                            renderer.setAttribute(element, name +
                                propName
                                    .split(/(?=[A-Z])/)
                                    .join('-')
                                    .toLowerCase(), propValue);
                        }
                    }));
                }));
            }
        };
        DynamicAttributeService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ DynamicAttributeService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DynamicAttributeService_Factory() { return new DynamicAttributeService(); }, token: DynamicAttributeService, providedIn: "root" });
        return DynamicAttributeService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function TranslationResources() { }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Translatable() { }
    if (false) {
        /** @type {?|undefined} */
        Translatable.prototype.key;
        /** @type {?|undefined} */
        Translatable.prototype.params;
        /** @type {?|undefined} */
        Translatable.prototype.raw;
    }
    /**
     * @record
     */
    function TranslatableParams() { }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy
    var CxDatePipe = /** @class */ (function (_super) {
        __extends(CxDatePipe, _super);
        function CxDatePipe(language) {
            var _this = _super.call(this, null) || this;
            _this.language = language;
            return _this;
        }
        /**
         * @param {?} value
         * @param {?=} format
         * @param {?=} timezone
         * @return {?}
         */
        CxDatePipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} format
         * @param {?=} timezone
         * @return {?}
         */
        function (value, format, timezone) {
            return _super.prototype.transform.call(this, value, format, timezone, this.getLang());
        };
        /**
         * @private
         * @return {?}
         */
        CxDatePipe.prototype.getLang = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var lang = this.getActiveLang();
            try {
                common.getLocaleId(lang);
                return lang;
            }
            catch (_a) {
                this.reportMissingLocaleData(lang);
                return 'en';
            }
        };
        /**
         * @private
         * @return {?}
         */
        CxDatePipe.prototype.getActiveLang = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var result;
            this.language
                .getActive()
                .subscribe((/**
             * @param {?} lang
             * @return {?}
             */
            function (lang) { return (result = lang); }))
                .unsubscribe();
            return result;
        };
        /**
         * @private
         * @param {?} lang
         * @return {?}
         */
        CxDatePipe.prototype.reportMissingLocaleData = /**
         * @private
         * @param {?} lang
         * @return {?}
         */
        function (lang) {
            if (core.isDevMode()) {
                console.warn("cxDate pipe: No locale data registered for '" + lang + "' (see https://angular.io/api/common/registerLocaleData).");
            }
        };
        CxDatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'cxDate' },] }
        ];
        /** @nocollapse */
        CxDatePipe.ctorParameters = function () { return [
            { type: LanguageService }
        ]; };
        return CxDatePipe;
    }(common.DatePipe));
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CxDatePipe.prototype.language;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TranslatePipe = /** @class */ (function () {
        function TranslatePipe(service, cd) {
            this.service = service;
            this.cd = cd;
        }
        /**
         * @param {?} input
         * @param {?=} options
         * @return {?}
         */
        TranslatePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} options
         * @return {?}
         */
        function (input, options) {
            if (options === void 0) { options = {}; }
            if (((/** @type {?} */ (input))).raw) {
                return ((/** @type {?} */ (input))).raw;
            }
            /** @type {?} */
            var key = typeof input === 'string' ? input : input.key;
            if (typeof input !== 'string') {
                options = __assign({}, options, input.params);
            }
            this.translate(key, options);
            return this.translatedValue;
        };
        /**
         * @private
         * @param {?} key
         * @param {?} options
         * @return {?}
         */
        TranslatePipe.prototype.translate = /**
         * @private
         * @param {?} key
         * @param {?} options
         * @return {?}
         */
        function (key, options) {
            var _this = this;
            if (key !== this.lastKey ||
                !shallowEqualObjects(options, this.lastOptions)) {
                this.lastKey = key;
                this.lastOptions = options;
                if (this.sub) {
                    this.sub.unsubscribe();
                }
                this.sub = this.service
                    .translate(key, options, true)
                    .subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return _this.markForCheck(val); }));
            }
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        TranslatePipe.prototype.markForCheck = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.translatedValue = value;
            this.cd.markForCheck();
        };
        /**
         * @return {?}
         */
        TranslatePipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.sub) {
                this.sub.unsubscribe();
            }
        };
        TranslatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'cxTranslate', pure: false },] }
        ];
        /** @nocollapse */
        TranslatePipe.ctorParameters = function () { return [
            { type: TranslationService },
            { type: core.ChangeDetectorRef }
        ]; };
        return TranslatePipe;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        TranslatePipe.prototype.lastKey;
        /**
         * @type {?}
         * @private
         */
        TranslatePipe.prototype.lastOptions;
        /**
         * @type {?}
         * @private
         */
        TranslatePipe.prototype.translatedValue;
        /**
         * @type {?}
         * @private
         */
        TranslatePipe.prototype.sub;
        /**
         * @type {?}
         * @protected
         */
        TranslatePipe.prototype.service;
        /**
         * @type {?}
         * @protected
         */
        TranslatePipe.prototype.cd;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    I18nConfig = /** @class */ (function () {
        function I18nConfig() {
        }
        return I18nConfig;
    }());
    if (false) {
        /** @type {?} */
        I18nConfig.prototype.i18n;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TranslationChunkService = /** @class */ (function () {
        function TranslationChunkService(config) {
            var _this = this;
            this.config = config;
            this.duplicates = {};
            this.chunks = {};
            this.KEY_SEPARATOR = '.';
            /** @type {?} */
            var chunks = (config.i18n && config.i18n.chunks) || {};
            Object.keys(chunks).forEach((/**
             * @param {?} chunk
             * @return {?}
             */
            function (chunk) {
                chunks[chunk].forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    if (_this.chunks.hasOwnProperty(key)) {
                        if (!_this.duplicates[key]) {
                            _this.duplicates[key] = [_this.chunks[key]];
                        }
                        _this.duplicates[key].push(chunk);
                    }
                    else {
                        _this.chunks[key] = chunk;
                    }
                }));
            }));
            if (Object.keys(this.duplicates).length > 0 && core.isDevMode()) {
                this.warnDuplicates(this.duplicates);
            }
        }
        /**
         * @param {?} key
         * @return {?}
         */
        TranslationChunkService.prototype.getChunkNameForKey = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var mainKey = (key || '').split(this.KEY_SEPARATOR)[0];
            /** @type {?} */
            var chunk = this.chunks && this.chunks[mainKey];
            if (!chunk) {
                return mainKey; // fallback to main key as a chunk
            }
            return chunk;
        };
        /**
         * @private
         * @param {?} items
         * @return {?}
         */
        TranslationChunkService.prototype.warnDuplicates = /**
         * @private
         * @param {?} items
         * @return {?}
         */
        function (items) {
            var _this = this;
            /** @type {?} */
            var dupes = [];
            Object.keys(items).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                dupes.push("* '" + key + "' found in chunks: " + items[key].join(', ') + ". Used '" + _this.chunks[key] + "." + key + "'.");
            }));
            console.warn("Duplicated keys has been found in the config of i18n chunks:\n" + dupes.join('\n'));
        };
        TranslationChunkService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TranslationChunkService.ctorParameters = function () { return [
            { type: I18nConfig }
        ]; };
        return TranslationChunkService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        TranslationChunkService.prototype.duplicates;
        /**
         * @type {?}
         * @protected
         */
        TranslationChunkService.prototype.chunks;
        /**
         * @type {?}
         * @protected
         */
        TranslationChunkService.prototype.KEY_SEPARATOR;
        /**
         * @type {?}
         * @protected
         */
        TranslationChunkService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} configInit
     * @param {?} languageService
     * @param {?} httpClient
     * @param {?} serverRequestOrigin
     * @return {?}
     */
    function i18nextInit(configInit, languageService, httpClient, serverRequestOrigin) {
        return (/**
         * @return {?}
         */
        function () {
            return configInit.getStableConfig('i18n').then((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                /** @type {?} */
                var i18nextConfig = {
                    ns: [],
                    // don't preload any namespaces
                    fallbackLng: config.i18n.fallbackLang,
                    debug: config.i18n.debug,
                    interpolation: {
                        escapeValue: false,
                    },
                };
                if (config.i18n.backend) {
                    i18next.use(i18nextXhrBackend);
                    /** @type {?} */
                    var loadPath = getLoadPath(config.i18n.backend.loadPath, serverRequestOrigin);
                    /** @type {?} */
                    var backend = {
                        loadPath: loadPath,
                        ajax: i18nextGetHttpClient(httpClient),
                    };
                    i18nextConfig = __assign({}, i18nextConfig, { backend: backend });
                }
                return i18next.init(i18nextConfig, (/**
                 * @return {?}
                 */
                function () {
                    // Don't use i18next's 'resources' config key for adding static translations,
                    // because it will disable loading chunks from backend. We add resources here, in the init's callback.
                    i18nextAddTranslations(config.i18n.resources);
                    syncI18nextWithSiteContext(languageService);
                }));
            }));
        });
    }
    /**
     * @param {?=} resources
     * @return {?}
     */
    function i18nextAddTranslations(resources) {
        if (resources === void 0) { resources = {}; }
        Object.keys(resources).forEach((/**
         * @param {?} lang
         * @return {?}
         */
        function (lang) {
            Object.keys(resources[lang]).forEach((/**
             * @param {?} chunkName
             * @return {?}
             */
            function (chunkName) {
                i18next.addResourceBundle(lang, chunkName, resources[lang][chunkName], true, true);
            }));
        }));
    }
    /**
     * @param {?} language
     * @return {?}
     */
    function syncI18nextWithSiteContext(language) {
        // always update language of i18next on site context (language) change
        language.getActive().subscribe((/**
         * @param {?} lang
         * @return {?}
         */
        function (lang) { return i18next.changeLanguage(lang); }));
    }
    /**
     * Returns a function appropriate for i18next to make http calls for JSON files.
     * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options
     *
     * It uses Angular HttpClient under the hood, so it works in SSR.
     * @param {?} httpClient Angular http client
     * @return {?}
     */
    function i18nextGetHttpClient(httpClient) {
        return (/**
         * @param {?} url
         * @param {?} _options
         * @param {?} callback
         * @param {?} _data
         * @return {?}
         */
        function (url, _options, callback, _data) {
            httpClient
                .get(url, { responseType: 'text' })
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return callback(data, { status: 200 }); }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return callback(null, { status: error.status }); }));
        });
    }
    /**
     * Resolves the relative path to the absolute one in SSR, using the server request's origin.
     * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:
     * - https://github.com/angular/angular/issues/19224
     * - https://github.com/angular/universal/issues/858
     * @param {?} path
     * @param {?} serverRequestOrigin
     * @return {?}
     */
    function getLoadPath(path, serverRequestOrigin) {
        if (!path) {
            return undefined;
        }
        if (serverRequestOrigin && !path.match(/^http(s)?:\/\//)) {
            if (path.startsWith('/')) {
                path = path.slice(1);
            }
            if (path.startsWith('./')) {
                path = path.slice(2);
            }
            /** @type {?} */
            var result = serverRequestOrigin + "/" + path;
            return result;
        }
        return path;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$D = i18nextInit;
    /** @type {?} */
    var i18nextProviders = [
        {
            provide: core.APP_INITIALIZER,
            useFactory: ɵ0$D,
            deps: [
                ConfigInitializerService,
                LanguageService,
                http.HttpClient,
                [new core.Optional(), SERVER_REQUEST_ORIGIN],
            ],
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultI18nConfig = {
        i18n: {
            fallbackLang: false,
            debug: false,
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var I18nextTranslationService = /** @class */ (function () {
        function I18nextTranslationService(config, translationChunk) {
            this.config = config;
            this.translationChunk = translationChunk;
            this.NON_BREAKING_SPACE = String.fromCharCode(160);
            this.NAMESPACE_SEPARATOR = ':';
        }
        /**
         * @param {?} key
         * @param {?=} options
         * @param {?=} whitespaceUntilLoaded
         * @return {?}
         */
        I18nextTranslationService.prototype.translate = /**
         * @param {?} key
         * @param {?=} options
         * @param {?=} whitespaceUntilLoaded
         * @return {?}
         */
        function (key, options, whitespaceUntilLoaded) {
            // If we've already loaded the chunk (or failed to load), we should immediately emit the value
            // (or the fallback value in case the key is missing).
            var _this = this;
            if (options === void 0) { options = {}; }
            if (whitespaceUntilLoaded === void 0) { whitespaceUntilLoaded = false; }
            // If we've already loaded the chunk (or failed to load), we should immediately emit the value
            // (or the fallback value in case the key is missing).
            // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).
            // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,
            // which together with `switchMap` operator may lead to an infinite loop.
            /** @type {?} */
            var chunkName = this.translationChunk.getChunkNameForKey(key);
            /** @type {?} */
            var namespacedKey = this.getNamespacedKey(key, chunkName);
            return new rxjs.Observable((/**
             * @param {?} subscriber
             * @return {?}
             */
            function (subscriber) {
                /** @type {?} */
                var translate = (/**
                 * @return {?}
                 */
                function () {
                    if (i18next.exists(namespacedKey, options)) {
                        subscriber.next(i18next.t(namespacedKey, options));
                    }
                    else {
                        if (whitespaceUntilLoaded) {
                            subscriber.next(_this.NON_BREAKING_SPACE);
                        }
                        i18next.loadNamespaces(chunkName, (/**
                         * @return {?}
                         */
                        function () {
                            if (!i18next.exists(namespacedKey, options)) {
                                _this.reportMissingKey(key, chunkName);
                                subscriber.next(_this.getFallbackValue(namespacedKey));
                            }
                            else {
                                subscriber.next(i18next.t(namespacedKey, options));
                            }
                        }));
                    }
                });
                translate();
                i18next.on('languageChanged', translate);
                return (/**
                 * @return {?}
                 */
                function () { return i18next.off('languageChanged', translate); });
            }));
        };
        /**
         * @param {?} chunkNames
         * @return {?}
         */
        I18nextTranslationService.prototype.loadChunks = /**
         * @param {?} chunkNames
         * @return {?}
         */
        function (chunkNames) {
            return i18next.loadNamespaces(chunkNames);
        };
        /**
         * Returns a fallback value in case when the given key is missing
         * @param key
         */
        /**
         * Returns a fallback value in case when the given key is missing
         * @protected
         * @param {?} key
         * @return {?}
         */
        I18nextTranslationService.prototype.getFallbackValue = /**
         * Returns a fallback value in case when the given key is missing
         * @protected
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return core.isDevMode() ? "[" + key + "]" : this.NON_BREAKING_SPACE;
        };
        /**
         * @private
         * @param {?} key
         * @param {?} chunkName
         * @return {?}
         */
        I18nextTranslationService.prototype.reportMissingKey = /**
         * @private
         * @param {?} key
         * @param {?} chunkName
         * @return {?}
         */
        function (key, chunkName) {
            if (core.isDevMode()) {
                console.warn("Translation key missing '" + key + "' in the chunk '" + chunkName + "'");
            }
        };
        /**
         * @private
         * @param {?} key
         * @param {?} chunk
         * @return {?}
         */
        I18nextTranslationService.prototype.getNamespacedKey = /**
         * @private
         * @param {?} key
         * @param {?} chunk
         * @return {?}
         */
        function (key, chunk) {
            return chunk + this.NAMESPACE_SEPARATOR + key;
        };
        I18nextTranslationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        I18nextTranslationService.ctorParameters = function () { return [
            { type: I18nConfig },
            { type: TranslationChunkService }
        ]; };
        return I18nextTranslationService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        I18nextTranslationService.prototype.NON_BREAKING_SPACE;
        /**
         * @type {?}
         * @protected
         */
        I18nextTranslationService.prototype.NAMESPACE_SEPARATOR;
        /**
         * @type {?}
         * @protected
         */
        I18nextTranslationService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        I18nextTranslationService.prototype.translationChunk;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var I18nModule = /** @class */ (function () {
        function I18nModule() {
        }
        /**
         * @return {?}
         */
        I18nModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: I18nModule,
                providers: __spread([
                    provideConfig(defaultI18nConfig),
                    { provide: I18nConfig, useExisting: Config },
                    { provide: TranslationService, useClass: I18nextTranslationService },
                    TranslationChunkService
                ], i18nextProviders),
            };
        };
        I18nModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [TranslatePipe, CxDatePipe],
                        exports: [TranslatePipe, CxDatePipe],
                    },] }
        ];
        return I18nModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function mockTranslate(key, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var optionsString = Object.keys(options)
            .sort()
            .map((/**
         * @param {?} optionName
         * @return {?}
         */
        function (optionName) { return optionName + ":" + options[optionName]; }))
            .join(' ');
        return optionsString ? key + " " + optionsString : key;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MockTranslatePipe = /** @class */ (function () {
        function MockTranslatePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} options
         * @return {?}
         */
        MockTranslatePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} options
         * @return {?}
         */
        function (input, options) {
            if (options === void 0) { options = {}; }
            if (((/** @type {?} */ (input))).raw) {
                return ((/** @type {?} */ (input))).raw;
            }
            /** @type {?} */
            var key = typeof input === 'string' ? input : input.key;
            if (typeof input !== 'string') {
                options = __assign({}, options, input.params);
            }
            return mockTranslate(key, options);
        };
        MockTranslatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'cxTranslate' },] }
        ];
        return MockTranslatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MockTranslationService = /** @class */ (function () {
        function MockTranslationService() {
        }
        /**
         * @param {?} key
         * @param {?=} options
         * @param {?=} _whitespaceUntilLoaded
         * @return {?}
         */
        MockTranslationService.prototype.translate = /**
         * @param {?} key
         * @param {?=} options
         * @param {?=} _whitespaceUntilLoaded
         * @return {?}
         */
        function (key, options, _whitespaceUntilLoaded) {
            if (options === void 0) { options = {}; }
            if (_whitespaceUntilLoaded === void 0) { _whitespaceUntilLoaded = false; }
            return new rxjs.Observable((/**
             * @param {?} subscriber
             * @return {?}
             */
            function (subscriber) {
                /** @type {?} */
                var value = mockTranslate(key, options);
                subscriber.next(value);
                subscriber.complete();
            }));
        };
        /**
         * @param {?} _chunks
         * @return {?}
         */
        MockTranslationService.prototype.loadChunks = /**
         * @param {?} _chunks
         * @return {?}
         */
        function (_chunks) {
            return Promise.resolve();
        };
        MockTranslationService.decorators = [
            { type: core.Injectable }
        ];
        return MockTranslationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MockDatePipe = /** @class */ (function (_super) {
        __extends(MockDatePipe, _super);
        function MockDatePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} value
         * @param {?=} format
         * @param {?=} timezone
         * @return {?}
         */
        MockDatePipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} format
         * @param {?=} timezone
         * @return {?}
         */
        function (value, format, timezone) {
            return _super.prototype.transform.call(this, value, format, timezone, 'en');
        };
        MockDatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'cxDate' },] }
        ];
        return MockDatePipe;
    }(common.DatePipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var I18nTestingModule = /** @class */ (function () {
        function I18nTestingModule() {
        }
        I18nTestingModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MockTranslatePipe, MockDatePipe],
                        exports: [MockTranslatePipe, MockDatePipe],
                        providers: [
                            { provide: TranslationService, useClass: MockTranslationService },
                        ],
                    },] }
        ];
        return I18nTestingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    KymaConfig = /** @class */ (function (_super) {
        __extends(KymaConfig, _super);
        function KymaConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return KymaConfig;
    }(OccConfig));
    if (false) {
        /** @type {?} */
        KymaConfig.prototype.authentication;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var KYMA_FEATURE = 'kyma';
    /** @type {?} */
    var OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';
    /**
     * @record
     */
    function StateWithKyma() { }
    if (false) {
        /* Skipping unnamed member:
        [KYMA_FEATURE]: KymaState;*/
    }
    /**
     * @record
     */
    function KymaState() { }
    if (false) {
        /** @type {?} */
        KymaState.prototype.openIdToken;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';
    /** @type {?} */
    var LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';
    /** @type {?} */
    var LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';
    var LoadOpenIdToken = /** @class */ (function (_super) {
        __extends(LoadOpenIdToken, _super);
        function LoadOpenIdToken(payload) {
            var _this = _super.call(this, OPEN_ID_TOKEN_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_OPEN_ID_TOKEN;
            return _this;
        }
        return LoadOpenIdToken;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        LoadOpenIdToken.prototype.type;
        /** @type {?} */
        LoadOpenIdToken.prototype.payload;
    }
    var LoadOpenIdTokenFail = /** @class */ (function (_super) {
        __extends(LoadOpenIdTokenFail, _super);
        function LoadOpenIdTokenFail(payload) {
            var _this = _super.call(this, OPEN_ID_TOKEN_DATA, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_OPEN_ID_TOKEN_FAIL;
            return _this;
        }
        return LoadOpenIdTokenFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        LoadOpenIdTokenFail.prototype.type;
        /** @type {?} */
        LoadOpenIdTokenFail.prototype.payload;
    }
    var LoadOpenIdTokenSuccess = /** @class */ (function (_super) {
        __extends(LoadOpenIdTokenSuccess, _super);
        function LoadOpenIdTokenSuccess(payload) {
            var _this = _super.call(this, OPEN_ID_TOKEN_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_OPEN_ID_TOKEN_SUCCESS;
            return _this;
        }
        return LoadOpenIdTokenSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        LoadOpenIdTokenSuccess.prototype.type;
        /** @type {?} */
        LoadOpenIdTokenSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var kymaGroup_actions = /*#__PURE__*/Object.freeze({
        LOAD_OPEN_ID_TOKEN: LOAD_OPEN_ID_TOKEN,
        LOAD_OPEN_ID_TOKEN_FAIL: LOAD_OPEN_ID_TOKEN_FAIL,
        LOAD_OPEN_ID_TOKEN_SUCCESS: LOAD_OPEN_ID_TOKEN_SUCCESS,
        LoadOpenIdToken: LoadOpenIdToken,
        LoadOpenIdTokenFail: LoadOpenIdTokenFail,
        LoadOpenIdTokenSuccess: LoadOpenIdTokenSuccess
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getKymaState = store.createFeatureSelector(KYMA_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$E = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.openIdToken; };
    /** @type {?} */
    var getOpenIdTokenState = store.createSelector(getKymaState, (ɵ0$E));
    /** @type {?} */
    var getOpenIdTokenValue = store.createSelector(getOpenIdTokenState, loaderValueSelector);
    /** @type {?} */
    var getOpenIdTokenLoading = store.createSelector(getOpenIdTokenState, loaderLoadingSelector);
    /** @type {?} */
    var getOpenIdTokenSuccess = store.createSelector(getOpenIdTokenState, loaderSuccessSelector);
    /** @type {?} */
    var getOpenIdTokenError = store.createSelector(getOpenIdTokenState, loaderErrorSelector);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var kymaGroup_selectors = /*#__PURE__*/Object.freeze({
        getKymaState: getKymaState,
        getOpenIdTokenState: getOpenIdTokenState,
        getOpenIdTokenValue: getOpenIdTokenValue,
        getOpenIdTokenLoading: getOpenIdTokenLoading,
        getOpenIdTokenSuccess: getOpenIdTokenSuccess,
        getOpenIdTokenError: getOpenIdTokenError
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var KymaService = /** @class */ (function () {
        function KymaService(store) {
            this.store = store;
        }
        /**
         * Authorizes using the Kyma OAuth client with scope `openid`.
         *
         * @param username a username
         * @param password a password
         */
        /**
         * Authorizes using the Kyma OAuth client with scope `openid`.
         *
         * @param {?} username a username
         * @param {?} password a password
         * @return {?}
         */
        KymaService.prototype.authorizeOpenId = /**
         * Authorizes using the Kyma OAuth client with scope `openid`.
         *
         * @param {?} username a username
         * @param {?} password a password
         * @return {?}
         */
        function (username, password) {
            this.store.dispatch(new LoadOpenIdToken({ username: username, password: password }));
        };
        /**
         * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.
         */
        /**
         * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.
         * @return {?}
         */
        KymaService.prototype.getOpenIdToken = /**
         * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getOpenIdTokenValue));
        };
        KymaService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        KymaService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        /** @nocollapse */ KymaService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function KymaService_Factory() { return new KymaService(core.ɵɵinject(store.Store)); }, token: KymaService, providedIn: "root" });
        return KymaService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        KymaService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultKymaConfig = {
        authentication: {
            kyma_enabled: false,
            kyma_client_id: 'client4kyma',
            kyma_client_secret: 'secret',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OAUTH_ENDPOINT$2 = '/authorizationserver/oauth/token';
    var OpenIdAuthenticationTokenService = /** @class */ (function () {
        function OpenIdAuthenticationTokenService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} username
         * @param {?} password
         * @return {?}
         */
        OpenIdAuthenticationTokenService.prototype.loadOpenIdAuthenticationToken = /**
         * @param {?} username
         * @param {?} password
         * @return {?}
         */
        function (username, password) {
            /** @type {?} */
            var url = this.getOAuthEndpoint();
            /** @type {?} */
            var params = new http.HttpParams()
                .set('client_id', encodeURIComponent(this.config.authentication.kyma_client_id))
                .set('client_secret', encodeURIComponent(this.config.authentication.kyma_client_secret))
                .set('grant_type', 'password') // authorization_code, client_credentials, password
                .set('username', username)
                .set('password', password)
                .set('scope', 'openid');
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http
                .post(url, params, { headers: headers })
                .pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return rxjs.throwError(error); })));
        };
        /**
         * @private
         * @return {?}
         */
        OpenIdAuthenticationTokenService.prototype.getOAuthEndpoint = /**
         * @private
         * @return {?}
         */
        function () {
            return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT$2;
        };
        OpenIdAuthenticationTokenService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OpenIdAuthenticationTokenService.ctorParameters = function () { return [
            { type: KymaConfig },
            { type: http.HttpClient }
        ]; };
        return OpenIdAuthenticationTokenService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OpenIdAuthenticationTokenService.prototype.config;
        /**
         * @type {?}
         * @private
         */
        OpenIdAuthenticationTokenService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var KymaServices = [OpenIdAuthenticationTokenService];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OpenIdTokenEffect = /** @class */ (function () {
        function OpenIdTokenEffect(actions$, openIdTokenService, config) {
            var _this = this;
            this.actions$ = actions$;
            this.openIdTokenService = openIdTokenService;
            this.config = config;
            this.triggerOpenIdTokenLoading$ = rxjs.iif((/**
             * @return {?}
             */
            function () { return _this.config.authentication && _this.config.authentication.kyma_enabled; }), this.actions$.pipe(effects$d.ofType(LOAD_USER_TOKEN_SUCCESS), operators.withLatestFrom(this.actions$.pipe(effects$d.ofType(LOAD_USER_TOKEN))), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), loginAction = _b[1];
                return new LoadOpenIdToken({
                    username: loginAction.payload.userId,
                    password: loginAction.payload.password,
                });
            }))));
            this.loadOpenIdToken$ = this.actions$.pipe(effects$d.ofType(LOAD_OPEN_ID_TOKEN), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.exhaustMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.openIdTokenService
                    .loadOpenIdAuthenticationToken(payload.username, payload.password)
                    .pipe(operators.map((/**
                 * @param {?} token
                 * @return {?}
                 */
                function (token) { return new LoadOpenIdTokenSuccess(token); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadOpenIdTokenFail(makeErrorSerializable(error)));
                })));
            })));
        }
        OpenIdTokenEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OpenIdTokenEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: OpenIdAuthenticationTokenService },
            { type: KymaConfig }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OpenIdTokenEffect.prototype, "triggerOpenIdTokenLoading$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OpenIdTokenEffect.prototype, "loadOpenIdToken$", void 0);
        return OpenIdTokenEffect;
    }());
    if (false) {
        /** @type {?} */
        OpenIdTokenEffect.prototype.triggerOpenIdTokenLoading$;
        /** @type {?} */
        OpenIdTokenEffect.prototype.loadOpenIdToken$;
        /**
         * @type {?}
         * @private
         */
        OpenIdTokenEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        OpenIdTokenEffect.prototype.openIdTokenService;
        /**
         * @type {?}
         * @private
         */
        OpenIdTokenEffect.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$9 = [OpenIdTokenEffect];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$9() {
        return {
            openIdToken: loaderReducer(OPEN_ID_TOKEN_DATA),
        };
    }
    /** @type {?} */
    var reducerToken$9 = new core.InjectionToken('KymaReducers');
    /** @type {?} */
    var reducerProvider$9 = {
        provide: reducerToken$9,
        useFactory: getReducers$9,
    };
    /**
     * @param {?} reducer
     * @return {?}
     */
    function clearKymaState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LOGOUT) {
                state = __assign({}, state, { openIdToken: undefined });
            }
            return reducer(state, action);
        });
    }
    /** @type {?} */
    var metaReducers$5 = [clearKymaState];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function kymaStoreConfigFactory() {
        // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object
        /** @type {?} */
        var config = {
            state: {
                storageSync: {
                    keys: {
                        'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,
                    },
                },
            },
        };
        return config;
    }
    var KymaStoreModule = /** @class */ (function () {
        function KymaStoreModule() {
        }
        KymaStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            StateModule,
                            store.StoreModule.forFeature(KYMA_FEATURE, reducerToken$9, { metaReducers: metaReducers$5 }),
                            effects$d.EffectsModule.forFeature(effects$9),
                            ConfigModule.withConfigFactory(kymaStoreConfigFactory),
                        ],
                        providers: [reducerProvider$9],
                    },] }
        ];
        return KymaStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var KymaModule = /** @class */ (function () {
        function KymaModule() {
        }
        KymaModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            KymaStoreModule,
                            ConfigModule.withConfig(defaultKymaConfig),
                        ],
                        providers: __spread(KymaServices, [{ provide: KymaConfig, useExisting: Config }]),
                    },] }
        ];
        return KymaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function OpenIdToken() { }
    if (false) {
        /** @type {?} */
        OpenIdToken.prototype.id_token;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    PersonalizationConfig = /** @class */ (function () {
        function PersonalizationConfig() {
        }
        return PersonalizationConfig;
    }());
    if (false) {
        /** @type {?} */
        PersonalizationConfig.prototype.personalization;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultPersonalizationConfig = {
        personalization: {
            enabled: false,
            httpHeaderName: {
                id: 'Occ-Personalization-Id',
                timestamp: 'Occ-Personalization-Time',
            },
            context: {
                slotPosition: 'PlaceholderContentSlot',
                componentId: 'PersonalizationScriptComponent',
            },
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PERSONALIZATION_ID_KEY = 'personalization-id';
    var OccPersonalizationIdInterceptor = /** @class */ (function () {
        function OccPersonalizationIdInterceptor(config, occEndpoints, winRef, platform) {
            this.config = config;
            this.occEndpoints = occEndpoints;
            this.winRef = winRef;
            this.platform = platform;
            this.enabled = false;
            if (common.isPlatformBrowser(this.platform)) {
                this.enabled =
                    (this.winRef.localStorage && this.config.personalization.enabled) ||
                        false;
                if (this.enabled) {
                    this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();
                    this.personalizationId = this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY);
                }
                else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {
                    this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);
                }
            }
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        OccPersonalizationIdInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _a;
            var _this = this;
            if (!this.enabled) {
                return next.handle(request);
            }
            if (this.personalizationId &&
                request.url.includes(this.occEndpoints.getBaseEndpoint())) {
                request = request.clone({
                    setHeaders: (_a = {},
                        _a[this.requestHeader] = this.personalizationId,
                        _a),
                });
            }
            return next.handle(request).pipe(operators.tap((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof http.HttpResponse) {
                    if (event.headers.keys().includes(_this.requestHeader)) {
                        /** @type {?} */
                        var receivedId = event.headers.get(_this.requestHeader);
                        if (_this.personalizationId !== receivedId) {
                            _this.personalizationId = receivedId;
                            _this.winRef.localStorage.setItem(PERSONALIZATION_ID_KEY, _this.personalizationId);
                        }
                    }
                }
            })));
        };
        OccPersonalizationIdInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccPersonalizationIdInterceptor.ctorParameters = function () { return [
            { type: PersonalizationConfig },
            { type: OccEndpointsService },
            { type: WindowRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        /** @nocollapse */ OccPersonalizationIdInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccPersonalizationIdInterceptor_Factory() { return new OccPersonalizationIdInterceptor(core.ɵɵinject(PersonalizationConfig), core.ɵɵinject(OccEndpointsService), core.ɵɵinject(WindowRef), core.ɵɵinject(core.PLATFORM_ID)); }, token: OccPersonalizationIdInterceptor, providedIn: "root" });
        return OccPersonalizationIdInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationIdInterceptor.prototype.personalizationId;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationIdInterceptor.prototype.requestHeader;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationIdInterceptor.prototype.enabled;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationIdInterceptor.prototype.config;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationIdInterceptor.prototype.occEndpoints;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationIdInterceptor.prototype.winRef;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationIdInterceptor.prototype.platform;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PERSONALIZATION_TIME_KEY = 'personalization-time';
    var OccPersonalizationTimeInterceptor = /** @class */ (function () {
        function OccPersonalizationTimeInterceptor(config, occEndpoints, winRef, platform) {
            this.config = config;
            this.occEndpoints = occEndpoints;
            this.winRef = winRef;
            this.platform = platform;
            this.enabled = false;
            if (common.isPlatformBrowser(this.platform)) {
                this.enabled =
                    (this.winRef.localStorage && this.config.personalization.enabled) ||
                        false;
                if (this.enabled) {
                    this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();
                    this.timestamp = this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY);
                }
                else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {
                    this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);
                }
            }
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        OccPersonalizationTimeInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _a;
            var _this = this;
            if (!this.enabled) {
                return next.handle(request);
            }
            if (this.timestamp &&
                request.url.includes(this.occEndpoints.getBaseEndpoint())) {
                request = request.clone({
                    setHeaders: (_a = {},
                        _a[this.requestHeader] = this.timestamp,
                        _a),
                });
            }
            return next.handle(request).pipe(operators.tap((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof http.HttpResponse) {
                    if (event.headers.keys().includes(_this.requestHeader)) {
                        /** @type {?} */
                        var receivedTimestamp = event.headers.get(_this.requestHeader);
                        if (_this.timestamp !== receivedTimestamp) {
                            _this.timestamp = receivedTimestamp;
                            _this.winRef.localStorage.setItem(PERSONALIZATION_TIME_KEY, _this.timestamp);
                        }
                    }
                }
            })));
        };
        OccPersonalizationTimeInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        OccPersonalizationTimeInterceptor.ctorParameters = function () { return [
            { type: PersonalizationConfig },
            { type: OccEndpointsService },
            { type: WindowRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        /** @nocollapse */ OccPersonalizationTimeInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OccPersonalizationTimeInterceptor_Factory() { return new OccPersonalizationTimeInterceptor(core.ɵɵinject(PersonalizationConfig), core.ɵɵinject(OccEndpointsService), core.ɵɵinject(WindowRef), core.ɵɵinject(core.PLATFORM_ID)); }, token: OccPersonalizationTimeInterceptor, providedIn: "root" });
        return OccPersonalizationTimeInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationTimeInterceptor.prototype.timestamp;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationTimeInterceptor.prototype.requestHeader;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationTimeInterceptor.prototype.enabled;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationTimeInterceptor.prototype.config;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationTimeInterceptor.prototype.occEndpoints;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationTimeInterceptor.prototype.winRef;
        /**
         * @type {?}
         * @private
         */
        OccPersonalizationTimeInterceptor.prototype.platform;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var interceptors$3 = [
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: OccPersonalizationIdInterceptor,
            multi: true,
        },
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: OccPersonalizationTimeInterceptor,
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PersonalizationModule = /** @class */ (function () {
        function PersonalizationModule() {
        }
        /**
         * @return {?}
         */
        PersonalizationModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: PersonalizationModule,
                providers: __spread(interceptors$3),
            };
        };
        PersonalizationModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [ConfigModule.withConfig(defaultPersonalizationConfig)],
                        providers: [{ provide: PersonalizationConfig, useExisting: Config }],
                    },] }
        ];
        return PersonalizationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PersonalizationContextService = /** @class */ (function () {
        function PersonalizationContextService(config, cmsService) {
            this.config = config;
            this.cmsService = cmsService;
        }
        /**
         * @return {?}
         */
        PersonalizationContextService.prototype.getPersonalizationContext = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.cmsService.getCurrentPage().pipe(operators.filter(Boolean), operators.map((/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                return page.slots[_this.config.personalization.context.slotPosition];
            })), operators.filter(Boolean), operators.map((/**
             * @param {?} slot
             * @return {?}
             */
            function (slot) {
                return slot.components.find((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i.uid === _this.config.personalization.context.componentId; }));
            })), operators.filter(Boolean), operators.map((/**
             * @param {?} component
             * @return {?}
             */
            function (component) {
                return _this.buildPersonalizationContext(component.properties.script.data);
            })));
        };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        PersonalizationContextService.prototype.buildPersonalizationContext = /**
         * @private
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var context = JSON.parse(atob(data));
            context.actions.forEach((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                Object.keys(action).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    action[key] = atob(action[key]);
                }));
            }));
            for (var i = 0; i < context.segments.length; i++) {
                context.segments[i] = atob(context.segments[i]);
            }
            return context;
        };
        PersonalizationContextService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        PersonalizationContextService.ctorParameters = function () { return [
            { type: PersonalizationConfig },
            { type: CmsService }
        ]; };
        /** @nocollapse */ PersonalizationContextService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function PersonalizationContextService_Factory() { return new PersonalizationContextService(core.ɵɵinject(PersonalizationConfig), core.ɵɵinject(CmsService)); }, token: PersonalizationContextService, providedIn: "root" });
        return PersonalizationContextService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        PersonalizationContextService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        PersonalizationContextService.prototype.cmsService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function PersonalizationAction() { }
    if (false) {
        /** @type {?} */
        PersonalizationAction.prototype.action_name;
        /** @type {?} */
        PersonalizationAction.prototype.action_type;
        /** @type {?|undefined} */
        PersonalizationAction.prototype.customization_name;
        /** @type {?|undefined} */
        PersonalizationAction.prototype.customization_code;
        /** @type {?|undefined} */
        PersonalizationAction.prototype.variation_name;
        /** @type {?|undefined} */
        PersonalizationAction.prototype.variation_code;
    }
    /**
     * @record
     */
    function PersonalizationContext() { }
    if (false) {
        /** @type {?} */
        PersonalizationContext.prototype.actions;
        /** @type {?} */
        PersonalizationContext.prototype.segments;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @return {?}
     */
    function getReducers$a() {
        return entityLoaderReducer(PROCESS_FEATURE);
    }
    /** @type {?} */
    var reducerToken$a = new core.InjectionToken('ProcessReducers');
    /** @type {?} */
    var reducerProvider$a = {
        provide: reducerToken$a,
        useFactory: getReducers$a,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessStoreModule = /** @class */ (function () {
        function ProcessStoreModule() {
        }
        ProcessStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [StateModule, store.StoreModule.forFeature(PROCESS_FEATURE, reducerToken$a)],
                        providers: [reducerProvider$a],
                    },] }
        ];
        return ProcessStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessModule = /** @class */ (function () {
        function ProcessModule() {
        }
        /**
         * @return {?}
         */
        ProcessModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: ProcessModule,
                providers: [],
            };
        };
        ProcessModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [ProcessStoreModule],
                    },] }
        ];
        return ProcessModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductConnector = /** @class */ (function () {
        function ProductConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        ProductConnector.prototype.get = /**
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.adapter.load(productCode, scope);
        };
        /**
         * @param {?} products
         * @return {?}
         */
        ProductConnector.prototype.getMany = /**
         * @param {?} products
         * @return {?}
         */
        function (products) {
            var _this = this;
            if (!this.adapter.loadMany) {
                return products.map((/**
                 * @param {?} product
                 * @return {?}
                 */
                function (product) { return (__assign({}, product, { data$: _this.adapter.load(product.code, product.scope) })); }));
            }
            return this.adapter.loadMany(products);
        };
        ProductConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ProductConnector.ctorParameters = function () { return [
            { type: ProductAdapter }
        ]; };
        /** @nocollapse */ ProductConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductConnector_Factory() { return new ProductConnector(core.ɵɵinject(ProductAdapter)); }, token: ProductConnector, providedIn: "root" });
        return ProductConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Used in product connectors and adapter to load multiple product codes and scopes
     * @record
     */
    function ScopedProductData() { }
    if (false) {
        /** @type {?} */
        ScopedProductData.prototype.code;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductReferencesConnector = /** @class */ (function () {
        function ProductReferencesConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} productCode
         * @param {?=} referenceType
         * @param {?=} pageSize
         * @return {?}
         */
        ProductReferencesConnector.prototype.get = /**
         * @param {?} productCode
         * @param {?=} referenceType
         * @param {?=} pageSize
         * @return {?}
         */
        function (productCode, referenceType, pageSize) {
            return this.adapter.load(productCode, referenceType, pageSize);
        };
        ProductReferencesConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ProductReferencesConnector.ctorParameters = function () { return [
            { type: ProductReferencesAdapter }
        ]; };
        /** @nocollapse */ ProductReferencesConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductReferencesConnector_Factory() { return new ProductReferencesConnector(core.ɵɵinject(ProductReferencesAdapter)); }, token: ProductReferencesConnector, providedIn: "root" });
        return ProductReferencesConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductReferencesConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductReviewsConnector = /** @class */ (function () {
        function ProductReviewsConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} productCode
         * @param {?=} maxCount
         * @return {?}
         */
        ProductReviewsConnector.prototype.get = /**
         * @param {?} productCode
         * @param {?=} maxCount
         * @return {?}
         */
        function (productCode, maxCount) {
            return this.adapter.load(productCode, maxCount);
        };
        /**
         * @param {?} productCode
         * @param {?} review
         * @return {?}
         */
        ProductReviewsConnector.prototype.add = /**
         * @param {?} productCode
         * @param {?} review
         * @return {?}
         */
        function (productCode, review) {
            return this.adapter.post(productCode, review);
        };
        ProductReviewsConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ProductReviewsConnector.ctorParameters = function () { return [
            { type: ProductReviewsAdapter }
        ]; };
        /** @nocollapse */ ProductReviewsConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductReviewsConnector_Factory() { return new ProductReviewsConnector(core.ɵɵinject(ProductReviewsAdapter)); }, token: ProductReviewsConnector, providedIn: "root" });
        return ProductReviewsConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductReviewsConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductSearchConnector = /** @class */ (function () {
        function ProductSearchConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        ProductSearchConnector.prototype.search = /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        function (query, searchConfig) {
            return this.adapter.search(query, searchConfig);
        };
        /**
         * @param {?} term
         * @param {?=} pageSize
         * @return {?}
         */
        ProductSearchConnector.prototype.getSuggestions = /**
         * @param {?} term
         * @param {?=} pageSize
         * @return {?}
         */
        function (term, pageSize) {
            return this.adapter.loadSuggestions(term, pageSize);
        };
        ProductSearchConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ProductSearchConnector.ctorParameters = function () { return [
            { type: ProductSearchAdapter }
        ]; };
        /** @nocollapse */ ProductSearchConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductSearchConnector_Factory() { return new ProductSearchConnector(core.ɵɵinject(ProductSearchAdapter)); }, token: ProductSearchConnector, providedIn: "root" });
        return ProductSearchConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductSearchConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';
    /** @type {?} */
    var LOAD_PRODUCT_REFERENCES_FAIL = '[Product] Load Product References Data Fail';
    /** @type {?} */
    var LOAD_PRODUCT_REFERENCES_SUCCESS = '[Product] Load Product References Data Success';
    /** @type {?} */
    var CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';
    var LoadProductReferences = /** @class */ (function () {
        function LoadProductReferences(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REFERENCES;
        }
        return LoadProductReferences;
    }());
    if (false) {
        /** @type {?} */
        LoadProductReferences.prototype.type;
        /** @type {?} */
        LoadProductReferences.prototype.payload;
    }
    var LoadProductReferencesFail = /** @class */ (function () {
        function LoadProductReferencesFail(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REFERENCES_FAIL;
        }
        return LoadProductReferencesFail;
    }());
    if (false) {
        /** @type {?} */
        LoadProductReferencesFail.prototype.type;
        /** @type {?} */
        LoadProductReferencesFail.prototype.payload;
    }
    var LoadProductReferencesSuccess = /** @class */ (function () {
        function LoadProductReferencesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REFERENCES_SUCCESS;
        }
        return LoadProductReferencesSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadProductReferencesSuccess.prototype.type;
        /** @type {?} */
        LoadProductReferencesSuccess.prototype.payload;
    }
    var CleanProductReferences = /** @class */ (function () {
        function CleanProductReferences() {
            this.type = CLEAN_PRODUCT_REFERENCES;
        }
        return CleanProductReferences;
    }());
    if (false) {
        /** @type {?} */
        CleanProductReferences.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';
    /** @type {?} */
    var LOAD_PRODUCT_REVIEWS_FAIL = '[Product] Load Product Reviews Data Fail';
    /** @type {?} */
    var LOAD_PRODUCT_REVIEWS_SUCCESS = '[Product] Load Product Reviews Data Success';
    /** @type {?} */
    var POST_PRODUCT_REVIEW = '[Product] Post Product Review';
    /** @type {?} */
    var POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';
    /** @type {?} */
    var POST_PRODUCT_REVIEW_SUCCESS = '[Product] Post Product Review Success';
    var LoadProductReviews = /** @class */ (function () {
        function LoadProductReviews(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REVIEWS;
        }
        return LoadProductReviews;
    }());
    if (false) {
        /** @type {?} */
        LoadProductReviews.prototype.type;
        /** @type {?} */
        LoadProductReviews.prototype.payload;
    }
    var LoadProductReviewsFail = /** @class */ (function () {
        function LoadProductReviewsFail(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REVIEWS_FAIL;
        }
        return LoadProductReviewsFail;
    }());
    if (false) {
        /** @type {?} */
        LoadProductReviewsFail.prototype.type;
        /** @type {?} */
        LoadProductReviewsFail.prototype.payload;
    }
    var LoadProductReviewsSuccess = /** @class */ (function () {
        function LoadProductReviewsSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REVIEWS_SUCCESS;
        }
        return LoadProductReviewsSuccess;
    }());
    if (false) {
        /** @type {?} */
        LoadProductReviewsSuccess.prototype.type;
        /** @type {?} */
        LoadProductReviewsSuccess.prototype.payload;
    }
    var PostProductReview = /** @class */ (function () {
        function PostProductReview(payload) {
            this.payload = payload;
            this.type = POST_PRODUCT_REVIEW;
        }
        return PostProductReview;
    }());
    if (false) {
        /** @type {?} */
        PostProductReview.prototype.type;
        /** @type {?} */
        PostProductReview.prototype.payload;
    }
    var PostProductReviewFail = /** @class */ (function () {
        function PostProductReviewFail(payload) {
            this.payload = payload;
            this.type = POST_PRODUCT_REVIEW_FAIL;
        }
        return PostProductReviewFail;
    }());
    if (false) {
        /** @type {?} */
        PostProductReviewFail.prototype.type;
        /** @type {?} */
        PostProductReviewFail.prototype.payload;
    }
    var PostProductReviewSuccess = /** @class */ (function () {
        function PostProductReviewSuccess(payload) {
            this.payload = payload;
            this.type = POST_PRODUCT_REVIEW_SUCCESS;
        }
        return PostProductReviewSuccess;
    }());
    if (false) {
        /** @type {?} */
        PostProductReviewSuccess.prototype.type;
        /** @type {?} */
        PostProductReviewSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SEARCH_PRODUCTS = '[Product] Search Products';
    /** @type {?} */
    var SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';
    /** @type {?} */
    var SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';
    /** @type {?} */
    var GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';
    /** @type {?} */
    var GET_PRODUCT_SUGGESTIONS_SUCCESS = '[Product] Get Product Suggestions Success';
    /** @type {?} */
    var GET_PRODUCT_SUGGESTIONS_FAIL = '[Product] Get Product Suggestions Fail';
    /** @type {?} */
    var CLEAR_PRODUCT_SEARCH_RESULT = '[Product] Clear Product Search Result';
    var SearchProducts = /** @class */ (function () {
        function SearchProducts(payload, auxiliary) {
            this.payload = payload;
            this.auxiliary = auxiliary;
            this.type = SEARCH_PRODUCTS;
        }
        return SearchProducts;
    }());
    if (false) {
        /** @type {?} */
        SearchProducts.prototype.type;
        /** @type {?} */
        SearchProducts.prototype.payload;
        /** @type {?} */
        SearchProducts.prototype.auxiliary;
    }
    var SearchProductsFail = /** @class */ (function () {
        function SearchProductsFail(payload, auxiliary) {
            this.payload = payload;
            this.auxiliary = auxiliary;
            this.type = SEARCH_PRODUCTS_FAIL;
        }
        return SearchProductsFail;
    }());
    if (false) {
        /** @type {?} */
        SearchProductsFail.prototype.type;
        /** @type {?} */
        SearchProductsFail.prototype.payload;
        /** @type {?} */
        SearchProductsFail.prototype.auxiliary;
    }
    var SearchProductsSuccess = /** @class */ (function () {
        function SearchProductsSuccess(payload, auxiliary) {
            this.payload = payload;
            this.auxiliary = auxiliary;
            this.type = SEARCH_PRODUCTS_SUCCESS;
        }
        return SearchProductsSuccess;
    }());
    if (false) {
        /** @type {?} */
        SearchProductsSuccess.prototype.type;
        /** @type {?} */
        SearchProductsSuccess.prototype.payload;
        /** @type {?} */
        SearchProductsSuccess.prototype.auxiliary;
    }
    var GetProductSuggestions = /** @class */ (function () {
        function GetProductSuggestions(payload) {
            this.payload = payload;
            this.type = GET_PRODUCT_SUGGESTIONS;
        }
        return GetProductSuggestions;
    }());
    if (false) {
        /** @type {?} */
        GetProductSuggestions.prototype.type;
        /** @type {?} */
        GetProductSuggestions.prototype.payload;
    }
    var GetProductSuggestionsSuccess = /** @class */ (function () {
        function GetProductSuggestionsSuccess(payload) {
            this.payload = payload;
            this.type = GET_PRODUCT_SUGGESTIONS_SUCCESS;
        }
        return GetProductSuggestionsSuccess;
    }());
    if (false) {
        /** @type {?} */
        GetProductSuggestionsSuccess.prototype.type;
        /** @type {?} */
        GetProductSuggestionsSuccess.prototype.payload;
    }
    var GetProductSuggestionsFail = /** @class */ (function () {
        function GetProductSuggestionsFail(payload) {
            this.payload = payload;
            this.type = GET_PRODUCT_SUGGESTIONS_FAIL;
        }
        return GetProductSuggestionsFail;
    }());
    if (false) {
        /** @type {?} */
        GetProductSuggestionsFail.prototype.type;
        /** @type {?} */
        GetProductSuggestionsFail.prototype.payload;
    }
    var ClearProductSearchResult = /** @class */ (function () {
        function ClearProductSearchResult(payload) {
            if (payload === void 0) { payload = {
                clearPageResults: false,
                clearSearchboxResults: false,
            }; }
            this.payload = payload;
            this.type = CLEAR_PRODUCT_SEARCH_RESULT;
        }
        return ClearProductSearchResult;
    }());
    if (false) {
        /** @type {?} */
        ClearProductSearchResult.prototype.type;
        /** @type {?} */
        ClearProductSearchResult.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PRODUCT_FEATURE = 'product';
    /** @type {?} */
    var PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';
    /**
     * @record
     */
    function StateWithProduct() { }
    if (false) {
        /* Skipping unnamed member:
        [PRODUCT_FEATURE]: ProductsState;*/
    }
    /**
     * @record
     */
    function ProductsState() { }
    if (false) {
        /** @type {?} */
        ProductsState.prototype.details;
        /** @type {?} */
        ProductsState.prototype.search;
        /** @type {?} */
        ProductsState.prototype.reviews;
        /** @type {?} */
        ProductsState.prototype.references;
    }
    /**
     * @record
     */
    function ProductsSearchState() { }
    if (false) {
        /** @type {?} */
        ProductsSearchState.prototype.results;
        /** @type {?} */
        ProductsSearchState.prototype.suggestions;
        /** @type {?} */
        ProductsSearchState.prototype.auxResults;
    }
    /**
     * @record
     */
    function ProductReviewsState() { }
    if (false) {
        /** @type {?} */
        ProductReviewsState.prototype.productCode;
        /** @type {?} */
        ProductReviewsState.prototype.list;
    }
    /**
     * @record
     */
    function ProductReferencesState() { }
    if (false) {
        /** @type {?} */
        ProductReferencesState.prototype.productCode;
        /** @type {?} */
        ProductReferencesState.prototype.list;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EntityScopedLoaderActions;
    (function (EntityScopedLoaderActions) {
        /**
         * @record
         */
        function EntityScopedLoaderMeta() { }
        EntityScopedLoaderActions.EntityScopedLoaderMeta = EntityScopedLoaderMeta;
        if (false) {
            /** @type {?|undefined} */
            EntityScopedLoaderMeta.prototype.scope;
        }
        /**
         * @record
         */
        function EntityScopedLoaderAction() { }
        EntityScopedLoaderActions.EntityScopedLoaderAction = EntityScopedLoaderAction;
        if (false) {
            /** @type {?|undefined} */
            EntityScopedLoaderAction.prototype.payload;
            /** @type {?|undefined} */
            EntityScopedLoaderAction.prototype.meta;
        }
        /**
         * @param {?} entityType
         * @param {?} id
         * @param {?=} scope
         * @return {?}
         */
        function entityScopedLoadMeta(entityType, id, scope) {
            return __assign({}, entityLoadMeta(entityType, id), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedLoadMeta = entityScopedLoadMeta;
        /**
         * @param {?} entityType
         * @param {?} id
         * @param {?=} scope
         * @param {?=} error
         * @return {?}
         */
        function entityScopedFailMeta(entityType, id, scope, error) {
            return __assign({}, entityFailMeta(entityType, id, error), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedFailMeta = entityScopedFailMeta;
        /**
         * @param {?} entityType
         * @param {?} id
         * @param {?=} scope
         * @return {?}
         */
        function entityScopedSuccessMeta(entityType, id, scope) {
            return __assign({}, entitySuccessMeta(entityType, id), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedSuccessMeta = entityScopedSuccessMeta;
        /**
         * @param {?} entityType
         * @param {?} id
         * @param {?=} scope
         * @return {?}
         */
        function entityScopedResetMeta(entityType, id, scope) {
            return __assign({}, entityResetMeta(entityType, id), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedResetMeta = entityScopedResetMeta;
        var EntityScopedLoadAction = /** @class */ (function () {
            function EntityScopedLoadAction(entityType, id, scope) {
                this.type = ENTITY_LOAD_ACTION;
                this.meta = entityScopedLoadMeta(entityType, id, scope);
            }
            return EntityScopedLoadAction;
        }());
        EntityScopedLoaderActions.EntityScopedLoadAction = EntityScopedLoadAction;
        if (false) {
            /** @type {?} */
            EntityScopedLoadAction.prototype.type;
            /** @type {?} */
            EntityScopedLoadAction.prototype.meta;
        }
        var EntityScopedFailAction = /** @class */ (function () {
            function EntityScopedFailAction(entityType, id, scope, error) {
                this.type = ENTITY_FAIL_ACTION;
                this.meta = entityScopedFailMeta(entityType, id, scope, error);
            }
            return EntityScopedFailAction;
        }());
        EntityScopedLoaderActions.EntityScopedFailAction = EntityScopedFailAction;
        if (false) {
            /** @type {?} */
            EntityScopedFailAction.prototype.type;
            /** @type {?} */
            EntityScopedFailAction.prototype.meta;
        }
        var EntityScopedSuccessAction = /** @class */ (function () {
            function EntityScopedSuccessAction(entityType, id, scope, payload) {
                this.payload = payload;
                this.type = ENTITY_SUCCESS_ACTION;
                this.meta = entityScopedSuccessMeta(entityType, id, scope);
            }
            return EntityScopedSuccessAction;
        }());
        EntityScopedLoaderActions.EntityScopedSuccessAction = EntityScopedSuccessAction;
        if (false) {
            /** @type {?} */
            EntityScopedSuccessAction.prototype.type;
            /** @type {?} */
            EntityScopedSuccessAction.prototype.meta;
            /** @type {?} */
            EntityScopedSuccessAction.prototype.payload;
        }
        var EntityScopedResetAction = /** @class */ (function () {
            function EntityScopedResetAction(entityType, id, scope) {
                this.type = ENTITY_RESET_ACTION;
                this.meta = entityScopedResetMeta(entityType, id, scope);
            }
            return EntityScopedResetAction;
        }());
        EntityScopedLoaderActions.EntityScopedResetAction = EntityScopedResetAction;
        if (false) {
            /** @type {?} */
            EntityScopedResetAction.prototype.type;
            /** @type {?} */
            EntityScopedResetAction.prototype.meta;
        }
    })(EntityScopedLoaderActions || (EntityScopedLoaderActions = {}));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOAD_PRODUCT = '[Product] Load Product Data';
    /** @type {?} */
    var LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';
    /** @type {?} */
    var LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';
    /**
     * @record
     */
    function ProductMeta() { }
    if (false) {
        /** @type {?|undefined} */
        ProductMeta.prototype.scope;
    }
    /**
     * @record
     */
    function EntityScopedLoaderAction() { }
    if (false) {
        /** @type {?|undefined} */
        EntityScopedLoaderAction.prototype.payload;
        /** @type {?|undefined} */
        EntityScopedLoaderAction.prototype.meta;
    }
    var LoadProduct = /** @class */ (function (_super) {
        __extends(LoadProduct, _super);
        function LoadProduct(payload, scope) {
            if (scope === void 0) { scope = ''; }
            var _this = _super.call(this, PRODUCT_DETAIL_ENTITY, payload, scope) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT;
            return _this;
        }
        return LoadProduct;
    }(EntityScopedLoaderActions.EntityScopedLoadAction));
    if (false) {
        /** @type {?} */
        LoadProduct.prototype.type;
        /** @type {?} */
        LoadProduct.prototype.payload;
    }
    var LoadProductFail = /** @class */ (function (_super) {
        __extends(LoadProductFail, _super);
        function LoadProductFail(productCode, payload, scope) {
            if (scope === void 0) { scope = ''; }
            var _this = _super.call(this, PRODUCT_DETAIL_ENTITY, productCode, scope, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_FAIL;
            return _this;
        }
        return LoadProductFail;
    }(EntityScopedLoaderActions.EntityScopedFailAction));
    if (false) {
        /** @type {?} */
        LoadProductFail.prototype.type;
        /** @type {?} */
        LoadProductFail.prototype.payload;
    }
    var LoadProductSuccess = /** @class */ (function (_super) {
        __extends(LoadProductSuccess, _super);
        function LoadProductSuccess(payload, scope) {
            if (scope === void 0) { scope = ''; }
            var _this = _super.call(this, PRODUCT_DETAIL_ENTITY, payload.code, scope) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_SUCCESS;
            return _this;
        }
        return LoadProductSuccess;
    }(EntityScopedLoaderActions.EntityScopedSuccessAction));
    if (false) {
        /** @type {?} */
        LoadProductSuccess.prototype.type;
        /** @type {?} */
        LoadProductSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var productGroup_actions = /*#__PURE__*/Object.freeze({
        LOAD_PRODUCT_REFERENCES: LOAD_PRODUCT_REFERENCES,
        LOAD_PRODUCT_REFERENCES_FAIL: LOAD_PRODUCT_REFERENCES_FAIL,
        LOAD_PRODUCT_REFERENCES_SUCCESS: LOAD_PRODUCT_REFERENCES_SUCCESS,
        CLEAN_PRODUCT_REFERENCES: CLEAN_PRODUCT_REFERENCES,
        LoadProductReferences: LoadProductReferences,
        LoadProductReferencesFail: LoadProductReferencesFail,
        LoadProductReferencesSuccess: LoadProductReferencesSuccess,
        CleanProductReferences: CleanProductReferences,
        LOAD_PRODUCT_REVIEWS: LOAD_PRODUCT_REVIEWS,
        LOAD_PRODUCT_REVIEWS_FAIL: LOAD_PRODUCT_REVIEWS_FAIL,
        LOAD_PRODUCT_REVIEWS_SUCCESS: LOAD_PRODUCT_REVIEWS_SUCCESS,
        POST_PRODUCT_REVIEW: POST_PRODUCT_REVIEW,
        POST_PRODUCT_REVIEW_FAIL: POST_PRODUCT_REVIEW_FAIL,
        POST_PRODUCT_REVIEW_SUCCESS: POST_PRODUCT_REVIEW_SUCCESS,
        LoadProductReviews: LoadProductReviews,
        LoadProductReviewsFail: LoadProductReviewsFail,
        LoadProductReviewsSuccess: LoadProductReviewsSuccess,
        PostProductReview: PostProductReview,
        PostProductReviewFail: PostProductReviewFail,
        PostProductReviewSuccess: PostProductReviewSuccess,
        SEARCH_PRODUCTS: SEARCH_PRODUCTS,
        SEARCH_PRODUCTS_FAIL: SEARCH_PRODUCTS_FAIL,
        SEARCH_PRODUCTS_SUCCESS: SEARCH_PRODUCTS_SUCCESS,
        GET_PRODUCT_SUGGESTIONS: GET_PRODUCT_SUGGESTIONS,
        GET_PRODUCT_SUGGESTIONS_SUCCESS: GET_PRODUCT_SUGGESTIONS_SUCCESS,
        GET_PRODUCT_SUGGESTIONS_FAIL: GET_PRODUCT_SUGGESTIONS_FAIL,
        CLEAR_PRODUCT_SEARCH_RESULT: CLEAR_PRODUCT_SEARCH_RESULT,
        SearchProducts: SearchProducts,
        SearchProductsFail: SearchProductsFail,
        SearchProductsSuccess: SearchProductsSuccess,
        GetProductSuggestions: GetProductSuggestions,
        GetProductSuggestionsSuccess: GetProductSuggestionsSuccess,
        GetProductSuggestionsFail: GetProductSuggestionsFail,
        ClearProductSearchResult: ClearProductSearchResult,
        LOAD_PRODUCT: LOAD_PRODUCT,
        LOAD_PRODUCT_FAIL: LOAD_PRODUCT_FAIL,
        LOAD_PRODUCT_SUCCESS: LOAD_PRODUCT_SUCCESS,
        LoadProduct: LoadProduct,
        LoadProductFail: LoadProductFail,
        LoadProductSuccess: LoadProductSuccess
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getProductsState = store.createFeatureSelector(PRODUCT_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$F = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.references; };
    /** @type {?} */
    var getProductReferencesState = store.createSelector(getProductsState, (ɵ0$F));
    /** @type {?} */
    var getSelectedProductReferencesFactory = (/**
     * @param {?} productCode
     * @param {?} referenceType
     * @return {?}
     */
    function (productCode, referenceType) {
        return store.createSelector(getProductReferencesState, (/**
         * @param {?} referenceTypeData
         * @return {?}
         */
        function (referenceTypeData) {
            if (referenceTypeData.productCode === productCode) {
                if (!!referenceTypeData.list) {
                    if (referenceType) {
                        return referenceTypeData.list.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.referenceType === referenceType; }));
                    }
                    return referenceTypeData.list;
                }
                else {
                    return [];
                }
            }
        }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$G = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.reviews; };
    /** @type {?} */
    var getProductReviewsState = store.createSelector(getProductsState, (ɵ0$G));
    /** @type {?} */
    var getSelectedProductReviewsFactory = (/**
     * @param {?} productCode
     * @return {?}
     */
    function (productCode) {
        return store.createSelector(getProductReviewsState, (/**
         * @param {?} reviewData
         * @return {?}
         */
        function (reviewData) {
            if (reviewData.productCode === productCode) {
                return reviewData.list;
            }
        }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$i = {
        results: {},
        suggestions: [],
        auxResults: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$i(state, action) {
        if (state === void 0) { state = initialState$i; }
        switch (action.type) {
            case SEARCH_PRODUCTS_SUCCESS: {
                /** @type {?} */
                var results = action.payload;
                /** @type {?} */
                var res = action.auxiliary ? { auxResults: results } : { results: results };
                return __assign({}, state, res);
            }
            case GET_PRODUCT_SUGGESTIONS_SUCCESS: {
                /** @type {?} */
                var suggestions = action.payload;
                return __assign({}, state, { suggestions: suggestions });
            }
            case CLEAR_PRODUCT_SEARCH_RESULT: {
                return __assign({}, state, { results: action.payload.clearPageResults ? {} : state.results, suggestions: action.payload.clearSearchboxResults
                        ? []
                        : state.suggestions, auxResults: action.payload.clearSearchboxResults
                        ? {}
                        : state.auxResults });
            }
        }
        return state;
    }
    /** @type {?} */
    var getSearchResults = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.results; });
    /** @type {?} */
    var getAuxSearchResults = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.auxResults; });
    /** @type {?} */
    var getProductSuggestions = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.suggestions; });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$H = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.search; };
    /** @type {?} */
    var getProductsSearchState = store.createSelector(getProductsState, (ɵ0$H));
    /** @type {?} */
    var getSearchResults$1 = store.createSelector(getProductsSearchState, getSearchResults);
    /** @type {?} */
    var getAuxSearchResults$1 = store.createSelector(getProductsSearchState, getAuxSearchResults);
    /** @type {?} */
    var getProductSuggestions$1 = store.createSelector(getProductsSearchState, getProductSuggestions);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$I = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.details; };
    /** @type {?} */
    var getProductState = store.createSelector(getProductsState, (ɵ0$I));
    /** @type {?} */
    var getSelectedProductsFactory = (/**
     * @param {?} codes
     * @return {?}
     */
    function (codes) {
        return store.createSelector(getProductState, (/**
         * @param {?} details
         * @return {?}
         */
        function (details) {
            return codes
                .map((/**
             * @param {?} code
             * @return {?}
             */
            function (code) {
                return details.entities[code] ? details.entities[code].value : undefined;
            }))
                .filter((/**
             * @param {?} product
             * @return {?}
             */
            function (product) { return product !== undefined; }));
        }));
    });
    /** @type {?} */
    var getSelectedProductStateFactory = (/**
     * @param {?} code
     * @param {?=} scope
     * @return {?}
     */
    function (code, scope) {
        return store.createSelector(getProductState, (/**
         * @param {?} details
         * @return {?}
         */
        function (details) {
            return scope
                ? entityStateSelector(details, code)[scope] || initialLoaderState
                : entityStateSelector(details, code);
        }));
    });
    /** @type {?} */
    var getSelectedProductFactory = (/**
     * @param {?} code
     * @param {?=} scope
     * @return {?}
     */
    function (code, scope) {
        return store.createSelector(getSelectedProductStateFactory(code, scope), (/**
         * @param {?} productState
         * @return {?}
         */
        function (productState) { return loaderValueSelector(productState); }));
    });
    /** @type {?} */
    var getSelectedProductLoadingFactory = (/**
     * @param {?} code
     * @param {?=} scope
     * @return {?}
     */
    function (code, scope) {
        return store.createSelector(getSelectedProductStateFactory(code, scope), (/**
         * @param {?} productState
         * @return {?}
         */
        function (productState) { return loaderLoadingSelector(productState); }));
    });
    /** @type {?} */
    var getSelectedProductSuccessFactory = (/**
     * @param {?} code
     * @param {?=} scope
     * @return {?}
     */
    function (code, scope) {
        return store.createSelector(getSelectedProductStateFactory(code, scope), (/**
         * @param {?} productState
         * @return {?}
         */
        function (productState) { return loaderSuccessSelector(productState); }));
    });
    /** @type {?} */
    var getSelectedProductErrorFactory = (/**
     * @param {?} code
     * @param {?=} scope
     * @return {?}
     */
    function (code, scope) {
        return store.createSelector(getSelectedProductStateFactory(code, scope), (/**
         * @param {?} productState
         * @return {?}
         */
        function (productState) { return loaderErrorSelector(productState); }));
    });
    var ɵ1$t = /**
     * @param {?} details
     * @return {?}
     */
    function (details) {
        return Object.keys(details.entities);
    };
    /** @type {?} */
    var getAllProductCodes = store.createSelector(getProductState, (ɵ1$t));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var productGroup_selectors = /*#__PURE__*/Object.freeze({
        getProductsState: getProductsState,
        getProductReferencesState: getProductReferencesState,
        getSelectedProductReferencesFactory: getSelectedProductReferencesFactory,
        getProductReviewsState: getProductReviewsState,
        getSelectedProductReviewsFactory: getSelectedProductReviewsFactory,
        getProductsSearchState: getProductsSearchState,
        getSearchResults: getSearchResults$1,
        getAuxSearchResults: getAuxSearchResults$1,
        getProductSuggestions: getProductSuggestions$1,
        getProductState: getProductState,
        getSelectedProductsFactory: getSelectedProductsFactory,
        getSelectedProductStateFactory: getSelectedProductStateFactory,
        getSelectedProductFactory: getSelectedProductFactory,
        getSelectedProductLoadingFactory: getSelectedProductLoadingFactory,
        getSelectedProductSuccessFactory: getSelectedProductSuccessFactory,
        getSelectedProductErrorFactory: getSelectedProductErrorFactory,
        getAllProductCodes: getAllProductCodes
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductReferenceService = /** @class */ (function () {
        function ProductReferenceService(store) {
            this.store = store;
        }
        /**
         * @param {?} productCode
         * @param {?=} referenceType
         * @param {?=} pageSize
         * @return {?}
         */
        ProductReferenceService.prototype.get = /**
         * @param {?} productCode
         * @param {?=} referenceType
         * @param {?=} pageSize
         * @return {?}
         */
        function (productCode, referenceType, pageSize) {
            var _this = this;
            return this.store.pipe(store.select(getSelectedProductReferencesFactory(productCode, referenceType)), operators.tap((/**
             * @param {?} references
             * @return {?}
             */
            function (references) {
                if (references === undefined && productCode !== undefined) {
                    _this.store.dispatch(new LoadProductReferences({
                        productCode: productCode,
                        referenceType: referenceType,
                        pageSize: pageSize,
                    }));
                }
            })));
        };
        /**
         * @return {?}
         */
        ProductReferenceService.prototype.cleanReferences = /**
         * @return {?}
         */
        function () {
            this.store.dispatch(new CleanProductReferences());
        };
        ProductReferenceService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductReferenceService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        return ProductReferenceService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductReferenceService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductReviewService = /** @class */ (function () {
        function ProductReviewService(store) {
            this.store = store;
        }
        /**
         * @param {?} productCode
         * @return {?}
         */
        ProductReviewService.prototype.getByProductCode = /**
         * @param {?} productCode
         * @return {?}
         */
        function (productCode) {
            var _this = this;
            return this.store.pipe(store.select(getSelectedProductReviewsFactory(productCode)), operators.tap((/**
             * @param {?} reviews
             * @return {?}
             */
            function (reviews) {
                if (reviews === undefined && productCode !== undefined) {
                    _this.store.dispatch(new LoadProductReviews(productCode));
                }
            })));
        };
        /**
         * @param {?} productCode
         * @param {?} review
         * @return {?}
         */
        ProductReviewService.prototype.add = /**
         * @param {?} productCode
         * @param {?} review
         * @return {?}
         */
        function (productCode, review) {
            this.store.dispatch(new PostProductReview({
                productCode: productCode,
                review: review,
            }));
        };
        ProductReviewService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductReviewService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        return ProductReviewService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductReviewService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductSearchService = /** @class */ (function () {
        function ProductSearchService(store) {
            this.store = store;
        }
        /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        ProductSearchService.prototype.search = /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        function (query, searchConfig) {
            this.store.dispatch(new SearchProducts({
                queryText: query,
                searchConfig: searchConfig,
            }));
        };
        /**
         * @return {?}
         */
        ProductSearchService.prototype.getResults = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getSearchResults$1));
        };
        /**
         * @return {?}
         */
        ProductSearchService.prototype.clearResults = /**
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearProductSearchResult({
                clearPageResults: true,
            }));
        };
        ProductSearchService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductSearchService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        return ProductSearchService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductSearchService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductLoadingService = /** @class */ (function () {
        function ProductLoadingService(store, loadingScopes, actions$, platformId) {
            this.store = store;
            this.loadingScopes = loadingScopes;
            this.actions$ = actions$;
            this.platformId = platformId;
            this.products = {};
        }
        /**
         * @param {?} productCode
         * @param {?} scopes
         * @return {?}
         */
        ProductLoadingService.prototype.get = /**
         * @param {?} productCode
         * @param {?} scopes
         * @return {?}
         */
        function (productCode, scopes) {
            scopes = this.loadingScopes.expand('product', scopes);
            this.initProductScopes(productCode, scopes);
            return this.products[productCode][this.getScopesIndex(scopes)];
        };
        /**
         * @protected
         * @param {?} productCode
         * @param {?} scopes
         * @return {?}
         */
        ProductLoadingService.prototype.initProductScopes = /**
         * @protected
         * @param {?} productCode
         * @param {?} scopes
         * @return {?}
         */
        function (productCode, scopes) {
            var e_1, _a;
            var _this = this;
            if (!this.products[productCode]) {
                this.products[productCode] = {};
            }
            try {
                for (var scopes_1 = __values(scopes), scopes_1_1 = scopes_1.next(); !scopes_1_1.done; scopes_1_1 = scopes_1.next()) {
                    var scope = scopes_1_1.value;
                    if (!this.products[productCode][scope]) {
                        this.products[productCode][scope] = this.getProductForScope(productCode, scope);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (scopes_1_1 && !scopes_1_1.done && (_a = scopes_1.return)) _a.call(scopes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (scopes.length > 1) {
                this.products[productCode][this.getScopesIndex(scopes)] = rxjs.combineLatest(scopes.map((/**
                 * @param {?} scope
                 * @return {?}
                 */
                function (scope) { return _this.products[productCode][scope]; }))).pipe(operators.auditTime(0), operators.map((/**
                 * @param {?} productParts
                 * @return {?}
                 */
                function (productParts) {
                    return productParts.every(Boolean)
                        ? deepMerge.apply(void 0, __spread([{}], productParts)) : undefined;
                })), operators.distinctUntilChanged());
            }
        };
        /**
         * @protected
         * @param {?} scopes
         * @return {?}
         */
        ProductLoadingService.prototype.getScopesIndex = /**
         * @protected
         * @param {?} scopes
         * @return {?}
         */
        function (scopes) {
            return scopes.join('ɵ');
        };
        /**
         * Creates observable for providing specified product data for the scope
         *
         * @param productCode
         * @param scope
         */
        /**
         * Creates observable for providing specified product data for the scope
         *
         * @protected
         * @param {?} productCode
         * @param {?} scope
         * @return {?}
         */
        ProductLoadingService.prototype.getProductForScope = /**
         * Creates observable for providing specified product data for the scope
         *
         * @protected
         * @param {?} productCode
         * @param {?} scope
         * @return {?}
         */
        function (productCode, scope) {
            var _this = this;
            /** @type {?} */
            var shouldLoad$ = this.store.pipe(store.select(getSelectedProductStateFactory(productCode, scope)), operators.map((/**
             * @param {?} productState
             * @return {?}
             */
            function (productState) {
                return !productState.loading && !productState.success && !productState.error;
            })), operators.distinctUntilChanged(), operators.filter((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x; })));
            /** @type {?} */
            var isLoading$ = this.store.pipe(store.select(getSelectedProductLoadingFactory(productCode, scope)));
            /** @type {?} */
            var productLoadLogic$ = rxjs.merge.apply(void 0, __spread([shouldLoad$], this.getProductReloadTriggers(productCode, scope))).pipe(operators.debounceTime(0), operators.withLatestFrom(isLoading$), operators.tap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), isLoading = _b[1];
                if (!isLoading) {
                    _this.store.dispatch(new LoadProduct(productCode, scope));
                }
            })));
            /** @type {?} */
            var productData$ = this.store.pipe(store.select(getSelectedProductFactory(productCode, scope)));
            return rxjs.using((/**
             * @return {?}
             */
            function () { return productLoadLogic$.subscribe(); }), (/**
             * @return {?}
             */
            function () { return productData$; })).pipe(operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Returns reload triggers for product per scope
         *
         * @param productCode
         * @param scope
         */
        /**
         * Returns reload triggers for product per scope
         *
         * @protected
         * @param {?} productCode
         * @param {?} scope
         * @return {?}
         */
        ProductLoadingService.prototype.getProductReloadTriggers = /**
         * Returns reload triggers for product per scope
         *
         * @protected
         * @param {?} productCode
         * @param {?} scope
         * @return {?}
         */
        function (productCode, scope) {
            /** @type {?} */
            var triggers = [];
            // max age trigger add
            /** @type {?} */
            var maxAge = this.loadingScopes.getMaxAge('product', scope);
            if (maxAge && common.isPlatformBrowser(this.platformId)) {
                // we want to grab load product success and load product fail for this product and scope
                /** @type {?} */
                var loadFinish$ = this.actions$.pipe(operators.filter((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) {
                    return (action.type === LOAD_PRODUCT_SUCCESS ||
                        action.type === LOAD_PRODUCT_FAIL) &&
                        action.meta.entityId === productCode &&
                        action.meta.scope === scope;
                })));
                /** @type {?} */
                var loadStart$ = this.actions$.pipe(effects$d.ofType(LOAD_PRODUCT), operators.filter((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) {
                    return action.payload === productCode && action.meta.scope === scope;
                })));
                triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));
            }
            return triggers;
        };
        /**
         * Generic method that returns stream triggering reload by maxAge
         *
         * Could be refactored to separate service in future to use in other
         * max age reload implementations
         *
         * @param loadStart$ Stream that emits on load start
         * @param loadFinish$ Stream that emits on load finish
         * @param maxAge max age
         */
        /**
         * Generic method that returns stream triggering reload by maxAge
         *
         * Could be refactored to separate service in future to use in other
         * max age reload implementations
         *
         * @private
         * @param {?} loadStart$ Stream that emits on load start
         * @param {?} loadFinish$ Stream that emits on load finish
         * @param {?} maxAge max age
         * @param {?=} scheduler
         * @return {?}
         */
        ProductLoadingService.prototype.getMaxAgeTrigger = /**
         * Generic method that returns stream triggering reload by maxAge
         *
         * Could be refactored to separate service in future to use in other
         * max age reload implementations
         *
         * @private
         * @param {?} loadStart$ Stream that emits on load start
         * @param {?} loadFinish$ Stream that emits on load finish
         * @param {?} maxAge max age
         * @param {?=} scheduler
         * @return {?}
         */
        function (loadStart$, loadFinish$, maxAge, scheduler) {
            /** @type {?} */
            var timestamp = 0;
            /** @type {?} */
            var now = (/**
             * @return {?}
             */
            function () { return (scheduler ? scheduler.now() : Date.now()); });
            /** @type {?} */
            var timestamp$ = loadFinish$.pipe(operators.tap((/**
             * @return {?}
             */
            function () { return (timestamp = now()); })));
            /** @type {?} */
            var shouldReload$ = rxjs.defer((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var age = now() - timestamp;
                /** @type {?} */
                var timestampRefresh$ = timestamp$.pipe(operators.delay(maxAge, scheduler), operators.mapTo(true), withdrawOn(loadStart$));
                if (age > maxAge) {
                    // we should emit first value immediately
                    return rxjs.merge(rxjs.of(true), timestampRefresh$);
                }
                else if (age === 0) {
                    // edge case, we should emit max age timeout after next load success
                    // could happen with artificial schedulers
                    return timestampRefresh$;
                }
                else {
                    // we should emit first value when age will expire
                    return rxjs.merge(rxjs.of(true).pipe(operators.delay(maxAge - age, scheduler)), timestampRefresh$);
                }
            }));
            return shouldReload$;
        };
        ProductLoadingService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ProductLoadingService.ctorParameters = function () { return [
            { type: store.Store },
            { type: LoadingScopesService },
            { type: effects$d.Actions },
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        /** @nocollapse */ ProductLoadingService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductLoadingService_Factory() { return new ProductLoadingService(core.ɵɵinject(store.Store), core.ɵɵinject(LoadingScopesService), core.ɵɵinject(effects$d.Actions), core.ɵɵinject(core.PLATFORM_ID)); }, token: ProductLoadingService, providedIn: "root" });
        return ProductLoadingService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductLoadingService.prototype.products;
        /**
         * @type {?}
         * @protected
         */
        ProductLoadingService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        ProductLoadingService.prototype.loadingScopes;
        /**
         * @type {?}
         * @protected
         */
        ProductLoadingService.prototype.actions$;
        /**
         * @type {?}
         * @protected
         */
        ProductLoadingService.prototype.platformId;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductService = /** @class */ (function () {
        function ProductService(store, productLoading) {
            this.store = store;
            this.productLoading = productLoading;
            /**
             * @deprecated since 1.4
             */
            this.products = {};
        }
        /**
         * Returns the product observable. The product will be loaded
         * whenever there's no value observed.
         *
         * The underlying product loader ensures that the product is
         * only loaded once, even in case of parallel observers.
         *
         * You should provide product data scope you are interested in to not load all
         * the data if not needed. You can provide more than one scope.
         *
         * @param productCode Product code to load
         * @param scopes Scope or scopes of the product data
         */
        /**
         * Returns the product observable. The product will be loaded
         * whenever there's no value observed.
         *
         * The underlying product loader ensures that the product is
         * only loaded once, even in case of parallel observers.
         *
         * You should provide product data scope you are interested in to not load all
         * the data if not needed. You can provide more than one scope.
         *
         * @param {?} productCode Product code to load
         * @param {?=} scopes Scope or scopes of the product data
         * @return {?}
         */
        ProductService.prototype.get = /**
         * Returns the product observable. The product will be loaded
         * whenever there's no value observed.
         *
         * The underlying product loader ensures that the product is
         * only loaded once, even in case of parallel observers.
         *
         * You should provide product data scope you are interested in to not load all
         * the data if not needed. You can provide more than one scope.
         *
         * @param {?} productCode Product code to load
         * @param {?=} scopes Scope or scopes of the product data
         * @return {?}
         */
        function (productCode, scopes) {
            var _this = this;
            if (scopes === void 0) { scopes = ''; }
            // TODO: Remove, deprecated since 1.4
            if (!this.productLoading) {
                if (!this.products[productCode]) {
                    this.products[productCode] = this.store.pipe(store.select(getSelectedProductStateFactory(productCode)), operators.observeOn(rxjs.queueScheduler), operators.tap((/**
                     * @param {?} productState
                     * @return {?}
                     */
                    function (productState) {
                        /** @type {?} */
                        var attemptedLoad = productState.loading ||
                            productState.success ||
                            productState.error;
                        if (!attemptedLoad) {
                            _this.store.dispatch(new LoadProduct(productCode));
                        }
                    })), operators.map((/**
                     * @param {?} productState
                     * @return {?}
                     */
                    function (productState) { return productState.value; })), operators.shareReplay({ bufferSize: 1, refCount: true }));
                }
                return this.products[productCode];
            }
            // END OF (TODO: Remove, deprecated since 1.4)
            return this.productLoading.get(productCode, [].concat(scopes));
        };
        /**
         * Returns boolean observable for product's loading state
         */
        /**
         * Returns boolean observable for product's loading state
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        ProductService.prototype.isLoading = /**
         * Returns boolean observable for product's loading state
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.store.pipe(store.select(getSelectedProductLoadingFactory(productCode, scope)));
        };
        /**
         * Returns boolean observable for product's load success state
         */
        /**
         * Returns boolean observable for product's load success state
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        ProductService.prototype.isSuccess = /**
         * Returns boolean observable for product's load success state
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.store.pipe(store.select(getSelectedProductSuccessFactory(productCode, scope)));
        };
        /**
         * Returns boolean observable for product's load error state
         */
        /**
         * Returns boolean observable for product's load error state
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        ProductService.prototype.hasError = /**
         * Returns boolean observable for product's load error state
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.store.pipe(store.select(getSelectedProductErrorFactory(productCode, scope)));
        };
        /**
         * Reloads the product. The product is loaded implicetly
         * whenever selected by the `get`, but in some cases an
         * explicit reload might be needed.
         */
        /**
         * Reloads the product. The product is loaded implicetly
         * whenever selected by the `get`, but in some cases an
         * explicit reload might be needed.
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        ProductService.prototype.reload = /**
         * Reloads the product. The product is loaded implicetly
         * whenever selected by the `get`, but in some cases an
         * explicit reload might be needed.
         * @param {?} productCode
         * @param {?=} scope
         * @return {?}
         */
        function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            this.store.dispatch(new LoadProduct(productCode, scope));
        };
        ProductService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductService.ctorParameters = function () { return [
            { type: store.Store },
            { type: ProductLoadingService }
        ]; };
        return ProductService;
    }());
    if (false) {
        /**
         * @deprecated since 1.4
         * @type {?}
         * @private
         */
        ProductService.prototype.products;
        /**
         * @type {?}
         * @protected
         */
        ProductService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        ProductService.prototype.productLoading;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchboxService = /** @class */ (function (_super) {
        __extends(SearchboxService, _super);
        function SearchboxService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * dispatch the search for the search box
         */
        /**
         * dispatch the search for the search box
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        SearchboxService.prototype.search = /**
         * dispatch the search for the search box
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        function (query, searchConfig) {
            this.store.dispatch(new SearchProducts({
                queryText: query,
                searchConfig: searchConfig,
            }, true));
        };
        /**
         * @return {?}
         */
        SearchboxService.prototype.getResults = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAuxSearchResults$1));
        };
        /**
         * clears the products and suggestions
         */
        /**
         * clears the products and suggestions
         * @return {?}
         */
        SearchboxService.prototype.clearResults = /**
         * clears the products and suggestions
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearProductSearchResult({
                clearSearchboxResults: true,
            }));
        };
        /**
         * @return {?}
         */
        SearchboxService.prototype.getSuggestionResults = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProductSuggestions$1));
        };
        /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        SearchboxService.prototype.searchSuggestions = /**
         * @param {?} query
         * @param {?=} searchConfig
         * @return {?}
         */
        function (query, searchConfig) {
            this.store.dispatch(new GetProductSuggestions({
                term: query,
                searchConfig: searchConfig,
            }));
        };
        SearchboxService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ SearchboxService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SearchboxService_Factory() { return new SearchboxService(core.ɵɵinject(store.Store)); }, token: SearchboxService, providedIn: "root" });
        return SearchboxService;
    }(ProductSearchService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function SearchConfig() { }
    if (false) {
        /** @type {?|undefined} */
        SearchConfig.prototype.pageSize;
        /** @type {?|undefined} */
        SearchConfig.prototype.currentPage;
        /** @type {?|undefined} */
        SearchConfig.prototype.sortCode;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Resolves the page data for the Product Listing Page
     * based on the `PageType.CATEGORY_PAGE`.
     *
     * The page title, and breadcrumbs are resolved in this implementation only.
     */
    var CategoryPageMetaResolver = /** @class */ (function (_super) {
        __extends(CategoryPageMetaResolver, _super);
        function CategoryPageMetaResolver(routingService, productSearchService, cms, translation) {
            var _this = _super.call(this) || this;
            _this.routingService = routingService;
            _this.productSearchService = productSearchService;
            _this.cms = cms;
            _this.translation = translation;
            // reusable observable for search page data
            _this.searchPage$ = _this.cms.getCurrentPage().pipe(operators.filter(Boolean), operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                // only the existence of a plp component tells us if products
                // are rendered or if this is an ordinary content page
                return _this.hasProductListComponent(page)
                    ? _this.productSearchService.getResults().pipe(operators.filter(Boolean))
                    : rxjs.of(page);
            })));
            _this.pageType = PageType.CATEGORY_PAGE;
            return _this;
        }
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         */
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        CategoryPageMetaResolver.prototype.resolve = /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.cms.getCurrentPage().pipe(operators.filter(Boolean), operators.switchMap((/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                // only the existence of a plp component tells us if products
                // are rendered or if this is an ordinary content page
                if (_this.hasProductListComponent(page)) {
                    return _this.productSearchService.getResults().pipe(operators.filter((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) { return data.breadcrumbs && data.breadcrumbs.length > 0; })), operators.switchMap((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        return rxjs.combineLatest([
                            _this.resolveTitle(data),
                            _this.resolveBreadcrumbLabel().pipe(operators.switchMap((/**
                             * @param {?} label
                             * @return {?}
                             */
                            function (label) { return _this.resolveBreadcrumbs(data, label); }))),
                        ]);
                    })), operators.map((/**
                     * @param {?} __0
                     * @return {?}
                     */
                    function (_a) {
                        var _b = __read(_a, 2), title = _b[0], breadcrumbs = _b[1];
                        return ({ title: title, breadcrumbs: breadcrumbs });
                    })));
                }
                else {
                    return rxjs.of({
                        title: page.title || page.name,
                    });
                }
            })));
        };
        /**
         * @param {?=} searchPage
         * @return {?}
         */
        CategoryPageMetaResolver.prototype.resolveTitle = /**
         * @param {?=} searchPage
         * @return {?}
         */
        function (searchPage) {
            var _this = this;
            /** @type {?} */
            var searchPage$ = searchPage ? rxjs.of(searchPage) : this.searchPage$;
            return searchPage$.pipe(operators.filter((/**
             * @param {?} page
             * @return {?}
             */
            function (page) { return !!page.pagination; })), operators.switchMap((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                return _this.translation.translate('pageMetaResolver.category.title', {
                    count: ((/** @type {?} */ (p))).pagination.totalResults,
                    query: ((/** @type {?} */ (p))).breadcrumbs[0].facetValueName,
                });
            })));
        };
        /**
         * @deprecated since version 1.3
         * This method will removed with with 2.0
         */
        /**
         * @deprecated since version 1.3
         * This method will removed with with 2.0
         * @return {?}
         */
        CategoryPageMetaResolver.prototype.resolveBreadcrumbLabel = /**
         * @deprecated since version 1.3
         * This method will removed with with 2.0
         * @return {?}
         */
        function () {
            return this.translation.translate('common.home');
        };
        /**
         * @param {?=} searchPage
         * @param {?=} breadcrumbLabel
         * @return {?}
         */
        CategoryPageMetaResolver.prototype.resolveBreadcrumbs = /**
         * @param {?=} searchPage
         * @param {?=} breadcrumbLabel
         * @return {?}
         */
        function (searchPage, breadcrumbLabel) {
            var _this = this;
            /** @type {?} */
            var sources = searchPage && breadcrumbLabel
                ? [rxjs.of(searchPage), rxjs.of(breadcrumbLabel)]
                : [this.searchPage$.pipe(), this.translation.translate('common.home')];
            return rxjs.combineLatest(sources).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), p = _b[0], label = _b[1];
                return p.breadcrumbs
                    ? _this.resolveBreadcrumbData((/** @type {?} */ (p)), label)
                    : null;
            })));
        };
        /**
         * @private
         * @param {?} page
         * @param {?} label
         * @return {?}
         */
        CategoryPageMetaResolver.prototype.resolveBreadcrumbData = /**
         * @private
         * @param {?} page
         * @param {?} label
         * @return {?}
         */
        function (page, label) {
            var e_1, _a;
            /** @type {?} */
            var breadcrumbs = [];
            breadcrumbs.push({ label: label, link: '/' });
            try {
                for (var _b = __values(page.breadcrumbs), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var br = _c.value;
                    if (br.facetCode === 'category') {
                        breadcrumbs.push({
                            label: br.facetValueName,
                            link: "/c/" + br.facetValueCode,
                        });
                    }
                    if (br.facetCode === 'brand') {
                        breadcrumbs.push({
                            label: br.facetValueName,
                            link: "/Brands/" + br.facetValueName + "/c/" + br.facetValueCode,
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return breadcrumbs;
        };
        /**
         * @private
         * @param {?} page
         * @return {?}
         */
        CategoryPageMetaResolver.prototype.hasProductListComponent = /**
         * @private
         * @param {?} page
         * @return {?}
         */
        function (page) {
            return !!Object.keys(page.slots).find((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                return !!page.slots[key].components.find((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    return comp.typeCode === 'CMSProductListComponent' ||
                        comp.typeCode === 'ProductGridComponent';
                }));
            }));
        };
        CategoryPageMetaResolver.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CategoryPageMetaResolver.ctorParameters = function () { return [
            { type: RoutingService },
            { type: ProductSearchService },
            { type: CmsService },
            { type: TranslationService }
        ]; };
        /** @nocollapse */ CategoryPageMetaResolver.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CategoryPageMetaResolver_Factory() { return new CategoryPageMetaResolver(core.ɵɵinject(RoutingService), core.ɵɵinject(ProductSearchService), core.ɵɵinject(CmsService), core.ɵɵinject(TranslationService)); }, token: CategoryPageMetaResolver, providedIn: "root" });
        return CategoryPageMetaResolver;
    }(PageMetaResolver));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CategoryPageMetaResolver.prototype.searchPage$;
        /**
         * @type {?}
         * @protected
         */
        CategoryPageMetaResolver.prototype.routingService;
        /**
         * @type {?}
         * @protected
         */
        CategoryPageMetaResolver.prototype.productSearchService;
        /**
         * @type {?}
         * @protected
         */
        CategoryPageMetaResolver.prototype.cms;
        /**
         * @type {?}
         * @protected
         */
        CategoryPageMetaResolver.prototype.translation;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Resolves the page data for the Product Detail Page
     * based on the `PageType.PRODUCT_PAGE`.
     *
     * The page title, heading, description, breadcrumbs and
     * first GALLERY image are resolved if available in the data.
     */
    var ProductPageMetaResolver = /** @class */ (function (_super) {
        __extends(ProductPageMetaResolver, _super);
        function ProductPageMetaResolver(routingService, productService, translation, features) {
            var _this = _super.call(this) || this;
            _this.routingService = routingService;
            _this.productService = productService;
            _this.translation = translation;
            _this.features = features;
            _this.PRODUCT_SCOPE = _this.features && _this.features.isLevel('1.4') ? ProductScope.DETAILS : '';
            // reusable observable for product data based on the current page
            _this.product$ = _this.routingService.getRouterState().pipe(operators.map((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return state.state.params['productCode']; })), operators.filter((/**
             * @param {?} code
             * @return {?}
             */
            function (code) { return !!code; })), operators.switchMap((/**
             * @param {?} code
             * @return {?}
             */
            function (code) { return _this.productService.get(code, _this.PRODUCT_SCOPE); })), operators.filter(Boolean));
            _this.pageType = PageType.PRODUCT_PAGE;
            return _this;
        }
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         */
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolve = /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        function () {
            var _this = this;
            return this.product$.pipe(operators.switchMap((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                return rxjs.combineLatest([
                    _this.resolveHeading(p),
                    _this.resolveTitle(p),
                    _this.resolveDescription(p),
                    _this.resolveBreadcrumbLabel().pipe(operators.switchMap((/**
                     * @param {?} label
                     * @return {?}
                     */
                    function (label) { return _this.resolveBreadcrumbs(p, label); }))),
                    _this.resolveImage(p),
                    _this.resolveRobots(p),
                ]);
            })), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 6), heading = _b[0], title = _b[1], description = _b[2], breadcrumbs = _b[3], image = _b[4], robots = _b[5];
                return ({
                    heading: heading,
                    title: title,
                    description: description,
                    breadcrumbs: breadcrumbs,
                    image: image,
                    robots: robots,
                });
            })));
        };
        /**
         * @param {?=} product
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveHeading = /**
         * @param {?=} product
         * @return {?}
         */
        function (product) {
            var _this = this;
            /** @type {?} */
            var product$ = product ? rxjs.of(product) : this.product$;
            return product$.pipe(operators.switchMap((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                return _this.translation.translate('pageMetaResolver.product.heading', {
                    heading: p.name,
                });
            })));
        };
        /**
         * @param {?=} product
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveTitle = /**
         * @param {?=} product
         * @return {?}
         */
        function (product) {
            var _this = this;
            /** @type {?} */
            var product$ = product ? rxjs.of(product) : this.product$;
            return product$.pipe(operators.switchMap((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                /** @type {?} */
                var title = p.name;
                title += _this.resolveFirstCategory(p);
                title += _this.resolveManufacturer(p);
                return _this.translation.translate('pageMetaResolver.product.title', {
                    title: title,
                });
            })));
        };
        /**
         * @param {?=} product
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveDescription = /**
         * @param {?=} product
         * @return {?}
         */
        function (product) {
            var _this = this;
            /** @type {?} */
            var product$ = product ? rxjs.of(product) : this.product$;
            return product$.pipe(operators.switchMap((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                return _this.translation.translate('pageMetaResolver.product.description', {
                    description: p.summary,
                });
            })));
        };
        /**
         * @deprecated since version 1.3
         * This method will be removed with with 2.0
         */
        /**
         * @deprecated since version 1.3
         * This method will be removed with with 2.0
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveBreadcrumbLabel = /**
         * @deprecated since version 1.3
         * This method will be removed with with 2.0
         * @return {?}
         */
        function () {
            return this.translation.translate('common.home');
        };
        /**
         * @param {?=} product
         * @param {?=} breadcrumbLabel
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveBreadcrumbs = /**
         * @param {?=} product
         * @param {?=} breadcrumbLabel
         * @return {?}
         */
        function (product, breadcrumbLabel) {
            /** @type {?} */
            var sources = product && breadcrumbLabel
                ? [rxjs.of(product), rxjs.of(breadcrumbLabel)]
                : [this.product$.pipe(), this.translation.translate('common.home')];
            return rxjs.combineLatest(sources).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var e_1, _b;
                var _c = __read(_a, 2), p = _c[0], label = _c[1];
                /** @type {?} */
                var breadcrumbs = [];
                breadcrumbs.push({ label: label, link: '/' });
                try {
                    for (var _d = __values(p.categories || []), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var _f = _e.value, name_1 = _f.name, code = _f.code, url = _f.url;
                        breadcrumbs.push({
                            label: name_1 || code,
                            link: url,
                        });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return breadcrumbs;
            })));
        };
        /**
         * @param {?=} product
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveImage = /**
         * @param {?=} product
         * @return {?}
         */
        function (product) {
            /** @type {?} */
            var product$ = product ? rxjs.of(product) : this.product$;
            return product$.pipe(operators.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                return p.images &&
                    p.images.PRIMARY &&
                    ((/** @type {?} */ (p.images.PRIMARY))).zoom &&
                    ((/** @type {?} */ (p.images.PRIMARY))).zoom.url
                    ? ((/** @type {?} */ (p.images.PRIMARY))).zoom.url
                    : null;
            })));
        };
        /**
         * @private
         * @param {?} product
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveFirstCategory = /**
         * @private
         * @param {?} product
         * @return {?}
         */
        function (product) {
            /** @type {?} */
            var firstCategory;
            if (product.categories && product.categories.length > 0) {
                firstCategory = product.categories[0];
            }
            return firstCategory
                ? " | " + (firstCategory.name || firstCategory.code)
                : '';
        };
        /**
         * @private
         * @param {?} product
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveManufacturer = /**
         * @private
         * @param {?} product
         * @return {?}
         */
        function (product) {
            return product.manufacturer ? " | " + product.manufacturer : '';
        };
        /**
         * @param {?=} product
         * @return {?}
         */
        ProductPageMetaResolver.prototype.resolveRobots = /**
         * @param {?=} product
         * @return {?}
         */
        function (product) {
            /** @type {?} */
            var product$ = product ? rxjs.of(product) : this.product$;
            return product$.pipe(operators.switchMap((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                if (!p.purchasable) {
                    return rxjs.of([PageRobotsMeta.FOLLOW, PageRobotsMeta.NOINDEX]);
                }
                else {
                    return rxjs.of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);
                }
            })));
        };
        ProductPageMetaResolver.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        ProductPageMetaResolver.ctorParameters = function () { return [
            { type: RoutingService },
            { type: ProductService },
            { type: TranslationService },
            { type: FeatureConfigService }
        ]; };
        /** @nocollapse */ ProductPageMetaResolver.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ProductPageMetaResolver_Factory() { return new ProductPageMetaResolver(core.ɵɵinject(RoutingService), core.ɵɵinject(ProductService), core.ɵɵinject(TranslationService), core.ɵɵinject(FeatureConfigService)); }, token: ProductPageMetaResolver, providedIn: "root" });
        return ProductPageMetaResolver;
    }(PageMetaResolver));
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ProductPageMetaResolver.prototype.PRODUCT_SCOPE;
        /**
         * @type {?}
         * @private
         */
        ProductPageMetaResolver.prototype.product$;
        /**
         * @type {?}
         * @protected
         */
        ProductPageMetaResolver.prototype.routingService;
        /**
         * @type {?}
         * @protected
         */
        ProductPageMetaResolver.prototype.productService;
        /**
         * @type {?}
         * @protected
         */
        ProductPageMetaResolver.prototype.translation;
        /**
         * @type {?}
         * @protected
         */
        ProductPageMetaResolver.prototype.features;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Resolves the page data for the Search Result Page based on the
     * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.
     *
     * Only the page title is resolved in the implemenation.
     */
    var SearchPageMetaResolver = /** @class */ (function (_super) {
        __extends(SearchPageMetaResolver, _super);
        function SearchPageMetaResolver(routingService, productSearchService, translation) {
            var _this = _super.call(this) || this;
            _this.routingService = routingService;
            _this.productSearchService = productSearchService;
            _this.translation = translation;
            _this.total$ = _this.productSearchService.getResults().pipe(operators.filter((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return !!(data && data.pagination); })), operators.map((/**
             * @param {?} results
             * @return {?}
             */
            function (results) { return results.pagination.totalResults; })));
            _this.query$ = _this.routingService
                .getRouterState()
                .pipe(operators.map((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return state.state.params['query']; })));
            _this.pageType = PageType.CONTENT_PAGE;
            _this.pageTemplate = 'SearchResultsListPageTemplate';
            return _this;
        }
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         */
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        SearchPageMetaResolver.prototype.resolve = /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        function () {
            return this.resolveTitle();
        };
        /**
         * @param {?=} total
         * @param {?=} query
         * @return {?}
         */
        SearchPageMetaResolver.prototype.resolveTitle = /**
         * @param {?=} total
         * @param {?=} query
         * @return {?}
         */
        function (total, query) {
            var _this = this;
            /** @type {?} */
            var sources = total && query ? [rxjs.of(total), rxjs.of(query)] : [this.total$, this.query$];
            return rxjs.combineLatest(sources).pipe(operators.switchMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), t = _b[0], q = _b[1];
                return _this.translation.translate('pageMetaResolver.search.title', {
                    count: t,
                    query: q,
                });
            })));
        };
        SearchPageMetaResolver.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        SearchPageMetaResolver.ctorParameters = function () { return [
            { type: RoutingService },
            { type: ProductSearchService },
            { type: TranslationService }
        ]; };
        /** @nocollapse */ SearchPageMetaResolver.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SearchPageMetaResolver_Factory() { return new SearchPageMetaResolver(core.ɵɵinject(RoutingService), core.ɵɵinject(ProductSearchService), core.ɵɵinject(TranslationService)); }, token: SearchPageMetaResolver, providedIn: "root" });
        return SearchPageMetaResolver;
    }(PageMetaResolver));
    if (false) {
        /** @type {?} */
        SearchPageMetaResolver.prototype.total$;
        /** @type {?} */
        SearchPageMetaResolver.prototype.query$;
        /**
         * @type {?}
         * @protected
         */
        SearchPageMetaResolver.prototype.routingService;
        /**
         * @type {?}
         * @protected
         */
        SearchPageMetaResolver.prototype.productSearchService;
        /**
         * @type {?}
         * @protected
         */
        SearchPageMetaResolver.prototype.translation;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductReferencesEffects = /** @class */ (function () {
        function ProductReferencesEffects(actions$, productReferencesConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.productReferencesConnector = productReferencesConnector;
            this.loadProductReferences$ = this.actions$.pipe(effects$d.ofType(LOAD_PRODUCT_REFERENCES), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.productReferencesConnector
                    .get(payload.productCode, payload.referenceType, payload.pageSize)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new LoadProductReferencesSuccess({
                        productCode: payload.productCode,
                        list: data,
                    });
                })), operators.catchError((/**
                 * @param {?} _error
                 * @return {?}
                 */
                function (_error) {
                    return rxjs.of(new LoadProductReferencesFail((/** @type {?} */ ({
                        message: payload.productCode,
                    }))));
                })));
            })));
        }
        ProductReferencesEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductReferencesEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: ProductReferencesConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductReferencesEffects.prototype, "loadProductReferences$", void 0);
        return ProductReferencesEffects;
    }());
    if (false) {
        /** @type {?} */
        ProductReferencesEffects.prototype.loadProductReferences$;
        /**
         * @type {?}
         * @private
         */
        ProductReferencesEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ProductReferencesEffects.prototype.productReferencesConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductReviewsEffects = /** @class */ (function () {
        function ProductReviewsEffects(actions$, productReviewsConnector, globalMessageService) {
            var _this = this;
            this.actions$ = actions$;
            this.productReviewsConnector = productReviewsConnector;
            this.globalMessageService = globalMessageService;
            this.loadProductReviews$ = this.actions$.pipe(effects$d.ofType(LOAD_PRODUCT_REVIEWS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} productCode
             * @return {?}
             */
            function (productCode) {
                return _this.productReviewsConnector.get(productCode).pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new LoadProductReviewsSuccess({
                        productCode: productCode,
                        list: data,
                    });
                })), operators.catchError((/**
                 * @param {?} _error
                 * @return {?}
                 */
                function (_error) {
                    return rxjs.of(new LoadProductReviewsFail((/** @type {?} */ ({
                        message: productCode,
                    }))));
                })));
            })));
            this.postProductReview = this.actions$.pipe(effects$d.ofType(POST_PRODUCT_REVIEW), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.productReviewsConnector
                    .add(payload.productCode, payload.review)
                    .pipe(operators.map((/**
                 * @param {?} reviewResponse
                 * @return {?}
                 */
                function (reviewResponse) {
                    return new PostProductReviewSuccess(reviewResponse);
                })), operators.catchError((/**
                 * @param {?} _error
                 * @return {?}
                 */
                function (_error) {
                    return rxjs.of(new PostProductReviewFail(payload.productCode));
                })));
            })));
            this.showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(effects$d.ofType(POST_PRODUCT_REVIEW_SUCCESS), operators.tap((/**
             * @return {?}
             */
            function () {
                _this.globalMessageService.add({ key: 'productReview.thankYouForReview' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
            })));
        }
        ProductReviewsEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductReviewsEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: ProductReviewsConnector },
            { type: GlobalMessageService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductReviewsEffects.prototype, "loadProductReviews$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductReviewsEffects.prototype, "postProductReview", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", Object)
        ], ProductReviewsEffects.prototype, "showGlobalMessageOnPostProductReviewSuccess$", void 0);
        return ProductReviewsEffects;
    }());
    if (false) {
        /** @type {?} */
        ProductReviewsEffects.prototype.loadProductReviews$;
        /** @type {?} */
        ProductReviewsEffects.prototype.postProductReview;
        /** @type {?} */
        ProductReviewsEffects.prototype.showGlobalMessageOnPostProductReviewSuccess$;
        /**
         * @type {?}
         * @private
         */
        ProductReviewsEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ProductReviewsEffects.prototype.productReviewsConnector;
        /**
         * @type {?}
         * @private
         */
        ProductReviewsEffects.prototype.globalMessageService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductsSearchEffects = /** @class */ (function () {
        function ProductsSearchEffects(actions$, productSearchConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.productSearchConnector = productSearchConnector;
            this.searchProducts$ = this.actions$.pipe(effects$d.ofType(SEARCH_PRODUCTS), operators.groupBy((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.auxiliary; })), operators.mergeMap((/**
             * @param {?} group
             * @return {?}
             */
            function (group) {
                return group.pipe(operators.switchMap((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) {
                    return _this.productSearchConnector
                        .search(action.payload.queryText, action.payload.searchConfig)
                        .pipe(operators.map((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        return new SearchProductsSuccess(data, action.auxiliary);
                    })), operators.catchError((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        return rxjs.of(new SearchProductsFail(makeErrorSerializable(error), action.auxiliary));
                    })));
                })));
            })));
            this.getProductSuggestions$ = this.actions$.pipe(effects$d.ofType(GET_PRODUCT_SUGGESTIONS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.productSearchConnector
                    .getSuggestions(payload.term, payload.searchConfig.pageSize)
                    .pipe(operators.map((/**
                 * @param {?} suggestions
                 * @return {?}
                 */
                function (suggestions) {
                    if (suggestions === undefined) {
                        return new GetProductSuggestionsSuccess([]);
                    }
                    return new GetProductSuggestionsSuccess(suggestions);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new GetProductSuggestionsFail(makeErrorSerializable(error)));
                })));
            })));
        }
        ProductsSearchEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductsSearchEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: ProductSearchConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductsSearchEffects.prototype, "searchProducts$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductsSearchEffects.prototype, "getProductSuggestions$", void 0);
        return ProductsSearchEffects;
    }());
    if (false) {
        /** @type {?} */
        ProductsSearchEffects.prototype.searchProducts$;
        /** @type {?} */
        ProductsSearchEffects.prototype.getProductSuggestions$;
        /**
         * @type {?}
         * @private
         */
        ProductsSearchEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ProductsSearchEffects.prototype.productSearchConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductEffects = /** @class */ (function () {
        function ProductEffects(actions$, productConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.productConnector = productConnector;
            // we want to cancel all ongoing requests when currency or language changes,
            this.contextChange$ = this.actions$.pipe(effects$d.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.loadProduct$ = effects$d.createEffect((/**
             * @return {?}
             */
            function () { return (/**
             * @param {?=} __0
             * @return {?}
             */
            function (_a) {
                var _b = _a === void 0 ? {} : _a, scheduler = _b.scheduler, _c = _b.debounce, debounce = _c === void 0 ? 0 : _c;
                return _this.actions$.pipe(effects$d.ofType(LOAD_PRODUCT), operators.map((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) { return ({
                    code: action.payload,
                    scope: action.meta.scope,
                }); })), 
                // we are grouping all load actions that happens at the same time
                // to optimize loading and pass them all to productConnector.getMany
                bufferDebounceTime(debounce, scheduler), operators.mergeMap((/**
                 * @param {?} products
                 * @return {?}
                 */
                function (products) {
                    return rxjs.merge.apply(void 0, __spread(_this.productConnector
                        .getMany(products)
                        .map(_this.productLoadEffect)));
                })), withdrawOn(_this.contextChange$));
            }); }));
        }
        /**
         * @private
         * @param {?} productLoad
         * @return {?}
         */
        ProductEffects.prototype.productLoadEffect = /**
         * @private
         * @param {?} productLoad
         * @return {?}
         */
        function (productLoad) {
            return productLoad.data$.pipe(operators.map((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                return new LoadProductSuccess(__assign({ code: productLoad.code }, data), productLoad.scope);
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return rxjs.of(new LoadProductFail(productLoad.code, makeErrorSerializable(error), productLoad.scope));
            })));
        };
        ProductEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: ProductConnector }
        ]; };
        return ProductEffects;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ProductEffects.prototype.contextChange$;
        /** @type {?} */
        ProductEffects.prototype.loadProduct$;
        /**
         * @type {?}
         * @private
         */
        ProductEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ProductEffects.prototype.productConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$a = [
        ProductsSearchEffects,
        ProductEffects,
        ProductReviewsEffects,
        ProductReferencesEffects,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$j = {
        productCode: '',
        list: [],
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$j(state, action) {
        if (state === void 0) { state = initialState$j; }
        switch (action.type) {
            case LOAD_PRODUCT_REFERENCES_SUCCESS: {
                /** @type {?} */
                var productCode = action.payload.productCode;
                /** @type {?} */
                var list = action.payload.list;
                return __assign({}, state, { list: __spread(state.list, (list ? list : [])).reduce((/**
                     * @param {?} productReferences
                     * @param {?} productReference
                     * @return {?}
                     */
                    function (productReferences, productReference) {
                        if (!productReferences.some((/**
                         * @param {?} obj
                         * @return {?}
                         */
                        function (obj) {
                            return obj.referenceType === productReference.referenceType &&
                                obj.target.code === productReference.target.code;
                        }))) {
                            productReferences.push(productReference);
                        }
                        return productReferences;
                    }), []), productCode: productCode });
            }
            case CLEAN_PRODUCT_REFERENCES: {
                return initialState$j;
            }
        }
        return state;
    }
    /** @type {?} */
    var getProductReferenceList = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.list; });
    /** @type {?} */
    var getProductReferenceProductCode = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return state.productCode; });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$k = {
        productCode: '',
        list: [],
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$k(state, action) {
        if (state === void 0) { state = initialState$k; }
        switch (action.type) {
            case LOAD_PRODUCT_REVIEWS_SUCCESS: {
                /** @type {?} */
                var productCode = action.payload.productCode;
                /** @type {?} */
                var list = action.payload.list;
                return __assign({}, state, { productCode: productCode,
                    list: list });
            }
        }
        return state;
    }
    /** @type {?} */
    var getReviewList = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.list;
    });
    /** @type {?} */
    var getReviewProductCode = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.productCode;
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Higher order reducer designed to add scope support for loader reducer
     *
     * For backward compatibility, we accommodate scopes alongside current
     * loading/error/success/value flags, thus those names can't be used as scope
     * names.
     *
     * TODO: Improve, issue #5445
     *
     * @template T
     * @param {?} entityType
     * @param {?=} reducer
     * @return {?}
     */
    function scopedLoaderReducer(entityType, reducer) {
        /** @type {?} */
        var loader = loaderReducer(entityType, reducer);
        return (/**
         * @param {?=} state
         * @param {?=} action
         * @return {?}
         */
        function (state, action) {
            var _a;
            if (state === void 0) { state = initialLoaderState; }
            if (action &&
                action.meta &&
                action.meta.entityType === entityType &&
                action.meta.scope) {
                return __assign({}, state, (_a = {}, _a[action.meta.scope] = loader(state[action.meta.scope], action), _a));
            }
            else {
                return loader(state, action);
            }
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing
     * single state reducer to support multiple entities with generic loading flags and scopes
     * @template T
     * @param {?} entityType
     * @param {?=} reducer
     * @return {?}
     */
    function entityScopedLoaderReducer(entityType, reducer) {
        return entityReducer(entityType, scopedLoaderReducer(entityType, reducer));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$b() {
        return {
            search: reducer$i,
            details: entityScopedLoaderReducer(PRODUCT_DETAIL_ENTITY),
            reviews: reducer$k,
            references: reducer$j,
        };
    }
    /** @type {?} */
    var reducerToken$b = new core.InjectionToken('ProductReducers');
    /** @type {?} */
    var reducerProvider$b = {
        provide: reducerToken$b,
        useFactory: getReducers$b,
    };
    /**
     * @param {?} reducer
     * @return {?}
     */
    function clearProductsState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === CURRENCY_CHANGE ||
                action.type === LANGUAGE_CHANGE) {
                state = undefined;
            }
            return reducer(state, action);
        });
    }
    /** @type {?} */
    var metaReducers$6 = [clearProductsState];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function productStoreConfigFactory() {
        var _a;
        // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object
        /** @type {?} */
        var config = {
            state: {
                ssrTransfer: {
                    keys: (_a = {}, _a[PRODUCT_FEATURE] = StateTransferType.TRANSFER_STATE, _a),
                },
            },
        };
        return config;
    }
    var ProductStoreModule = /** @class */ (function () {
        function ProductStoreModule() {
        }
        ProductStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            store.StoreModule.forFeature(PRODUCT_FEATURE, reducerToken$b, { metaReducers: metaReducers$6 }),
                            effects$d.EffectsModule.forFeature(effects$a),
                            ConfigModule.withConfigFactory(productStoreConfigFactory),
                        ],
                        providers: [reducerProvider$b],
                    },] }
        ];
        return ProductStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var pageTitleResolvers = [
        {
            provide: PageMetaResolver,
            useExisting: ProductPageMetaResolver,
            multi: true,
        },
        {
            provide: PageMetaResolver,
            useExisting: CategoryPageMetaResolver,
            multi: true,
        },
        {
            provide: PageMetaResolver,
            useExisting: SearchPageMetaResolver,
            multi: true,
        },
    ];
    var ProductModule = /** @class */ (function () {
        function ProductModule() {
        }
        /**
         * @return {?}
         */
        ProductModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: ProductModule,
                providers: __spread([
                    ProductService,
                    ProductSearchService,
                    ProductReviewService,
                    ProductReferenceService
                ], pageTitleResolvers),
            };
        };
        ProductModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [ProductStoreModule],
                    },] }
        ];
        return ProductModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SmartEditService = /** @class */ (function () {
        function SmartEditService(cmsService, routingService, baseSiteService, zone, winRef) {
            var _this = this;
            this.cmsService = cmsService;
            this.routingService = routingService;
            this.baseSiteService = baseSiteService;
            this.zone = zone;
            this.winRef = winRef;
            this.isPreviewPage = false;
            this.getCmsTicket();
            if (winRef.nativeWindow) {
                /** @type {?} */
                var window_1 = (/** @type {?} */ (winRef.nativeWindow));
                // rerender components and slots after editing
                window_1.smartedit = window_1.smartedit || {};
                window_1.smartedit.renderComponent = (/**
                 * @param {?} componentId
                 * @param {?} componentType
                 * @param {?} parentId
                 * @return {?}
                 */
                function (componentId, componentType, parentId) {
                    return _this.renderComponent(componentId, componentType, parentId);
                });
                // reprocess page
                window_1.smartedit.reprocessPage = this.reprocessPage;
            }
        }
        Object.defineProperty(SmartEditService.prototype, "cmsTicketId", {
            get: /**
             * @return {?}
             */
            function () {
                return this._cmsTicketId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @protected
         * @return {?}
         */
        SmartEditService.prototype.getCmsTicket = /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            rxjs.combineLatest([
                this.cmsService.getCurrentPage(),
                this.routingService.getRouterState(),
            ])
                .pipe(operators.takeWhile((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), cmsPage = _b[0];
                return cmsPage === undefined;
            })), operators.filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), routerState = _b[1];
                if (routerState.nextState && !_this._cmsTicketId) {
                    _this._cmsTicketId =
                        routerState.nextState.queryParams['cmsTicketId'];
                    if (_this._cmsTicketId) {
                        return true;
                    }
                }
                return false;
            })), operators.take(1))
                .subscribe((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                _this.cmsService.launchInSmartEdit = true;
                _this.getDefaultPreviewCode();
            }));
        };
        /**
         * @protected
         * @return {?}
         */
        SmartEditService.prototype.getDefaultPreviewCode = /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            this.baseSiteService
                .getBaseSiteData()
                .pipe(operators.filter((/**
             * @param {?} site
             * @return {?}
             */
            function (site) { return Object.keys(site).length !== 0; })), operators.take(1))
                .subscribe((/**
             * @param {?} site
             * @return {?}
             */
            function (site) {
                _this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;
                _this.defaultPreviewProductCode = site.defaultPreviewProductCode;
                _this.addPageContract();
            }));
        };
        /**
         * @protected
         * @return {?}
         */
        SmartEditService.prototype.addPageContract = /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            this.cmsService.getCurrentPage().subscribe((/**
             * @param {?} cmsPage
             * @return {?}
             */
            function (cmsPage) {
                if (cmsPage && _this._cmsTicketId) {
                    _this._currentPageId = cmsPage.pageId;
                    // before adding contract to page, we need redirect to that page
                    _this.goToPreviewPage(cmsPage);
                    // remove old page contract
                    /** @type {?} */
                    var previousContract_1 = [];
                    Array.from(_this.winRef.document.body.classList).forEach((/**
                     * @param {?} attr
                     * @return {?}
                     */
                    function (attr) {
                        return previousContract_1.push(attr);
                    }));
                    previousContract_1.forEach((/**
                     * @param {?} attr
                     * @return {?}
                     */
                    function (attr) {
                        return _this.winRef.document.body.classList.remove(attr);
                    }));
                    // add new page contract
                    if (cmsPage.properties && cmsPage.properties.smartedit) {
                        /** @type {?} */
                        var seClasses = cmsPage.properties.smartedit.classes.split(' ');
                        seClasses.forEach((/**
                         * @param {?} classItem
                         * @return {?}
                         */
                        function (classItem) {
                            _this.winRef.document.body.classList.add(classItem);
                        }));
                    }
                }
            }));
        };
        /**
         * @protected
         * @param {?} cmsPage
         * @return {?}
         */
        SmartEditService.prototype.goToPreviewPage = /**
         * @protected
         * @param {?} cmsPage
         * @return {?}
         */
        function (cmsPage) {
            // only the first page is the smartedit preview page
            if (!this.isPreviewPage) {
                this.isPreviewPage = true;
                if (cmsPage.type === PageType.PRODUCT_PAGE &&
                    this.defaultPreviewProductCode) {
                    this.routingService.go({
                        cxRoute: 'product',
                        params: { code: this.defaultPreviewProductCode, name: '' },
                    });
                }
                else if (cmsPage.type === PageType.CATEGORY_PAGE &&
                    this.defaultPreviewCategoryCode) {
                    this.routingService.go({
                        cxRoute: 'category',
                        params: { code: this.defaultPreviewCategoryCode },
                    });
                }
            }
        };
        /**
         * @protected
         * @param {?} componentId
         * @param {?=} componentType
         * @param {?=} parentId
         * @return {?}
         */
        SmartEditService.prototype.renderComponent = /**
         * @protected
         * @param {?} componentId
         * @param {?=} componentType
         * @param {?=} parentId
         * @return {?}
         */
        function (componentId, componentType, parentId) {
            var _this = this;
            if (componentId) {
                this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    // without parentId, it is slot
                    if (!parentId) {
                        if (_this._currentPageId) {
                            _this.cmsService.refreshPageById(_this._currentPageId);
                        }
                        else {
                            _this.cmsService.refreshLatestPage();
                        }
                    }
                    else if (componentType) {
                        _this.cmsService.refreshComponent(componentId);
                    }
                }));
            }
            return true;
        };
        /**
         * @protected
         * @return {?}
         */
        SmartEditService.prototype.reprocessPage = /**
         * @protected
         * @return {?}
         */
        function () {
            // TODO: reprocess page API
        };
        SmartEditService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        SmartEditService.ctorParameters = function () { return [
            { type: CmsService },
            { type: RoutingService },
            { type: BaseSiteService },
            { type: core.NgZone },
            { type: WindowRef }
        ]; };
        /** @nocollapse */ SmartEditService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SmartEditService_Factory() { return new SmartEditService(core.ɵɵinject(CmsService), core.ɵɵinject(RoutingService), core.ɵɵinject(BaseSiteService), core.ɵɵinject(core.NgZone), core.ɵɵinject(WindowRef)); }, token: SmartEditService, providedIn: "root" });
        return SmartEditService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SmartEditService.prototype._cmsTicketId;
        /**
         * @type {?}
         * @private
         */
        SmartEditService.prototype.isPreviewPage;
        /**
         * @type {?}
         * @private
         */
        SmartEditService.prototype._currentPageId;
        /**
         * @type {?}
         * @private
         */
        SmartEditService.prototype.defaultPreviewProductCode;
        /**
         * @type {?}
         * @private
         */
        SmartEditService.prototype.defaultPreviewCategoryCode;
        /**
         * @type {?}
         * @protected
         */
        SmartEditService.prototype.cmsService;
        /**
         * @type {?}
         * @protected
         */
        SmartEditService.prototype.routingService;
        /**
         * @type {?}
         * @protected
         */
        SmartEditService.prototype.baseSiteService;
        /**
         * @type {?}
         * @protected
         */
        SmartEditService.prototype.zone;
        /**
         * @type {?}
         * @protected
         */
        SmartEditService.prototype.winRef;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmsTicketInterceptor = /** @class */ (function () {
        function CmsTicketInterceptor(service) {
            this.service = service;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        CmsTicketInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            if (request.url.includes('/cms/') && this.service.cmsTicketId) {
                request = request.clone({
                    setParams: {
                        cmsTicketId: this.service.cmsTicketId,
                    },
                });
            }
            return next.handle(request);
        };
        CmsTicketInterceptor.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        CmsTicketInterceptor.ctorParameters = function () { return [
            { type: SmartEditService }
        ]; };
        /** @nocollapse */ CmsTicketInterceptor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CmsTicketInterceptor_Factory() { return new CmsTicketInterceptor(core.ɵɵinject(SmartEditService)); }, token: CmsTicketInterceptor, providedIn: "root" });
        return CmsTicketInterceptor;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        CmsTicketInterceptor.prototype.service;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var interceptors$4 = [
        {
            provide: http.HTTP_INTERCEPTORS,
            useExisting: CmsTicketInterceptor,
            multi: true,
        },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SmartEditModule = /** @class */ (function () {
        function SmartEditModule() {
        }
        /**
         * @return {?}
         */
        SmartEditModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: SmartEditModule,
                providers: __spread(interceptors$4),
            };
        };
        SmartEditModule.decorators = [
            { type: core.NgModule, args: [{},] }
        ];
        return SmartEditModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * These are the allowed options for the engine
     * @record
     */
    function NgSetupOptions() { }
    if (false) {
        /** @type {?} */
        NgSetupOptions.prototype.bootstrap;
        /** @type {?|undefined} */
        NgSetupOptions.prototype.providers;
    }
    /**
     * These are the allowed options for the render
     * @record
     */
    function RenderOptions() { }
    if (false) {
        /** @type {?} */
        RenderOptions.prototype.req;
        /** @type {?|undefined} */
        RenderOptions.prototype.res;
        /** @type {?|undefined} */
        RenderOptions.prototype.url;
        /** @type {?|undefined} */
        RenderOptions.prototype.document;
    }
    /**
     * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus
     * @param ngExpressEngine
     */
    var   /**
     * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus
     * @param ngExpressEngine
     */
    NgExpressEngineDecorator = /** @class */ (function () {
        function NgExpressEngineDecorator() {
        }
        /**
         * Returns the higher order ngExpressEngine with provided tokens for Spartacus
         *
         * @param ngExpressEngine
         */
        /**
         * Returns the higher order ngExpressEngine with provided tokens for Spartacus
         *
         * @param {?} ngExpressEngine
         * @return {?}
         */
        NgExpressEngineDecorator.get = /**
         * Returns the higher order ngExpressEngine with provided tokens for Spartacus
         *
         * @param {?} ngExpressEngine
         * @return {?}
         */
        function (ngExpressEngine) {
            /** @type {?} */
            var result = (/**
             * @param {?} setupOptions
             * @return {?}
             */
            function cxNgExpressEngine(setupOptions) {
                return (/**
                 * @param {?} filePath
                 * @param {?} options
                 * @param {?} callback
                 * @return {?}
                 */
                function (filePath, options, callback) {
                    /** @type {?} */
                    var engineInstance = ngExpressEngine(__assign({}, setupOptions, { providers: __spread(getServerRequestProviders(options), (setupOptions.providers || [])) }));
                    return engineInstance(filePath, options, callback);
                });
            });
            return result;
        };
        return NgExpressEngineDecorator;
    }());
    /**
     * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)
     *
     * @param {?} options
     * @return {?}
     */
    function getServerRequestProviders(options) {
        return [
            {
                provide: SERVER_REQUEST_URL,
                useValue: getRequestUrl(options.req),
            },
            {
                provide: SERVER_REQUEST_ORIGIN,
                useValue: getRequestOrigin(options.req),
            },
        ];
    }
    /**
     * @param {?} req
     * @return {?}
     */
    function getRequestUrl(req) {
        return getRequestOrigin(req) + req.originalUrl;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    function getRequestOrigin(req) {
        return req.protocol + '://' + req.get('host');
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    StoreFinderConfig = /** @class */ (function () {
        function StoreFinderConfig() {
        }
        return StoreFinderConfig;
    }());
    if (false) {
        /** @type {?} */
        StoreFinderConfig.prototype.googleMaps;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var STORE_FINDER_FEATURE = 'stores';
    /** @type {?} */
    var STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';
    /**
     * @record
     */
    function StateWithStoreFinder() { }
    if (false) {
        /* Skipping unnamed member:
        [STORE_FINDER_FEATURE]: StoresState;*/
    }
    /**
     * @record
     */
    function StoresState() { }
    if (false) {
        /** @type {?} */
        StoresState.prototype.findStores;
        /** @type {?} */
        StoresState.prototype.viewAllStores;
    }
    /**
     * @record
     */
    function FindStoresState() { }
    if (false) {
        /** @type {?} */
        FindStoresState.prototype.findStoresEntities;
    }
    /**
     * @record
     */
    function ViewAllStoresState() { }
    if (false) {
        /** @type {?} */
        ViewAllStoresState.prototype.viewAllStoresEntities;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';
    /** @type {?} */
    var FIND_STORES = '[StoreFinder] Find Stores';
    /** @type {?} */
    var FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';
    /** @type {?} */
    var FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';
    /** @type {?} */
    var FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';
    /** @type {?} */
    var FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';
    /** @type {?} */
    var FIND_STORE_BY_ID_SUCCESS = '[StoreFinder] Find a Store by Id Success';
    var FindStoresOnHold = /** @class */ (function (_super) {
        __extends(FindStoresOnHold, _super);
        function FindStoresOnHold() {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.type = FIND_STORES_ON_HOLD;
            return _this;
        }
        return FindStoresOnHold;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        FindStoresOnHold.prototype.type;
    }
    var FindStores = /** @class */ (function (_super) {
        __extends(FindStores, _super);
        function FindStores(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORES;
            return _this;
        }
        return FindStores;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        FindStores.prototype.type;
        /** @type {?} */
        FindStores.prototype.payload;
    }
    var FindStoresFail = /** @class */ (function (_super) {
        __extends(FindStoresFail, _super);
        function FindStoresFail(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA, payload) || this;
            _this.payload = payload;
            _this.type = FIND_STORES_FAIL;
            return _this;
        }
        return FindStoresFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        FindStoresFail.prototype.type;
        /** @type {?} */
        FindStoresFail.prototype.payload;
    }
    var FindStoresSuccess = /** @class */ (function (_super) {
        __extends(FindStoresSuccess, _super);
        function FindStoresSuccess(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORES_SUCCESS;
            return _this;
        }
        return FindStoresSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        FindStoresSuccess.prototype.type;
        /** @type {?} */
        FindStoresSuccess.prototype.payload;
    }
    var FindStoreById = /** @class */ (function (_super) {
        __extends(FindStoreById, _super);
        function FindStoreById(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORE_BY_ID;
            return _this;
        }
        return FindStoreById;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        FindStoreById.prototype.type;
        /** @type {?} */
        FindStoreById.prototype.payload;
    }
    var FindStoreByIdFail = /** @class */ (function (_super) {
        __extends(FindStoreByIdFail, _super);
        function FindStoreByIdFail(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA, payload) || this;
            _this.payload = payload;
            _this.type = FIND_STORE_BY_ID_FAIL;
            return _this;
        }
        return FindStoreByIdFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        FindStoreByIdFail.prototype.type;
        /** @type {?} */
        FindStoreByIdFail.prototype.payload;
    }
    var FindStoreByIdSuccess = /** @class */ (function (_super) {
        __extends(FindStoreByIdSuccess, _super);
        function FindStoreByIdSuccess(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORE_BY_ID_SUCCESS;
            return _this;
        }
        return FindStoreByIdSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        FindStoreByIdSuccess.prototype.type;
        /** @type {?} */
        FindStoreByIdSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var VIEW_ALL_STORES = '[StoreFinder] View All Stores';
    /** @type {?} */
    var VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';
    /** @type {?} */
    var VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';
    var ViewAllStores = /** @class */ (function (_super) {
        __extends(ViewAllStores, _super);
        function ViewAllStores() {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.type = VIEW_ALL_STORES;
            return _this;
        }
        return ViewAllStores;
    }(LoaderLoadAction));
    if (false) {
        /** @type {?} */
        ViewAllStores.prototype.type;
    }
    var ViewAllStoresFail = /** @class */ (function (_super) {
        __extends(ViewAllStoresFail, _super);
        function ViewAllStoresFail(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA, payload) || this;
            _this.payload = payload;
            _this.type = VIEW_ALL_STORES_FAIL;
            return _this;
        }
        return ViewAllStoresFail;
    }(LoaderFailAction));
    if (false) {
        /** @type {?} */
        ViewAllStoresFail.prototype.type;
        /** @type {?} */
        ViewAllStoresFail.prototype.payload;
    }
    var ViewAllStoresSuccess = /** @class */ (function (_super) {
        __extends(ViewAllStoresSuccess, _super);
        function ViewAllStoresSuccess(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = VIEW_ALL_STORES_SUCCESS;
            return _this;
        }
        return ViewAllStoresSuccess;
    }(LoaderSuccessAction));
    if (false) {
        /** @type {?} */
        ViewAllStoresSuccess.prototype.type;
        /** @type {?} */
        ViewAllStoresSuccess.prototype.payload;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var storeFinderGroup_actions = /*#__PURE__*/Object.freeze({
        FIND_STORES_ON_HOLD: FIND_STORES_ON_HOLD,
        FIND_STORES: FIND_STORES,
        FIND_STORES_FAIL: FIND_STORES_FAIL,
        FIND_STORES_SUCCESS: FIND_STORES_SUCCESS,
        FIND_STORE_BY_ID: FIND_STORE_BY_ID,
        FIND_STORE_BY_ID_FAIL: FIND_STORE_BY_ID_FAIL,
        FIND_STORE_BY_ID_SUCCESS: FIND_STORE_BY_ID_SUCCESS,
        FindStoresOnHold: FindStoresOnHold,
        FindStores: FindStores,
        FindStoresFail: FindStoresFail,
        FindStoresSuccess: FindStoresSuccess,
        FindStoreById: FindStoreById,
        FindStoreByIdFail: FindStoreByIdFail,
        FindStoreByIdSuccess: FindStoreByIdSuccess,
        VIEW_ALL_STORES: VIEW_ALL_STORES,
        VIEW_ALL_STORES_FAIL: VIEW_ALL_STORES_FAIL,
        VIEW_ALL_STORES_SUCCESS: VIEW_ALL_STORES_SUCCESS,
        ViewAllStores: ViewAllStores,
        ViewAllStoresFail: ViewAllStoresFail,
        ViewAllStoresSuccess: ViewAllStoresSuccess
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getStoreFinderState = store.createFeatureSelector(STORE_FINDER_FEATURE);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$J = /**
     * @param {?} storesState
     * @return {?}
     */
    function (storesState) { return storesState.findStores; };
    /** @type {?} */
    var getFindStoresState = store.createSelector(getStoreFinderState, (ɵ0$J));
    var ɵ1$u = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getFindStoresEntities = store.createSelector(getFindStoresState, (ɵ1$u));
    var ɵ2$l = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderLoadingSelector(state); };
    /** @type {?} */
    var getStoresLoading = store.createSelector(getFindStoresState, (ɵ2$l));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$K = /**
     * @param {?} storesState
     * @return {?}
     */
    function (storesState) { return storesState.viewAllStores; };
    /** @type {?} */
    var getViewAllStoresState = store.createSelector(getStoreFinderState, (ɵ0$K));
    var ɵ1$v = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderValueSelector(state); };
    /** @type {?} */
    var getViewAllStoresEntities = store.createSelector(getViewAllStoresState, (ɵ1$v));
    var ɵ2$m = /**
     * @param {?} state
     * @return {?}
     */
    function (state) { return loaderLoadingSelector(state); };
    /** @type {?} */
    var getViewAllStoresLoading = store.createSelector(getViewAllStoresState, (ɵ2$m));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var storeFinderGroup_selectors = /*#__PURE__*/Object.freeze({
        getFindStoresState: getFindStoresState,
        getFindStoresEntities: getFindStoresEntities,
        getStoresLoading: getStoresLoading,
        getViewAllStoresState: getViewAllStoresState,
        getViewAllStoresEntities: getViewAllStoresEntities,
        getViewAllStoresLoading: getViewAllStoresLoading
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StoreFinderService = /** @class */ (function () {
        function StoreFinderService(store, winRef, globalMessageService, routingService) {
            this.store = store;
            this.winRef = winRef;
            this.globalMessageService = globalMessageService;
            this.routingService = routingService;
            this.geolocationWatchId = null;
        }
        /**
         * Returns boolean observable for store's loading state
         */
        /**
         * Returns boolean observable for store's loading state
         * @return {?}
         */
        StoreFinderService.prototype.getStoresLoading = /**
         * Returns boolean observable for store's loading state
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getStoresLoading));
        };
        /**
         * Returns observable for store's entities
         */
        /**
         * Returns observable for store's entities
         * @return {?}
         */
        StoreFinderService.prototype.getFindStoresEntities = /**
         * Returns observable for store's entities
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getFindStoresEntities));
        };
        /**
         * Returns boolean observable for view all store's loading state
         */
        /**
         * Returns boolean observable for view all store's loading state
         * @return {?}
         */
        StoreFinderService.prototype.getViewAllStoresLoading = /**
         * Returns boolean observable for view all store's loading state
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getViewAllStoresLoading));
        };
        /**
         * Returns observable for view all store's entities
         */
        /**
         * Returns observable for view all store's entities
         * @return {?}
         */
        StoreFinderService.prototype.getViewAllStoresEntities = /**
         * Returns observable for view all store's entities
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getViewAllStoresEntities));
        };
        /**
         * Store finding action functionality
         * @param queryText text query
         * @param searchConfig search configuration
         * @param longitudeLatitude longitude and latitude coordinates
         * @param countryIsoCode country ISO code
         * @param useMyLocation current location coordinates
         */
        /**
         * Store finding action functionality
         * @param {?} queryText text query
         * @param {?=} searchConfig search configuration
         * @param {?=} longitudeLatitude longitude and latitude coordinates
         * @param {?=} countryIsoCode country ISO code
         * @param {?=} useMyLocation current location coordinates
         * @return {?}
         */
        StoreFinderService.prototype.findStoresAction = /**
         * Store finding action functionality
         * @param {?} queryText text query
         * @param {?=} searchConfig search configuration
         * @param {?=} longitudeLatitude longitude and latitude coordinates
         * @param {?=} countryIsoCode country ISO code
         * @param {?=} useMyLocation current location coordinates
         * @return {?}
         */
        function (queryText, searchConfig, longitudeLatitude, countryIsoCode, useMyLocation) {
            var _this = this;
            if (useMyLocation && this.winRef.nativeWindow) {
                this.clearWatchGeolocation(new FindStoresOnHold());
                this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition((/**
                 * @param {?} pos
                 * @return {?}
                 */
                function (pos) {
                    /** @type {?} */
                    var position = {
                        longitude: pos.coords.longitude,
                        latitude: pos.coords.latitude,
                    };
                    _this.clearWatchGeolocation(new FindStores({
                        queryText: queryText,
                        searchConfig: searchConfig,
                        longitudeLatitude: position,
                        countryIsoCode: countryIsoCode,
                    }));
                }), (/**
                 * @return {?}
                 */
                function () {
                    _this.globalMessageService.add({ key: 'storeFinder.geolocationNotEnabled' }, GlobalMessageType.MSG_TYPE_ERROR);
                    _this.routingService.go(['/store-finder']);
                }));
            }
            else {
                this.clearWatchGeolocation(new FindStores({
                    queryText: queryText,
                    searchConfig: searchConfig,
                    longitudeLatitude: longitudeLatitude,
                    countryIsoCode: countryIsoCode,
                }));
            }
        };
        /**
         * View all stores
         */
        /**
         * View all stores
         * @return {?}
         */
        StoreFinderService.prototype.viewAllStores = /**
         * View all stores
         * @return {?}
         */
        function () {
            this.clearWatchGeolocation(new ViewAllStores());
        };
        /**
         * View all stores by id
         * @param storeId store id
         */
        /**
         * View all stores by id
         * @param {?} storeId store id
         * @return {?}
         */
        StoreFinderService.prototype.viewStoreById = /**
         * View all stores by id
         * @param {?} storeId store id
         * @return {?}
         */
        function (storeId) {
            this.clearWatchGeolocation(new FindStoreById({ storeId: storeId }));
        };
        /**
         * @private
         * @param {?} callbackAction
         * @return {?}
         */
        StoreFinderService.prototype.clearWatchGeolocation = /**
         * @private
         * @param {?} callbackAction
         * @return {?}
         */
        function (callbackAction) {
            if (this.geolocationWatchId !== null) {
                this.winRef.nativeWindow.navigator.geolocation.clearWatch(this.geolocationWatchId);
                this.geolocationWatchId = null;
            }
            this.store.dispatch(callbackAction);
        };
        StoreFinderService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        StoreFinderService.ctorParameters = function () { return [
            { type: store.Store },
            { type: WindowRef },
            { type: GlobalMessageService },
            { type: RoutingService }
        ]; };
        return StoreFinderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        StoreFinderService.prototype.geolocationWatchId;
        /**
         * @type {?}
         * @protected
         */
        StoreFinderService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        StoreFinderService.prototype.winRef;
        /**
         * @type {?}
         * @protected
         */
        StoreFinderService.prototype.globalMessageService;
        /**
         * @type {?}
         * @protected
         */
        StoreFinderService.prototype.routingService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StoreDataService = /** @class */ (function () {
        function StoreDataService() {
            this.weekDays = {
                0: 'Sun',
                1: 'Mon',
                2: 'Tue',
                3: 'Wed',
                4: 'Thu',
                5: 'Fri',
                6: 'Sat',
            };
        }
        /**
         * Returns store latitude
         * @param location store location
         */
        /**
         * Returns store latitude
         * @param {?} location store location
         * @return {?}
         */
        StoreDataService.prototype.getStoreLatitude = /**
         * Returns store latitude
         * @param {?} location store location
         * @return {?}
         */
        function (location) {
            return location.geoPoint.latitude;
        };
        /**
         * Returns store longitude
         * @param location store location
         */
        /**
         * Returns store longitude
         * @param {?} location store location
         * @return {?}
         */
        StoreDataService.prototype.getStoreLongitude = /**
         * Returns store longitude
         * @param {?} location store location
         * @return {?}
         */
        function (location) {
            return location.geoPoint.longitude;
        };
        /**
         * Returns store closing time
         * @param location store location
         * @param date date to compare
         */
        /**
         * Returns store closing time
         * @param {?} location store location
         * @param {?} date date to compare
         * @return {?}
         */
        StoreDataService.prototype.getStoreClosingTime = /**
         * Returns store closing time
         * @param {?} location store location
         * @param {?} date date to compare
         * @return {?}
         */
        function (location, date) {
            /** @type {?} */
            var requestedDaySchedule = this.getSchedule(location, date);
            if (requestedDaySchedule) {
                if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {
                    return 'closed';
                }
                if (requestedDaySchedule.closingTime) {
                    return requestedDaySchedule.closingTime.formattedHour;
                }
            }
        };
        /**
         * Returns store opening time
         * @param location store location
         * @param date date to compare
         */
        /**
         * Returns store opening time
         * @param {?} location store location
         * @param {?} date date to compare
         * @return {?}
         */
        StoreDataService.prototype.getStoreOpeningTime = /**
         * Returns store opening time
         * @param {?} location store location
         * @param {?} date date to compare
         * @return {?}
         */
        function (location, date) {
            /** @type {?} */
            var requestedDaySchedule = this.getSchedule(location, date);
            if (requestedDaySchedule) {
                if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {
                    return 'closed';
                }
                if (requestedDaySchedule.openingTime) {
                    return requestedDaySchedule.openingTime.formattedHour;
                }
            }
        };
        /**
         * Extracts schedule from the given location for the given date
         * @param location location
         * @param date date
         *
         * @returns payload describing the store's schedule for the given day.
         */
        /**
         * Extracts schedule from the given location for the given date
         * @protected
         * @param {?} location location
         * @param {?} date date
         *
         * @return {?} payload describing the store's schedule for the given day.
         */
        StoreDataService.prototype.getSchedule = /**
         * Extracts schedule from the given location for the given date
         * @protected
         * @param {?} location location
         * @param {?} date date
         *
         * @return {?} payload describing the store's schedule for the given day.
         */
        function (location, date) {
            /** @type {?} */
            var weekday = this.weekDays[date.getDay()];
            return location.openingHours.weekDayOpeningList.find((/**
             * @param {?} weekDayOpeningListItem
             * @return {?}
             */
            function (weekDayOpeningListItem) { return weekDayOpeningListItem.weekDay === weekday; }));
        };
        StoreDataService.decorators = [
            { type: core.Injectable }
        ];
        return StoreDataService;
    }());
    if (false) {
        /** @type {?} */
        StoreDataService.prototype.DECIMAL_BASE;
        /** @type {?} */
        StoreDataService.prototype.weekDays;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function StoreEntities() { }
    if (false) {
        /** @type {?|undefined} */
        StoreEntities.prototype.pointOfServices;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function StoreFinderSearchConfig() { }
    if (false) {
        /** @type {?|undefined} */
        StoreFinderSearchConfig.prototype.pageSize;
        /** @type {?|undefined} */
        StoreFinderSearchConfig.prototype.currentPage;
        /** @type {?|undefined} */
        StoreFinderSearchConfig.prototype.sort;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function StoreFinderSearchQuery() { }
    if (false) {
        /** @type {?|undefined} */
        StoreFinderSearchQuery.prototype.queryText;
        /** @type {?|undefined} */
        StoreFinderSearchQuery.prototype.longitudeLatitude;
        /** @type {?|undefined} */
        StoreFinderSearchQuery.prototype.useMyLocation;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExternalJsFileLoader = /** @class */ (function () {
        function ExternalJsFileLoader(document) {
            this.document = document;
        }
        /**
         * Loads a javascript from an external URL
         * @param src URL for the script to be loaded
         * @param params additional parameters to be attached to the given URL
         * @param callback a function to be invoked after the script has been loaded
         */
        /**
         * Loads a javascript from an external URL
         * @param {?} src URL for the script to be loaded
         * @param {?=} params additional parameters to be attached to the given URL
         * @param {?=} callback a function to be invoked after the script has been loaded
         * @return {?}
         */
        ExternalJsFileLoader.prototype.load = /**
         * Loads a javascript from an external URL
         * @param {?} src URL for the script to be loaded
         * @param {?=} params additional parameters to be attached to the given URL
         * @param {?=} callback a function to be invoked after the script has been loaded
         * @return {?}
         */
        function (src, params, callback) {
            /** @type {?} */
            var script = this.document.createElement('script');
            script.type = 'text/javascript';
            if (params) {
                script.src = src + this.parseParams(params);
            }
            else {
                script.src = src;
            }
            script.async = true;
            script.defer = true;
            if (callback) {
                script.addEventListener('load', callback);
            }
            document.head.appendChild(script);
        };
        /**
         * Parses the given object with parameters to a string "param1=value1&param2=value2"
         * @param params object containing parameters
         */
        /**
         * Parses the given object with parameters to a string "param1=value1&param2=value2"
         * @private
         * @param {?} params object containing parameters
         * @return {?}
         */
        ExternalJsFileLoader.prototype.parseParams = /**
         * Parses the given object with parameters to a string "param1=value1&param2=value2"
         * @private
         * @param {?} params object containing parameters
         * @return {?}
         */
        function (params) {
            /** @type {?} */
            var result = '';
            /** @type {?} */
            var keysArray = Object.keys(params);
            if (keysArray.length > 0) {
                result =
                    '?' +
                        keysArray
                            .map((/**
                         * @param {?} key
                         * @return {?}
                         */
                        function (key) { return encodeURI(key) + '=' + encodeURI(params[key]); }))
                            .join('&');
            }
            return result;
        };
        ExternalJsFileLoader.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExternalJsFileLoader.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
        ]; };
        return ExternalJsFileLoader;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ExternalJsFileLoader.prototype.document;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GoogleMapRendererService = /** @class */ (function () {
        function GoogleMapRendererService(config, externalJsFileLoader, storeDataService) {
            this.config = config;
            this.externalJsFileLoader = externalJsFileLoader;
            this.storeDataService = storeDataService;
            this.googleMap = null;
        }
        /**
         * Renders google map on the given element and draws markers on it.
         * If map already exists it will use an existing map otherwise it will create one
         * @param mapElement HTML element inside of which the map will be displayed
         * @param locations array containign geo data to be displayed on the map
         * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
         */
        /**
         * Renders google map on the given element and draws markers on it.
         * If map already exists it will use an existing map otherwise it will create one
         * @param {?} mapElement HTML element inside of which the map will be displayed
         * @param {?} locations array containign geo data to be displayed on the map
         * @param {?=} selectMarkerHandler function to handle whenever a marker on a map is clicked
         * @return {?}
         */
        GoogleMapRendererService.prototype.renderMap = /**
         * Renders google map on the given element and draws markers on it.
         * If map already exists it will use an existing map otherwise it will create one
         * @param {?} mapElement HTML element inside of which the map will be displayed
         * @param {?} locations array containign geo data to be displayed on the map
         * @param {?=} selectMarkerHandler function to handle whenever a marker on a map is clicked
         * @return {?}
         */
        function (mapElement, locations, selectMarkerHandler) {
            var _this = this;
            if (this.googleMap === null) {
                this.externalJsFileLoader.load(this.config.googleMaps.apiUrl, { key: this.config.googleMaps.apiKey }, (/**
                 * @return {?}
                 */
                function () {
                    _this.drawMap(mapElement, locations, selectMarkerHandler);
                }));
            }
            else {
                this.drawMap(mapElement, locations, selectMarkerHandler);
            }
        };
        /**
         * Centers the map to the given point
         * @param latitute latitude of the new center
         * @param longitude longitude of the new center
         */
        /**
         * Centers the map to the given point
         * @param {?} latitute latitude of the new center
         * @param {?} longitude longitude of the new center
         * @return {?}
         */
        GoogleMapRendererService.prototype.centerMap = /**
         * Centers the map to the given point
         * @param {?} latitute latitude of the new center
         * @param {?} longitude longitude of the new center
         * @return {?}
         */
        function (latitute, longitude) {
            this.googleMap.panTo({ lat: latitute, lng: longitude });
            this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);
        };
        /**
         * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered
         * @param locations list of locations
         */
        /**
         * Defines and returns {\@link google.maps.LatLng} representing a point where the map will be centered
         * @private
         * @param {?} locations list of locations
         * @return {?}
         */
        GoogleMapRendererService.prototype.defineMapCenter = /**
         * Defines and returns {\@link google.maps.LatLng} representing a point where the map will be centered
         * @private
         * @param {?} locations list of locations
         * @return {?}
         */
        function (locations) {
            return new google.maps.LatLng(this.storeDataService.getStoreLatitude(locations[0]), this.storeDataService.getStoreLongitude(locations[0]));
        };
        /**
         * Creates google map inside if the given HTML element centered to the given point
         * @param mapElement {@link HTMLElement} inside of which the map will be created
         * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered
         */
        /**
         * Creates google map inside if the given HTML element centered to the given point
         * @private
         * @param {?} mapElement {\@link HTMLElement} inside of which the map will be created
         * @param {?} mapCenter {\@link google.maps.LatLng} the point where the map will be centered
         * @return {?}
         */
        GoogleMapRendererService.prototype.initMap = /**
         * Creates google map inside if the given HTML element centered to the given point
         * @private
         * @param {?} mapElement {\@link HTMLElement} inside of which the map will be created
         * @param {?} mapCenter {\@link google.maps.LatLng} the point where the map will be centered
         * @return {?}
         */
        function (mapElement, mapCenter) {
            /** @type {?} */
            var gestureOption = 'greedy';
            /** @type {?} */
            var mapProp = {
                center: mapCenter,
                zoom: this.config.googleMaps.scale,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                gestureHandling: gestureOption,
            };
            this.googleMap = new google.maps.Map(mapElement, mapProp);
        };
        /**
         * Erases the current map's markers and create a new one based on the given locations
         * @param locations array of locations to be displayed on the map
         * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
         */
        /**
         * Erases the current map's markers and create a new one based on the given locations
         * @private
         * @param {?} locations array of locations to be displayed on the map
         * @param {?=} selectMarkerHandler function to handle whenever a marker on a map is clicked
         * @return {?}
         */
        GoogleMapRendererService.prototype.createMarkers = /**
         * Erases the current map's markers and create a new one based on the given locations
         * @private
         * @param {?} locations array of locations to be displayed on the map
         * @param {?=} selectMarkerHandler function to handle whenever a marker on a map is clicked
         * @return {?}
         */
        function (locations, selectMarkerHandler) {
            var _this = this;
            this.markers = [];
            locations.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                /** @type {?} */
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(_this.storeDataService.getStoreLatitude(element), _this.storeDataService.getStoreLongitude(element)),
                    label: index + 1 + '',
                });
                _this.markers.push(marker);
                marker.setMap(_this.googleMap);
                marker.addListener('mouseover', (/**
                 * @return {?}
                 */
                function () {
                    marker.setAnimation(google.maps.Animation.BOUNCE);
                }));
                marker.addListener('mouseout', (/**
                 * @return {?}
                 */
                function () {
                    marker.setAnimation(null);
                }));
                if (selectMarkerHandler) {
                    marker.addListener('click', (/**
                     * @return {?}
                     */
                    function () {
                        selectMarkerHandler(index);
                    }));
                }
            }));
        };
        /**
         * Initialize and draw the map
         * @param mapElement {@link HTMLElement} inside of which the map will be drawn
         * @param locations array of locations to be displayed on the map
         * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
         */
        /**
         * Initialize and draw the map
         * @private
         * @param {?} mapElement {\@link HTMLElement} inside of which the map will be drawn
         * @param {?} locations array of locations to be displayed on the map
         * @param {?} selectMarkerHandler function to handle whenever a marker on a map is clicked
         * @return {?}
         */
        GoogleMapRendererService.prototype.drawMap = /**
         * Initialize and draw the map
         * @private
         * @param {?} mapElement {\@link HTMLElement} inside of which the map will be drawn
         * @param {?} locations array of locations to be displayed on the map
         * @param {?} selectMarkerHandler function to handle whenever a marker on a map is clicked
         * @return {?}
         */
        function (mapElement, locations, selectMarkerHandler) {
            this.initMap(mapElement, this.defineMapCenter(locations));
            this.createMarkers(locations, selectMarkerHandler);
        };
        GoogleMapRendererService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GoogleMapRendererService.ctorParameters = function () { return [
            { type: StoreFinderConfig },
            { type: ExternalJsFileLoader },
            { type: StoreDataService }
        ]; };
        return GoogleMapRendererService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        GoogleMapRendererService.prototype.googleMap;
        /**
         * @type {?}
         * @private
         */
        GoogleMapRendererService.prototype.markers;
        /**
         * @type {?}
         * @protected
         */
        GoogleMapRendererService.prototype.config;
        /**
         * @type {?}
         * @protected
         */
        GoogleMapRendererService.prototype.externalJsFileLoader;
        /**
         * @type {?}
         * @protected
         */
        GoogleMapRendererService.prototype.storeDataService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultStoreFinderConfig = {
        googleMaps: {
            apiUrl: 'https://maps.googleapis.com/maps/api/js',
            apiKey: '',
            scale: 5,
            selectedMarkerScale: 17,
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$c() {
        return {
            findStores: loaderReducer(STORE_FINDER_DATA),
            viewAllStores: loaderReducer(STORE_FINDER_DATA),
        };
    }
    /** @type {?} */
    var reducerToken$c = new core.InjectionToken('StoreFinderReducers');
    /** @type {?} */
    var reducerProvider$c = {
        provide: reducerToken$c,
        useFactory: getReducers$c,
    };
    /** @type {?} */
    var metaReducers$7 = [];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FindStoresEffect = /** @class */ (function () {
        function FindStoresEffect(actions$, storeFinderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.storeFinderConnector = storeFinderConnector;
            this.findStores$ = this.actions$.pipe(effects$d.ofType(FIND_STORES), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.storeFinderConnector
                    .search(payload.queryText, payload.searchConfig, payload.longitudeLatitude)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    if (payload.countryIsoCode) {
                        data.stores = data.stores.filter((/**
                         * @param {?} store
                         * @return {?}
                         */
                        function (store) {
                            return store.address.country.isocode === payload.countryIsoCode;
                        }));
                    }
                    return new FindStoresSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new FindStoresFail(makeErrorSerializable(error)));
                })));
            })));
            this.findStoreById$ = this.actions$.pipe(effects$d.ofType(FIND_STORE_BY_ID), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.storeFinderConnector.get(payload.storeId).pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return new FindStoreByIdSuccess(data); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new FindStoreByIdFail(makeErrorSerializable(error)));
                })));
            })));
        }
        FindStoresEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FindStoresEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: StoreFinderConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], FindStoresEffect.prototype, "findStores$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], FindStoresEffect.prototype, "findStoreById$", void 0);
        return FindStoresEffect;
    }());
    if (false) {
        /** @type {?} */
        FindStoresEffect.prototype.findStores$;
        /** @type {?} */
        FindStoresEffect.prototype.findStoreById$;
        /**
         * @type {?}
         * @private
         */
        FindStoresEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        FindStoresEffect.prototype.storeFinderConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ViewAllStoresEffect = /** @class */ (function () {
        function ViewAllStoresEffect(actions$, storeFinderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.storeFinderConnector = storeFinderConnector;
            this.viewAllStores$ = this.actions$.pipe(effects$d.ofType(VIEW_ALL_STORES), operators.switchMap((/**
             * @return {?}
             */
            function () {
                return _this.storeFinderConnector.getCounts().pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    data.sort((/**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */
                    function (a, b) { return (a.name < b.name ? -1 : a.name > b.name ? 1 : 0); }));
                    return new ViewAllStoresSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new ViewAllStoresFail(makeErrorSerializable(error)));
                })));
            })));
        }
        ViewAllStoresEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ViewAllStoresEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: StoreFinderConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ViewAllStoresEffect.prototype, "viewAllStores$", void 0);
        return ViewAllStoresEffect;
    }());
    if (false) {
        /** @type {?} */
        ViewAllStoresEffect.prototype.viewAllStores$;
        /**
         * @type {?}
         * @private
         */
        ViewAllStoresEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ViewAllStoresEffect.prototype.storeFinderConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$b = [FindStoresEffect, ViewAllStoresEffect];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StoreFinderStoreModule = /** @class */ (function () {
        function StoreFinderStoreModule() {
        }
        StoreFinderStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            store.StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken$c),
                            effects$d.EffectsModule.forFeature(effects$b),
                        ],
                        providers: [reducerProvider$c],
                    },] }
        ];
        return StoreFinderStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StoreFinderCoreModule = /** @class */ (function () {
        function StoreFinderCoreModule() {
        }
        StoreFinderCoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            ConfigModule.withConfig(defaultStoreFinderConfig),
                            StoreFinderStoreModule,
                        ],
                        providers: [
                            StoreFinderService,
                            StoreDataService,
                            GoogleMapRendererService,
                            ExternalJsFileLoader,
                            { provide: StoreFinderConfig, useExisting: Config },
                        ],
                    },] }
        ];
        return StoreFinderCoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserConnector = /** @class */ (function () {
        function UserConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        UserConnector.prototype.get = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.adapter.load(userId);
        };
        /**
         * @param {?} username
         * @param {?} user
         * @return {?}
         */
        UserConnector.prototype.update = /**
         * @param {?} username
         * @param {?} user
         * @return {?}
         */
        function (username, user) {
            return this.adapter.update(username, user);
        };
        /**
         * @param {?} user
         * @return {?}
         */
        UserConnector.prototype.register = /**
         * @param {?} user
         * @return {?}
         */
        function (user) {
            return this.adapter.register(user);
        };
        /**
         * @param {?} guid
         * @param {?} password
         * @return {?}
         */
        UserConnector.prototype.registerGuest = /**
         * @param {?} guid
         * @param {?} password
         * @return {?}
         */
        function (guid, password) {
            return this.adapter.registerGuest(guid, password);
        };
        /**
         * @param {?} userEmailAddress
         * @return {?}
         */
        UserConnector.prototype.requestForgotPasswordEmail = /**
         * @param {?} userEmailAddress
         * @return {?}
         */
        function (userEmailAddress) {
            return this.adapter.requestForgotPasswordEmail(userEmailAddress);
        };
        /**
         * @param {?} token
         * @param {?} newPassword
         * @return {?}
         */
        UserConnector.prototype.resetPassword = /**
         * @param {?} token
         * @param {?} newPassword
         * @return {?}
         */
        function (token, newPassword) {
            return this.adapter.resetPassword(token, newPassword);
        };
        /**
         * @param {?} userId
         * @param {?} currentPassword
         * @param {?} newUserId
         * @return {?}
         */
        UserConnector.prototype.updateEmail = /**
         * @param {?} userId
         * @param {?} currentPassword
         * @param {?} newUserId
         * @return {?}
         */
        function (userId, currentPassword, newUserId) {
            return this.adapter.updateEmail(userId, currentPassword, newUserId);
        };
        /**
         * @param {?} userId
         * @param {?} oldPassword
         * @param {?} newPassword
         * @return {?}
         */
        UserConnector.prototype.updatePassword = /**
         * @param {?} userId
         * @param {?} oldPassword
         * @param {?} newPassword
         * @return {?}
         */
        function (userId, oldPassword, newPassword) {
            return this.adapter.updatePassword(userId, oldPassword, newPassword);
        };
        /**
         * @param {?} userId
         * @return {?}
         */
        UserConnector.prototype.remove = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.adapter.remove(userId);
        };
        /**
         * @return {?}
         */
        UserConnector.prototype.getTitles = /**
         * @return {?}
         */
        function () {
            return this.adapter.loadTitles();
        };
        UserConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserConnector.ctorParameters = function () { return [
            { type: UserAdapter }
        ]; };
        /** @nocollapse */ UserConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserConnector_Factory() { return new UserConnector(core.ɵɵinject(UserAdapter)); }, token: UserConnector, providedIn: "root" });
        return UserConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserConsentConnector = /** @class */ (function () {
        function UserConsentConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        UserConsentConnector.prototype.loadConsents = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.adapter.loadConsents(userId);
        };
        /**
         * @param {?} userId
         * @param {?} consentTemplateId
         * @param {?} consentTemplateVersion
         * @return {?}
         */
        UserConsentConnector.prototype.giveConsent = /**
         * @param {?} userId
         * @param {?} consentTemplateId
         * @param {?} consentTemplateVersion
         * @return {?}
         */
        function (userId, consentTemplateId, consentTemplateVersion) {
            return this.adapter.giveConsent(userId, consentTemplateId, consentTemplateVersion);
        };
        /**
         * @param {?} userId
         * @param {?} consentCode
         * @return {?}
         */
        UserConsentConnector.prototype.withdrawConsent = /**
         * @param {?} userId
         * @param {?} consentCode
         * @return {?}
         */
        function (userId, consentCode) {
            return this.adapter.withdrawConsent(userId, consentCode);
        };
        UserConsentConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserConsentConnector.ctorParameters = function () { return [
            { type: UserConsentAdapter }
        ]; };
        /** @nocollapse */ UserConsentConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserConsentConnector_Factory() { return new UserConsentConnector(core.ɵɵinject(UserConsentAdapter)); }, token: UserConsentConnector, providedIn: "root" });
        return UserConsentConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserConsentConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserPaymentConnector = /** @class */ (function () {
        function UserPaymentConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @return {?}
         */
        UserPaymentConnector.prototype.getAll = /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            return this.adapter.loadAll(userId);
        };
        /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        UserPaymentConnector.prototype.delete = /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        function (userId, paymentMethodID) {
            return this.adapter.delete(userId, paymentMethodID);
        };
        /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        UserPaymentConnector.prototype.setDefault = /**
         * @param {?} userId
         * @param {?} paymentMethodID
         * @return {?}
         */
        function (userId, paymentMethodID) {
            return this.adapter.setDefault(userId, paymentMethodID);
        };
        UserPaymentConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserPaymentConnector.ctorParameters = function () { return [
            { type: UserPaymentAdapter }
        ]; };
        /** @nocollapse */ UserPaymentConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserPaymentConnector_Factory() { return new UserPaymentConnector(core.ɵɵinject(UserPaymentAdapter)); }, token: UserPaymentConnector, providedIn: "root" });
        return UserPaymentConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserPaymentConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserOrderConnector = /** @class */ (function () {
        function UserOrderConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} orderCode
         * @return {?}
         */
        UserOrderConnector.prototype.get = /**
         * @param {?} userId
         * @param {?} orderCode
         * @return {?}
         */
        function (userId, orderCode) {
            return this.adapter.load(userId, orderCode);
        };
        /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        UserOrderConnector.prototype.getHistory = /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort) {
            return this.adapter.loadHistory(userId, pageSize, currentPage, sort);
        };
        /**
         * @param {?} orderCode
         * @param {?} consignmentCode
         * @param {?=} userId
         * @return {?}
         */
        UserOrderConnector.prototype.getConsignmentTracking = /**
         * @param {?} orderCode
         * @param {?} consignmentCode
         * @param {?=} userId
         * @return {?}
         */
        function (orderCode, consignmentCode, userId) {
            return this.adapter.getConsignmentTracking(orderCode, consignmentCode, userId);
        };
        /**
         * @param {?} userId
         * @param {?} orderCode
         * @param {?} cancelRequestInput
         * @return {?}
         */
        UserOrderConnector.prototype.cancel = /**
         * @param {?} userId
         * @param {?} orderCode
         * @param {?} cancelRequestInput
         * @return {?}
         */
        function (userId, orderCode, cancelRequestInput) {
            return this.adapter.cancel(userId, orderCode, cancelRequestInput);
        };
        /**
         * @param {?} userId
         * @param {?} returnRequestInput
         * @return {?}
         */
        UserOrderConnector.prototype.return = /**
         * @param {?} userId
         * @param {?} returnRequestInput
         * @return {?}
         */
        function (userId, returnRequestInput) {
            return this.adapter.createReturnRequest(userId, returnRequestInput);
        };
        /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @return {?}
         */
        UserOrderConnector.prototype.getReturnRequestDetail = /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @return {?}
         */
        function (userId, returnRequestCode) {
            return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);
        };
        /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        UserOrderConnector.prototype.getReturnRequestList = /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort) {
            return this.adapter.loadReturnRequestList(userId, pageSize, currentPage, sort);
        };
        /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @param {?} returnRequestModification
         * @return {?}
         */
        UserOrderConnector.prototype.cancelReturnRequest = /**
         * @param {?} userId
         * @param {?} returnRequestCode
         * @param {?} returnRequestModification
         * @return {?}
         */
        function (userId, returnRequestCode, returnRequestModification) {
            return this.adapter.cancelReturnRequest(userId, returnRequestCode, returnRequestModification);
        };
        UserOrderConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserOrderConnector.ctorParameters = function () { return [
            { type: UserOrderAdapter }
        ]; };
        /** @nocollapse */ UserOrderConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserOrderConnector_Factory() { return new UserOrderConnector(core.ɵɵinject(UserOrderAdapter)); }, token: UserOrderConnector, providedIn: "root" });
        return UserOrderConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserOrderConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerCouponConnector = /** @class */ (function () {
        function CustomerCouponConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?} pageSize
         * @param {?} currentPage
         * @param {?} sort
         * @return {?}
         */
        CustomerCouponConnector.prototype.getCustomerCoupons = /**
         * @param {?} userId
         * @param {?} pageSize
         * @param {?} currentPage
         * @param {?} sort
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort) {
            return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);
        };
        /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        CustomerCouponConnector.prototype.turnOnNotification = /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        function (userId, couponCode) {
            return this.adapter.turnOnNotification(userId, couponCode);
        };
        /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        CustomerCouponConnector.prototype.turnOffNotification = /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        function (userId, couponCode) {
            return this.adapter.turnOffNotification(userId, couponCode);
        };
        /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        CustomerCouponConnector.prototype.claimCustomerCoupon = /**
         * @param {?} userId
         * @param {?} couponCode
         * @return {?}
         */
        function (userId, couponCode) {
            return this.adapter.claimCustomerCoupon(userId, couponCode);
        };
        CustomerCouponConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CustomerCouponConnector.ctorParameters = function () { return [
            { type: CustomerCouponAdapter }
        ]; };
        /** @nocollapse */ CustomerCouponConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CustomerCouponConnector_Factory() { return new CustomerCouponConnector(core.ɵɵinject(CustomerCouponAdapter)); }, token: CustomerCouponConnector, providedIn: "root" });
        return CustomerCouponConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CustomerCouponConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserInterestsConnector = /** @class */ (function () {
        function UserInterestsConnector(adapter) {
            this.adapter = adapter;
        }
        /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @param {?=} productCode
         * @param {?=} notificationType
         * @return {?}
         */
        UserInterestsConnector.prototype.getInterests = /**
         * @param {?} userId
         * @param {?=} pageSize
         * @param {?=} currentPage
         * @param {?=} sort
         * @param {?=} productCode
         * @param {?=} notificationType
         * @return {?}
         */
        function (userId, pageSize, currentPage, sort, productCode, notificationType) {
            return this.adapter.getInterests(userId, pageSize, currentPage, sort, productCode, notificationType);
        };
        /**
         * @param {?} userId
         * @param {?} item
         * @return {?}
         */
        UserInterestsConnector.prototype.removeInterest = /**
         * @param {?} userId
         * @param {?} item
         * @return {?}
         */
        function (userId, item) {
            return this.adapter.removeInterest(userId, item);
        };
        /**
         * @param {?} userId
         * @param {?} productCode
         * @param {?} notificationType
         * @return {?}
         */
        UserInterestsConnector.prototype.addInterest = /**
         * @param {?} userId
         * @param {?} productCode
         * @param {?} notificationType
         * @return {?}
         */
        function (userId, productCode, notificationType) {
            return this.adapter.addInterest(userId, productCode, notificationType);
        };
        UserInterestsConnector.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserInterestsConnector.ctorParameters = function () { return [
            { type: UserInterestsAdapter }
        ]; };
        /** @nocollapse */ UserInterestsConnector.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserInterestsConnector_Factory() { return new UserInterestsConnector(core.ɵɵinject(UserInterestsAdapter)); }, token: UserInterestsConnector, providedIn: "root" });
        return UserInterestsConnector;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserInterestsConnector.prototype.adapter;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Unified facade for both anonymous and registered user consents.
     */
    var ConsentService = /** @class */ (function () {
        function ConsentService(anonymousConsentsService, userConsentService) {
            this.anonymousConsentsService = anonymousConsentsService;
            this.userConsentService = userConsentService;
        }
        /**
         * Returns either anonymous consent or registered consent as they are emmited.
         * @param templateCode for which to return either anonymous or registered consent.
         */
        /**
         * Returns either anonymous consent or registered consent as they are emmited.
         * @param {?} templateCode for which to return either anonymous or registered consent.
         * @return {?}
         */
        ConsentService.prototype.getConsent = /**
         * Returns either anonymous consent or registered consent as they are emmited.
         * @param {?} templateCode for which to return either anonymous or registered consent.
         * @return {?}
         */
        function (templateCode) {
            return rxjs.merge(this.userConsentService.getConsent(templateCode), this.anonymousConsentsService.getConsent(templateCode));
        };
        /**
         * Checks if the `templateId`'s template has a given consent.
         * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.
         *
         * @param templateId of a template which's consent should be checked
         */
        /**
         * Checks if the `templateId`'s template has a given consent.
         * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.
         *
         * @param {?} templateId of a template which's consent should be checked
         * @return {?}
         */
        ConsentService.prototype.checkConsentGivenByTemplateId = /**
         * Checks if the `templateId`'s template has a given consent.
         * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.
         *
         * @param {?} templateId of a template which's consent should be checked
         * @return {?}
         */
        function (templateId) {
            var _this = this;
            return this.getConsent(templateId).pipe(operators.map((/**
             * @param {?} consent
             * @return {?}
             */
            function (consent) {
                if (!consent) {
                    return false;
                }
                return _this.isAnonymousConsentType(consent)
                    ? _this.anonymousConsentsService.isConsentGiven(consent)
                    : _this.userConsentService.isConsentGiven(consent);
            })), operators.distinctUntilChanged());
        };
        /**
         * Checks if the `templateId`'s template has a withdrawn consent.
         * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.
         *
         * @param templateId of a template which's consent should be checked
         */
        /**
         * Checks if the `templateId`'s template has a withdrawn consent.
         * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.
         *
         * @param {?} templateId of a template which's consent should be checked
         * @return {?}
         */
        ConsentService.prototype.checkConsentWithdrawnByTemplateId = /**
         * Checks if the `templateId`'s template has a withdrawn consent.
         * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.
         *
         * @param {?} templateId of a template which's consent should be checked
         * @return {?}
         */
        function (templateId) {
            var _this = this;
            return this.getConsent(templateId).pipe(operators.map((/**
             * @param {?} consent
             * @return {?}
             */
            function (consent) {
                if (!consent) {
                    return true;
                }
                return _this.isAnonymousConsentType(consent)
                    ? _this.anonymousConsentsService.isConsentWithdrawn(consent)
                    : _this.userConsentService.isConsentWithdrawn(consent);
            })), operators.distinctUntilChanged());
        };
        /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`
         *
         * @param consent a consent to check
         */
        /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`
         *
         * @param {?} consent a consent to check
         * @return {?}
         */
        ConsentService.prototype.isConsentGiven = /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`
         *
         * @param {?} consent a consent to check
         * @return {?}
         */
        function (consent) {
            return this.isAnonymousConsentType(consent)
                ? this.anonymousConsentsService.isConsentGiven(consent)
                : this.userConsentService.isConsentGiven(consent);
        };
        /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`
         *
         * @param consent a consent to check
         */
        /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`
         *
         * @param {?} consent a consent to check
         * @return {?}
         */
        ConsentService.prototype.isConsentWithdrawn = /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`
         *
         * @param {?} consent a consent to check
         * @return {?}
         */
        function (consent) {
            return this.isAnonymousConsentType(consent)
                ? this.anonymousConsentsService.isConsentWithdrawn(consent)
                : this.userConsentService.isConsentWithdrawn(consent);
        };
        /**
         * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.
         */
        /**
         * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.
         * @param {?} consent
         * @return {?}
         */
        ConsentService.prototype.isAnonymousConsentType = /**
         * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.
         * @param {?} consent
         * @return {?}
         */
        function (consent) {
            if (!consent) {
                return false;
            }
            return ((/** @type {?} */ (consent))).templateCode !== undefined;
        };
        /**
         * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.
         */
        /**
         * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.
         * @param {?} consent
         * @return {?}
         */
        ConsentService.prototype.isConsentType = /**
         * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.
         * @param {?} consent
         * @return {?}
         */
        function (consent) {
            if (!consent) {
                return false;
            }
            return ((/** @type {?} */ (consent))).code !== undefined;
        };
        ConsentService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        ConsentService.ctorParameters = function () { return [
            { type: AnonymousConsentsService },
            { type: UserConsentService }
        ]; };
        /** @nocollapse */ ConsentService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ConsentService_Factory() { return new ConsentService(core.ɵɵinject(AnonymousConsentsService), core.ɵɵinject(UserConsentService)); }, token: ConsentService, providedIn: "root" });
        return ConsentService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ConsentService.prototype.anonymousConsentsService;
        /**
         * @type {?}
         * @protected
         */
        ConsentService.prototype.userConsentService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserAddressService = /** @class */ (function () {
        function UserAddressService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Retrieves user's addresses
         */
        /**
         * Retrieves user's addresses
         * @return {?}
         */
        UserAddressService.prototype.loadAddresses = /**
         * Retrieves user's addresses
         * @return {?}
         */
        function () {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new LoadUserAddresses(userId));
            }));
        };
        /**
         * Adds user address
         * @param address a user address
         */
        /**
         * Adds user address
         * @param {?} address a user address
         * @return {?}
         */
        UserAddressService.prototype.addUserAddress = /**
         * Adds user address
         * @param {?} address a user address
         * @return {?}
         */
        function (address) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new AddUserAddress({
                    userId: userId,
                    address: address,
                }));
            }));
        };
        /**
         * Sets user address as default
         * @param addressId a user address ID
         */
        /**
         * Sets user address as default
         * @param {?} addressId a user address ID
         * @return {?}
         */
        UserAddressService.prototype.setAddressAsDefault = /**
         * Sets user address as default
         * @param {?} addressId a user address ID
         * @return {?}
         */
        function (addressId) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new UpdateUserAddress({
                    userId: userId,
                    addressId: addressId,
                    address: { defaultAddress: true },
                }));
            }));
        };
        /**
         * Updates existing user address
         * @param addressId a user address ID
         * @param address a user address
         */
        /**
         * Updates existing user address
         * @param {?} addressId a user address ID
         * @param {?} address a user address
         * @return {?}
         */
        UserAddressService.prototype.updateUserAddress = /**
         * Updates existing user address
         * @param {?} addressId a user address ID
         * @param {?} address a user address
         * @return {?}
         */
        function (addressId, address) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new UpdateUserAddress({
                    userId: userId,
                    addressId: addressId,
                    address: address,
                }));
            }));
        };
        /**
         * Deletes existing user address
         * @param addressId a user address ID
         */
        /**
         * Deletes existing user address
         * @param {?} addressId a user address ID
         * @return {?}
         */
        UserAddressService.prototype.deleteUserAddress = /**
         * Deletes existing user address
         * @param {?} addressId a user address ID
         * @return {?}
         */
        function (addressId) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new DeleteUserAddress({
                    userId: userId,
                    addressId: addressId,
                }));
            }));
        };
        /**
         * Returns addresses
         */
        /**
         * Returns addresses
         * @return {?}
         */
        UserAddressService.prototype.getAddresses = /**
         * Returns addresses
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAddresses));
        };
        /**
         * Returns a loading flag for addresses
         */
        /**
         * Returns a loading flag for addresses
         * @return {?}
         */
        UserAddressService.prototype.getAddressesLoading = /**
         * Returns a loading flag for addresses
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAddressesLoading));
        };
        /**
         * @return {?}
         */
        UserAddressService.prototype.getAddressesLoadedSuccess = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAddressesLoadedSuccess));
        };
        /**
         * Retrieves delivery countries
         */
        /**
         * Retrieves delivery countries
         * @return {?}
         */
        UserAddressService.prototype.loadDeliveryCountries = /**
         * Retrieves delivery countries
         * @return {?}
         */
        function () {
            this.store.dispatch(new LoadDeliveryCountries());
        };
        /**
         * Returns all delivery countries
         */
        /**
         * Returns all delivery countries
         * @return {?}
         */
        UserAddressService.prototype.getDeliveryCountries = /**
         * Returns all delivery countries
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAllDeliveryCountries));
        };
        /**
         * Returns a country based on the provided `isocode`
         * @param isocode an isocode for a country
         */
        /**
         * Returns a country based on the provided `isocode`
         * @param {?} isocode an isocode for a country
         * @return {?}
         */
        UserAddressService.prototype.getCountry = /**
         * Returns a country based on the provided `isocode`
         * @param {?} isocode an isocode for a country
         * @return {?}
         */
        function (isocode) {
            return this.store.pipe(store.select(countrySelectorFactory(isocode)));
        };
        /**
         * Retrieves regions for specified country by `countryIsoCode`
         * @param countryIsoCode
         */
        /**
         * Retrieves regions for specified country by `countryIsoCode`
         * @param {?} countryIsoCode
         * @return {?}
         */
        UserAddressService.prototype.loadRegions = /**
         * Retrieves regions for specified country by `countryIsoCode`
         * @param {?} countryIsoCode
         * @return {?}
         */
        function (countryIsoCode) {
            this.store.dispatch(new LoadRegions(countryIsoCode));
        };
        /**
         * Clear regions in store - useful when changing country
         */
        /**
         * Clear regions in store - useful when changing country
         * @return {?}
         */
        UserAddressService.prototype.clearRegions = /**
         * Clear regions in store - useful when changing country
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearRegions());
        };
        /**
         * Returns all regions
         */
        /**
         * Returns all regions
         * @param {?} countryIsoCode
         * @return {?}
         */
        UserAddressService.prototype.getRegions = /**
         * Returns all regions
         * @param {?} countryIsoCode
         * @return {?}
         */
        function (countryIsoCode) {
            var _this = this;
            return this.store.pipe(store.select(getRegionsDataAndLoading), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var regions = _a.regions, country = _a.country, loading = _a.loading, loaded = _a.loaded;
                if (!countryIsoCode && (loading || loaded)) {
                    _this.clearRegions();
                    return [];
                }
                else if (loading && !loaded) {
                    // don't interrupt loading
                    return [];
                }
                else if (!loading && countryIsoCode !== country && countryIsoCode) {
                    // country changed - clear store and load new regions
                    if (country) {
                        _this.clearRegions();
                    }
                    _this.loadRegions(countryIsoCode);
                    return [];
                }
                return regions;
            })));
        };
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         */
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        UserAddressService.prototype.withUserId = /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        function (callback) {
            if (this.authService) {
                this.authService
                    .getOccUserId()
                    .pipe(operators.take(1))
                    .subscribe((/**
                 * @param {?} userId
                 * @return {?}
                 */
                function (userId) { return callback(userId); }));
            }
            else {
                // TODO(issue:#5628) Deprecated since 1.3.0
                callback(OCC_USER_ID_CURRENT);
            }
        };
        UserAddressService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserAddressService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        /** @nocollapse */ UserAddressService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserAddressService_Factory() { return new UserAddressService(core.ɵɵinject(store.Store), core.ɵɵinject(AuthService)); }, token: UserAddressService, providedIn: "root" });
        return UserAddressService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserAddressService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        UserAddressService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserOrderService = /** @class */ (function () {
        function UserOrderService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Returns an order's detail
         */
        /**
         * Returns an order's detail
         * @return {?}
         */
        UserOrderService.prototype.getOrderDetails = /**
         * Returns an order's detail
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getOrderDetails));
        };
        /**
         * Retrieves order's details
         *
         * @param orderCode an order code
         */
        /**
         * Retrieves order's details
         *
         * @param {?} orderCode an order code
         * @return {?}
         */
        UserOrderService.prototype.loadOrderDetails = /**
         * Retrieves order's details
         *
         * @param {?} orderCode an order code
         * @return {?}
         */
        function (orderCode) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new LoadOrderDetails({
                    userId: userId,
                    orderCode: orderCode,
                }));
            }));
        };
        /**
         * Clears order's details
         */
        /**
         * Clears order's details
         * @return {?}
         */
        UserOrderService.prototype.clearOrderDetails = /**
         * Clears order's details
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearOrderDetails());
        };
        /**
         * Returns order history list
         */
        /**
         * Returns order history list
         * @param {?} pageSize
         * @return {?}
         */
        UserOrderService.prototype.getOrderHistoryList = /**
         * Returns order history list
         * @param {?} pageSize
         * @return {?}
         */
        function (pageSize) {
            var _this = this;
            return this.store.pipe(store.select(getOrdersState), operators.tap((/**
             * @param {?} orderListState
             * @return {?}
             */
            function (orderListState) {
                /** @type {?} */
                var attemptedLoad = orderListState.loading ||
                    orderListState.success ||
                    orderListState.error;
                if (!attemptedLoad) {
                    _this.loadOrderList(pageSize);
                }
            })), operators.map((/**
             * @param {?} orderListState
             * @return {?}
             */
            function (orderListState) { return orderListState.value; })));
        };
        /**
         * Returns a loaded flag for order history list
         */
        /**
         * Returns a loaded flag for order history list
         * @return {?}
         */
        UserOrderService.prototype.getOrderHistoryListLoaded = /**
         * Returns a loaded flag for order history list
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getOrdersLoaded));
        };
        /**
         * Retrieves an order list
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        /**
         * Retrieves an order list
         * @param {?} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @return {?}
         */
        UserOrderService.prototype.loadOrderList = /**
         * Retrieves an order list
         * @param {?} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @return {?}
         */
        function (pageSize, currentPage, sort) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new LoadUserOrders({
                    userId: userId,
                    pageSize: pageSize,
                    currentPage: currentPage,
                    sort: sort,
                }));
            }));
        };
        /**
         * Cleaning order list
         */
        /**
         * Cleaning order list
         * @return {?}
         */
        UserOrderService.prototype.clearOrderList = /**
         * Cleaning order list
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearUserOrders());
        };
        /**
         *  Returns a consignment tracking detail
         */
        /**
         *  Returns a consignment tracking detail
         * @return {?}
         */
        UserOrderService.prototype.getConsignmentTracking = /**
         *  Returns a consignment tracking detail
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getConsignmentTracking));
        };
        /**
         * Retrieves consignment tracking details
         * @param orderCode an order code
         * @param consignmentCode a consignment code
         */
        /**
         * Retrieves consignment tracking details
         * @param {?} orderCode an order code
         * @param {?} consignmentCode a consignment code
         * @return {?}
         */
        UserOrderService.prototype.loadConsignmentTracking = /**
         * Retrieves consignment tracking details
         * @param {?} orderCode an order code
         * @param {?} consignmentCode a consignment code
         * @return {?}
         */
        function (orderCode, consignmentCode) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new LoadConsignmentTracking({
                    userId: userId,
                    orderCode: orderCode,
                    consignmentCode: consignmentCode,
                }));
            }));
        };
        /**
         * Cleaning consignment tracking
         */
        /**
         * Cleaning consignment tracking
         * @return {?}
         */
        UserOrderService.prototype.clearConsignmentTracking = /**
         * Cleaning consignment tracking
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearConsignmentTracking());
        };
        /*
         * Cancel an order
         */
        /*
           * Cancel an order
           */
        /**
         * @param {?} orderCode
         * @param {?} cancelRequestInput
         * @return {?}
         */
        UserOrderService.prototype.cancelOrder = /*
           * Cancel an order
           */
        /**
         * @param {?} orderCode
         * @param {?} cancelRequestInput
         * @return {?}
         */
        function (orderCode, cancelRequestInput) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                _this.store.dispatch(new CancelOrder({
                    userId: userId,
                    orderCode: orderCode,
                    cancelRequestInput: cancelRequestInput,
                }));
            }));
        };
        /**
         * Returns the cancel order loading flag
         */
        /**
         * Returns the cancel order loading flag
         * @return {?}
         */
        UserOrderService.prototype.getCancelOrderLoading = /**
         * Returns the cancel order loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the cancel order success flag
         */
        /**
         * Returns the cancel order success flag
         * @return {?}
         */
        UserOrderService.prototype.getCancelOrderSuccess = /**
         * Returns the cancel order success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID)));
        };
        /**
         * Resets the cancel order process flags
         */
        /**
         * Resets the cancel order process flags
         * @return {?}
         */
        UserOrderService.prototype.resetCancelOrderProcessState = /**
         * Resets the cancel order process flags
         * @return {?}
         */
        function () {
            return this.store.dispatch(new ResetCancelOrderProcess());
        };
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         */
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        UserOrderService.prototype.withUserId = /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        function (callback) {
            if (this.authService) {
                this.authService
                    .getOccUserId()
                    .pipe(operators.take(1))
                    .subscribe((/**
                 * @param {?} userId
                 * @return {?}
                 */
                function (userId) { return callback(userId); }));
            }
            else {
                // TODO(issue:#5628) Deprecated since 1.3.0
                callback(OCC_USER_ID_CURRENT);
            }
        };
        UserOrderService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserOrderService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        /** @nocollapse */ UserOrderService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserOrderService_Factory() { return new UserOrderService(core.ɵɵinject(store.Store), core.ɵɵinject(AuthService)); }, token: UserOrderService, providedIn: "root" });
        return UserOrderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserOrderService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        UserOrderService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerCouponService = /** @class */ (function () {
        function CustomerCouponService(store) {
            this.store = store;
        }
        /**
         * Retrieves customer's coupons
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        /**
         * Retrieves customer's coupons
         * @param {?} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @return {?}
         */
        CustomerCouponService.prototype.loadCustomerCoupons = /**
         * Retrieves customer's coupons
         * @param {?} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @return {?}
         */
        function (pageSize, currentPage, sort) {
            this.store.dispatch(new LoadCustomerCoupons({
                userId: OCC_USER_ID_CURRENT,
                pageSize: pageSize,
                currentPage: currentPage,
                sort: sort,
            }));
        };
        /**
         * Returns customer coupon search result
         * @param pageSize page size
         */
        /**
         * Returns customer coupon search result
         * @param {?} pageSize page size
         * @return {?}
         */
        CustomerCouponService.prototype.getCustomerCoupons = /**
         * Returns customer coupon search result
         * @param {?} pageSize page size
         * @return {?}
         */
        function (pageSize) {
            var _this = this;
            return this.store.pipe(store.select(getCustomerCouponsState), operators.tap((/**
             * @param {?} customerCouponsState
             * @return {?}
             */
            function (customerCouponsState) {
                /** @type {?} */
                var attemptedLoad = customerCouponsState.loading ||
                    customerCouponsState.success ||
                    customerCouponsState.error;
                if (!attemptedLoad) {
                    _this.loadCustomerCoupons(pageSize);
                }
            })), operators.map((/**
             * @param {?} customerCouponsState
             * @return {?}
             */
            function (customerCouponsState) { return customerCouponsState.value; })));
        };
        /**
         * Returns a loaded flag for customer coupons
         */
        /**
         * Returns a loaded flag for customer coupons
         * @return {?}
         */
        CustomerCouponService.prototype.getCustomerCouponsLoaded = /**
         * Returns a loaded flag for customer coupons
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getCustomerCouponsLoaded));
        };
        /**
         * Returns a loading flag for customer coupons
         */
        /**
         * Returns a loading flag for customer coupons
         * @return {?}
         */
        CustomerCouponService.prototype.getCustomerCouponsLoading = /**
         * Returns a loading flag for customer coupons
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getCustomerCouponsLoading));
        };
        /**
         * Subscribe a CustomerCoupon Notification
         * @param couponCode a customer coupon code
         */
        /**
         * Subscribe a CustomerCoupon Notification
         * @param {?} couponCode a customer coupon code
         * @return {?}
         */
        CustomerCouponService.prototype.subscribeCustomerCoupon = /**
         * Subscribe a CustomerCoupon Notification
         * @param {?} couponCode a customer coupon code
         * @return {?}
         */
        function (couponCode) {
            this.store.dispatch(new SubscribeCustomerCoupon({
                userId: OCC_USER_ID_CURRENT,
                couponCode: couponCode,
            }));
        };
        /**
         * Returns the subscribe customer coupon notification process loading flag
         */
        /**
         * Returns the subscribe customer coupon notification process loading flag
         * @return {?}
         */
        CustomerCouponService.prototype.getSubscribeCustomerCouponResultLoading = /**
         * Returns the subscribe customer coupon notification process loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the subscribe customer coupon notification process success flag
         */
        /**
         * Returns the subscribe customer coupon notification process success flag
         * @return {?}
         */
        CustomerCouponService.prototype.getSubscribeCustomerCouponResultSuccess = /**
         * Returns the subscribe customer coupon notification process success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the subscribe customer coupon notification process error flag
         */
        /**
         * Returns the subscribe customer coupon notification process error flag
         * @return {?}
         */
        CustomerCouponService.prototype.getSubscribeCustomerCouponResultError = /**
         * Returns the subscribe customer coupon notification process error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Unsubscribe a CustomerCoupon Notification
         * @param couponCode a customer coupon code
         */
        /**
         * Unsubscribe a CustomerCoupon Notification
         * @param {?} couponCode a customer coupon code
         * @return {?}
         */
        CustomerCouponService.prototype.unsubscribeCustomerCoupon = /**
         * Unsubscribe a CustomerCoupon Notification
         * @param {?} couponCode a customer coupon code
         * @return {?}
         */
        function (couponCode) {
            this.store.dispatch(new UnsubscribeCustomerCoupon({
                userId: OCC_USER_ID_CURRENT,
                couponCode: couponCode,
            }));
        };
        /**
         * Returns the unsubscribe customer coupon notification process loading flag
         */
        /**
         * Returns the unsubscribe customer coupon notification process loading flag
         * @return {?}
         */
        CustomerCouponService.prototype.getUnsubscribeCustomerCouponResultLoading = /**
         * Returns the unsubscribe customer coupon notification process loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the unsubscribe customer coupon notification process success flag
         */
        /**
         * Returns the unsubscribe customer coupon notification process success flag
         * @return {?}
         */
        CustomerCouponService.prototype.getUnsubscribeCustomerCouponResultSuccess = /**
         * Returns the unsubscribe customer coupon notification process success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the unsubscribe customer coupon notification process error flag
         */
        /**
         * Returns the unsubscribe customer coupon notification process error flag
         * @return {?}
         */
        CustomerCouponService.prototype.getUnsubscribeCustomerCouponResultError = /**
         * Returns the unsubscribe customer coupon notification process error flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Claim a CustomerCoupon
         * @param couponCode a customer coupon code
         */
        /**
         * Claim a CustomerCoupon
         * @param {?} couponCode a customer coupon code
         * @return {?}
         */
        CustomerCouponService.prototype.claimCustomerCoupon = /**
         * Claim a CustomerCoupon
         * @param {?} couponCode a customer coupon code
         * @return {?}
         */
        function (couponCode) {
            this.store.dispatch(new ClaimCustomerCoupon({
                userId: OCC_USER_ID_CURRENT,
                couponCode: couponCode,
            }));
        };
        /**
         * Returns the claim customer coupon notification process success flag
         */
        /**
         * Returns the claim customer coupon notification process success flag
         * @return {?}
         */
        CustomerCouponService.prototype.getClaimCustomerCouponResultSuccess = /**
         * Returns the claim customer coupon notification process success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID)));
        };
        CustomerCouponService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        CustomerCouponService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        /** @nocollapse */ CustomerCouponService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function CustomerCouponService_Factory() { return new CustomerCouponService(core.ɵɵinject(store.Store)); }, token: CustomerCouponService, providedIn: "root" });
        return CustomerCouponService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        CustomerCouponService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserPaymentService = /** @class */ (function () {
        function UserPaymentService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Loads all user's payment methods.
         */
        /**
         * Loads all user's payment methods.
         * @return {?}
         */
        UserPaymentService.prototype.loadPaymentMethods = /**
         * Loads all user's payment methods.
         * @return {?}
         */
        function () {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new LoadUserPaymentMethods(userId));
            }));
        };
        /**
         * Returns all user's payment methods
         */
        /**
         * Returns all user's payment methods
         * @return {?}
         */
        UserPaymentService.prototype.getPaymentMethods = /**
         * Returns all user's payment methods
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getPaymentMethods));
        };
        /**
         * Returns a loading flag for payment methods
         */
        /**
         * Returns a loading flag for payment methods
         * @return {?}
         */
        UserPaymentService.prototype.getPaymentMethodsLoading = /**
         * Returns a loading flag for payment methods
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getPaymentMethodsLoading));
        };
        /**
         * @return {?}
         */
        UserPaymentService.prototype.getPaymentMethodsLoadedSuccess = /**
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getPaymentMethodsLoadedSuccess));
        };
        /**
         * Sets the payment as a default one
         * @param paymentMethodId a payment method ID
         */
        /**
         * Sets the payment as a default one
         * @param {?} paymentMethodId a payment method ID
         * @return {?}
         */
        UserPaymentService.prototype.setPaymentMethodAsDefault = /**
         * Sets the payment as a default one
         * @param {?} paymentMethodId a payment method ID
         * @return {?}
         */
        function (paymentMethodId) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new SetDefaultUserPaymentMethod({
                    userId: userId,
                    paymentMethodId: paymentMethodId,
                }));
            }));
        };
        /**
         * Deletes the payment method
         *
         * @param paymentMethodId a payment method ID
         */
        /**
         * Deletes the payment method
         *
         * @param {?} paymentMethodId a payment method ID
         * @return {?}
         */
        UserPaymentService.prototype.deletePaymentMethod = /**
         * Deletes the payment method
         *
         * @param {?} paymentMethodId a payment method ID
         * @return {?}
         */
        function (paymentMethodId) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.store.dispatch(new DeleteUserPaymentMethod({
                    userId: userId,
                    paymentMethodId: paymentMethodId,
                }));
            }));
        };
        /**
         * Returns all billing countries
         */
        /**
         * Returns all billing countries
         * @return {?}
         */
        UserPaymentService.prototype.getAllBillingCountries = /**
         * Returns all billing countries
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getAllBillingCountries));
        };
        /**
         * Retrieves billing countries
         */
        /**
         * Retrieves billing countries
         * @return {?}
         */
        UserPaymentService.prototype.loadBillingCountries = /**
         * Retrieves billing countries
         * @return {?}
         */
        function () {
            this.store.dispatch(new LoadBillingCountries());
        };
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         */
        /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        UserPaymentService.prototype.withUserId = /**
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         * @private
         * @param {?} callback
         * @return {?}
         */
        function (callback) {
            if (this.authService) {
                this.authService
                    .getOccUserId()
                    .pipe(operators.take(1))
                    .subscribe((/**
                 * @param {?} userId
                 * @return {?}
                 */
                function (userId) { return callback(userId); }));
            }
            else {
                // TODO(issue:#5628) Deprecated since 1.3.0
                callback(OCC_USER_ID_CURRENT);
            }
        };
        UserPaymentService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserPaymentService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        /** @nocollapse */ UserPaymentService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserPaymentService_Factory() { return new UserPaymentService(core.ɵɵinject(store.Store), core.ɵɵinject(AuthService)); }, token: UserPaymentService, providedIn: "root" });
        return UserPaymentService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserPaymentService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        UserPaymentService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OrderReturnRequestService = /** @class */ (function () {
        function OrderReturnRequestService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Create order return request
         * @param orderCode an order code
         * @param returnRequestInput order return request entry input
         */
        /**
         * Create order return request
         * @param {?} returnRequestInput order return request entry input
         * @return {?}
         */
        OrderReturnRequestService.prototype.createOrderReturnRequest = /**
         * Create order return request
         * @param {?} returnRequestInput order return request entry input
         * @return {?}
         */
        function (returnRequestInput) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                _this.store.dispatch(new CreateOrderReturnRequest({
                    userId: userId,
                    returnRequestInput: returnRequestInput,
                }));
            }));
        };
        /**
         * Return an order return request
         */
        /**
         * Return an order return request
         * @return {?}
         */
        OrderReturnRequestService.prototype.getOrderReturnRequest = /**
         * Return an order return request
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getOrderReturnRequest));
        };
        /**
         * Gets order return request list
         */
        /**
         * Gets order return request list
         * @param {?} pageSize
         * @return {?}
         */
        OrderReturnRequestService.prototype.getOrderReturnRequestList = /**
         * Gets order return request list
         * @param {?} pageSize
         * @return {?}
         */
        function (pageSize) {
            var _this = this;
            return this.store.pipe(store.select(getOrderReturnRequestListState), operators.tap((/**
             * @param {?} returnListState
             * @return {?}
             */
            function (returnListState) {
                /** @type {?} */
                var attemptedLoad = returnListState.loading ||
                    returnListState.success ||
                    returnListState.error;
                if (!attemptedLoad) {
                    _this.loadOrderReturnRequestList(pageSize);
                }
            })), operators.map((/**
             * @param {?} returnListState
             * @return {?}
             */
            function (returnListState) { return returnListState.value; })));
        };
        /**
         * Loads order return request detail
         * @param returnRequestCode
         */
        /**
         * Loads order return request detail
         * @param {?} returnRequestCode
         * @return {?}
         */
        OrderReturnRequestService.prototype.loadOrderReturnRequestDetail = /**
         * Loads order return request detail
         * @param {?} returnRequestCode
         * @return {?}
         */
        function (returnRequestCode) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                _this.store.dispatch(new LoadOrderReturnRequest({
                    userId: userId,
                    returnRequestCode: returnRequestCode,
                }));
            }));
        };
        /**
         * Loads order return request list
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        /**
         * Loads order return request list
         * @param {?} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @return {?}
         */
        OrderReturnRequestService.prototype.loadOrderReturnRequestList = /**
         * Loads order return request list
         * @param {?} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @return {?}
         */
        function (pageSize, currentPage, sort) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                _this.store.dispatch(new LoadOrderReturnRequestList({
                    userId: userId,
                    pageSize: pageSize,
                    currentPage: currentPage,
                    sort: sort,
                }));
            }));
        };
        /**
         * Cleaning order return request list
         */
        /**
         * Cleaning order return request list
         * @return {?}
         */
        OrderReturnRequestService.prototype.clearOrderReturnRequestList = /**
         * Cleaning order return request list
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearOrderReturnRequestList());
        };
        /**
         * Get the order return request loading flag
         */
        /**
         * Get the order return request loading flag
         * @return {?}
         */
        OrderReturnRequestService.prototype.getReturnRequestLoading = /**
         * Get the order return request loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getOrderReturnRequestLoading));
        };
        /**
         * Get the order return request success flag
         */
        /**
         * Get the order return request success flag
         * @return {?}
         */
        OrderReturnRequestService.prototype.getReturnRequestSuccess = /**
         * Get the order return request success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getOrderReturnRequestSuccess));
        };
        /**
         * Cleaning order return request details
         */
        /**
         * Cleaning order return request details
         * @return {?}
         */
        OrderReturnRequestService.prototype.clearOrderReturnRequestDetail = /**
         * Cleaning order return request details
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearOrderReturnRequest());
        };
        /*
         * Cancel order return request
         */
        /*
           * Cancel order return request
           */
        /**
         * @param {?} returnRequestCode
         * @param {?} returnRequestModification
         * @return {?}
         */
        OrderReturnRequestService.prototype.cancelOrderReturnRequest = /*
           * Cancel order return request
           */
        /**
         * @param {?} returnRequestCode
         * @param {?} returnRequestModification
         * @return {?}
         */
        function (returnRequestCode, returnRequestModification) {
            var _this = this;
            this.withUserId((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                _this.store.dispatch(new CancelOrderReturnRequest({
                    userId: userId,
                    returnRequestCode: returnRequestCode,
                    returnRequestModification: returnRequestModification,
                }));
            }));
        };
        /**
         * Returns the cancel return request loading flag
         */
        /**
         * Returns the cancel return request loading flag
         * @return {?}
         */
        OrderReturnRequestService.prototype.getCancelReturnRequestLoading = /**
         * Returns the cancel return request loading flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID)));
        };
        /**
         * Returns the cancel return request success flag
         */
        /**
         * Returns the cancel return request success flag
         * @return {?}
         */
        OrderReturnRequestService.prototype.getCancelReturnRequestSuccess = /**
         * Returns the cancel return request success flag
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID)));
        };
        /**
         * Resets the cancel return request process flags
         */
        /**
         * Resets the cancel return request process flags
         * @return {?}
         */
        OrderReturnRequestService.prototype.resetCancelReturnRequestProcessState = /**
         * Resets the cancel return request process flags
         * @return {?}
         */
        function () {
            return this.store.dispatch(new ResetCancelReturnProcess());
        };
        /*
         * Utility method to distinquish pre / post 1.3.0 in a convenient way.
         *
         */
        /*
           * Utility method to distinquish pre / post 1.3.0 in a convenient way.
           *
           */
        /**
         * @private
         * @param {?} callback
         * @return {?}
         */
        OrderReturnRequestService.prototype.withUserId = /*
           * Utility method to distinquish pre / post 1.3.0 in a convenient way.
           *
           */
        /**
         * @private
         * @param {?} callback
         * @return {?}
         */
        function (callback) {
            if (this.authService) {
                this.authService
                    .getOccUserId()
                    .pipe(operators.take(1))
                    .subscribe((/**
                 * @param {?} userId
                 * @return {?}
                 */
                function (userId) { return callback(userId); }));
            }
            else {
                // TODO(issue:#5628) Deprecated since 1.3.0
                callback(OCC_USER_ID_CURRENT);
            }
        };
        OrderReturnRequestService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        OrderReturnRequestService.ctorParameters = function () { return [
            { type: store.Store },
            { type: AuthService }
        ]; };
        /** @nocollapse */ OrderReturnRequestService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function OrderReturnRequestService_Factory() { return new OrderReturnRequestService(core.ɵɵinject(store.Store), core.ɵɵinject(AuthService)); }, token: OrderReturnRequestService, providedIn: "root" });
        return OrderReturnRequestService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        OrderReturnRequestService.prototype.store;
        /**
         * @type {?}
         * @protected
         */
        OrderReturnRequestService.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserNotificationPreferenceService = /** @class */ (function () {
        function UserNotificationPreferenceService(store) {
            this.store = store;
        }
        /**
         * Returns all notification preferences.
         */
        /**
         * Returns all notification preferences.
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.getPreferences = /**
         * Returns all notification preferences.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getPreferences));
        };
        /**
         * Returns all enabled notification preferences.
         */
        /**
         * Returns all enabled notification preferences.
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.getEnabledPreferences = /**
         * Returns all enabled notification preferences.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getEnabledPreferences));
        };
        /**
         * Loads all notification preferences.
         */
        /**
         * Loads all notification preferences.
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.loadPreferences = /**
         * Loads all notification preferences.
         * @return {?}
         */
        function () {
            this.store.dispatch(new LoadNotificationPreferences(OCC_USER_ID_CURRENT));
        };
        /**
         * Clear all notification preferences.
         */
        /**
         * Clear all notification preferences.
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.clearPreferences = /**
         * Clear all notification preferences.
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearNotificationPreferences());
        };
        /**
         * Returns a loading flag for notification preferences.
         */
        /**
         * Returns a loading flag for notification preferences.
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.getPreferencesLoading = /**
         * Returns a loading flag for notification preferences.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getPreferencesLoading));
        };
        /**
         * Updating notification preferences.
         * @param preferences a preference list
         */
        /**
         * Updating notification preferences.
         * @param {?} preferences a preference list
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.updatePreferences = /**
         * Updating notification preferences.
         * @param {?} preferences a preference list
         * @return {?}
         */
        function (preferences) {
            this.store.dispatch(new UpdateNotificationPreferences({
                userId: OCC_USER_ID_CURRENT,
                preferences: preferences,
            }));
        };
        /**
         * Returns a loading flag for updating preferences.
         */
        /**
         * Returns a loading flag for updating preferences.
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.getUpdatePreferencesResultLoading = /**
         * Returns a loading flag for updating preferences.
         * @return {?}
         */
        function () {
            return this.store.select(getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID));
        };
        /**
         * Resets the update notification preferences process state. The state needs to be
         * reset after the process concludes, regardless if it's a success or an error.
         */
        /**
         * Resets the update notification preferences process state. The state needs to be
         * reset after the process concludes, regardless if it's a success or an error.
         * @return {?}
         */
        UserNotificationPreferenceService.prototype.resetNotificationPreferences = /**
         * Resets the update notification preferences process state. The state needs to be
         * reset after the process concludes, regardless if it's a success or an error.
         * @return {?}
         */
        function () {
            this.store.dispatch(new ResetNotificationPreferences());
        };
        UserNotificationPreferenceService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserNotificationPreferenceService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        /** @nocollapse */ UserNotificationPreferenceService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserNotificationPreferenceService_Factory() { return new UserNotificationPreferenceService(core.ɵɵinject(store.Store)); }, token: UserNotificationPreferenceService, providedIn: "root" });
        return UserNotificationPreferenceService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserNotificationPreferenceService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserInterestsService = /** @class */ (function () {
        function UserInterestsService(store) {
            this.store = store;
        }
        /**
         * Retrieves an product interest list
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        /**
         * Retrieves an product interest list
         * @param {?=} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @param {?=} productCode
         * @param {?=} notificationType
         * @return {?}
         */
        UserInterestsService.prototype.loadProductInterests = /**
         * Retrieves an product interest list
         * @param {?=} pageSize page size
         * @param {?=} currentPage current page
         * @param {?=} sort sort
         * @param {?=} productCode
         * @param {?=} notificationType
         * @return {?}
         */
        function (pageSize, currentPage, sort, productCode, notificationType) {
            this.store.dispatch(new LoadProductInterests({
                userId: OCC_USER_ID_CURRENT,
                pageSize: pageSize,
                currentPage: currentPage,
                sort: sort,
                productCode: productCode,
                notificationType: notificationType,
            }));
        };
        /**
         * Returns product interests
         */
        /**
         * Returns product interests
         * @return {?}
         */
        UserInterestsService.prototype.getProductInterests = /**
         * Returns product interests
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getInterests));
        };
        /**
         * Returns product interests
         * @param pageSize the page size
         */
        /**
         * Returns product interests
         * @param {?=} pageSize the page size
         * @return {?}
         */
        UserInterestsService.prototype.getAndLoadProductInterests = /**
         * Returns product interests
         * @param {?=} pageSize the page size
         * @return {?}
         */
        function (pageSize) {
            var _this = this;
            return this.store.pipe(store.select(getInterestsState), operators.tap((/**
             * @param {?} interestListState
             * @return {?}
             */
            function (interestListState) {
                /** @type {?} */
                var attemptedLoad = interestListState.loading ||
                    interestListState.success ||
                    interestListState.error;
                if (!attemptedLoad) {
                    _this.loadProductInterests(pageSize);
                }
            })), operators.map((/**
             * @param {?} interestListState
             * @return {?}
             */
            function (interestListState) { return interestListState.value; })));
        };
        /**
         * Returns a loading flag for product interests
         */
        /**
         * Returns a loading flag for product interests
         * @return {?}
         */
        UserInterestsService.prototype.getProdutInterestsLoading = /**
         * Returns a loading flag for product interests
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getInterestsLoading));
        };
        /**
         * Removes a ProductInterestRelation
         * @param item product interest relation item
         * @param singleDelete flag to delete only one interest
         */
        /**
         * Removes a ProductInterestRelation
         * @param {?} item product interest relation item
         * @param {?=} singleDelete flag to delete only one interest
         * @return {?}
         */
        UserInterestsService.prototype.removeProdutInterest = /**
         * Removes a ProductInterestRelation
         * @param {?} item product interest relation item
         * @param {?=} singleDelete flag to delete only one interest
         * @return {?}
         */
        function (item, singleDelete) {
            this.store.dispatch(new RemoveProductInterest({
                userId: OCC_USER_ID_CURRENT,
                item: item,
                singleDelete: singleDelete,
            }));
        };
        /**
         * Returns a loading flag for removing product interests.
         */
        /**
         * Returns a loading flag for removing product interests.
         * @return {?}
         */
        UserInterestsService.prototype.getRemoveProdutInterestLoading = /**
         * Returns a loading flag for removing product interests.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID)));
        };
        /**
         * Returns a success flag for removing a product interests.
         */
        /**
         * Returns a success flag for removing a product interests.
         * @return {?}
         */
        UserInterestsService.prototype.getRemoveProdutInterestSuccess = /**
         * Returns a success flag for removing a product interests.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID)));
        };
        /**
         * Add a new product interest.
         *
         * @param productCode the product code
         * @param notificationType the notification type
         */
        /**
         * Add a new product interest.
         *
         * @param {?} productCode the product code
         * @param {?} notificationType the notification type
         * @return {?}
         */
        UserInterestsService.prototype.addProductInterest = /**
         * Add a new product interest.
         *
         * @param {?} productCode the product code
         * @param {?} notificationType the notification type
         * @return {?}
         */
        function (productCode, notificationType) {
            this.store.dispatch(new AddProductInterest({
                userId: OCC_USER_ID_CURRENT,
                productCode: productCode,
                notificationType: notificationType,
            }));
        };
        /**
         * Returns a success flag for adding a product interest.
         */
        /**
         * Returns a success flag for adding a product interest.
         * @return {?}
         */
        UserInterestsService.prototype.getAddProductInterestSuccess = /**
         * Returns a success flag for adding a product interest.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID)));
        };
        /**
         * Returns a error flag for adding a product interest.
         */
        /**
         * Returns a error flag for adding a product interest.
         * @return {?}
         */
        UserInterestsService.prototype.getAddProductInterestError = /**
         * Returns a error flag for adding a product interest.
         * @return {?}
         */
        function () {
            return this.store.pipe(store.select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID)));
        };
        /**
         * Reset product interest adding state.
         */
        /**
         * Reset product interest adding state.
         * @return {?}
         */
        UserInterestsService.prototype.resetAddInterestState = /**
         * Reset product interest adding state.
         * @return {?}
         */
        function () {
            this.store.dispatch(new ResetAddInterestState());
        };
        /**
         * Reset product interest removing state.
         */
        /**
         * Reset product interest removing state.
         * @return {?}
         */
        UserInterestsService.prototype.resetRemoveInterestState = /**
         * Reset product interest removing state.
         * @return {?}
         */
        function () {
            this.store.dispatch(new ResetRemoveInterestState());
        };
        /**
         * Clears product interests
         */
        /**
         * Clears product interests
         * @return {?}
         */
        UserInterestsService.prototype.clearProductInterests = /**
         * Clears product interests
         * @return {?}
         */
        function () {
            this.store.dispatch(new ClearProductInterests());
        };
        UserInterestsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        UserInterestsService.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        /** @nocollapse */ UserInterestsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserInterestsService_Factory() { return new UserInterestsService(core.ɵɵinject(store.Store)); }, token: UserInterestsService, providedIn: "root" });
        return UserInterestsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UserInterestsService.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$l = {
        entities: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$l(state, action) {
        if (state === void 0) { state = initialState$l; }
        switch (action.type) {
            case LOAD_BILLING_COUNTRIES_SUCCESS: {
                /** @type {?} */
                var billingCountries = action.payload;
                /** @type {?} */
                var entities = billingCountries.reduce((/**
                 * @param {?} countryEntities
                 * @param {?} name
                 * @return {?}
                 */
                function (countryEntities, name) {
                    var _a;
                    return __assign({}, countryEntities, (_a = {}, _a[name.isocode] = name, _a));
                }), __assign({}, state.entities));
                return __assign({}, state, { entities: entities });
            }
            case CLEAR_USER_MISCS_DATA: {
                return initialState$l;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$m = {};
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$m(state, action) {
        if (state === void 0) { state = initialState$m; }
        switch (action.type) {
            case LOAD_CONSIGNMENT_TRACKING_SUCCESS: {
                /** @type {?} */
                var tracking = action.payload;
                return {
                    tracking: tracking,
                };
            }
            case CLEAR_CONSIGNMENT_TRACKING: {
                return initialState$m;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$n = {
        entities: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$n(state, action) {
        if (state === void 0) { state = initialState$n; }
        switch (action.type) {
            case LOAD_DELIVERY_COUNTRIES_SUCCESS: {
                /** @type {?} */
                var deliveryCountries = action.payload;
                /** @type {?} */
                var entities = deliveryCountries.reduce((/**
                 * @param {?} countryEntities
                 * @param {?} country
                 * @return {?}
                 */
                function (countryEntities, country) {
                    var _a;
                    return __assign({}, countryEntities, (_a = {}, _a[country.isocode] = country, _a));
                }), __assign({}, state.entities));
                return __assign({}, state, { entities: entities });
            }
            case CLEAR_USER_MISCS_DATA: {
                return initialState$n;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$o = [];
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$o(state, action) {
        if (state === void 0) { state = initialState$o; }
        switch (action.type) {
            case LOAD_NOTIFICATION_PREFERENCES_FAIL: {
                return initialState$o;
            }
            case LOAD_NOTIFICATION_PREFERENCES_SUCCESS:
            case UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {
                return action.payload ? action.payload : initialState$o;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$p = {};
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$p(state, action) {
        if (state === void 0) { state = initialState$p; }
        switch (action.type) {
            case LOAD_ORDER_DETAILS_SUCCESS: {
                /** @type {?} */
                var order = action.payload;
                return order;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$q = [];
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$q(state, action) {
        if (state === void 0) { state = initialState$q; }
        switch (action.type) {
            case LOAD_USER_PAYMENT_METHODS_SUCCESS: {
                return action.payload ? action.payload : initialState$q;
            }
            case LOAD_USER_PAYMENT_METHODS_FAIL: {
                return initialState$q;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$r = {
        entities: [],
        country: null,
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$r(state, action) {
        if (state === void 0) { state = initialState$r; }
        switch (action.type) {
            case LOAD_REGIONS_SUCCESS: {
                /** @type {?} */
                var entities = action.payload.entities;
                /** @type {?} */
                var country = action.payload.country;
                if (entities || country) {
                    return __assign({}, state, { entities: entities,
                        country: country });
                }
                return initialState$r;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$s = false;
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$s(state, action) {
        if (state === void 0) { state = initialState$s; }
        switch (action.type) {
            case RESET_PASSWORD_SUCCESS: {
                return true;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$t = {
        entities: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$t(state, action) {
        if (state === void 0) { state = initialState$t; }
        switch (action.type) {
            case LOAD_TITLES_SUCCESS: {
                /** @type {?} */
                var titles = action.payload;
                /** @type {?} */
                var entities = titles.reduce((/**
                 * @param {?} titleEntities
                 * @param {?} name
                 * @return {?}
                 */
                function (titleEntities, name) {
                    var _a;
                    return __assign({}, titleEntities, (_a = {}, _a[name.code] = name, _a));
                }), __assign({}, state.entities));
                return __assign({}, state, { entities: entities });
            }
            case CLEAR_USER_MISCS_DATA: {
                return initialState$t;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$u = [];
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$u(state, action) {
        if (state === void 0) { state = initialState$u; }
        switch (action.type) {
            case LOAD_USER_ADDRESSES_FAIL: {
                return initialState$u;
            }
            case LOAD_USER_ADDRESSES_SUCCESS: {
                return action.payload ? action.payload : initialState$u;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$v = [];
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$v(state, action) {
        if (state === void 0) { state = initialState$v; }
        switch (action.type) {
            case LOAD_USER_CONSENTS_SUCCESS: {
                /** @type {?} */
                var consents = action.payload;
                return consents ? consents : initialState$v;
            }
            case GIVE_USER_CONSENT_SUCCESS: {
                /** @type {?} */
                var updatedConsentTemplate_1 = action.consentTemplate;
                return state.map((/**
                 * @param {?} consentTemplate
                 * @return {?}
                 */
                function (consentTemplate) {
                    return consentTemplate.id === updatedConsentTemplate_1.id
                        ? updatedConsentTemplate_1
                        : consentTemplate;
                }));
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$w = (/** @type {?} */ ({}));
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$w(state, action) {
        if (state === void 0) { state = initialState$w; }
        switch (action.type) {
            case LOAD_USER_DETAILS_SUCCESS: {
                return action.payload;
            }
            case UPDATE_USER_DETAILS_SUCCESS: {
                /** @type {?} */
                var updatedDetails = __assign({}, state, action.userUpdates);
                return __assign({}, updatedDetails, { name: updatedDetails.firstName + " " + updatedDetails.lastName });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$x = {
        orders: [],
        pagination: {},
        sorts: [],
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$x(state, action) {
        if (state === void 0) { state = initialState$x; }
        switch (action.type) {
            case LOAD_USER_ORDERS_SUCCESS: {
                return action.payload ? action.payload : initialState$x;
            }
            case LOAD_USER_ORDERS_FAIL: {
                return initialState$x;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$y = {
        coupons: [],
        sorts: [],
        pagination: {},
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$y(state, action) {
        if (state === void 0) { state = initialState$y; }
        switch (action.type) {
            case LOAD_CUSTOMER_COUPONS_SUCCESS: {
                return action.payload;
            }
            case SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {
                /** @type {?} */
                var updatedCustomerCoupon_1 = action.payload.coupon;
                /** @type {?} */
                var customerCoupons_1 = new Array(state.coupons.length);
                state.coupons.forEach((/**
                 * @param {?} customerCoupon
                 * @param {?} index
                 * @return {?}
                 */
                function (customerCoupon, index) {
                    return customerCoupon.couponId === updatedCustomerCoupon_1.couponId
                        ? (customerCoupons_1[index] = updatedCustomerCoupon_1)
                        : (customerCoupons_1[index] = customerCoupon);
                }));
                return __assign({}, state, { coupons: customerCoupons_1 });
            }
            case UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {
                /** @type {?} */
                var updatedCouponCode_1 = action.payload;
                /** @type {?} */
                var customerCoupons_2 = new Array(state.coupons.length);
                state.coupons.forEach((/**
                 * @param {?} customerCoupon
                 * @param {?} index
                 * @return {?}
                 */
                function (customerCoupon, index) {
                    return customerCoupon.couponId === updatedCouponCode_1
                        ? (customerCoupons_2[index] = __assign({}, customerCoupon, { notificationOn: false }))
                        : (customerCoupons_2[index] = customerCoupon);
                }));
                return __assign({}, state, { coupons: customerCoupons_2 });
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$z = {
        results: [],
        pagination: {},
        sorts: [],
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$z(state, action) {
        if (state === void 0) { state = initialState$z; }
        switch (action.type) {
            case LOAD_PRODUCT_INTERESTS_SUCCESS: {
                return action.payload ? action.payload : initialState$z;
            }
            case LOAD_PRODUCT_INTERESTS_FAIL: {
                return initialState$z;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialState$A = {
        returnRequests: [],
        pagination: {},
        sorts: [],
    };
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function reducer$A(state, action) {
        if (state === void 0) { state = initialState$A; }
        switch (action.type) {
            case LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {
                return action.payload ? action.payload : initialState$A;
            }
        }
        return state;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function getReducers$d() {
        return {
            account: store.combineReducers({
                details: reducer$w,
            }),
            addresses: loaderReducer(USER_ADDRESSES, reducer$u),
            billingCountries: reducer$l,
            consents: loaderReducer(USER_CONSENTS, reducer$v),
            payments: loaderReducer(USER_PAYMENT_METHODS, reducer$q),
            orders: loaderReducer(USER_ORDERS, reducer$x),
            order: loaderReducer(USER_ORDER_DETAILS, reducer$p),
            orderReturn: loaderReducer(USER_RETURN_REQUEST_DETAILS),
            orderReturnList: loaderReducer(USER_RETURN_REQUESTS, reducer$A),
            countries: reducer$n,
            titles: reducer$t,
            regions: loaderReducer(REGIONS, reducer$r),
            resetPassword: reducer$s,
            consignmentTracking: reducer$m,
            customerCoupons: loaderReducer(CUSTOMER_COUPONS, reducer$y),
            notificationPreferences: loaderReducer(NOTIFICATION_PREFERENCES, reducer$o),
            productInterests: loaderReducer(PRODUCT_INTERESTS, reducer$z),
        };
    }
    /** @type {?} */
    var reducerToken$d = new core.InjectionToken('UserReducers');
    /** @type {?} */
    var reducerProvider$d = {
        provide: reducerToken$d,
        useFactory: getReducers$d,
    };
    /**
     * @param {?} reducer
     * @return {?}
     */
    function clearUserState(reducer) {
        return (/**
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        function (state, action) {
            if (action.type === LOGOUT) {
                state = undefined;
            }
            return reducer(state, action);
        });
    }
    /** @type {?} */
    var metaReducers$8 = [clearUserState];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BillingCountriesEffect = /** @class */ (function () {
        function BillingCountriesEffect(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadBillingCountries$ = this.actions$.pipe(effects$d.ofType(LOAD_BILLING_COUNTRIES), operators.switchMap((/**
             * @return {?}
             */
            function () {
                return _this.siteConnector.getCountries(CountryType.BILLING).pipe(operators.map((/**
                 * @param {?} countries
                 * @return {?}
                 */
                function (countries) { return new LoadBillingCountriesSuccess(countries); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadBillingCountriesFail(makeErrorSerializable(error)));
                })));
            })));
        }
        BillingCountriesEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BillingCountriesEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: SiteConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], BillingCountriesEffect.prototype, "loadBillingCountries$", void 0);
        return BillingCountriesEffect;
    }());
    if (false) {
        /** @type {?} */
        BillingCountriesEffect.prototype.loadBillingCountries$;
        /**
         * @type {?}
         * @private
         */
        BillingCountriesEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        BillingCountriesEffect.prototype.siteConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClearMiscsDataEffect = /** @class */ (function () {
        function ClearMiscsDataEffect(actions$) {
            this.actions$ = actions$;
            this.clearMiscsData$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE, CURRENCY_CHANGE), operators.map((/**
             * @return {?}
             */
            function () {
                return new ClearUserMiscsData();
            })));
        }
        ClearMiscsDataEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ClearMiscsDataEffect.ctorParameters = function () { return [
            { type: effects$d.Actions }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ClearMiscsDataEffect.prototype, "clearMiscsData$", void 0);
        return ClearMiscsDataEffect;
    }());
    if (false) {
        /** @type {?} */
        ClearMiscsDataEffect.prototype.clearMiscsData$;
        /**
         * @type {?}
         * @private
         */
        ClearMiscsDataEffect.prototype.actions$;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConsignmentTrackingEffects = /** @class */ (function () {
        function ConsignmentTrackingEffects(actions$, userOrderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userOrderConnector = userOrderConnector;
            this.loadConsignmentTracking$ = this.actions$.pipe(effects$d.ofType(LOAD_CONSIGNMENT_TRACKING), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userOrderConnector
                    .getConsignmentTracking(payload.orderCode, payload.consignmentCode, payload.userId)
                    .pipe(operators.map((/**
                 * @param {?} tracking
                 * @return {?}
                 */
                function (tracking) {
                    return new LoadConsignmentTrackingSuccess(tracking);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadConsignmentTrackingFail(makeErrorSerializable(error)));
                })));
            })));
        }
        ConsignmentTrackingEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ConsignmentTrackingEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserOrderConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ConsignmentTrackingEffects.prototype, "loadConsignmentTracking$", void 0);
        return ConsignmentTrackingEffects;
    }());
    if (false) {
        /** @type {?} */
        ConsignmentTrackingEffects.prototype.loadConsignmentTracking$;
        /**
         * @type {?}
         * @private
         */
        ConsignmentTrackingEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ConsignmentTrackingEffects.prototype.userOrderConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DeliveryCountriesEffects = /** @class */ (function () {
        function DeliveryCountriesEffects(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadDeliveryCountries$ = this.actions$.pipe(effects$d.ofType(LOAD_DELIVERY_COUNTRIES), operators.switchMap((/**
             * @return {?}
             */
            function () {
                return _this.siteConnector.getCountries(CountryType.SHIPPING).pipe(operators.map((/**
                 * @param {?} countries
                 * @return {?}
                 */
                function (countries) { return new LoadDeliveryCountriesSuccess(countries); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadDeliveryCountriesFail(makeErrorSerializable(error)));
                })));
            })));
        }
        DeliveryCountriesEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DeliveryCountriesEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: SiteConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], DeliveryCountriesEffects.prototype, "loadDeliveryCountries$", void 0);
        return DeliveryCountriesEffects;
    }());
    if (false) {
        /** @type {?} */
        DeliveryCountriesEffects.prototype.loadDeliveryCountries$;
        /**
         * @type {?}
         * @private
         */
        DeliveryCountriesEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        DeliveryCountriesEffects.prototype.siteConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ForgotPasswordEffects = /** @class */ (function () {
        function ForgotPasswordEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.requestForgotPasswordEmail$ = this.actions$.pipe(effects$d.ofType(FORGOT_PASSWORD_EMAIL_REQUEST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return action.payload;
            })), operators.concatMap((/**
             * @param {?} userEmailAddress
             * @return {?}
             */
            function (userEmailAddress) {
                return _this.userAccountConnector
                    .requestForgotPasswordEmail(userEmailAddress)
                    .pipe(operators.switchMap((/**
                 * @return {?}
                 */
                function () { return [
                    new ForgotPasswordEmailRequestSuccess(),
                    new AddMessage({
                        text: { key: 'forgottenPassword.passwordResetEmailSent' },
                        type: GlobalMessageType.MSG_TYPE_CONFIRMATION,
                    }),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new ForgotPasswordEmailRequestFail(makeErrorSerializable(error)));
                })));
            })));
        }
        ForgotPasswordEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ForgotPasswordEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ForgotPasswordEffects.prototype, "requestForgotPasswordEmail$", void 0);
        return ForgotPasswordEffects;
    }());
    if (false) {
        /** @type {?} */
        ForgotPasswordEffects.prototype.requestForgotPasswordEmail$;
        /**
         * @type {?}
         * @private
         */
        ForgotPasswordEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ForgotPasswordEffects.prototype.userAccountConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NotificationPreferenceEffects = /** @class */ (function () {
        function NotificationPreferenceEffects(actions$, connector) {
            var _this = this;
            this.actions$ = actions$;
            this.connector = connector;
            this.loadPreferences$ = this.actions$.pipe(effects$d.ofType(LOAD_NOTIFICATION_PREFERENCES), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.connector.loadAll(payload).pipe(operators.map((/**
                 * @param {?} preferences
                 * @return {?}
                 */
                function (preferences) {
                    return new LoadNotificationPreferencesSuccess(preferences);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadNotificationPreferencesFail(makeErrorSerializable(error)));
                })));
            })));
            this.updatePreferences$ = this.actions$.pipe(effects$d.ofType(UPDATE_NOTIFICATION_PREFERENCES), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.connector.update(payload.userId, payload.preferences).pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    return new UpdateNotificationPreferencesSuccess(payload.preferences);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new UpdateNotificationPreferencesFail(makeErrorSerializable(error)));
                })));
            })));
        }
        NotificationPreferenceEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NotificationPreferenceEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserNotificationPreferenceConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], NotificationPreferenceEffects.prototype, "loadPreferences$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], NotificationPreferenceEffects.prototype, "updatePreferences$", void 0);
        return NotificationPreferenceEffects;
    }());
    if (false) {
        /** @type {?} */
        NotificationPreferenceEffects.prototype.loadPreferences$;
        /** @type {?} */
        NotificationPreferenceEffects.prototype.updatePreferences$;
        /**
         * @type {?}
         * @private
         */
        NotificationPreferenceEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        NotificationPreferenceEffects.prototype.connector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OrderDetailsEffect = /** @class */ (function () {
        function OrderDetailsEffect(actions$, orderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.orderConnector = orderConnector;
            this.loadOrderDetails$ = this.actions$.pipe(effects$d.ofType(LOAD_ORDER_DETAILS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.orderConnector.get(payload.userId, payload.orderCode).pipe(operators.map((/**
                 * @param {?} order
                 * @return {?}
                 */
                function (order) {
                    return new LoadOrderDetailsSuccess(order);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadOrderDetailsFail(makeErrorSerializable(error)));
                })));
            })));
            this.cancelOrder$ = this.actions$.pipe(effects$d.ofType(CANCEL_ORDER), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.orderConnector
                    .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)
                    .pipe(operators.map((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return new CancelOrderSuccess(); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new CancelOrderFail(makeErrorSerializable(error)));
                })));
            })));
        }
        OrderDetailsEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OrderDetailsEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserOrderConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OrderDetailsEffect.prototype, "loadOrderDetails$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OrderDetailsEffect.prototype, "cancelOrder$", void 0);
        return OrderDetailsEffect;
    }());
    if (false) {
        /** @type {?} */
        OrderDetailsEffect.prototype.loadOrderDetails$;
        /** @type {?} */
        OrderDetailsEffect.prototype.cancelOrder$;
        /**
         * @type {?}
         * @private
         */
        OrderDetailsEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        OrderDetailsEffect.prototype.orderConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OrderReturnRequestEffect = /** @class */ (function () {
        function OrderReturnRequestEffect(actions$, orderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.orderConnector = orderConnector;
            this.createReturnRequest$ = this.actions$.pipe(effects$d.ofType(CREATE_ORDER_RETURN_REQUEST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.orderConnector
                    .return(payload.userId, payload.returnRequestInput)
                    .pipe(operators.map((/**
                 * @param {?} returnRequest
                 * @return {?}
                 */
                function (returnRequest) {
                    return new CreateOrderReturnRequestSuccess(returnRequest);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new CreateOrderReturnRequestFail(makeErrorSerializable(error)));
                })));
            })));
            this.loadReturnRequest$ = this.actions$.pipe(effects$d.ofType(LOAD_ORDER_RETURN_REQUEST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.orderConnector
                    .getReturnRequestDetail(payload.userId, payload.returnRequestCode)
                    .pipe(operators.map((/**
                 * @param {?} returnRequest
                 * @return {?}
                 */
                function (returnRequest) {
                    return new LoadOrderReturnRequestSuccess(returnRequest);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadOrderReturnRequestFail(makeErrorSerializable(error)));
                })));
            })));
            this.cancelReturnRequest$ = this.actions$.pipe(effects$d.ofType(CANCEL_ORDER_RETURN_REQUEST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.orderConnector
                    .cancelReturnRequest(payload.userId, payload.returnRequestCode, payload.returnRequestModification)
                    .pipe(operators.map((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return new CancelOrderReturnRequestSuccess(); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new CancelOrderReturnRequestFail(makeErrorSerializable(error)));
                })));
            })));
            this.loadReturnRequestList$ = this.actions$.pipe(effects$d.ofType(LOAD_ORDER_RETURN_REQUEST_LIST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.orderConnector
                    .getReturnRequestList(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                    .pipe(operators.map((/**
                 * @param {?} returnRequestList
                 * @return {?}
                 */
                function (returnRequestList) {
                    return new LoadOrderReturnRequestListSuccess(returnRequestList);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadOrderReturnRequestListFail(makeErrorSerializable(error)));
                })));
            })));
        }
        OrderReturnRequestEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OrderReturnRequestEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserOrderConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OrderReturnRequestEffect.prototype, "createReturnRequest$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OrderReturnRequestEffect.prototype, "loadReturnRequest$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OrderReturnRequestEffect.prototype, "cancelReturnRequest$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], OrderReturnRequestEffect.prototype, "loadReturnRequestList$", void 0);
        return OrderReturnRequestEffect;
    }());
    if (false) {
        /** @type {?} */
        OrderReturnRequestEffect.prototype.createReturnRequest$;
        /** @type {?} */
        OrderReturnRequestEffect.prototype.loadReturnRequest$;
        /** @type {?} */
        OrderReturnRequestEffect.prototype.cancelReturnRequest$;
        /** @type {?} */
        OrderReturnRequestEffect.prototype.loadReturnRequestList$;
        /**
         * @type {?}
         * @private
         */
        OrderReturnRequestEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        OrderReturnRequestEffect.prototype.orderConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserPaymentMethodsEffects = /** @class */ (function () {
        function UserPaymentMethodsEffects(actions$, userPaymentMethodConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userPaymentMethodConnector = userPaymentMethodConnector;
            this.loadUserPaymentMethods$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_PAYMENT_METHODS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userPaymentMethodConnector.getAll(payload).pipe(operators.map((/**
                 * @param {?} payments
                 * @return {?}
                 */
                function (payments) {
                    return new LoadUserPaymentMethodsSuccess(payments);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadUserPaymentMethodsFail(makeErrorSerializable(error)));
                })));
            })));
            this.setDefaultUserPaymentMethod$ = this.actions$.pipe(effects$d.ofType(SET_DEFAULT_USER_PAYMENT_METHOD), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userPaymentMethodConnector
                    .setDefault(payload.userId, payload.paymentMethodId)
                    .pipe(operators.switchMap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return [
                    new SetDefaultUserPaymentMethodSuccess(data),
                    new LoadUserPaymentMethods(payload.userId),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new SetDefaultUserPaymentMethodFail(makeErrorSerializable(error)));
                })));
            })));
            this.deleteUserPaymentMethod$ = this.actions$.pipe(effects$d.ofType(DELETE_USER_PAYMENT_METHOD), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userPaymentMethodConnector
                    .delete(payload.userId, payload.paymentMethodId)
                    .pipe(operators.switchMap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return [
                    new DeleteUserPaymentMethodSuccess(data),
                    new LoadUserPaymentMethods(payload.userId),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new DeleteUserPaymentMethodFail(makeErrorSerializable(error)));
                })));
            })));
        }
        UserPaymentMethodsEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserPaymentMethodsEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserPaymentConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserPaymentMethodsEffects.prototype, "loadUserPaymentMethods$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserPaymentMethodsEffects.prototype, "setDefaultUserPaymentMethod$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserPaymentMethodsEffects.prototype, "deleteUserPaymentMethod$", void 0);
        return UserPaymentMethodsEffects;
    }());
    if (false) {
        /** @type {?} */
        UserPaymentMethodsEffects.prototype.loadUserPaymentMethods$;
        /** @type {?} */
        UserPaymentMethodsEffects.prototype.setDefaultUserPaymentMethod$;
        /** @type {?} */
        UserPaymentMethodsEffects.prototype.deleteUserPaymentMethod$;
        /**
         * @type {?}
         * @private
         */
        UserPaymentMethodsEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UserPaymentMethodsEffects.prototype.userPaymentMethodConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RegionsEffects = /** @class */ (function () {
        function RegionsEffects(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadRegions$ = this.actions$.pipe(effects$d.ofType(LOAD_REGIONS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return action.payload;
            })), operators.switchMap((/**
             * @param {?} countryCode
             * @return {?}
             */
            function (countryCode) {
                return _this.siteConnector.getRegions(countryCode).pipe(operators.map((/**
                 * @param {?} regions
                 * @return {?}
                 */
                function (regions) {
                    return new LoadRegionsSuccess({
                        entities: regions,
                        country: countryCode,
                    });
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadRegionsFail(makeErrorSerializable(error)));
                })));
            })));
            this.resetRegions$ = this.actions$.pipe(effects$d.ofType(CLEAR_USER_MISCS_DATA, CLEAR_REGIONS), operators.map((/**
             * @return {?}
             */
            function () {
                return new LoaderResetAction(REGIONS);
            })));
        }
        RegionsEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RegionsEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: SiteConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], RegionsEffects.prototype, "loadRegions$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], RegionsEffects.prototype, "resetRegions$", void 0);
        return RegionsEffects;
    }());
    if (false) {
        /** @type {?} */
        RegionsEffects.prototype.loadRegions$;
        /** @type {?} */
        RegionsEffects.prototype.resetRegions$;
        /**
         * @type {?}
         * @private
         */
        RegionsEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        RegionsEffects.prototype.siteConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ResetPasswordEffects = /** @class */ (function () {
        function ResetPasswordEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.resetPassword$ = this.actions$.pipe(effects$d.ofType(RESET_PASSWORD), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var token = _a.token, password = _a.password;
                return _this.userAccountConnector.resetPassword(token, password).pipe(operators.switchMap((/**
                 * @return {?}
                 */
                function () { return [
                    new ResetPasswordSuccess(),
                    new AddMessage({
                        text: { key: 'forgottenPassword.passwordResetSuccess' },
                        type: GlobalMessageType.MSG_TYPE_CONFIRMATION,
                    }),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new ResetPasswordFail(makeErrorSerializable(error)));
                })));
            })));
        }
        ResetPasswordEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ResetPasswordEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ResetPasswordEffects.prototype, "resetPassword$", void 0);
        return ResetPasswordEffects;
    }());
    if (false) {
        /** @type {?} */
        ResetPasswordEffects.prototype.resetPassword$;
        /**
         * @type {?}
         * @private
         */
        ResetPasswordEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ResetPasswordEffects.prototype.userAccountConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TitlesEffects = /** @class */ (function () {
        function TitlesEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.loadTitles$ = this.actions$.pipe(effects$d.ofType(LOAD_TITLES), operators.switchMap((/**
             * @return {?}
             */
            function () {
                return _this.userAccountConnector.getTitles().pipe(operators.map((/**
                 * @param {?} titles
                 * @return {?}
                 */
                function (titles) {
                    return new LoadTitlesSuccess(titles);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadTitlesFail(makeErrorSerializable(error)));
                })));
            })));
        }
        TitlesEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TitlesEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], TitlesEffects.prototype, "loadTitles$", void 0);
        return TitlesEffects;
    }());
    if (false) {
        /** @type {?} */
        TitlesEffects.prototype.loadTitles$;
        /**
         * @type {?}
         * @private
         */
        TitlesEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        TitlesEffects.prototype.userAccountConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UpdateEmailEffects = /** @class */ (function () {
        function UpdateEmailEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.updateEmail$ = this.actions$.pipe(effects$d.ofType(UPDATE_EMAIL), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userAccountConnector
                    .updateEmail(payload.uid, payload.password, payload.newUid)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () { return new UpdateEmailSuccessAction(payload.newUid); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new UpdateEmailErrorAction(makeErrorSerializable(error)));
                })));
            })));
        }
        UpdateEmailEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UpdateEmailEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UpdateEmailEffects.prototype, "updateEmail$", void 0);
        return UpdateEmailEffects;
    }());
    if (false) {
        /** @type {?} */
        UpdateEmailEffects.prototype.updateEmail$;
        /**
         * @type {?}
         * @private
         */
        UpdateEmailEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UpdateEmailEffects.prototype.userAccountConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UpdatePasswordEffects = /** @class */ (function () {
        function UpdatePasswordEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.updatePassword$ = this.actions$.pipe(effects$d.ofType(UPDATE_PASSWORD), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userAccountConnector
                    .updatePassword(payload.userId, payload.oldPassword, payload.newPassword)
                    .pipe(operators.map((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return new UpdatePasswordSuccess(); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new UpdatePasswordFail(makeErrorSerializable(error)));
                })));
            })));
        }
        UpdatePasswordEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UpdatePasswordEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UpdatePasswordEffects.prototype, "updatePassword$", void 0);
        return UpdatePasswordEffects;
    }());
    if (false) {
        /** @type {?} */
        UpdatePasswordEffects.prototype.updatePassword$;
        /**
         * @type {?}
         * @private
         */
        UpdatePasswordEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UpdatePasswordEffects.prototype.userAccountConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserAddressesEffects = /** @class */ (function () {
        function UserAddressesEffects(actions$, userAddressConnector, userAddressService, messageService) {
            var _this = this;
            this.actions$ = actions$;
            this.userAddressConnector = userAddressConnector;
            this.userAddressService = userAddressService;
            this.messageService = messageService;
            this.loadUserAddresses$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_ADDRESSES), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userAddressConnector.getAll(payload).pipe(operators.map((/**
                 * @param {?} addresses
                 * @return {?}
                 */
                function (addresses) {
                    return new LoadUserAddressesSuccess(addresses);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadUserAddressesFail(makeErrorSerializable(error)));
                })));
            })));
            this.addUserAddress$ = this.actions$.pipe(effects$d.ofType(ADD_USER_ADDRESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userAddressConnector
                    .add(payload.userId, payload.address)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new AddUserAddressSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new AddUserAddressFail(makeErrorSerializable(error)));
                })));
            })));
            this.updateUserAddress$ = this.actions$.pipe(effects$d.ofType(UPDATE_USER_ADDRESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userAddressConnector
                    .update(payload.userId, payload.addressId, payload.address)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    // don't show the message if just setting address as default
                    if (payload.address &&
                        Object.keys(payload.address).length === 1 &&
                        payload.address.defaultAddress) {
                        return new LoadUserAddresses(payload.userId);
                    }
                    else {
                        return new UpdateUserAddressSuccess(data);
                    }
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new UpdateUserAddressFail(makeErrorSerializable(error)));
                })));
            })));
            this.deleteUserAddress$ = this.actions$.pipe(effects$d.ofType(DELETE_USER_ADDRESS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userAddressConnector
                    .delete(payload.userId, payload.addressId)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new DeleteUserAddressSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new DeleteUserAddressFail(makeErrorSerializable(error)));
                })));
            })));
            /**
             *  Reload addresses and notify about add success
             */
            this.showGlobalMessageOnAddSuccess$ = this.actions$.pipe(effects$d.ofType(ADD_USER_ADDRESS_SUCCESS), operators.tap((/**
             * @return {?}
             */
            function () {
                _this.loadAddresses();
                _this.showGlobalMessage('addressForm.userAddressAddSuccess');
            })));
            /**
             *  Reload addresses and notify about update success
             */
            this.showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(effects$d.ofType(UPDATE_USER_ADDRESS_SUCCESS), operators.tap((/**
             * @return {?}
             */
            function () {
                _this.loadAddresses();
                _this.showGlobalMessage('addressForm.userAddressUpdateSuccess');
            })));
            /**
             *  Reload addresses and notify about delete success
             */
            this.showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(effects$d.ofType(DELETE_USER_ADDRESS_SUCCESS), operators.tap((/**
             * @return {?}
             */
            function () {
                _this.loadAddresses();
                _this.showGlobalMessage('addressForm.userAddressDeleteSuccess');
            })));
        }
        /**
         * Show global confirmation message with provided text
         */
        /**
         * Show global confirmation message with provided text
         * @private
         * @param {?} text
         * @return {?}
         */
        UserAddressesEffects.prototype.showGlobalMessage = /**
         * Show global confirmation message with provided text
         * @private
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this.messageService.add({ key: text }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        };
        /**
         * @private
         * @return {?}
         */
        UserAddressesEffects.prototype.loadAddresses = /**
         * @private
         * @return {?}
         */
        function () {
            this.userAddressService.loadAddresses();
        };
        UserAddressesEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserAddressesEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserAddressConnector },
            { type: UserAddressService },
            { type: GlobalMessageService }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserAddressesEffects.prototype, "loadUserAddresses$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserAddressesEffects.prototype, "addUserAddress$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserAddressesEffects.prototype, "updateUserAddress$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserAddressesEffects.prototype, "deleteUserAddress$", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", Object)
        ], UserAddressesEffects.prototype, "showGlobalMessageOnAddSuccess$", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", Object)
        ], UserAddressesEffects.prototype, "showGlobalMessageOnUpdateSuccess$", void 0);
        __decorate([
            effects$d.Effect({ dispatch: false }),
            __metadata("design:type", Object)
        ], UserAddressesEffects.prototype, "showGlobalMessageOnDeleteSuccess$", void 0);
        return UserAddressesEffects;
    }());
    if (false) {
        /** @type {?} */
        UserAddressesEffects.prototype.loadUserAddresses$;
        /** @type {?} */
        UserAddressesEffects.prototype.addUserAddress$;
        /** @type {?} */
        UserAddressesEffects.prototype.updateUserAddress$;
        /** @type {?} */
        UserAddressesEffects.prototype.deleteUserAddress$;
        /**
         *  Reload addresses and notify about add success
         * @type {?}
         */
        UserAddressesEffects.prototype.showGlobalMessageOnAddSuccess$;
        /**
         *  Reload addresses and notify about update success
         * @type {?}
         */
        UserAddressesEffects.prototype.showGlobalMessageOnUpdateSuccess$;
        /**
         *  Reload addresses and notify about delete success
         * @type {?}
         */
        UserAddressesEffects.prototype.showGlobalMessageOnDeleteSuccess$;
        /**
         * @type {?}
         * @private
         */
        UserAddressesEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UserAddressesEffects.prototype.userAddressConnector;
        /**
         * @type {?}
         * @private
         */
        UserAddressesEffects.prototype.userAddressService;
        /**
         * @type {?}
         * @private
         */
        UserAddressesEffects.prototype.messageService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserConsentsEffect = /** @class */ (function () {
        function UserConsentsEffect(actions$, userConsentConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userConsentConnector = userConsentConnector;
            this.resetConsents$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE), operators.map((/**
             * @return {?}
             */
            function () { return new ResetLoadUserConsents(); })));
            this.getConsents$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_CONSENTS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.userConsentConnector.loadConsents(userId).pipe(operators.map((/**
                 * @param {?} consents
                 * @return {?}
                 */
                function (consents) { return new LoadUserConsentsSuccess(consents); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadUserConsentsFail(makeErrorSerializable(error)));
                })));
            })));
            this.giveConsent$ = this.actions$.pipe(effects$d.ofType(GIVE_USER_CONSENT, TRANSFER_ANONYMOUS_CONSENT), operators.concatMap((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return _this.userConsentConnector
                    .giveConsent(action.payload.userId, action.payload.consentTemplateId, action.payload.consentTemplateVersion)
                    .pipe(operators.map((/**
                 * @param {?} consent
                 * @return {?}
                 */
                function (consent) { return new GiveUserConsentSuccess(consent); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    /** @type {?} */
                    var errors = [
                        new GiveUserConsentFail(makeErrorSerializable(error)),
                    ];
                    if (action.type === TRANSFER_ANONYMOUS_CONSENT &&
                        error.status === 409) {
                        errors.push(new RemoveMessagesByType(GlobalMessageType.MSG_TYPE_ERROR));
                    }
                    return rxjs.of.apply(void 0, __spread(errors));
                })));
            })));
            this.withdrawConsent$ = this.actions$.pipe(effects$d.ofType(WITHDRAW_USER_CONSENT), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var userId = _a.userId, consentCode = _a.consentCode;
                return _this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(operators.map((/**
                 * @return {?}
                 */
                function () { return new WithdrawUserConsentSuccess(); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new WithdrawUserConsentFail(makeErrorSerializable(error)));
                })));
            })));
        }
        UserConsentsEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserConsentsEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConsentConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserConsentsEffect.prototype, "resetConsents$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserConsentsEffect.prototype, "getConsents$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserConsentsEffect.prototype, "giveConsent$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserConsentsEffect.prototype, "withdrawConsent$", void 0);
        return UserConsentsEffect;
    }());
    if (false) {
        /** @type {?} */
        UserConsentsEffect.prototype.resetConsents$;
        /** @type {?} */
        UserConsentsEffect.prototype.getConsents$;
        /** @type {?} */
        UserConsentsEffect.prototype.giveConsent$;
        /** @type {?} */
        UserConsentsEffect.prototype.withdrawConsent$;
        /**
         * @type {?}
         * @private
         */
        UserConsentsEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UserConsentsEffect.prototype.userConsentConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserDetailsEffects = /** @class */ (function () {
        function UserDetailsEffects(actions$, userConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userConnector = userConnector;
            this.loadUserDetails$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_DETAILS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.userConnector.get(userId).pipe(operators.map((/**
                 * @param {?} user
                 * @return {?}
                 */
                function (user) {
                    return new LoadUserDetailsSuccess(user);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadUserDetailsFail(makeErrorSerializable(error)));
                })));
            })));
            this.updateUserDetails$ = this.actions$.pipe(effects$d.ofType(UPDATE_USER_DETAILS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.concatMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userConnector.update(payload.username, payload.userDetails).pipe(operators.map((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return new UpdateUserDetailsSuccess(payload.userDetails); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new UpdateUserDetailsFail(makeErrorSerializable(error)));
                })));
            })));
        }
        UserDetailsEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserDetailsEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserDetailsEffects.prototype, "loadUserDetails$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserDetailsEffects.prototype, "updateUserDetails$", void 0);
        return UserDetailsEffects;
    }());
    if (false) {
        /** @type {?} */
        UserDetailsEffects.prototype.loadUserDetails$;
        /** @type {?} */
        UserDetailsEffects.prototype.updateUserDetails$;
        /**
         * @type {?}
         * @private
         */
        UserDetailsEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UserDetailsEffects.prototype.userConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserOrdersEffect = /** @class */ (function () {
        function UserOrdersEffect(actions$, orderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.orderConnector = orderConnector;
            this.loadUserOrders$ = this.actions$.pipe(effects$d.ofType(LOAD_USER_ORDERS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.orderConnector
                    .getHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                    .pipe(operators.map((/**
                 * @param {?} orders
                 * @return {?}
                 */
                function (orders) {
                    return new LoadUserOrdersSuccess(orders);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadUserOrdersFail(makeErrorSerializable(error)));
                })));
            })));
            this.resetUserOrders$ = this.actions$.pipe(effects$d.ofType(LANGUAGE_CHANGE), operators.map((/**
             * @return {?}
             */
            function () {
                return new ClearUserOrders();
            })));
        }
        UserOrdersEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserOrdersEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserOrderConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserOrdersEffect.prototype, "loadUserOrders$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserOrdersEffect.prototype, "resetUserOrders$", void 0);
        return UserOrdersEffect;
    }());
    if (false) {
        /** @type {?} */
        UserOrdersEffect.prototype.loadUserOrders$;
        /** @type {?} */
        UserOrdersEffect.prototype.resetUserOrders$;
        /**
         * @type {?}
         * @private
         */
        UserOrdersEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UserOrdersEffect.prototype.orderConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserRegisterEffects = /** @class */ (function () {
        function UserRegisterEffects(actions$, userConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userConnector = userConnector;
            this.registerUser$ = this.actions$.pipe(effects$d.ofType(REGISTER_USER), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} user
             * @return {?}
             */
            function (user) {
                return _this.userConnector.register(user).pipe(operators.map((/**
                 * @return {?}
                 */
                function () { return new RegisterUserSuccess(); })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new RegisterUserFail(makeErrorSerializable(error)));
                })));
            })));
            this.registerGuest$ = this.actions$.pipe(effects$d.ofType(REGISTER_GUEST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var guid = _a.guid, password = _a.password;
                return _this.userConnector.registerGuest(guid, password).pipe(operators.switchMap((/**
                 * @param {?} user
                 * @return {?}
                 */
                function (user) { return [
                    new LoadUserToken({
                        userId: user.uid,
                        password: password,
                    }),
                    new RegisterGuestSuccess(),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new RegisterGuestFail(makeErrorSerializable(error)));
                })));
            })));
            this.removeUser$ = this.actions$.pipe(effects$d.ofType(REMOVE_USER), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} userId
             * @return {?}
             */
            function (userId) {
                return _this.userConnector.remove(userId).pipe(operators.switchMap((/**
                 * @param {?} _result
                 * @return {?}
                 */
                function (_result) { return [
                    new RemoveUserSuccess(),
                    new Logout(),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new RemoveUserFail(makeErrorSerializable(error)));
                })));
            })));
        }
        UserRegisterEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserRegisterEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserRegisterEffects.prototype, "registerUser$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserRegisterEffects.prototype, "registerGuest$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], UserRegisterEffects.prototype, "removeUser$", void 0);
        return UserRegisterEffects;
    }());
    if (false) {
        /** @type {?} */
        UserRegisterEffects.prototype.registerUser$;
        /** @type {?} */
        UserRegisterEffects.prototype.registerGuest$;
        /** @type {?} */
        UserRegisterEffects.prototype.removeUser$;
        /**
         * @type {?}
         * @private
         */
        UserRegisterEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        UserRegisterEffects.prototype.userConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomerCouponEffects = /** @class */ (function () {
        function CustomerCouponEffects(actions$, customerCouponConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.customerCouponConnector = customerCouponConnector;
            this.loadCustomerCoupons$ = this.actions$.pipe(effects$d.ofType(LOAD_CUSTOMER_COUPONS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.customerCouponConnector
                    .getCustomerCoupons(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                    .pipe(operators.map((/**
                 * @param {?} coupons
                 * @return {?}
                 */
                function (coupons) {
                    return new LoadCustomerCouponsSuccess(coupons);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadCustomerCouponsFail(makeErrorSerializable(error)));
                })));
            })));
            this.subscribeCustomerCoupon$ = this.actions$.pipe(effects$d.ofType(SUBSCRIBE_CUSTOMER_COUPON), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return action.payload;
            })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.customerCouponConnector
                    .turnOnNotification(payload.userId, payload.couponCode)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new SubscribeCustomerCouponSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new SubscribeCustomerCouponFail(makeErrorSerializable(error)));
                })));
            })));
            this.unsubscribeCustomerCoupon$ = this.actions$.pipe(effects$d.ofType(UNSUBSCRIBE_CUSTOMER_COUPON), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                return action.payload;
            })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.customerCouponConnector
                    .turnOffNotification(payload.userId, payload.couponCode)
                    .pipe(operators.map((/**
                 * @return {?}
                 */
                function () {
                    return new UnsubscribeCustomerCouponSuccess(payload.couponCode);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new UnsubscribeCustomerCouponFail(makeErrorSerializable(error)));
                })));
            })));
            this.claimCustomerCoupon$ = this.actions$.pipe(effects$d.ofType(CLAIM_CUSTOMER_COUPON), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.mergeMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.customerCouponConnector
                    .claimCustomerCoupon(payload.userId, payload.couponCode)
                    .pipe(operators.map((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return new ClaimCustomerCouponSuccess(data);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new ClaimCustomerCouponFail(makeErrorSerializable(error)));
                })));
            })));
        }
        CustomerCouponEffects.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CustomerCouponEffects.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: CustomerCouponConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CustomerCouponEffects.prototype, "loadCustomerCoupons$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CustomerCouponEffects.prototype, "subscribeCustomerCoupon$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CustomerCouponEffects.prototype, "unsubscribeCustomerCoupon$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], CustomerCouponEffects.prototype, "claimCustomerCoupon$", void 0);
        return CustomerCouponEffects;
    }());
    if (false) {
        /** @type {?} */
        CustomerCouponEffects.prototype.loadCustomerCoupons$;
        /** @type {?} */
        CustomerCouponEffects.prototype.subscribeCustomerCoupon$;
        /** @type {?} */
        CustomerCouponEffects.prototype.unsubscribeCustomerCoupon$;
        /** @type {?} */
        CustomerCouponEffects.prototype.claimCustomerCoupon$;
        /**
         * @type {?}
         * @private
         */
        CustomerCouponEffects.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        CustomerCouponEffects.prototype.customerCouponConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProductInterestsEffect = /** @class */ (function () {
        function ProductInterestsEffect(actions$, userInterestsConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userInterestsConnector = userInterestsConnector;
            this.loadProductInteres$ = this.actions$.pipe(effects$d.ofType(LOAD_PRODUCT_INTERESTS), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userInterestsConnector
                    .getInterests(payload.userId, payload.pageSize, payload.currentPage, payload.sort, payload.productCode, payload.notificationType)
                    .pipe(operators.map((/**
                 * @param {?} interests
                 * @return {?}
                 */
                function (interests) {
                    return new LoadProductInterestsSuccess(interests);
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new LoadProductInterestsFail(makeErrorSerializable(error)));
                })));
            })));
            this.removeProductInterest$ = this.actions$.pipe(effects$d.ofType(REMOVE_PRODUCT_INTEREST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userInterestsConnector
                    .removeInterest(payload.userId, payload.item)
                    .pipe(operators.switchMap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return [
                    new LoadProductInterests(payload.singleDelete
                        ? {
                            userId: payload.userId,
                            productCode: payload.item.product.code,
                            notificationType: payload.item.productInterestEntry[0].interestType,
                        }
                        : { userId: payload.userId }),
                    new RemoveProductInterestSuccess(data),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new RemoveProductInterestFail(makeErrorSerializable(error)));
                })));
            })));
            this.addProductInterest$ = this.actions$.pipe(effects$d.ofType(ADD_PRODUCT_INTEREST), operators.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.payload; })), operators.switchMap((/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) {
                return _this.userInterestsConnector
                    .addInterest(payload.userId, payload.productCode, payload.notificationType)
                    .pipe(operators.switchMap((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) { return [
                    new LoadProductInterests({
                        userId: payload.userId,
                        productCode: payload.productCode,
                        notificationType: payload.notificationType,
                    }),
                    new AddProductInterestSuccess(res),
                ]; })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    return rxjs.of(new AddProductInterestFail(makeErrorSerializable(error)));
                })));
            })));
        }
        ProductInterestsEffect.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProductInterestsEffect.ctorParameters = function () { return [
            { type: effects$d.Actions },
            { type: UserInterestsConnector }
        ]; };
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductInterestsEffect.prototype, "loadProductInteres$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductInterestsEffect.prototype, "removeProductInterest$", void 0);
        __decorate([
            effects$d.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ProductInterestsEffect.prototype, "addProductInterest$", void 0);
        return ProductInterestsEffect;
    }());
    if (false) {
        /** @type {?} */
        ProductInterestsEffect.prototype.loadProductInteres$;
        /** @type {?} */
        ProductInterestsEffect.prototype.removeProductInterest$;
        /** @type {?} */
        ProductInterestsEffect.prototype.addProductInterest$;
        /**
         * @type {?}
         * @private
         */
        ProductInterestsEffect.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ProductInterestsEffect.prototype.userInterestsConnector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var effects$c = [
        ClearMiscsDataEffect,
        DeliveryCountriesEffects,
        RegionsEffects,
        TitlesEffects,
        UserDetailsEffects,
        UserAddressesEffects,
        UserPaymentMethodsEffects,
        UserRegisterEffects,
        UserOrdersEffect,
        OrderDetailsEffect,
        BillingCountriesEffect,
        ResetPasswordEffects,
        ForgotPasswordEffects,
        UpdateEmailEffects,
        UpdatePasswordEffects,
        UserConsentsEffect,
        ConsignmentTrackingEffects,
        CustomerCouponEffects,
        NotificationPreferenceEffects,
        ProductInterestsEffect,
        OrderReturnRequestEffect,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserStoreModule = /** @class */ (function () {
        function UserStoreModule() {
        }
        UserStoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            StateModule,
                            store.StoreModule.forFeature(USER_FEATURE, reducerToken$d, { metaReducers: metaReducers$8 }),
                            effects$d.EffectsModule.forFeature(effects$c),
                            router.RouterModule,
                        ],
                        providers: [reducerProvider$d],
                    },] }
        ];
        return UserStoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FindProductPageMetaResolver = /** @class */ (function (_super) {
        __extends(FindProductPageMetaResolver, _super);
        function FindProductPageMetaResolver(routingService, productSearchService, translation, authService) {
            var _this = _super.call(this) || this;
            _this.routingService = routingService;
            _this.productSearchService = productSearchService;
            _this.translation = translation;
            _this.authService = authService;
            _this.totalAndCode$ = rxjs.combineLatest([
                _this.productSearchService.getResults().pipe(operators.filter((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return !!(data && data.pagination); })), operators.map((/**
                 * @param {?} results
                 * @return {?}
                 */
                function (results) { return results.pagination.totalResults; }))),
                _this.routingService.getRouterState().pipe(operators.map((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) { return state.state.queryParams['couponcode']; })), operators.filter(Boolean)),
            ]);
            _this.pageType = PageType.CONTENT_PAGE;
            _this.pageTemplate = 'SearchResultsListPageTemplate';
            return _this;
        }
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         */
        /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        FindProductPageMetaResolver.prototype.resolve = /**
         * @deprecated since version 1.3
         *
         * The resolve method is no longer preferred and will be removed with release 2.0.
         * The caller `PageMetaService` service is improved to expect all individual resolvers
         * instead, so that the code is easier extensible.
         * @return {?}
         */
        function () {
            return rxjs.combineLatest([this.resolveTitle(), this.resolveBreadcrumbs()]).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), title = _b[0], breadcrumbs = _b[1];
                return ({
                    title: title,
                    breadcrumbs: breadcrumbs,
                });
            })));
        };
        /**
         * @return {?}
         */
        FindProductPageMetaResolver.prototype.resolveBreadcrumbs = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var breadcrumbs = [{ label: 'Home', link: '/' }];
            this.authService.isUserLoggedIn().subscribe((/**
             * @param {?} login
             * @return {?}
             */
            function (login) {
                if (login)
                    breadcrumbs.push({ label: 'My Coupons', link: '/my-account/coupons' });
            }));
            return rxjs.of(breadcrumbs);
        };
        /**
         * @return {?}
         */
        FindProductPageMetaResolver.prototype.resolveTitle = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.totalAndCode$.pipe(operators.switchMap((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), total = _b[0], code = _b[1];
                return _this.translation.translate('pageMetaResolver.search.findProductTitle', {
                    count: total,
                    coupon: code,
                });
            })));
        };
        /**
         * @param {?} page
         * @return {?}
         */
        FindProductPageMetaResolver.prototype.getScore = /**
         * @param {?} page
         * @return {?}
         */
        function (page) {
            /** @type {?} */
            var score = 0;
            if (this.pageType) {
                score += page.type === this.pageType ? 1 : -1;
            }
            if (this.pageTemplate) {
                score += page.template === this.pageTemplate ? 1 : -1;
            }
            this.routingService
                .getRouterState()
                .pipe(operators.map((/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                return state.state.queryParams;
            })), operators.filter(Boolean))
                .subscribe((/**
             * @param {?} queryParams
             * @return {?}
             */
            function (queryParams) {
                if (queryParams) {
                    score += queryParams['couponcode'] ? 1 : -1;
                }
            }))
                .unsubscribe();
            return score;
        };
        FindProductPageMetaResolver.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        FindProductPageMetaResolver.ctorParameters = function () { return [
            { type: RoutingService },
            { type: ProductSearchService },
            { type: TranslationService },
            { type: AuthService }
        ]; };
        /** @nocollapse */ FindProductPageMetaResolver.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function FindProductPageMetaResolver_Factory() { return new FindProductPageMetaResolver(core.ɵɵinject(RoutingService), core.ɵɵinject(ProductSearchService), core.ɵɵinject(TranslationService), core.ɵɵinject(AuthService)); }, token: FindProductPageMetaResolver, providedIn: "root" });
        return FindProductPageMetaResolver;
    }(PageMetaResolver));
    if (false) {
        /** @type {?} */
        FindProductPageMetaResolver.prototype.totalAndCode$;
        /**
         * @type {?}
         * @protected
         */
        FindProductPageMetaResolver.prototype.routingService;
        /**
         * @type {?}
         * @protected
         */
        FindProductPageMetaResolver.prototype.productSearchService;
        /**
         * @type {?}
         * @protected
         */
        FindProductPageMetaResolver.prototype.translation;
        /**
         * @type {?}
         * @protected
         */
        FindProductPageMetaResolver.prototype.authService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserModule = /** @class */ (function () {
        function UserModule() {
        }
        /**
         * @return {?}
         */
        UserModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: UserModule,
                providers: [
                    UserService,
                    {
                        provide: PageMetaResolver,
                        useExisting: FindProductPageMetaResolver,
                        multi: true,
                    },
                ],
            };
        };
        UserModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [UserStoreModule],
                    },] }
        ];
        return UserModule;
    }());

    exports.ADDRESS_NORMALIZER = ADDRESS_NORMALIZER;
    exports.ADDRESS_SERIALIZER = ADDRESS_SERIALIZER;
    exports.ADDRESS_VALIDATION_NORMALIZER = ADDRESS_VALIDATION_NORMALIZER;
    exports.ADD_PRODUCT_INTEREST_PROCESS_ID = ADD_PRODUCT_INTEREST_PROCESS_ID;
    exports.ADD_VOUCHER_PROCESS_ID = ADD_VOUCHER_PROCESS_ID;
    exports.ANONYMOUS_CONSENTS = ANONYMOUS_CONSENTS;
    exports.ANONYMOUS_CONSENTS_FEATURE = ANONYMOUS_CONSENTS_FEATURE;
    exports.ANONYMOUS_CONSENTS_STORE_FEATURE = ANONYMOUS_CONSENTS_STORE_FEATURE;
    exports.ANONYMOUS_CONSENT_STATUS = ANONYMOUS_CONSENT_STATUS;
    exports.ANONYMOUS_USERID = ANONYMOUS_USERID;
    exports.ASM_FEATURE = ASM_FEATURE;
    exports.AUTH_FEATURE = AUTH_FEATURE;
    exports.ActiveCartService = ActiveCartService;
    exports.AnonymousConsentTemplatesAdapter = AnonymousConsentTemplatesAdapter;
    exports.AnonymousConsentTemplatesConnector = AnonymousConsentTemplatesConnector;
    exports.AnonymousConsentsActions = anonymousConsentsGroup;
    exports.AnonymousConsentsConfig = AnonymousConsentsConfig;
    exports.AnonymousConsentsModule = AnonymousConsentsModule;
    exports.AnonymousConsentsSelectors = anonymousConsentsGroup_selectors;
    exports.AnonymousConsentsService = AnonymousConsentsService;
    exports.AsmActions = customerGroup_actions;
    exports.AsmAdapter = AsmAdapter;
    exports.AsmAuthService = AsmAuthService;
    exports.AsmConfig = AsmConfig;
    exports.AsmConnector = AsmConnector;
    exports.AsmModule = AsmModule;
    exports.AsmOccModule = AsmOccModule;
    exports.AsmSelectors = asmGroup_selectors;
    exports.AsmService = AsmService;
    exports.AuthActions = authGroup_actions;
    exports.AuthConfig = AuthConfig;
    exports.AuthGuard = AuthGuard;
    exports.AuthModule = AuthModule;
    exports.AuthRedirectService = AuthRedirectService;
    exports.AuthSelectors = authGroup_selectors;
    exports.AuthService = AuthService;
    exports.BASE_SITE_CONTEXT_ID = BASE_SITE_CONTEXT_ID;
    exports.BadGatewayHandler = BadGatewayHandler;
    exports.BadRequestHandler = BadRequestHandler;
    exports.BaseSiteService = BaseSiteService;
    exports.CANCEL_ORDER_PROCESS_ID = CANCEL_ORDER_PROCESS_ID;
    exports.CANCEL_RETURN_PROCESS_ID = CANCEL_RETURN_PROCESS_ID;
    exports.CARD_TYPE_NORMALIZER = CARD_TYPE_NORMALIZER;
    exports.CART_DATA = CART_DATA;
    exports.CART_FEATURE = CART_FEATURE;
    exports.CART_MODIFICATION_NORMALIZER = CART_MODIFICATION_NORMALIZER;
    exports.CART_NORMALIZER = CART_NORMALIZER;
    exports.CART_VOUCHER_NORMALIZER = CART_VOUCHER_NORMALIZER;
    exports.CHECKOUT_DETAILS = CHECKOUT_DETAILS;
    exports.CHECKOUT_FEATURE = CHECKOUT_FEATURE;
    exports.CLAIM_CUSTOMER_COUPON_PROCESS_ID = CLAIM_CUSTOMER_COUPON_PROCESS_ID;
    exports.CLIENT_TOKEN_DATA = CLIENT_TOKEN_DATA;
    exports.CMS_COMPONENT_NORMALIZER = CMS_COMPONENT_NORMALIZER;
    exports.CMS_FEATURE = CMS_FEATURE;
    exports.CMS_FLEX_COMPONENT_TYPE = CMS_FLEX_COMPONENT_TYPE;
    exports.CMS_PAGE_NORMALIZER = CMS_PAGE_NORMALIZER;
    exports.COMPONENT_ENTITY = COMPONENT_ENTITY;
    exports.CONFIG_INITIALIZER = CONFIG_INITIALIZER;
    exports.CONSENT_TEMPLATE_NORMALIZER = CONSENT_TEMPLATE_NORMALIZER;
    exports.CONSIGNMENT_TRACKING_NORMALIZER = CONSIGNMENT_TRACKING_NORMALIZER;
    exports.COUNTRY_NORMALIZER = COUNTRY_NORMALIZER;
    exports.CSAGENT_TOKEN_DATA = CSAGENT_TOKEN_DATA;
    exports.CURRENCY_CONTEXT_ID = CURRENCY_CONTEXT_ID;
    exports.CURRENCY_NORMALIZER = CURRENCY_NORMALIZER;
    exports.CUSTOMER_COUPONS = CUSTOMER_COUPONS;
    exports.CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER;
    exports.CUSTOMER_SEARCH_DATA = CUSTOMER_SEARCH_DATA;
    exports.CUSTOMER_SEARCH_PAGE_NORMALIZER = CUSTOMER_SEARCH_PAGE_NORMALIZER;
    exports.CartActions = cartGroup_actions;
    exports.CartAdapter = CartAdapter;
    exports.CartConnector = CartConnector;
    exports.CartDataService = CartDataService;
    exports.CartEffects = CartEffects;
    exports.CartEntryAdapter = CartEntryAdapter;
    exports.CartEntryConnector = CartEntryConnector;
    exports.CartEntryEffects = CartEntryEffects;
    exports.CartModule = CartModule;
    exports.CartOccModule = CartOccModule;
    exports.CartSelectors = cartGroup_selectors;
    exports.CartService = CartService;
    exports.CartVoucherAdapter = CartVoucherAdapter;
    exports.CartVoucherConnector = CartVoucherConnector;
    exports.CartVoucherEffects = CartVoucherEffects;
    exports.CartVoucherService = CartVoucherService;
    exports.CategoryPageMetaResolver = CategoryPageMetaResolver;
    exports.CheckoutActions = checkoutGroup_actions;
    exports.CheckoutAdapter = CheckoutAdapter;
    exports.CheckoutConnector = CheckoutConnector;
    exports.CheckoutDeliveryAdapter = CheckoutDeliveryAdapter;
    exports.CheckoutDeliveryConnector = CheckoutDeliveryConnector;
    exports.CheckoutDeliveryService = CheckoutDeliveryService;
    exports.CheckoutModule = CheckoutModule;
    exports.CheckoutOccModule = CheckoutOccModule;
    exports.CheckoutPageMetaResolver = CheckoutPageMetaResolver;
    exports.CheckoutPaymentAdapter = CheckoutPaymentAdapter;
    exports.CheckoutPaymentConnector = CheckoutPaymentConnector;
    exports.CheckoutPaymentService = CheckoutPaymentService;
    exports.CheckoutSelectors = checkoutGroup_selectors;
    exports.CheckoutService = CheckoutService;
    exports.CmsActions = cmsGroup_actions;
    exports.CmsBannerCarouselEffect = CmsBannerCarouselEffect;
    exports.CmsComponentAdapter = CmsComponentAdapter;
    exports.CmsComponentConnector = CmsComponentConnector;
    exports.CmsConfig = CmsConfig;
    exports.CmsModule = CmsModule;
    exports.CmsOccModule = CmsOccModule;
    exports.CmsPageAdapter = CmsPageAdapter;
    exports.CmsPageConnector = CmsPageConnector;
    exports.CmsPageTitleModule = CmsPageTitleModule;
    exports.CmsSelectors = cmsGroup_selectors;
    exports.CmsService = CmsService;
    exports.CmsStructureConfig = CmsStructureConfig;
    exports.CmsStructureConfigService = CmsStructureConfigService;
    exports.Config = Config;
    exports.ConfigChunk = ConfigChunk;
    exports.ConfigInitializerModule = ConfigInitializerModule;
    exports.ConfigInitializerService = ConfigInitializerService;
    exports.ConfigModule = ConfigModule;
    exports.ConfigValidatorToken = ConfigValidatorToken;
    exports.ConfigurableRoutesService = ConfigurableRoutesService;
    exports.ConflictHandler = ConflictHandler;
    exports.ConsentService = ConsentService;
    exports.ContentPageMetaResolver = ContentPageMetaResolver;
    exports.ContextServiceMap = ContextServiceMap;
    exports.ConverterService = ConverterService;
    exports.CountryType = CountryType;
    exports.CurrencyService = CurrencyService;
    exports.CustomerCouponAdapter = CustomerCouponAdapter;
    exports.CustomerCouponConnector = CustomerCouponConnector;
    exports.CustomerCouponService = CustomerCouponService;
    exports.CustomerSupportAgentTokenInterceptor = CustomerSupportAgentTokenInterceptor;
    exports.CxDatePipe = CxDatePipe;
    exports.DEFAULT_LOCAL_STORAGE_KEY = DEFAULT_LOCAL_STORAGE_KEY;
    exports.DEFAULT_SESSION_STORAGE_KEY = DEFAULT_SESSION_STORAGE_KEY;
    exports.DELIVERY_MODE_NORMALIZER = DELIVERY_MODE_NORMALIZER;
    exports.DeferLoadingStrategy = DeferLoadingStrategy;
    exports.DynamicAttributeService = DynamicAttributeService;
    exports.EMAIL_PATTERN = EMAIL_PATTERN;
    exports.EXTERNAL_CONFIG_TRANSFER_ID = EXTERNAL_CONFIG_TRANSFER_ID;
    exports.ExternalJsFileLoader = ExternalJsFileLoader;
    exports.ExternalRoutesConfig = ExternalRoutesConfig;
    exports.ExternalRoutesGuard = ExternalRoutesGuard;
    exports.ExternalRoutesModule = ExternalRoutesModule;
    exports.ExternalRoutesService = ExternalRoutesService;
    exports.FeatureConfigService = FeatureConfigService;
    exports.FeatureDirective = FeatureDirective;
    exports.FeatureLevelDirective = FeatureLevelDirective;
    exports.FeaturesConfig = FeaturesConfig;
    exports.FeaturesConfigModule = FeaturesConfigModule;
    exports.ForbiddenHandler = ForbiddenHandler;
    exports.GIVE_CONSENT_PROCESS_ID = GIVE_CONSENT_PROCESS_ID;
    exports.GLOBAL_MESSAGE_FEATURE = GLOBAL_MESSAGE_FEATURE;
    exports.GatewayTimeoutHandler = GatewayTimeoutHandler;
    exports.GlobService = GlobService;
    exports.GlobalMessageActions = globalMessageGroup_actions;
    exports.GlobalMessageConfig = GlobalMessageConfig;
    exports.GlobalMessageModule = GlobalMessageModule;
    exports.GlobalMessageSelectors = globalMessageGroup_selectors;
    exports.GlobalMessageService = GlobalMessageService;
    exports.GlobalMessageType = GlobalMessageType;
    exports.GoogleMapRendererService = GoogleMapRendererService;
    exports.HttpErrorHandler = HttpErrorHandler;
    exports.I18nConfig = I18nConfig;
    exports.I18nModule = I18nModule;
    exports.I18nTestingModule = I18nTestingModule;
    exports.I18nextTranslationService = I18nextTranslationService;
    exports.ImageType = ImageType;
    exports.InterceptorUtil = InterceptorUtil;
    exports.JSP_INCLUDE_CMS_COMPONENT_TYPE = JSP_INCLUDE_CMS_COMPONENT_TYPE;
    exports.JavaRegExpConverter = JavaRegExpConverter;
    exports.KYMA_FEATURE = KYMA_FEATURE;
    exports.KymaActions = kymaGroup_actions;
    exports.KymaConfig = KymaConfig;
    exports.KymaModule = KymaModule;
    exports.KymaSelectors = kymaGroup_selectors;
    exports.KymaService = KymaService;
    exports.KymaServices = KymaServices;
    exports.LANGUAGE_CONTEXT_ID = LANGUAGE_CONTEXT_ID;
    exports.LANGUAGE_NORMALIZER = LANGUAGE_NORMALIZER;
    exports.LanguageService = LanguageService;
    exports.LoadingScopesService = LoadingScopesService;
    exports.MEDIA_BASE_URL_META_TAG_NAME = MEDIA_BASE_URL_META_TAG_NAME;
    exports.MEDIA_BASE_URL_META_TAG_PLACEHOLDER = MEDIA_BASE_URL_META_TAG_PLACEHOLDER;
    exports.MULTI_CART_DATA = MULTI_CART_DATA;
    exports.MULTI_CART_FEATURE = MULTI_CART_FEATURE;
    exports.MockDatePipe = MockDatePipe;
    exports.MockTranslatePipe = MockTranslatePipe;
    exports.MultiCartSelectors = multiCartGroup_selectors;
    exports.MultiCartService = MultiCartService;
    exports.NAVIGATION_DETAIL_ENTITY = NAVIGATION_DETAIL_ENTITY;
    exports.NOTIFICATION_PREFERENCES = NOTIFICATION_PREFERENCES;
    exports.NgExpressEngineDecorator = NgExpressEngineDecorator;
    exports.NotAuthGuard = NotAuthGuard;
    exports.NotFoundHandler = NotFoundHandler;
    exports.NotificationType = NotificationType;
    exports.OCC_BASE_URL_META_TAG_NAME = OCC_BASE_URL_META_TAG_NAME;
    exports.OCC_BASE_URL_META_TAG_PLACEHOLDER = OCC_BASE_URL_META_TAG_PLACEHOLDER;
    exports.OCC_CART_ID_CURRENT = OCC_CART_ID_CURRENT;
    exports.OCC_USER_ID_ANONYMOUS = OCC_USER_ID_ANONYMOUS;
    exports.OCC_USER_ID_CURRENT = OCC_USER_ID_CURRENT;
    exports.OCC_USER_ID_GUEST = OCC_USER_ID_GUEST;
    exports.OPEN_ID_TOKEN_DATA = OPEN_ID_TOKEN_DATA;
    exports.ORDER_HISTORY_NORMALIZER = ORDER_HISTORY_NORMALIZER;
    exports.ORDER_NORMALIZER = ORDER_NORMALIZER;
    exports.ORDER_RETURNS_NORMALIZER = ORDER_RETURNS_NORMALIZER;
    exports.ORDER_RETURN_REQUEST_INPUT_SERIALIZER = ORDER_RETURN_REQUEST_INPUT_SERIALIZER;
    exports.ORDER_RETURN_REQUEST_NORMALIZER = ORDER_RETURN_REQUEST_NORMALIZER;
    exports.OccAnonymousConsentTemplatesAdapter = OccAnonymousConsentTemplatesAdapter;
    exports.OccAsmAdapter = OccAsmAdapter;
    exports.OccCartAdapter = OccCartAdapter;
    exports.OccCartEntryAdapter = OccCartEntryAdapter;
    exports.OccCartNormalizer = OccCartNormalizer;
    exports.OccCartVoucherAdapter = OccCartVoucherAdapter;
    exports.OccCheckoutAdapter = OccCheckoutAdapter;
    exports.OccCheckoutDeliveryAdapter = OccCheckoutDeliveryAdapter;
    exports.OccCheckoutPaymentAdapter = OccCheckoutPaymentAdapter;
    exports.OccCmsComponentAdapter = OccCmsComponentAdapter;
    exports.OccCmsPageAdapter = OccCmsPageAdapter;
    exports.OccCmsPageNormalizer = OccCmsPageNormalizer;
    exports.OccConfig = OccConfig;
    exports.OccConfigLoaderModule = OccConfigLoaderModule;
    exports.OccConfigLoaderService = OccConfigLoaderService;
    exports.OccCustomerCouponAdapter = OccCustomerCouponAdapter;
    exports.OccEndpointsService = OccEndpointsService;
    exports.OccFieldsService = OccFieldsService;
    exports.OccLoadedConfigConverter = OccLoadedConfigConverter;
    exports.OccModule = OccModule;
    exports.OccOrderNormalizer = OccOrderNormalizer;
    exports.OccProductAdapter = OccProductAdapter;
    exports.OccProductReferencesAdapter = OccProductReferencesAdapter;
    exports.OccProductReferencesListNormalizer = OccProductReferencesListNormalizer;
    exports.OccProductReviewsAdapter = OccProductReviewsAdapter;
    exports.OccProductSearchAdapter = OccProductSearchAdapter;
    exports.OccProductSearchPageNormalizer = OccProductSearchPageNormalizer;
    exports.OccRequestsOptimizerService = OccRequestsOptimizerService;
    exports.OccReturnRequestNormalizer = OccReturnRequestNormalizer;
    exports.OccSiteAdapter = OccSiteAdapter;
    exports.OccSitesConfigLoader = OccSitesConfigLoader;
    exports.OccStoreFinderAdapter = OccStoreFinderAdapter;
    exports.OccUserAdapter = OccUserAdapter;
    exports.OccUserAddressAdapter = OccUserAddressAdapter;
    exports.OccUserConsentAdapter = OccUserConsentAdapter;
    exports.OccUserInterestsAdapter = OccUserInterestsAdapter;
    exports.OccUserInterestsNormalizer = OccUserInterestsNormalizer;
    exports.OccUserNotificationPreferenceAdapter = OccUserNotificationPreferenceAdapter;
    exports.OccUserOrderAdapter = OccUserOrderAdapter;
    exports.OccUserPaymentAdapter = OccUserPaymentAdapter;
    exports.OrderReturnRequestService = OrderReturnRequestService;
    exports.PASSWORD_PATTERN = PASSWORD_PATTERN;
    exports.PAYMENT_DETAILS_NORMALIZER = PAYMENT_DETAILS_NORMALIZER;
    exports.PAYMENT_DETAILS_SERIALIZER = PAYMENT_DETAILS_SERIALIZER;
    exports.POINT_OF_SERVICE_NORMALIZER = POINT_OF_SERVICE_NORMALIZER;
    exports.PROCESS_FEATURE = PROCESS_FEATURE;
    exports.PRODUCT_DETAIL_ENTITY = PRODUCT_DETAIL_ENTITY;
    exports.PRODUCT_FEATURE = PRODUCT_FEATURE;
    exports.PRODUCT_INTERESTS = PRODUCT_INTERESTS;
    exports.PRODUCT_INTERESTS_NORMALIZER = PRODUCT_INTERESTS_NORMALIZER;
    exports.PRODUCT_NORMALIZER = PRODUCT_NORMALIZER;
    exports.PRODUCT_REFERENCES_NORMALIZER = PRODUCT_REFERENCES_NORMALIZER;
    exports.PRODUCT_REVIEW_NORMALIZER = PRODUCT_REVIEW_NORMALIZER;
    exports.PRODUCT_REVIEW_SERIALIZER = PRODUCT_REVIEW_SERIALIZER;
    exports.PRODUCT_SEARCH_PAGE_NORMALIZER = PRODUCT_SEARCH_PAGE_NORMALIZER;
    exports.PRODUCT_SUGGESTION_NORMALIZER = PRODUCT_SUGGESTION_NORMALIZER;
    exports.PageContext = PageContext;
    exports.PageMetaResolver = PageMetaResolver;
    exports.PageMetaService = PageMetaService;
    exports.PageRobotsMeta = PageRobotsMeta;
    exports.PageType = PageType;
    exports.PersonalizationConfig = PersonalizationConfig;
    exports.PersonalizationContextService = PersonalizationContextService;
    exports.PersonalizationModule = PersonalizationModule;
    exports.PriceType = PriceType;
    exports.ProcessModule = ProcessModule;
    exports.ProcessSelectors = process_selectors;
    exports.ProductActions = productGroup_actions;
    exports.ProductAdapter = ProductAdapter;
    exports.ProductConnector = ProductConnector;
    exports.ProductImageNormalizer = ProductImageNormalizer;
    exports.ProductLoadingService = ProductLoadingService;
    exports.ProductModule = ProductModule;
    exports.ProductNameNormalizer = ProductNameNormalizer;
    exports.ProductOccModule = ProductOccModule;
    exports.ProductPageMetaResolver = ProductPageMetaResolver;
    exports.ProductReferenceNormalizer = ProductReferenceNormalizer;
    exports.ProductReferenceService = ProductReferenceService;
    exports.ProductReferencesAdapter = ProductReferencesAdapter;
    exports.ProductReferencesConnector = ProductReferencesConnector;
    exports.ProductReviewService = ProductReviewService;
    exports.ProductReviewsAdapter = ProductReviewsAdapter;
    exports.ProductReviewsConnector = ProductReviewsConnector;
    exports.ProductScope = ProductScope;
    exports.ProductSearchAdapter = ProductSearchAdapter;
    exports.ProductSearchConnector = ProductSearchConnector;
    exports.ProductSearchService = ProductSearchService;
    exports.ProductSelectors = productGroup_selectors;
    exports.ProductService = ProductService;
    exports.PromotionLocation = PromotionLocation;
    exports.ProtectedRoutesGuard = ProtectedRoutesGuard;
    exports.ProtectedRoutesService = ProtectedRoutesService;
    exports.REGIONS = REGIONS;
    exports.REGION_NORMALIZER = REGION_NORMALIZER;
    exports.REGISTER_USER_PROCESS_ID = REGISTER_USER_PROCESS_ID;
    exports.REMOVE_PRODUCT_INTERESTS_PROCESS_ID = REMOVE_PRODUCT_INTERESTS_PROCESS_ID;
    exports.REMOVE_USER_PROCESS_ID = REMOVE_USER_PROCESS_ID;
    exports.ROUTING_FEATURE = ROUTING_FEATURE;
    exports.RoutingActions = routingGroup_actions;
    exports.RoutingConfig = RoutingConfig;
    exports.RoutingConfigService = RoutingConfigService;
    exports.RoutingModule = RoutingModule;
    exports.RoutingSelector = routingGroup_selectors;
    exports.RoutingService = RoutingService;
    exports.SERVER_REQUEST_ORIGIN = SERVER_REQUEST_ORIGIN;
    exports.SERVER_REQUEST_URL = SERVER_REQUEST_URL;
    exports.SET_DELIVERY_ADDRESS_PROCESS_ID = SET_DELIVERY_ADDRESS_PROCESS_ID;
    exports.SET_DELIVERY_MODE_PROCESS_ID = SET_DELIVERY_MODE_PROCESS_ID;
    exports.SET_PAYMENT_DETAILS_PROCESS_ID = SET_PAYMENT_DETAILS_PROCESS_ID;
    exports.SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID = SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID;
    exports.SITE_CONTEXT_FEATURE = SITE_CONTEXT_FEATURE;
    exports.STORE_COUNT_NORMALIZER = STORE_COUNT_NORMALIZER;
    exports.STORE_FINDER_DATA = STORE_FINDER_DATA;
    exports.STORE_FINDER_FEATURE = STORE_FINDER_FEATURE;
    exports.STORE_FINDER_SEARCH_PAGE_NORMALIZER = STORE_FINDER_SEARCH_PAGE_NORMALIZER;
    exports.SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID;
    exports.SearchPageMetaResolver = SearchPageMetaResolver;
    exports.SearchboxService = SearchboxService;
    exports.SelectiveCartService = SelectiveCartService;
    exports.SemanticPathService = SemanticPathService;
    exports.SiteAdapter = SiteAdapter;
    exports.SiteConnector = SiteConnector;
    exports.SiteContextActions = siteContextGroup_actions;
    exports.SiteContextConfig = SiteContextConfig;
    exports.SiteContextInterceptor = SiteContextInterceptor;
    exports.SiteContextModule = SiteContextModule;
    exports.SiteContextOccModule = SiteContextOccModule;
    exports.SiteContextSelectors = siteContextGroup_selectors;
    exports.SmartEditModule = SmartEditModule;
    exports.SmartEditService = SmartEditService;
    exports.StateConfig = StateConfig;
    exports.StateEntityActions = entity_action;
    exports.StateEntityLoaderActions = entityLoader_action;
    exports.StateEntityLoaderSelectors = entityLoader_selectors;
    exports.StateEntityProcessesLoaderActions = entityProcessesLoader_action;
    exports.StateEntityProcessesLoaderSelectors = entityProcessesLoader_selectors;
    exports.StateEntitySelectors = entity_selectors;
    exports.StateLoaderActions = loader_action;
    exports.StateLoaderSelectors = loader_selectors;
    exports.StateModule = StateModule;
    exports.StateProcessesLoaderActions = processesLoader_action;
    exports.StateProcessesLoaderSelectors = processesLoader_selectors;
    exports.StateTransferType = StateTransferType;
    exports.StorageSyncType = StorageSyncType;
    exports.StoreDataService = StoreDataService;
    exports.StoreFinderActions = storeFinderGroup_actions;
    exports.StoreFinderAdapter = StoreFinderAdapter;
    exports.StoreFinderConfig = StoreFinderConfig;
    exports.StoreFinderConnector = StoreFinderConnector;
    exports.StoreFinderCoreModule = StoreFinderCoreModule;
    exports.StoreFinderOccModule = StoreFinderOccModule;
    exports.StoreFinderSelectors = storeFinderGroup_selectors;
    exports.StoreFinderService = StoreFinderService;
    exports.TITLE_NORMALIZER = TITLE_NORMALIZER;
    exports.TOKEN_REVOCATION_HEADER = TOKEN_REVOCATION_HEADER;
    exports.TestConfigModule = TestConfigModule;
    exports.TranslatePipe = TranslatePipe;
    exports.TranslationChunkService = TranslationChunkService;
    exports.TranslationService = TranslationService;
    exports.UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID;
    exports.UPDATE_EMAIL_PROCESS_ID = UPDATE_EMAIL_PROCESS_ID;
    exports.UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID = UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID;
    exports.UPDATE_PASSWORD_PROCESS_ID = UPDATE_PASSWORD_PROCESS_ID;
    exports.UPDATE_USER_DETAILS_PROCESS_ID = UPDATE_USER_DETAILS_PROCESS_ID;
    exports.USER_ADDRESSES = USER_ADDRESSES;
    exports.USER_CONSENTS = USER_CONSENTS;
    exports.USER_FEATURE = USER_FEATURE;
    exports.USER_NORMALIZER = USER_NORMALIZER;
    exports.USER_ORDERS = USER_ORDERS;
    exports.USER_ORDER_DETAILS = USER_ORDER_DETAILS;
    exports.USER_PAYMENT_METHODS = USER_PAYMENT_METHODS;
    exports.USER_RETURN_REQUESTS = USER_RETURN_REQUESTS;
    exports.USER_RETURN_REQUEST_DETAILS = USER_RETURN_REQUEST_DETAILS;
    exports.USER_SERIALIZER = USER_SERIALIZER;
    exports.USER_SIGN_UP_SERIALIZER = USER_SIGN_UP_SERIALIZER;
    exports.USE_CLIENT_TOKEN = USE_CLIENT_TOKEN;
    exports.USE_CUSTOMER_SUPPORT_AGENT_TOKEN = USE_CUSTOMER_SUPPORT_AGENT_TOKEN;
    exports.UnknownErrorHandler = UnknownErrorHandler;
    exports.UrlMatcherFactoryService = UrlMatcherFactoryService;
    exports.UrlModule = UrlModule;
    exports.UrlPipe = UrlPipe;
    exports.UserActions = userGroup_actions;
    exports.UserAdapter = UserAdapter;
    exports.UserAddressAdapter = UserAddressAdapter;
    exports.UserAddressConnector = UserAddressConnector;
    exports.UserAddressService = UserAddressService;
    exports.UserConnector = UserConnector;
    exports.UserConsentAdapter = UserConsentAdapter;
    exports.UserConsentConnector = UserConsentConnector;
    exports.UserConsentService = UserConsentService;
    exports.UserInterestsAdapter = UserInterestsAdapter;
    exports.UserInterestsConnector = UserInterestsConnector;
    exports.UserInterestsService = UserInterestsService;
    exports.UserModule = UserModule;
    exports.UserNotificationPreferenceService = UserNotificationPreferenceService;
    exports.UserOccModule = UserOccModule;
    exports.UserOrderAdapter = UserOrderAdapter;
    exports.UserOrderConnector = UserOrderConnector;
    exports.UserOrderService = UserOrderService;
    exports.UserPaymentAdapter = UserPaymentAdapter;
    exports.UserPaymentConnector = UserPaymentConnector;
    exports.UserPaymentService = UserPaymentService;
    exports.UserService = UserService;
    exports.UsersSelectors = usersGroup_selectors;
    exports.VariantQualifier = VariantQualifier;
    exports.VariantType = VariantType;
    exports.WITHDRAW_CONSENT_PROCESS_ID = WITHDRAW_CONSENT_PROCESS_ID;
    exports.WindowRef = WindowRef;
    exports.WishListEffects = WishListEffects;
    exports.WishListService = WishListService;
    exports.WithCredentialsInterceptor = WithCredentialsInterceptor;
    exports.clearCartState = clearCartState;
    exports.clearMultiCartState = clearMultiCartState;
    exports.configInitializerFactory = configInitializerFactory;
    exports.configurationFactory = configurationFactory;
    exports.contextServiceMapProvider = contextServiceMapProvider;
    exports.contextServiceProviders = deprecatedContextServiceProviders;
    exports.defaultAnonymousConsentsConfig = defaultAnonymousConsentsConfig;
    exports.defaultCmsModuleConfig = defaultCmsModuleConfig;
    exports.defaultOccConfig = defaultOccConfig;
    exports.defaultStateConfig = defaultStateConfig;
    exports.effects = effects$5;
    exports.entityLoaderReducer = entityLoaderReducer;
    exports.entityProcessesLoaderReducer = entityProcessesLoaderReducer;
    exports.entityReducer = entityReducer;
    exports.errorHandlers = errorHandlers;
    exports.getMultiCartReducers = getMultiCartReducers;
    exports.getReducers = getReducers$5;
    exports.getServerRequestProviders = getServerRequestProviders;
    exports.getStateSlice = getStateSlice;
    exports.httpErrorInterceptors = httpErrorInterceptors;
    exports.initConfigurableRoutes = initConfigurableRoutes;
    exports.initSiteContextRoutesHandler = deprecatedInitSiteContextRoutesHandler;
    exports.initialEntityState = initialEntityState;
    exports.initialLoaderState = initialLoaderState;
    exports.initialProcessesState = initialProcessesState;
    exports.inititializeContext = inititializeContext;
    exports.isFeatureEnabled = isFeatureEnabled;
    exports.isFeatureLevel = isFeatureLevel;
    exports.loaderReducer = loaderReducer;
    exports.mediaServerConfigFromMetaTagFactory = mediaServerConfigFromMetaTagFactory;
    exports.metaReducers = metaReducers$3;
    exports.multiCartMetaReducers = multiCartMetaReducers;
    exports.multiCartReducerProvider = multiCartReducerProvider;
    exports.multiCartReducerToken = multiCartReducerToken;
    exports.occConfigValidator = occConfigValidator;
    exports.occServerConfigFromMetaTagFactory = occServerConfigFromMetaTagFactory;
    exports.ofLoaderFail = ofLoaderFail;
    exports.ofLoaderLoad = ofLoaderLoad;
    exports.ofLoaderSuccess = ofLoaderSuccess;
    exports.processesLoaderReducer = processesLoaderReducer;
    exports.provideConfig = provideConfig;
    exports.provideConfigFactory = provideConfigFactory;
    exports.provideConfigFromMetaTags = provideConfigFromMetaTags;
    exports.provideConfigValidator = provideConfigValidator;
    exports.reducerProvider = reducerProvider$5;
    exports.reducerToken = reducerToken$5;
    exports.serviceMapFactory = serviceMapFactory;
    exports.siteContextParamsProviders = deprecatedSiteContextParamsProviders;
    exports.testestsd = testestsd;
    exports.validateConfig = validateConfig;
    exports.withCredentialsInterceptorProvider = withCredentialsInterceptorProvider;
    exports.ɵa = TEST_CONFIG_COOKIE_NAME;
    exports.ɵb = configFromCookieFactory;
    exports.ɵba = AnonymousConsentsInterceptor;
    exports.ɵbb = asmStoreConfigFactory;
    exports.ɵbc = AsmStoreModule;
    exports.ɵbd = getReducers$3;
    exports.ɵbe = reducerToken$3;
    exports.ɵbf = reducerProvider$3;
    exports.ɵbg = clearCustomerSupportAgentAsmState;
    exports.ɵbh = metaReducers$2;
    exports.ɵbi = effects$3;
    exports.ɵbj = CustomerEffects;
    exports.ɵbk = CustomerSupportAgentTokenEffects;
    exports.ɵbl = UserAuthenticationTokenService;
    exports.ɵbm = reducer$7;
    exports.ɵbn = defaultAsmConfig;
    exports.ɵbo = interceptors$2;
    exports.ɵbp = CustomerSupportAgentAuthErrorInterceptor;
    exports.ɵbq = CustomerSupportAgentErrorHandlingService;
    exports.ɵbr = authStoreConfigFactory;
    exports.ɵbs = AuthStoreModule;
    exports.ɵbt = getReducers;
    exports.ɵbu = reducerToken;
    exports.ɵbv = reducerProvider;
    exports.ɵbw = clearAuthState;
    exports.ɵbx = metaReducers;
    exports.ɵby = effects;
    exports.ɵbz = ClientTokenEffect;
    exports.ɵc = CONFIG_INITIALIZER_FORROOT_GUARD;
    exports.ɵca = UserTokenEffects;
    exports.ɵcb = ClientAuthenticationTokenService;
    exports.ɵcc = reducer;
    exports.ɵcd = defaultAuthConfig;
    exports.ɵce = interceptors;
    exports.ɵcf = ClientTokenInterceptor;
    exports.ɵcg = UserTokenInterceptor;
    exports.ɵch = AuthErrorInterceptor;
    exports.ɵci = UserErrorHandlingService;
    exports.ɵcj = UrlParsingService;
    exports.ɵck = ClientErrorHandlingService;
    exports.ɵcl = TokenRevocationInterceptor;
    exports.ɵcm = AuthServices;
    exports.ɵcn = cartStoreConfigFactory;
    exports.ɵco = CartStoreModule;
    exports.ɵcp = SaveCartConnector;
    exports.ɵcq = SaveCartAdapter;
    exports.ɵcr = reducer$9;
    exports.ɵcs = multiCartStoreConfigFactory;
    exports.ɵct = MultiCartStoreModule;
    exports.ɵcu = MultiCartEffects;
    exports.ɵcv = processesLoaderReducer;
    exports.ɵcw = activeCartReducer;
    exports.ɵcx = cartEntitiesReducer;
    exports.ɵcy = wishListReducer;
    exports.ɵcz = CartPageMetaResolver;
    exports.ɵd = initConfig;
    exports.ɵda = CheckoutStoreModule;
    exports.ɵdb = getReducers$6;
    exports.ɵdc = reducerToken$6;
    exports.ɵdd = reducerProvider$6;
    exports.ɵde = effects$6;
    exports.ɵdf = AddressVerificationEffect;
    exports.ɵdg = CardTypesEffects;
    exports.ɵdh = CheckoutEffects;
    exports.ɵdi = reducer$c;
    exports.ɵdj = reducer$b;
    exports.ɵdk = reducer$a;
    exports.ɵdl = cmsStoreConfigFactory;
    exports.ɵdm = CmsStoreModule;
    exports.ɵdn = getReducers$8;
    exports.ɵdo = reducerToken$8;
    exports.ɵdp = reducerProvider$8;
    exports.ɵdq = clearCmsState;
    exports.ɵdr = metaReducers$4;
    exports.ɵds = effects$8;
    exports.ɵdt = PageEffects;
    exports.ɵdu = ComponentEffects;
    exports.ɵdv = NavigationEntryItemEffects;
    exports.ɵdw = reducer$g;
    exports.ɵdx = reducer$h;
    exports.ɵdy = reducer$e;
    exports.ɵdz = reducer$f;
    exports.ɵe = initializeContext;
    exports.ɵea = configValidatorFactory;
    exports.ɵeb = ConfigValidatorModule;
    exports.ɵec = GlobalMessageStoreModule;
    exports.ɵed = getReducers$4;
    exports.ɵee = reducerToken$4;
    exports.ɵef = reducerProvider$4;
    exports.ɵeg = reducer$8;
    exports.ɵeh = GlobalMessageEffect;
    exports.ɵei = defaultGlobalMessageConfigFactory;
    exports.ɵej = InternalServerErrorHandler;
    exports.ɵek = HttpErrorInterceptor;
    exports.ɵel = defaultI18nConfig;
    exports.ɵem = i18nextProviders;
    exports.ɵen = i18nextInit;
    exports.ɵeo = MockTranslationService;
    exports.ɵep = kymaStoreConfigFactory;
    exports.ɵeq = KymaStoreModule;
    exports.ɵer = getReducers$9;
    exports.ɵes = reducerToken$9;
    exports.ɵet = reducerProvider$9;
    exports.ɵeu = clearKymaState;
    exports.ɵev = metaReducers$5;
    exports.ɵew = effects$9;
    exports.ɵex = OpenIdTokenEffect;
    exports.ɵey = OpenIdAuthenticationTokenService;
    exports.ɵez = defaultKymaConfig;
    exports.ɵf = contextServiceProviders;
    exports.ɵfa = defaultOccAsmConfig;
    exports.ɵfb = defaultOccCartConfig;
    exports.ɵfc = OccSaveCartAdapter;
    exports.ɵfd = defaultOccProductConfig;
    exports.ɵfe = defaultOccSiteContextConfig;
    exports.ɵff = defaultOccStoreFinderConfig;
    exports.ɵfg = defaultOccUserConfig;
    exports.ɵfh = UserNotificationPreferenceAdapter;
    exports.ɵfi = defaultPersonalizationConfig;
    exports.ɵfj = interceptors$3;
    exports.ɵfk = OccPersonalizationIdInterceptor;
    exports.ɵfl = OccPersonalizationTimeInterceptor;
    exports.ɵfm = ProcessStoreModule;
    exports.ɵfn = getReducers$a;
    exports.ɵfo = reducerToken$a;
    exports.ɵfp = reducerProvider$a;
    exports.ɵfq = productStoreConfigFactory;
    exports.ɵfr = ProductStoreModule;
    exports.ɵfs = getReducers$b;
    exports.ɵft = reducerToken$b;
    exports.ɵfu = reducerProvider$b;
    exports.ɵfv = clearProductsState;
    exports.ɵfw = metaReducers$6;
    exports.ɵfx = effects$a;
    exports.ɵfy = ProductReferencesEffects;
    exports.ɵfz = ProductReviewsEffects;
    exports.ɵg = initSiteContextRoutesHandler;
    exports.ɵga = ProductsSearchEffects;
    exports.ɵgb = ProductEffects;
    exports.ɵgc = reducer$i;
    exports.ɵgd = entityScopedLoaderReducer;
    exports.ɵge = scopedLoaderReducer;
    exports.ɵgf = reducer$k;
    exports.ɵgg = reducer$j;
    exports.ɵgh = PageMetaResolver;
    exports.ɵgi = ProductURLPipe;
    exports.ɵgj = addExternalRoutesFactory;
    exports.ɵgk = getReducers$7;
    exports.ɵgl = reducer$d;
    exports.ɵgm = reducerToken$7;
    exports.ɵgn = reducerProvider$7;
    exports.ɵgo = CustomSerializer;
    exports.ɵgp = effects$7;
    exports.ɵgq = RouterEffects;
    exports.ɵgr = SiteContextParamsService;
    exports.ɵgs = SiteContextUrlSerializer;
    exports.ɵgt = SiteContextRoutesHandler;
    exports.ɵgu = defaultSiteContextConfigFactory;
    exports.ɵgv = siteContextStoreConfigFactory;
    exports.ɵgw = SiteContextStoreModule;
    exports.ɵgx = getReducers$1;
    exports.ɵgy = reducerToken$1;
    exports.ɵgz = reducerProvider$1;
    exports.ɵh = siteContextParamsProviders;
    exports.ɵha = effects$2;
    exports.ɵhb = LanguagesEffects;
    exports.ɵhc = CurrenciesEffects;
    exports.ɵhd = BaseSiteEffects;
    exports.ɵhe = reducer$3;
    exports.ɵhf = reducer$2;
    exports.ɵhg = reducer$1;
    exports.ɵhh = baseSiteConfigValidator;
    exports.ɵhi = interceptors$4;
    exports.ɵhj = CmsTicketInterceptor;
    exports.ɵhk = defaultStoreFinderConfig;
    exports.ɵhl = StoreFinderStoreModule;
    exports.ɵhm = getReducers$c;
    exports.ɵhn = reducerToken$c;
    exports.ɵho = reducerProvider$c;
    exports.ɵhp = effects$b;
    exports.ɵhq = FindStoresEffect;
    exports.ɵhr = ViewAllStoresEffect;
    exports.ɵhs = UserStoreModule;
    exports.ɵht = getReducers$d;
    exports.ɵhu = reducerToken$d;
    exports.ɵhv = reducerProvider$d;
    exports.ɵhw = clearUserState;
    exports.ɵhx = metaReducers$8;
    exports.ɵhy = effects$c;
    exports.ɵhz = BillingCountriesEffect;
    exports.ɵi = anonymousConsentsStoreConfigFactory;
    exports.ɵia = ClearMiscsDataEffect;
    exports.ɵib = ConsignmentTrackingEffects;
    exports.ɵic = DeliveryCountriesEffects;
    exports.ɵid = NotificationPreferenceEffects;
    exports.ɵie = OrderDetailsEffect;
    exports.ɵif = OrderReturnRequestEffect;
    exports.ɵig = UserPaymentMethodsEffects;
    exports.ɵih = RegionsEffects;
    exports.ɵii = ResetPasswordEffects;
    exports.ɵij = TitlesEffects;
    exports.ɵik = UserAddressesEffects;
    exports.ɵil = UserConsentsEffect;
    exports.ɵim = UserDetailsEffects;
    exports.ɵin = UserOrdersEffect;
    exports.ɵio = UserRegisterEffects;
    exports.ɵip = CustomerCouponEffects;
    exports.ɵiq = ProductInterestsEffect;
    exports.ɵir = ForgotPasswordEffects;
    exports.ɵis = UpdateEmailEffects;
    exports.ɵit = UpdatePasswordEffects;
    exports.ɵiu = UserNotificationPreferenceConnector;
    exports.ɵiv = reducer$w;
    exports.ɵiw = reducer$u;
    exports.ɵix = reducer$l;
    exports.ɵiy = reducer$v;
    exports.ɵiz = reducer$q;
    exports.ɵj = AnonymousConsentsStoreModule;
    exports.ɵja = reducer$x;
    exports.ɵjb = reducer$p;
    exports.ɵjc = reducer$A;
    exports.ɵjd = reducer$n;
    exports.ɵje = reducer$t;
    exports.ɵjf = reducer$r;
    exports.ɵjg = reducer$s;
    exports.ɵjh = reducer$m;
    exports.ɵji = reducer$y;
    exports.ɵjj = reducer$o;
    exports.ɵjk = reducer$z;
    exports.ɵjl = FindProductPageMetaResolver;
    exports.ɵjm = PageMetaResolver;
    exports.ɵk = TRANSFER_STATE_META_REDUCER;
    exports.ɵl = STORAGE_SYNC_META_REDUCER;
    exports.ɵm = stateMetaReducers;
    exports.ɵn = getStorageSyncReducer;
    exports.ɵo = getTransferStateReducer;
    exports.ɵp = getReducers$2;
    exports.ɵq = reducerToken$2;
    exports.ɵr = reducerProvider$2;
    exports.ɵs = clearAnonymousConsentTemplates;
    exports.ɵt = metaReducers$1;
    exports.ɵu = effects$1;
    exports.ɵv = AnonymousConsentsEffects;
    exports.ɵw = reducer$6;
    exports.ɵx = reducer$4;
    exports.ɵy = reducer$5;
    exports.ɵz = interceptors$1;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=spartacus-core.umd.js.map
