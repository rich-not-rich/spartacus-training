/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { getAnonymousConsentState } from './feature.selector';
const ɵ0 = /**
 * @param {?} state
 * @return {?}
 */
state => state.templates;
/** @type {?} */
export const getAnonymousConsentTemplatesState = createSelector(getAnonymousConsentState, (ɵ0));
/** @type {?} */
export const getAnonymousConsentTemplatesValue = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderValueSelector);
/** @type {?} */
export const getAnonymousConsentTemplatesLoading = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderLoadingSelector);
/** @type {?} */
export const getAnonymousConsentTemplatesSuccess = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderSuccessSelector);
/** @type {?} */
export const getAnonymousConsentTemplatesError = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderErrorSelector);
/** @type {?} */
export const getAnonymousConsentTemplate = (/**
 * @param {?} templateCode
 * @return {?}
 */
(templateCode) => {
    return createSelector(getAnonymousConsentTemplatesValue, (/**
     * @param {?} templates
     * @return {?}
     */
    templates => {
        return templates
            ? templates.find((/**
             * @param {?} template
             * @return {?}
             */
            template => template.id === templateCode))
            : null;
    }));
});
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnQtdGVtcGxhdGVzLnNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvc2VsZWN0b3JzL2Fub255bW91cy1jb25zZW50LXRlbXBsYXRlcy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR2xFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7OztBQU81RCxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTOztBQUwxQixNQUFNLE9BQU8saUNBQWlDLEdBRzFDLGNBQWMsQ0FDaEIsd0JBQXdCLE9BRXpCOztBQUVELE1BQU0sT0FBTyxpQ0FBaUMsR0FHMUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMsbUJBQW1CLENBQ3pDOztBQUVELE1BQU0sT0FBTyxtQ0FBbUMsR0FHNUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMscUJBQXFCLENBQzNDOztBQUVELE1BQU0sT0FBTyxtQ0FBbUMsR0FHNUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMscUJBQXFCLENBQzNDOztBQUVELE1BQU0sT0FBTyxpQ0FBaUMsR0FHMUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMsbUJBQW1CLENBQ3pDOztBQUVELE1BQU0sT0FBTywyQkFBMkI7Ozs7QUFBRyxDQUN6QyxZQUFvQixFQUMyQyxFQUFFO0lBQ2pFLE9BQU8sY0FBYyxDQUNuQixpQ0FBaUM7Ozs7SUFDakMsU0FBUyxDQUFDLEVBQUU7UUFDVixPQUFPLFNBQVM7WUFDZCxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUk7Ozs7WUFBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssWUFBWSxFQUFDO1lBQzFELENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDWCxDQUFDLEVBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQ29uc2VudFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29uc2VudC5tb2RlbCc7XG5pbXBvcnQgeyBTdGF0ZUxvYWRlclNlbGVjdG9ycyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IExvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci1zdGF0ZSc7XG5pbXBvcnQgeyBTdGF0ZVdpdGhBbm9ueW1vdXNDb25zZW50cyB9IGZyb20gJy4uL2Fub255bW91cy1jb25zZW50cy1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRBbm9ueW1vdXNDb25zZW50U3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3InO1xuXG5leHBvcnQgY29uc3QgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhBbm9ueW1vdXNDb25zZW50cyxcbiAgTG9hZGVyU3RhdGU8Q29uc2VudFRlbXBsYXRlW10+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRTdGF0ZSxcbiAgc3RhdGUgPT4gc3RhdGUudGVtcGxhdGVzXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1ZhbHVlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhBbm9ueW1vdXNDb25zZW50cyxcbiAgQ29uc2VudFRlbXBsYXRlW11cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlLFxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc0xvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdGF0ZSxcbiAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyTG9hZGluZ1NlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N1Y2Nlc3M6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdGF0ZSxcbiAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc0Vycm9yOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhBbm9ueW1vdXNDb25zZW50cyxcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3RhdGUsXG4gIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckVycm9yU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGUgPSAoXG4gIHRlbXBsYXRlQ29kZTogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLCBDb25zZW50VGVtcGxhdGU+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNWYWx1ZSxcbiAgICB0ZW1wbGF0ZXMgPT4ge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlc1xuICAgICAgICA/IHRlbXBsYXRlcy5maW5kKHRlbXBsYXRlID0+IHRlbXBsYXRlLmlkID09PSB0ZW1wbGF0ZUNvZGUpXG4gICAgICAgIDogbnVsbDtcbiAgICB9XG4gICk7XG59O1xuIl19