/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Optional, PLATFORM_ID, InjectionToken } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { META_REDUCERS } from '@ngrx/store';
import { Config } from '../../config/config.module';
import { WindowRef } from '../../window/window-ref';
import { getStorageSyncReducer } from './storage-sync.reducer';
import { getTransferStateReducer } from './transfer-state.reducer';
export { getStateSlice } from '../utils/get-state-slice';
export { getStorageSyncReducer } from './storage-sync.reducer';
export { getTransferStateReducer, getServerTransferStateReducer, getBrowserTransferStateReducer, CX_KEY } from './transfer-state.reducer';
/** @type {?} */
export const TRANSFER_STATE_META_REDUCER = new InjectionToken('TransferStateMetaReducer');
/** @type {?} */
export const STORAGE_SYNC_META_REDUCER = new InjectionToken('StorageSyncMetaReducer');
const ɵ0 = getTransferStateReducer, ɵ1 = getStorageSyncReducer;
/** @type {?} */
export const stateMetaReducers = [
    {
        provide: TRANSFER_STATE_META_REDUCER,
        useFactory: ɵ0,
        deps: [
            PLATFORM_ID,
            [new Optional(), TransferState],
            [new Optional(), Config],
        ],
    },
    {
        provide: STORAGE_SYNC_META_REDUCER,
        useFactory: ɵ1,
        deps: [WindowRef, [new Optional(), Config]],
    },
    {
        provide: META_REDUCERS,
        useExisting: TRANSFER_STATE_META_REDUCER,
        multi: true,
    },
    {
        provide: META_REDUCERS,
        useExisting: STORAGE_SYNC_META_REDUCER,
        multi: true,
    },
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvc3RhdGUvcmVkdWNlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFZLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRW5FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCwrR0FBYywwQkFBMEIsQ0FBQzs7QUFFekMsTUFBTSxPQUFPLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUMzRCwwQkFBMEIsQ0FDM0I7O0FBQ0QsTUFBTSxPQUFPLHlCQUF5QixHQUFHLElBQUksY0FBYyxDQUN6RCx3QkFBd0IsQ0FDekI7V0FLZSx1QkFBdUIsT0FTdkIscUJBQXFCOztBQVpyQyxNQUFNLE9BQU8saUJBQWlCLEdBQWU7SUFDM0M7UUFDRSxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLFVBQVUsSUFBeUI7UUFDbkMsSUFBSSxFQUFFO1lBQ0osV0FBVztZQUNYLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxhQUFhLENBQUM7WUFDL0IsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQztTQUN6QjtLQUNGO0lBQ0Q7UUFDRSxPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLFVBQVUsSUFBdUI7UUFDakMsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM1QztJQUNEO1FBQ0UsT0FBTyxFQUFFLGFBQWE7UUFDdEIsV0FBVyxFQUFFLDJCQUEyQjtRQUN4QyxLQUFLLEVBQUUsSUFBSTtLQUNaO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsYUFBYTtRQUN0QixXQUFXLEVBQUUseUJBQXlCO1FBQ3RDLEtBQUssRUFBRSxJQUFJO0tBQ1o7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbmFsLCBQTEFURk9STV9JRCwgUHJvdmlkZXIsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBNRVRBX1JFRFVDRVJTIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZy5tb2R1bGUnO1xuaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnLi4vLi4vd2luZG93L3dpbmRvdy1yZWYnO1xuaW1wb3J0IHsgZ2V0U3RvcmFnZVN5bmNSZWR1Y2VyIH0gZnJvbSAnLi9zdG9yYWdlLXN5bmMucmVkdWNlcic7XG5pbXBvcnQgeyBnZXRUcmFuc2ZlclN0YXRlUmVkdWNlciB9IGZyb20gJy4vdHJhbnNmZXItc3RhdGUucmVkdWNlcic7XG5cbmV4cG9ydCB7IGdldFN0YXRlU2xpY2UgfSBmcm9tICcuLi91dGlscy9nZXQtc3RhdGUtc2xpY2UnO1xuZXhwb3J0IHsgZ2V0U3RvcmFnZVN5bmNSZWR1Y2VyIH0gZnJvbSAnLi9zdG9yYWdlLXN5bmMucmVkdWNlcic7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zZmVyLXN0YXRlLnJlZHVjZXInO1xuXG5leHBvcnQgY29uc3QgVFJBTlNGRVJfU1RBVEVfTUVUQV9SRURVQ0VSID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnVHJhbnNmZXJTdGF0ZU1ldGFSZWR1Y2VyJ1xuKTtcbmV4cG9ydCBjb25zdCBTVE9SQUdFX1NZTkNfTUVUQV9SRURVQ0VSID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnU3RvcmFnZVN5bmNNZXRhUmVkdWNlcidcbik7XG5cbmV4cG9ydCBjb25zdCBzdGF0ZU1ldGFSZWR1Y2VyczogUHJvdmlkZXJbXSA9IFtcbiAge1xuICAgIHByb3ZpZGU6IFRSQU5TRkVSX1NUQVRFX01FVEFfUkVEVUNFUixcbiAgICB1c2VGYWN0b3J5OiBnZXRUcmFuc2ZlclN0YXRlUmVkdWNlcixcbiAgICBkZXBzOiBbXG4gICAgICBQTEFURk9STV9JRCxcbiAgICAgIFtuZXcgT3B0aW9uYWwoKSwgVHJhbnNmZXJTdGF0ZV0sXG4gICAgICBbbmV3IE9wdGlvbmFsKCksIENvbmZpZ10sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IFNUT1JBR0VfU1lOQ19NRVRBX1JFRFVDRVIsXG4gICAgdXNlRmFjdG9yeTogZ2V0U3RvcmFnZVN5bmNSZWR1Y2VyLFxuICAgIGRlcHM6IFtXaW5kb3dSZWYsIFtuZXcgT3B0aW9uYWwoKSwgQ29uZmlnXV0sXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBNRVRBX1JFRFVDRVJTLFxuICAgIHVzZUV4aXN0aW5nOiBUUkFOU0ZFUl9TVEFURV9NRVRBX1JFRFVDRVIsXG4gICAgbXVsdGk6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBNRVRBX1JFRFVDRVJTLFxuICAgIHVzZUV4aXN0aW5nOiBTVE9SQUdFX1NZTkNfTUVUQV9SRURVQ0VSLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuXTtcbiJdfQ==