/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { OccConfig } from '../config/occ-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/occ-config";
/**
 * Http interceptor to add cookies to all cross-site requests.
 */
export class WithCredentialsInterceptor {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * Intercepts each request and adds the `withCredential` flag to it
     * if it hasn't been added already.
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        if (this.requiresWithCredentials(request)) {
            request = request.clone({
                withCredentials: true,
            });
        }
        return next.handle(request);
    }
    /**
     * Indicates whether this is an OCC request.
     * @protected
     * @param {?} request
     * @return {?}
     */
    requiresWithCredentials(request) {
        return (
        /**
         * This `occConfig?.useWithCredentials` flag has only been introduced in
         * version 2.0. Customers must provide this interceptors manually in their
         * app to opt-in to use this feature, as we don't backport the configuration.
         */
        // this.occConfig?.useWithCredentials &&
        request.url.indexOf(this.occConfig.prefix) > -1);
    }
    /**
     * @private
     * @return {?}
     */
    get occConfig() {
        return this.config && this.config.backend && this.config.backend.occ
            ? this.config.backend.occ
            : {};
    }
}
WithCredentialsInterceptor.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
WithCredentialsInterceptor.ctorParameters = () => [
    { type: OccConfig }
];
/** @nocollapse */ WithCredentialsInterceptor.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function WithCredentialsInterceptor_Factory() { return new WithCredentialsInterceptor(i0.ɵɵinject(i1.OccConfig)); }, token: WithCredentialsInterceptor, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    WithCredentialsInterceptor.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC1jcmVkZW50aWFscy5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9vY2MvaW50ZXJjZXB0b3Ivd2l0aC1jcmVkZW50aWFscy5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBTUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7OztBQU1qRCxNQUFNLE9BQU8sMEJBQTBCOzs7O0lBQ3JDLFlBQXNCLE1BQWlCO1FBQWpCLFdBQU0sR0FBTixNQUFNLENBQVc7SUFBRyxDQUFDOzs7Ozs7OztJQU0zQyxTQUFTLENBQ1AsT0FBeUIsRUFDekIsSUFBaUI7UUFFakIsSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ3RCLGVBQWUsRUFBRSxJQUFJO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7Ozs7SUFLUyx1QkFBdUIsQ0FBQyxPQUF5QjtRQUN6RCxPQUFPO1FBQ0w7Ozs7V0FJRztRQUNILHdDQUF3QztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNoRCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxJQUFZLFNBQVM7UUFDbkIsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUc7WUFDbEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUc7WUFDekIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNULENBQUM7OztZQXZDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBTHpCLFNBQVM7Ozs7Ozs7O0lBT0osNENBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSHR0cEV2ZW50LFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cEludGVyY2VwdG9yLFxuICBIdHRwUmVxdWVzdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT2NjQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL29jYy1jb25maWcnO1xuXG4vKipcbiAqIEh0dHAgaW50ZXJjZXB0b3IgdG8gYWRkIGNvb2tpZXMgdG8gYWxsIGNyb3NzLXNpdGUgcmVxdWVzdHMuXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgV2l0aENyZWRlbnRpYWxzSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY29uZmlnOiBPY2NDb25maWcpIHt9XG5cbiAgLyoqXG4gICAqIEludGVyY2VwdHMgZWFjaCByZXF1ZXN0IGFuZCBhZGRzIHRoZSBgd2l0aENyZWRlbnRpYWxgIGZsYWcgdG8gaXRcbiAgICogaWYgaXQgaGFzbid0IGJlZW4gYWRkZWQgYWxyZWFkeS5cbiAgICovXG4gIGludGVyY2VwdChcbiAgICByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LFxuICAgIG5leHQ6IEh0dHBIYW5kbGVyXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAodGhpcy5yZXF1aXJlc1dpdGhDcmVkZW50aWFscyhyZXF1ZXN0KSkge1xuICAgICAgcmVxdWVzdCA9IHJlcXVlc3QuY2xvbmUoe1xuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoaXMgaXMgYW4gT0NDIHJlcXVlc3QuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVxdWlyZXNXaXRoQ3JlZGVudGlhbHMocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgYG9jY0NvbmZpZz8udXNlV2l0aENyZWRlbnRpYWxzYCBmbGFnIGhhcyBvbmx5IGJlZW4gaW50cm9kdWNlZCBpblxuICAgICAgICogdmVyc2lvbiAyLjAuIEN1c3RvbWVycyBtdXN0IHByb3ZpZGUgdGhpcyBpbnRlcmNlcHRvcnMgbWFudWFsbHkgaW4gdGhlaXJcbiAgICAgICAqIGFwcCB0byBvcHQtaW4gdG8gdXNlIHRoaXMgZmVhdHVyZSwgYXMgd2UgZG9uJ3QgYmFja3BvcnQgdGhlIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgKi9cbiAgICAgIC8vIHRoaXMub2NjQ29uZmlnPy51c2VXaXRoQ3JlZGVudGlhbHMgJiZcbiAgICAgIHJlcXVlc3QudXJsLmluZGV4T2YodGhpcy5vY2NDb25maWcucHJlZml4KSA+IC0xXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IG9jY0NvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcuYmFja2VuZCAmJiB0aGlzLmNvbmZpZy5iYWNrZW5kLm9jY1xuICAgICAgPyB0aGlzLmNvbmZpZy5iYWNrZW5kLm9jY1xuICAgICAgOiB7fTtcbiAgfVxufVxuIl19