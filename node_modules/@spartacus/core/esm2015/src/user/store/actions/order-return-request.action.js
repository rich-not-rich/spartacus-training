/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { USER_RETURN_REQUESTS, USER_RETURN_REQUEST_DETAILS, CANCEL_RETURN_PROCESS_ID, } from '../user-state';
import { LoaderFailAction, LoaderLoadAction, LoaderSuccessAction, LoaderResetAction, } from '../../../state/utils/loader/loader.action';
import { StateEntityLoaderActions } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
/** @type {?} */
export const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';
/** @type {?} */
export const CREATE_ORDER_RETURN_REQUEST_FAIL = '[User] Create Order Return Request Fail';
/** @type {?} */
export const CREATE_ORDER_RETURN_REQUEST_SUCCESS = '[User] Create Order Return Request Success';
/** @type {?} */
export const LOAD_ORDER_RETURN_REQUEST = '[User] Load Order Return Request details';
/** @type {?} */
export const LOAD_ORDER_RETURN_REQUEST_FAIL = '[User] Load Order Return Request details Fail';
/** @type {?} */
export const LOAD_ORDER_RETURN_REQUEST_SUCCESS = '[User] Load Order Return Request details Success';
/** @type {?} */
export const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';
/** @type {?} */
export const CANCEL_ORDER_RETURN_REQUEST_FAIL = '[User] Cancel Order Return Request Fail';
/** @type {?} */
export const CANCEL_ORDER_RETURN_REQUEST_SUCCESS = '[User] Cancel Order Return Request Success';
/** @type {?} */
export const LOAD_ORDER_RETURN_REQUEST_LIST = '[User] Load User Order Return Request List';
/** @type {?} */
export const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL = '[User] Load User Order Return Request List Fail';
/** @type {?} */
export const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS = '[User] Load User Order Return Request List Success';
/** @type {?} */
export const CLEAR_ORDER_RETURN_REQUEST = '[User] Clear Order Return Request Details';
/** @type {?} */
export const CLEAR_ORDER_RETURN_REQUEST_LIST = '[User] Clear Order Return Request List';
/** @type {?} */
export const RESET_CANCEL_RETURN_PROCESS = '[User] Reset Cancel Return Request Process';
export class CreateOrderReturnRequest extends LoaderLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST;
    }
}
if (false) {
    /** @type {?} */
    CreateOrderReturnRequest.prototype.type;
    /** @type {?} */
    CreateOrderReturnRequest.prototype.payload;
}
export class CreateOrderReturnRequestFail extends LoaderFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_FAIL;
    }
}
if (false) {
    /** @type {?} */
    CreateOrderReturnRequestFail.prototype.type;
    /** @type {?} */
    CreateOrderReturnRequestFail.prototype.payload;
}
export class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    CreateOrderReturnRequestSuccess.prototype.type;
    /** @type {?} */
    CreateOrderReturnRequestSuccess.prototype.payload;
}
export class LoadOrderReturnRequest extends LoaderLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderReturnRequest.prototype.type;
    /** @type {?} */
    LoadOrderReturnRequest.prototype.payload;
}
export class LoadOrderReturnRequestFail extends LoaderFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_FAIL;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderReturnRequestFail.prototype.type;
    /** @type {?} */
    LoadOrderReturnRequestFail.prototype.payload;
}
export class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderReturnRequestSuccess.prototype.type;
    /** @type {?} */
    LoadOrderReturnRequestSuccess.prototype.payload;
}
export class CancelOrderReturnRequest extends StateEntityLoaderActions.EntityLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST;
    }
}
if (false) {
    /** @type {?} */
    CancelOrderReturnRequest.prototype.type;
    /** @type {?} */
    CancelOrderReturnRequest.prototype.payload;
}
export class CancelOrderReturnRequestFail extends StateEntityLoaderActions.EntityFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST_FAIL;
    }
}
if (false) {
    /** @type {?} */
    CancelOrderReturnRequestFail.prototype.type;
    /** @type {?} */
    CancelOrderReturnRequestFail.prototype.payload;
}
export class CancelOrderReturnRequestSuccess extends StateEntityLoaderActions.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    CancelOrderReturnRequestSuccess.prototype.type;
}
export class LoadOrderReturnRequestList extends LoaderLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderReturnRequestList.prototype.type;
    /** @type {?} */
    LoadOrderReturnRequestList.prototype.payload;
}
export class LoadOrderReturnRequestListFail extends LoaderFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUESTS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderReturnRequestListFail.prototype.type;
    /** @type {?} */
    LoadOrderReturnRequestListFail.prototype.payload;
}
export class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderReturnRequestListSuccess.prototype.type;
    /** @type {?} */
    LoadOrderReturnRequestListSuccess.prototype.payload;
}
export class ClearOrderReturnRequest extends LoaderResetAction {
    constructor() {
        super(USER_RETURN_REQUEST_DETAILS);
        this.type = CLEAR_ORDER_RETURN_REQUEST;
    }
}
if (false) {
    /** @type {?} */
    ClearOrderReturnRequest.prototype.type;
}
export class ClearOrderReturnRequestList extends LoaderResetAction {
    constructor() {
        super(USER_RETURN_REQUESTS);
        this.type = CLEAR_ORDER_RETURN_REQUEST_LIST;
    }
}
if (false) {
    /** @type {?} */
    ClearOrderReturnRequestList.prototype.type;
}
export class ResetCancelReturnProcess extends StateEntityLoaderActions.EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = RESET_CANCEL_RETURN_PROCESS;
    }
}
if (false) {
    /** @type {?} */
    ResetCancelReturnProcess.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,