/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoaderFailAction, LoaderLoadAction, LoaderSuccessAction, LoaderResetAction, } from '../../../state/utils/loader/loader.action';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateEntityLoaderActions } from '../../../state/utils/index';
import { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';
/** @type {?} */
export const LOAD_ORDER_DETAILS = '[User] Load Order Details';
/** @type {?} */
export const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';
/** @type {?} */
export const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';
/** @type {?} */
export const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';
/** @type {?} */
export const CANCEL_ORDER = '[User] Cancel Order';
/** @type {?} */
export const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';
/** @type {?} */
export const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';
/** @type {?} */
export const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';
export class LoadOrderDetails extends LoaderLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderDetails.prototype.type;
    /** @type {?} */
    LoadOrderDetails.prototype.payload;
}
export class LoadOrderDetailsFail extends LoaderFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_ORDER_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS_FAIL;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderDetailsFail.prototype.type;
    /** @type {?} */
    LoadOrderDetailsFail.prototype.payload;
}
export class LoadOrderDetailsSuccess extends LoaderSuccessAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    LoadOrderDetailsSuccess.prototype.type;
    /** @type {?} */
    LoadOrderDetailsSuccess.prototype.payload;
}
export class ClearOrderDetails extends LoaderResetAction {
    constructor() {
        super(USER_ORDER_DETAILS);
        this.type = CLEAR_ORDER_DETAILS;
    }
}
if (false) {
    /** @type {?} */
    ClearOrderDetails.prototype.type;
}
export class CancelOrder extends StateEntityLoaderActions.EntityLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_ORDER;
    }
}
if (false) {
    /** @type {?} */
    CancelOrder.prototype.type;
    /** @type {?} */
    CancelOrder.prototype.payload;
}
export class CancelOrderFail extends StateEntityLoaderActions.EntityFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_ORDER_FAIL;
    }
}
if (false) {
    /** @type {?} */
    CancelOrderFail.prototype.type;
    /** @type {?} */
    CancelOrderFail.prototype.payload;
}
export class CancelOrderSuccess extends StateEntityLoaderActions.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.type = CANCEL_ORDER_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    CancelOrderSuccess.prototype.type;
}
export class ResetCancelOrderProcess extends StateEntityLoaderActions.EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.type = RESET_CANCEL_ORDER_PROCESS;
    }
}
if (false) {
    /** @type {?} */
    ResetCancelOrderProcess.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZGV0YWlscy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL29yZGVyLWRldGFpbHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsaUJBQWlCLEdBQ2xCLE1BQU0sMkNBQTJDLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFNUUsTUFBTSxPQUFPLGtCQUFrQixHQUFHLDJCQUEyQjs7QUFDN0QsTUFBTSxPQUFPLHVCQUF1QixHQUFHLGdDQUFnQzs7QUFDdkUsTUFBTSxPQUFPLDBCQUEwQixHQUFHLG1DQUFtQzs7QUFDN0UsTUFBTSxPQUFPLG1CQUFtQixHQUFHLDRCQUE0Qjs7QUFFL0QsTUFBTSxPQUFPLFlBQVksR0FBRyxxQkFBcUI7O0FBQ2pELE1BQU0sT0FBTyxpQkFBaUIsR0FBRywwQkFBMEI7O0FBQzNELE1BQU0sT0FBTyxvQkFBb0IsR0FBRyw2QkFBNkI7O0FBQ2pFLE1BQU0sT0FBTywwQkFBMEIsR0FBRyxtQ0FBbUM7QUFFN0UsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGdCQUFnQjs7OztJQUVwRCxZQUNTLE9BR047UUFFRCxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUxuQixZQUFPLEdBQVAsT0FBTyxDQUdiO1FBTE0sU0FBSSxHQUFHLGtCQUFrQixDQUFDO0lBUW5DLENBQUM7Q0FDRjs7O0lBVEMsZ0NBQW1DOztJQUVqQyxtQ0FHQzs7QUFNTCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZ0JBQWdCOzs7O0lBRXhELFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRGxCLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBR3hDLENBQUM7Q0FDRjs7O0lBSkMsb0NBQXdDOztJQUM1Qix1Q0FBbUI7O0FBS2pDLE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxtQkFBbUI7Ozs7SUFFOUQsWUFBbUIsT0FBYztRQUMvQixLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQURULFlBQU8sR0FBUCxPQUFPLENBQU87UUFEeEIsU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBRzNDLENBQUM7Q0FDRjs7O0lBSkMsdUNBQTJDOztJQUMvQiwwQ0FBcUI7O0FBS25DLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxpQkFBaUI7SUFFdEQ7UUFDRSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUZuQixTQUFJLEdBQUcsbUJBQW1CLENBQUM7SUFHcEMsQ0FBQztDQUNGOzs7SUFKQyxpQ0FBb0M7O0FBTXRDLE1BQU0sT0FBTyxXQUFZLFNBQVEsd0JBQXdCLENBQUMsZ0JBQWdCOzs7O0lBRXhFLFlBQ1MsT0FJTjtRQUVELEtBQUssQ0FBQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQU56QyxZQUFPLEdBQVAsT0FBTyxDQUliO1FBTk0sU0FBSSxHQUFHLFlBQVksQ0FBQztJQVM3QixDQUFDO0NBQ0Y7OztJQVZDLDJCQUE2Qjs7SUFFM0IsOEJBSUM7O0FBTUwsTUFBTSxPQUFPLGVBQWdCLFNBQVEsd0JBQXdCLENBQUMsZ0JBQWdCOzs7O0lBRTVFLFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUR4QyxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxpQkFBaUIsQ0FBQztJQUdsQyxDQUFDO0NBQ0Y7OztJQUpDLCtCQUFrQzs7SUFDdEIsa0NBQW1COztBQUtqQyxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsd0JBQXdCLENBQUMsbUJBQW1CO0lBRWxGO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBRnpDLFNBQUksR0FBRyxvQkFBb0IsQ0FBQztJQUdyQyxDQUFDO0NBQ0Y7OztJQUpDLGtDQUFxQzs7QUFNdkMsTUFBTSxPQUFPLHVCQUF3QixTQUFRLHdCQUF3QixDQUFDLGlCQUFpQjtJQUVyRjtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUZ6QyxTQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFHM0MsQ0FBQztDQUNGOzs7SUFKQyx1Q0FBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBPcmRlcixcbiAgQ2FuY2VsbGF0aW9uUmVxdWVzdEVudHJ5SW5wdXRMaXN0LFxufSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XG5pbXBvcnQge1xuICBMb2FkZXJGYWlsQWN0aW9uLFxuICBMb2FkZXJMb2FkQWN0aW9uLFxuICBMb2FkZXJTdWNjZXNzQWN0aW9uLFxuICBMb2FkZXJSZXNldEFjdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5hY3Rpb24nO1xuaW1wb3J0IHsgUFJPQ0VTU19GRUFUVVJFIH0gZnJvbSAnLi4vLi4vLi4vcHJvY2Vzcy9zdG9yZS9wcm9jZXNzLXN0YXRlJztcbmltcG9ydCB7IFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IFVTRVJfT1JERVJfREVUQUlMUywgQ0FOQ0VMX09SREVSX1BST0NFU1NfSUQgfSBmcm9tICcuLi91c2VyLXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfREVUQUlMUyA9ICdbVXNlcl0gTG9hZCBPcmRlciBEZXRhaWxzJztcbmV4cG9ydCBjb25zdCBMT0FEX09SREVSX0RFVEFJTFNfRkFJTCA9ICdbVXNlcl0gTG9hZCBPcmRlciBEZXRhaWxzIEZhaWwnO1xuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfREVUQUlMU19TVUNDRVNTID0gJ1tVc2VyXSBMb2FkIE9yZGVyIERldGFpbHMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgQ0xFQVJfT1JERVJfREVUQUlMUyA9ICdbVXNlcl0gQ2xlYXIgT3JkZXIgRGV0YWlscyc7XG5cbmV4cG9ydCBjb25zdCBDQU5DRUxfT1JERVIgPSAnW1VzZXJdIENhbmNlbCBPcmRlcic7XG5leHBvcnQgY29uc3QgQ0FOQ0VMX09SREVSX0ZBSUwgPSAnW1VzZXJdIENhbmNlbCBPcmRlciBGYWlsJztcbmV4cG9ydCBjb25zdCBDQU5DRUxfT1JERVJfU1VDQ0VTUyA9ICdbVXNlcl0gQ2FuY2VsIE9yZGVyIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFJFU0VUX0NBTkNFTF9PUkRFUl9QUk9DRVNTID0gJ1tVc2VyXSBSZXNldCBDYW5jZWwgT3JkZXIgUHJvY2Vzcyc7XG5cbmV4cG9ydCBjbGFzcyBMb2FkT3JkZXJEZXRhaWxzIGV4dGVuZHMgTG9hZGVyTG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX09SREVSX0RFVEFJTFM7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1c2VySWQ6IHN0cmluZztcbiAgICAgIG9yZGVyQ29kZTogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoVVNFUl9PUkRFUl9ERVRBSUxTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZE9yZGVyRGV0YWlsc0ZhaWwgZXh0ZW5kcyBMb2FkZXJGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfT1JERVJfREVUQUlMU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoVVNFUl9PUkRFUl9ERVRBSUxTLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZE9yZGVyRGV0YWlsc1N1Y2Nlc3MgZXh0ZW5kcyBMb2FkZXJTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfT1JERVJfREVUQUlMU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogT3JkZXIpIHtcbiAgICBzdXBlcihVU0VSX09SREVSX0RFVEFJTFMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGVhck9yZGVyRGV0YWlscyBleHRlbmRzIExvYWRlclJlc2V0QWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENMRUFSX09SREVSX0RFVEFJTFM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFVTRVJfT1JERVJfREVUQUlMUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhbmNlbE9yZGVyIGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ0FOQ0VMX09SREVSO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBvcmRlckNvZGU6IHN0cmluZztcbiAgICAgIGNhbmNlbFJlcXVlc3RJbnB1dDogQ2FuY2VsbGF0aW9uUmVxdWVzdEVudHJ5SW5wdXRMaXN0O1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhbmNlbE9yZGVyRmFpbCBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENBTkNFTF9PUkRFUl9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCwgcGF5bG9hZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhbmNlbE9yZGVyU3VjY2VzcyBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENBTkNFTF9PUkRFUl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIENBTkNFTF9PUkRFUl9QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVzZXRDYW5jZWxPcmRlclByb2Nlc3MgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5UmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVTRVRfQ0FOQ0VMX09SREVSX1BST0NFU1M7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgQ0FOQ0VMX09SREVSX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE9yZGVyRGV0YWlsc0FjdGlvbiA9XG4gIHwgTG9hZE9yZGVyRGV0YWlsc1xuICB8IExvYWRPcmRlckRldGFpbHNGYWlsXG4gIHwgTG9hZE9yZGVyRGV0YWlsc1N1Y2Nlc3NcbiAgfCBDbGVhck9yZGVyRGV0YWlsc1xuICB8IENhbmNlbE9yZGVyXG4gIHwgQ2FuY2VsT3JkZXJGYWlsXG4gIHwgQ2FuY2VsT3JkZXJTdWNjZXNzO1xuIl19