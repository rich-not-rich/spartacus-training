/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateLoaderActions } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { EntityFailAction, EntityLoadAction, EntityResetAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, NOTIFICATION_PREFERENCES, } from '../user-state';
/** @type {?} */
export const LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
/** @type {?} */
export const LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
/** @type {?} */
export const LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
/** @type {?} */
export const UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
/** @type {?} */
export const UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
/** @type {?} */
export const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
/** @type {?} */
export const RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
/** @type {?} */
export const CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
export class LoadNotificationPreferences extends StateLoaderActions.LoaderLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES;
    }
}
if (false) {
    /** @type {?} */
    LoadNotificationPreferences.prototype.type;
    /** @type {?} */
    LoadNotificationPreferences.prototype.payload;
}
export class LoadNotificationPreferencesFail extends StateLoaderActions.LoaderFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES, payload);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
    }
}
if (false) {
    /** @type {?} */
    LoadNotificationPreferencesFail.prototype.type;
    /** @type {?} */
    LoadNotificationPreferencesFail.prototype.payload;
}
export class LoadNotificationPreferencesSuccess extends StateLoaderActions.LoaderSuccessAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    LoadNotificationPreferencesSuccess.prototype.type;
    /** @type {?} */
    LoadNotificationPreferencesSuccess.prototype.payload;
}
export class UpdateNotificationPreferences extends EntityLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES;
    }
}
if (false) {
    /** @type {?} */
    UpdateNotificationPreferences.prototype.type;
    /** @type {?} */
    UpdateNotificationPreferences.prototype.payload;
}
export class UpdateNotificationPreferencesFail extends EntityFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
    }
}
if (false) {
    /** @type {?} */
    UpdateNotificationPreferencesFail.prototype.type;
    /** @type {?} */
    UpdateNotificationPreferencesFail.prototype.payload;
}
export class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    UpdateNotificationPreferencesSuccess.prototype.type;
    /** @type {?} */
    UpdateNotificationPreferencesSuccess.prototype.payload;
}
export class ResetNotificationPreferences extends EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.type = RESET_NOTIFICATION_PREFERENCES;
    }
}
if (false) {
    /** @type {?} */
    ResetNotificationPreferences.prototype.type;
}
export class ClearNotificationPreferences extends StateLoaderActions.LoaderResetAction {
    constructor() {
        super(NOTIFICATION_PREFERENCES);
        this.type = CLEAR_NOTIFICATION_PREFERENCES;
    }
}
if (false) {
    /** @type {?} */
    ClearNotificationPreferences.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvYWN0aW9ucy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsbUJBQW1CLEdBQ3BCLE1BQU0seURBQXlELENBQUM7QUFDakUsT0FBTyxFQUNMLDBDQUEwQyxFQUMxQyx3QkFBd0IsR0FDekIsTUFBTSxlQUFlLENBQUM7O0FBR3ZCLE1BQU0sT0FBTyw2QkFBNkIsR0FDeEMsc0NBQXNDOztBQUN4QyxNQUFNLE9BQU8sa0NBQWtDLEdBQzdDLDJDQUEyQzs7QUFDN0MsTUFBTSxPQUFPLHFDQUFxQyxHQUNoRCw4Q0FBOEM7O0FBQ2hELE1BQU0sT0FBTywrQkFBK0IsR0FDMUMsd0NBQXdDOztBQUMxQyxNQUFNLE9BQU8sb0NBQW9DLEdBQy9DLDZDQUE2Qzs7QUFDL0MsTUFBTSxPQUFPLHVDQUF1QyxHQUNsRCxnREFBZ0Q7O0FBQ2xELE1BQU0sT0FBTyw4QkFBOEIsR0FDekMsdUNBQXVDOztBQUN6QyxNQUFNLE9BQU8sOEJBQThCLEdBQ3pDLHVDQUF1QztBQUV6QyxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsa0JBQWtCLENBQUMsZ0JBQWdCOzs7O0lBRWxGLFlBQW1CLE9BQWU7UUFDaEMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFEZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRHpCLFNBQUksR0FBRyw2QkFBNkIsQ0FBQztJQUc5QyxDQUFDO0NBQ0Y7OztJQUpDLDJDQUE4Qzs7SUFDbEMsOENBQXNCOztBQUtwQyxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsa0JBQWtCLENBQUMsZ0JBQWdCOzs7O0lBRXRGLFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLHdCQUF3QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRHhCLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLGtDQUFrQyxDQUFDO0lBR25ELENBQUM7Q0FDRjs7O0lBSkMsK0NBQW1EOztJQUN2QyxrREFBbUI7O0FBS2pDLE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSxrQkFBa0IsQ0FBQyxtQkFBbUI7Ozs7SUFFNUYsWUFBbUIsT0FBaUM7UUFDbEQsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFEZixZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUQzQyxTQUFJLEdBQUcscUNBQXFDLENBQUM7SUFHdEQsQ0FBQztDQUNGOzs7SUFKQyxrREFBc0Q7O0lBQzFDLHFEQUF3Qzs7QUFLdEQsTUFBTSxPQUFPLDZCQUE4QixTQUFRLGdCQUFnQjs7OztJQUVqRSxZQUNTLE9BQWtFO1FBRXpFLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQUY1RCxZQUFPLEdBQVAsT0FBTyxDQUEyRDtRQUZsRSxTQUFJLEdBQUcsK0JBQStCLENBQUM7SUFLaEQsQ0FBQztDQUNGOzs7SUFOQyw2Q0FBZ0Q7O0lBRTlDLGdEQUF5RTs7QUFNN0UsTUFBTSxPQUFPLGlDQUFrQyxTQUFRLGdCQUFnQjs7OztJQUVyRSxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEM0QsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsb0NBQW9DLENBQUM7SUFHckQsQ0FBQztDQUNGOzs7SUFKQyxpREFBcUQ7O0lBQ3pDLG9EQUFtQjs7QUFLakMsTUFBTSxPQUFPLG9DQUFxQyxTQUFRLG1CQUFtQjs7OztJQUUzRSxZQUFtQixPQUFpQztRQUNsRCxLQUFLLENBQUMsZUFBZSxFQUFFLDBDQUEwQyxDQUFDLENBQUM7UUFEbEQsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFEM0MsU0FBSSxHQUFHLHVDQUF1QyxDQUFDO0lBR3hELENBQUM7Q0FDRjs7O0lBSkMsb0RBQXdEOztJQUM1Qyx1REFBd0M7O0FBS3RELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxpQkFBaUI7SUFFakU7UUFDRSxLQUFLLENBQUMsZUFBZSxFQUFFLDBDQUEwQyxDQUFDLENBQUM7UUFGNUQsU0FBSSxHQUFHLDhCQUE4QixDQUFDO0lBRy9DLENBQUM7Q0FDRjs7O0lBSkMsNENBQStDOztBQU1qRCxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsa0JBQWtCLENBQUMsaUJBQWlCO0lBRXBGO1FBQ0UsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFGekIsU0FBSSxHQUFHLDhCQUE4QixDQUFDO0lBRy9DLENBQUM7Q0FDRjs7O0lBSkMsNENBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVMb2FkZXJBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgUFJPQ0VTU19GRUFUVVJFIH0gZnJvbSAnLi4vLi4vLi4vcHJvY2Vzcy9zdG9yZS9wcm9jZXNzLXN0YXRlJztcbmltcG9ydCB7XG4gIEVudGl0eUZhaWxBY3Rpb24sXG4gIEVudGl0eUxvYWRBY3Rpb24sXG4gIEVudGl0eVJlc2V0QWN0aW9uLFxuICBFbnRpdHlTdWNjZXNzQWN0aW9uLFxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuYWN0aW9uJztcbmltcG9ydCB7XG4gIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCxcbiAgTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTLFxufSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByZWZlcmVuY2UgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XG4gICdbVXNlcl0gTG9hZCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuZXhwb3J0IGNvbnN0IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUwgPVxuICAnW1VzZXJdIExvYWQgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIEZhaWwnO1xuZXhwb3J0IGNvbnN0IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1MgPVxuICAnW1VzZXJdIExvYWQgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxuICAnW1VzZXJdIFVwZGF0ZSBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfRkFJTCA9XG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBGYWlsJztcbmV4cG9ydCBjb25zdCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1MgPVxuICAnW1VzZXJdIFVwZGF0ZSBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgUkVTRVRfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cbiAgJ1tVc2VyXSBSZXNldCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuZXhwb3J0IGNvbnN0IENMRUFSX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XG4gICdbVXNlcl0gQ2xlYXIgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzJztcblxuZXhwb3J0IGNsYXNzIExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlcyBleHRlbmRzIFN0YXRlTG9hZGVyQWN0aW9ucy5Mb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbCBleHRlbmRzIFN0YXRlTG9hZGVyQWN0aW9ucy5Mb2FkZXJGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzIGV4dGVuZHMgU3RhdGVMb2FkZXJBY3Rpb25zLkxvYWRlclN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IE5vdGlmaWNhdGlvblByZWZlcmVuY2VbXSkge1xuICAgIHN1cGVyKE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1c2VySWQ6IHN0cmluZzsgcHJlZmVyZW5jZXM6IE5vdGlmaWNhdGlvblByZWZlcmVuY2VbXSB9XG4gICkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNGYWlsIGV4dGVuZHMgRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCwgcGF5bG9hZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyBleHRlbmRzIEVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogTm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldE5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgRW50aXR5UmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVTRVRfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsZWFyTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBTdGF0ZUxvYWRlckFjdGlvbnMuTG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ0xFQVJfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE5vdGlmaWNhdGlvblByZWZlcmVuY2VBY3Rpb24gPVxuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1xuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWxcbiAgfCBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzXG4gIHwgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWxcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3NcbiAgfCBSZXNldE5vdGlmaWNhdGlvblByZWZlcmVuY2VzXG4gIHwgQ2xlYXJOb3RpZmljYXRpb25QcmVmZXJlbmNlcztcbiJdfQ==