/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { getUserState } from './feature.selector';
import { StateLoaderSelectors } from '../../../state/utils/index';
const ɵ0 = /**
 * @param {?} state
 * @return {?}
 */
(state) => state.orderReturn;
/** @type {?} */
export const getOrderReturnRequestState = createSelector(getUserState, (ɵ0));
const ɵ1 = /**
 * @param {?} state
 * @return {?}
 */
(state) => StateLoaderSelectors.loaderValueSelector(state);
/** @type {?} */
export const getOrderReturnRequest = createSelector(getOrderReturnRequestState, (ɵ1));
const ɵ2 = /**
 * @param {?} state
 * @return {?}
 */
(state) => StateLoaderSelectors.loaderLoadingSelector(state);
/** @type {?} */
export const getOrderReturnRequestLoading = createSelector(getOrderReturnRequestState, (ɵ2));
const ɵ3 = /**
 * @param {?} state
 * @return {?}
 */
(state) => StateLoaderSelectors.loaderSuccessSelector(state) &&
    !StateLoaderSelectors.loaderLoadingSelector(state);
/** @type {?} */
export const getOrderReturnRequestSuccess = createSelector(getOrderReturnRequestState, (ɵ3));
const ɵ4 = /**
 * @param {?} state
 * @return {?}
 */
(state) => state.orderReturnList;
/** @type {?} */
export const getOrderReturnRequestListState = createSelector(getUserState, (ɵ4));
const ɵ5 = /**
 * @param {?} state
 * @return {?}
 */
(state) => StateLoaderSelectors.loaderValueSelector(state);
/** @type {?} */
export const getOrderReturnRequestList = createSelector(getOrderReturnRequestListState, (ɵ5));
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItcmV0dXJuLXJlcXVlc3Quc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvc2VsZWN0b3JzL29yZGVyLXJldHVybi1yZXF1ZXN0LnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFHL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7OztBQU9oRSxDQUFDLEtBQWdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXOztBQUx6QyxNQUFNLE9BQU8sMEJBQTBCLEdBR25DLGNBQWMsQ0FDaEIsWUFBWSxPQUViOzs7OztBQU9DLENBQUMsS0FBaUMsRUFBRSxFQUFFLENBQ3BDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQzs7QUFObkQsTUFBTSxPQUFPLHFCQUFxQixHQUc5QixjQUFjLENBQ2hCLDBCQUEwQixPQUczQjs7Ozs7QUFPQyxDQUFDLEtBQWlDLEVBQUUsRUFBRSxDQUNwQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7O0FBTnJELE1BQU0sT0FBTyw0QkFBNEIsR0FHckMsY0FBYyxDQUNoQiwwQkFBMEIsT0FHM0I7Ozs7O0FBT0MsQ0FBQyxLQUFpQyxFQUFFLEVBQUUsQ0FDcEMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0lBQ2pELENBQUMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDOztBQVB0RCxNQUFNLE9BQU8sNEJBQTRCLEdBR3JDLGNBQWMsQ0FDaEIsMEJBQTBCLE9BSTNCOzs7OztBQU9DLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWU7O0FBTDdDLE1BQU0sT0FBTyw4QkFBOEIsR0FHdkMsY0FBYyxDQUNoQixZQUFZLE9BRWI7Ozs7O0FBT0MsQ0FBQyxLQUFxQyxFQUFFLEVBQUUsQ0FDeEMsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDOztBQU5uRCxNQUFNLE9BQU8seUJBQXlCLEdBR2xDLGNBQWMsQ0FDaEIsOEJBQThCLE9BRy9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBSZXR1cm5SZXF1ZXN0LCBSZXR1cm5SZXF1ZXN0TGlzdCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlV2l0aFVzZXIsIFVzZXJTdGF0ZSB9IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuaW1wb3J0IHsgZ2V0VXNlclN0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcbmltcG9ydCB7IExvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci1zdGF0ZSc7XG5pbXBvcnQgeyBTdGF0ZUxvYWRlclNlbGVjdG9ycyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0PlxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRVc2VyU3RhdGUsXG4gIChzdGF0ZTogVXNlclN0YXRlKSA9PiBzdGF0ZS5vcmRlclJldHVyblxuKTtcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgUmV0dXJuUmVxdWVzdFxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmRlclJldHVyblJlcXVlc3RTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0PikgPT5cbiAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdExvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0U3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmV0dXJuUmVxdWVzdD4pID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldE9yZGVyUmV0dXJuUmVxdWVzdFN1Y2Nlc3M6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0U3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmV0dXJuUmVxdWVzdD4pID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKSAmJlxuICAgICFTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TGlzdFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0TGlzdD5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0VXNlclN0YXRlLFxuICAoc3RhdGU6IFVzZXJTdGF0ZSkgPT4gc3RhdGUub3JkZXJSZXR1cm5MaXN0XG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TGlzdDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgUmV0dXJuUmVxdWVzdExpc3Rcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TGlzdFN0YXRlLFxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJldHVyblJlcXVlc3RMaXN0PikgPT5cbiAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKVxuKTtcbiJdfQ==