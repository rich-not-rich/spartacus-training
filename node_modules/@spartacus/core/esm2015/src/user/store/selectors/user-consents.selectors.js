/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { getUserState } from './feature.selector';
const ɵ0 = /**
 * @param {?} state
 * @return {?}
 */
(state) => state.consents;
/** @type {?} */
export const getConsentsState = createSelector(getUserState, (ɵ0));
/** @type {?} */
export const getConsentsValue = createSelector(getConsentsState, StateLoaderSelectors.loaderValueSelector);
/** @type {?} */
export const getConsentByTemplateId = (/**
 * @param {?} templateId
 * @return {?}
 */
(templateId) => createSelector(getConsentsValue, (/**
 * @param {?} templates
 * @return {?}
 */
templates => templates.find((/**
 * @param {?} template
 * @return {?}
 */
template => template.id === templateId)))));
/** @type {?} */
export const getConsentsLoading = createSelector(getConsentsState, StateLoaderSelectors.loaderLoadingSelector);
/** @type {?} */
export const getConsentsSuccess = createSelector(getConsentsState, StateLoaderSelectors.loaderSuccessSelector);
/** @type {?} */
export const getConsentsError = createSelector(getConsentsState, StateLoaderSelectors.loaderErrorSelector);
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1jb25zZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9zZWxlY3RvcnMvdXNlci1jb25zZW50cy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7QUFPaEQsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUTs7QUFMdEMsTUFBTSxPQUFPLGdCQUFnQixHQUd6QixjQUFjLENBQ2hCLFlBQVksT0FFYjs7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCLEdBR3pCLGNBQWMsQ0FDaEIsZ0JBQWdCLEVBQ2hCLG9CQUFvQixDQUFDLG1CQUFtQixDQUN6Qzs7QUFFRCxNQUFNLE9BQU8sc0JBQXNCOzs7O0FBQUcsQ0FDcEMsVUFBa0IsRUFDZ0MsRUFBRSxDQUNwRCxjQUFjLENBQ1osZ0JBQWdCOzs7O0FBQ2hCLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUk7Ozs7QUFBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssVUFBVSxFQUFDLEVBQ3BFLENBQUE7O0FBRUgsTUFBTSxPQUFPLGtCQUFrQixHQUczQixjQUFjLENBQ2hCLGdCQUFnQixFQUNoQixvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FDM0M7O0FBRUQsTUFBTSxPQUFPLGtCQUFrQixHQUczQixjQUFjLENBQ2hCLGdCQUFnQixFQUNoQixvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FDM0M7O0FBRUQsTUFBTSxPQUFPLGdCQUFnQixHQUd6QixjQUFjLENBQ2hCLGdCQUFnQixFQUNoQixvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FDekMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IENvbnNlbnRUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NvbnNlbnQubW9kZWwnO1xuaW1wb3J0IHsgU3RhdGVMb2FkZXJTZWxlY3RvcnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXItc3RhdGUnO1xuaW1wb3J0IHsgU3RhdGVXaXRoVXNlciwgVXNlclN0YXRlIH0gZnJvbSAnLi4vdXNlci1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRVc2VyU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3InO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29uc2VudHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgTG9hZGVyU3RhdGU8Q29uc2VudFRlbXBsYXRlW10+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFVzZXJTdGF0ZSxcbiAgKHN0YXRlOiBVc2VyU3RhdGUpID0+IHN0YXRlLmNvbnNlbnRzXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29uc2VudHNWYWx1ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgQ29uc2VudFRlbXBsYXRlW11cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q29uc2VudHNTdGF0ZSxcbiAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyVmFsdWVTZWxlY3RvclxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENvbnNlbnRCeVRlbXBsYXRlSWQgPSAoXG4gIHRlbXBsYXRlSWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhVc2VyLCBDb25zZW50VGVtcGxhdGU+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldENvbnNlbnRzVmFsdWUsXG4gICAgdGVtcGxhdGVzID0+IHRlbXBsYXRlcy5maW5kKHRlbXBsYXRlID0+IHRlbXBsYXRlLmlkID09PSB0ZW1wbGF0ZUlkKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29uc2VudHNMb2FkaW5nOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENvbnNlbnRzU3RhdGUsXG4gIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckxvYWRpbmdTZWxlY3RvclxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENvbnNlbnRzU3VjY2VzczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDb25zZW50c1N0YXRlLFxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDb25zZW50c0Vycm9yOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENvbnNlbnRzU3RhdGUsXG4gIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckVycm9yU2VsZWN0b3Jcbik7XG4iXX0=