/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as DeprecatedCartActions from '../actions/cart.action';
import { CartActions } from '../actions/index';
/** @type {?} */
export const initialState = {
    content: {},
    entries: {},
    refresh: false,
    cartMergeComplete: false,
};
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function reducer(state = initialState, action) {
    switch (action.type) {
        case DeprecatedCartActions.MERGE_CART: {
            return Object.assign({}, state, { cartMergeComplete: false });
        }
        case DeprecatedCartActions.MERGE_CART_SUCCESS: {
            return Object.assign({}, state, { cartMergeComplete: true, refresh: true });
        }
        case DeprecatedCartActions.LOAD_CART_SUCCESS:
        case DeprecatedCartActions.CREATE_CART_SUCCESS: {
            /** @type {?} */
            const content = Object.assign({}, action.payload);
            /** @type {?} */
            let entries = {};
            if (content.entries) {
                entries = content.entries.reduce((/**
                 * @param {?} entryMap
                 * @param {?} entry
                 * @return {?}
                 */
                (entryMap, entry) => {
                    return Object.assign({}, entryMap, { [entry.product.code]: state.entries && state.entries[entry.product.code]
                            ? Object.assign({}, state.entries[entry.product.code], entry) : entry });
                }), Object.assign({}, entries));
                delete content['entries'];
            }
            return Object.assign({}, state, { content,
                entries, refresh: false });
        }
        case CartActions.CART_ADD_VOUCHER_SUCCESS:
        case CartActions.CART_REMOVE_VOUCHER_SUCCESS:
        case CartActions.CART_REMOVE_ENTRY_SUCCESS:
        case CartActions.CART_UPDATE_ENTRY_SUCCESS:
        case CartActions.CART_ADD_ENTRY_SUCCESS:
        case DeprecatedCartActions.ADD_EMAIL_TO_CART_SUCCESS: {
            return Object.assign({}, state, { refresh: true });
        }
        case DeprecatedCartActions.RESET_CART_DETAILS: {
            return {
                content: {
                    guid: state.content.guid,
                    code: state.content.code,
                    user: state.content.user,
                },
                entries: {},
                refresh: false,
                cartMergeComplete: false,
            };
        }
        case DeprecatedCartActions.CLEAR_CART: {
            return initialState;
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NhcnQvc3RvcmUvcmVkdWNlcnMvY2FydC5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEtBQUsscUJBQXFCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUcvQyxNQUFNLE9BQU8sWUFBWSxHQUFjO0lBQ3JDLE9BQU8sRUFBRSxFQUFFO0lBQ1gsT0FBTyxFQUFFLEVBQUU7SUFDWCxPQUFPLEVBQUUsS0FBSztJQUNkLGlCQUFpQixFQUFFLEtBQUs7Q0FDekI7Ozs7OztBQUVELE1BQU0sVUFBVSxPQUFPLENBQ3JCLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BR2lDO0lBRWpDLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLHlCQUNLLEtBQUssSUFDUixpQkFBaUIsRUFBRSxLQUFLLElBQ3hCO1NBQ0g7UUFFRCxLQUFLLHFCQUFxQixDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDN0MseUJBQ0ssS0FBSyxJQUNSLGlCQUFpQixFQUFFLElBQUksRUFDdkIsT0FBTyxFQUFFLElBQUksSUFDYjtTQUNIO1FBRUQsS0FBSyxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQztRQUM3QyxLQUFLLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLENBQUM7O2tCQUN4QyxPQUFPLHFCQUFRLE1BQU0sQ0FBQyxPQUFPLENBQUU7O2dCQUNqQyxPQUFPLEdBQUcsRUFBRTtZQUNoQixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQ25CLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU07Ozs7O2dCQUM5QixDQUFDLFFBQWlDLEVBQUUsS0FBaUIsRUFBRSxFQUFFO29CQUN2RCx5QkFDSyxRQUFRLElBT1gsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUNsQixLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7NEJBQ2hELENBQUMsbUJBQ00sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUNqQyxLQUFLLEVBRVosQ0FBQyxDQUFDLEtBQUssSUFDWDtnQkFDSixDQUFDLHFCQUVJLE9BQU8sRUFFYixDQUFDO2dCQUNGLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzNCO1lBQ0QseUJBQ0ssS0FBSyxJQUNSLE9BQU87Z0JBQ1AsT0FBTyxFQUNQLE9BQU8sRUFBRSxLQUFLLElBQ2Q7U0FDSDtRQUVELEtBQUssV0FBVyxDQUFDLHdCQUF3QixDQUFDO1FBQzFDLEtBQUssV0FBVyxDQUFDLDJCQUEyQixDQUFDO1FBQzdDLEtBQUssV0FBVyxDQUFDLHlCQUF5QixDQUFDO1FBQzNDLEtBQUssV0FBVyxDQUFDLHlCQUF5QixDQUFDO1FBQzNDLEtBQUssV0FBVyxDQUFDLHNCQUFzQixDQUFDO1FBQ3hDLEtBQUsscUJBQXFCLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUNwRCx5QkFDSyxLQUFLLElBQ1IsT0FBTyxFQUFFLElBQUksSUFDYjtTQUNIO1FBRUQsS0FBSyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQzdDLE9BQU87Z0JBQ0wsT0FBTyxFQUFFO29CQUNQLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUk7b0JBQ3hCLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUk7b0JBQ3hCLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUk7aUJBQ3pCO2dCQUNELE9BQU8sRUFBRSxFQUFFO2dCQUNYLE9BQU8sRUFBRSxLQUFLO2dCQUNkLGlCQUFpQixFQUFFLEtBQUs7YUFDekIsQ0FBQztTQUNIO1FBRUQsS0FBSyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNyQyxPQUFPLFlBQVksQ0FBQztTQUNyQjtLQUNGO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3JkZXJFbnRyeSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcbmltcG9ydCAqIGFzIERlcHJlY2F0ZWRDYXJ0QWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL2NhcnQuYWN0aW9uJztcbmltcG9ydCB7IENhcnRBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBDYXJ0U3RhdGUgfSBmcm9tICcuLi9jYXJ0LXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogQ2FydFN0YXRlID0ge1xuICBjb250ZW50OiB7fSxcbiAgZW50cmllczoge30sXG4gIHJlZnJlc2g6IGZhbHNlLFxuICBjYXJ0TWVyZ2VDb21wbGV0ZTogZmFsc2UsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlcihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjpcbiAgICB8IENhcnRBY3Rpb25zLkNhcnRBY3Rpb25cbiAgICB8IENhcnRBY3Rpb25zLkNhcnRFbnRyeUFjdGlvblxuICAgIHwgQ2FydEFjdGlvbnMuQ2FydFZvdWNoZXJBY3Rpb25cbik6IENhcnRTdGF0ZSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5NRVJHRV9DQVJUOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgY2FydE1lcmdlQ29tcGxldGU6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5NRVJHRV9DQVJUX1NVQ0NFU1M6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjYXJ0TWVyZ2VDb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgcmVmcmVzaDogdHJ1ZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBEZXByZWNhdGVkQ2FydEFjdGlvbnMuTE9BRF9DQVJUX1NVQ0NFU1M6XG4gICAgY2FzZSBEZXByZWNhdGVkQ2FydEFjdGlvbnMuQ1JFQVRFX0NBUlRfU1VDQ0VTUzoge1xuICAgICAgY29uc3QgY29udGVudCA9IHsgLi4uYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgIGxldCBlbnRyaWVzID0ge307XG4gICAgICBpZiAoY29udGVudC5lbnRyaWVzKSB7XG4gICAgICAgIGVudHJpZXMgPSBjb250ZW50LmVudHJpZXMucmVkdWNlKFxuICAgICAgICAgIChlbnRyeU1hcDogeyBbY29kZTogc3RyaW5nXTogYW55IH0sIGVudHJ5OiBPcmRlckVudHJ5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5lbnRyeU1hcCxcbiAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgSWYgd2UgcmVmcmVzaCB0aGUgcGFnZSBmcm9tIGNhcnQgZGV0YWlscyBwYWdlLCAyIGxvYWQgY2FydFxuICAgICAgICAgICAgICBBY3Rpb25zIGdldHMgZGlzcGF0Y2hlZC4gT25lIGlzIG5vbi1kZXRhaWwsIGFuZCB0aGUgc2Vjb25kIGlzIGRldGFpbGVkLlxuICAgICAgICAgICAgICBJbiB0aGUgY2FzZSB3aGVyZSB0aGUgZGV0YWlsZWQgb25jZSBnZXQgcmVzb2x2ZWQgZmlyc3QsIHdlIG1lcmdlIHRoZSBleGlzdGluZ1xuICAgICAgICAgICAgICBkYXRhIHdpdGggdGhlIG5ldyBkYXRhIGZyb20gdGhlIHJlc3BvbnNlICh0byBub3QgZGVsZXRlIGV4aXN0aW5nIGRldGFpbGVkIGRhdGEpLlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBbZW50cnkucHJvZHVjdC5jb2RlXTpcbiAgICAgICAgICAgICAgICBzdGF0ZS5lbnRyaWVzICYmIHN0YXRlLmVudHJpZXNbZW50cnkucHJvZHVjdC5jb2RlXVxuICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUuZW50cmllc1tlbnRyeS5wcm9kdWN0LmNvZGVdLFxuICAgICAgICAgICAgICAgICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IGVudHJ5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC4uLmVudHJpZXMsXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBkZWxldGUgY29udGVudFsnZW50cmllcyddO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGVudHJpZXMsXG4gICAgICAgIHJlZnJlc2g6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIENhcnRBY3Rpb25zLkNBUlRfQUREX1ZPVUNIRVJfU1VDQ0VTUzpcbiAgICBjYXNlIENhcnRBY3Rpb25zLkNBUlRfUkVNT1ZFX1ZPVUNIRVJfU1VDQ0VTUzpcbiAgICBjYXNlIENhcnRBY3Rpb25zLkNBUlRfUkVNT1ZFX0VOVFJZX1NVQ0NFU1M6XG4gICAgY2FzZSBDYXJ0QWN0aW9ucy5DQVJUX1VQREFURV9FTlRSWV9TVUNDRVNTOlxuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ0FSVF9BRERfRU5UUllfU1VDQ0VTUzpcbiAgICBjYXNlIERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5BRERfRU1BSUxfVE9fQ0FSVF9TVUNDRVNTOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcmVmcmVzaDogdHJ1ZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBEZXByZWNhdGVkQ2FydEFjdGlvbnMuUkVTRVRfQ0FSVF9ERVRBSUxTOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgZ3VpZDogc3RhdGUuY29udGVudC5ndWlkLFxuICAgICAgICAgIGNvZGU6IHN0YXRlLmNvbnRlbnQuY29kZSxcbiAgICAgICAgICB1c2VyOiBzdGF0ZS5jb250ZW50LnVzZXIsXG4gICAgICAgIH0sXG4gICAgICAgIGVudHJpZXM6IHt9LFxuICAgICAgICByZWZyZXNoOiBmYWxzZSxcbiAgICAgICAgY2FydE1lcmdlQ29tcGxldGU6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5DTEVBUl9DQVJUOiB7XG4gICAgICByZXR1cm4gaW5pdGlhbFN0YXRlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cbiJdfQ==