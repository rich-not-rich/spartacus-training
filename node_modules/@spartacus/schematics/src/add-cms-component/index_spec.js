"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const schema_1 = require("@angular/cli/lib/config/schema");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const path = __importStar(require("path"));
const constants_1 = require("../shared/constants");
const file_utils_1 = require("../shared/utils/file-utils");
const collectionPath = path.join(__dirname, '../collection.json');
const DEFAULT_BASE_NAME = 'my-awesome-cms';
const DEFAULT_PATH = '/src/app/my-awesome-cms';
const GENERATED_MODULE_PATH = `${DEFAULT_PATH}/${DEFAULT_BASE_NAME}.module.ts`;
const GENERATED_SCSS_PATH = `${DEFAULT_PATH}/${DEFAULT_BASE_NAME}.component.scss`;
const GENERATED_HTML_PATH = `${DEFAULT_PATH}/${DEFAULT_BASE_NAME}.component.html`;
const GENERATED_SPEC_PATH = `${DEFAULT_PATH}/${DEFAULT_BASE_NAME}.component.spec.ts`;
const GENERATED_TS_PATH = `${DEFAULT_PATH}/${DEFAULT_BASE_NAME}.component.ts`;
const APP_MODULE_PATH = '/src/app/app.module.ts';
function assertPathDoesNotExists(appTree, filePath) {
    const buffer = appTree.read(filePath);
    expect(buffer).toBeFalsy();
}
function assertPathExists(appTree, filePath) {
    const buffer = appTree.read(filePath);
    expect(buffer).toBeTruthy();
}
function assertContentExists(appTree, textToContain, filePath) {
    const buffer = appTree.read(filePath);
    expect(buffer).toBeTruthy();
    if (buffer) {
        const content = buffer.toString(constants_1.UTF_8);
        for (const expected of textToContain) {
            expect(content).toContain(expected);
        }
    }
}
function assertContentDoesNotExist(appTree, textToContain, filePath) {
    const buffer = appTree.read(filePath);
    expect(buffer).toBeTruthy();
    if (buffer) {
        const content = buffer.toString(constants_1.UTF_8);
        for (const expected of textToContain) {
            expect(content).not.toContain(expected);
        }
    }
}
describe('add-cms-component', () => {
    const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    let appTree;
    const workspaceOptions = {
        name: 'workspace',
        version: '0.5.0',
    };
    const appOptions = {
        name: 'schematics-test',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: schema_1.Style.Scss,
        skipTests: false,
        projectRoot: '',
    };
    const defaultOptions = {
        project: 'schematics-test',
        target: 'build',
        configuration: 'production',
        baseSite: 'electronics',
        baseUrl: 'https://localhost:9002',
    };
    const commonCmsOptions = {
        name: 'myAwesomeCms',
        cmsComponentDataModel: 'MyModel',
        project: defaultOptions.project,
    };
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner
            .runExternalSchematicAsync(constants_1.ANGULAR_SCHEMATICS, 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield schematicRunner
            .runExternalSchematicAsync(constants_1.ANGULAR_SCHEMATICS, 'application', appOptions, appTree)
            .toPromise();
        appTree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
    }));
    describe('when generating a cms module and a component', () => {
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            appTree = yield schematicRunner
                .runSchematicAsync('add-cms-component', commonCmsOptions, appTree)
                .toPromise();
        }));
        it('should generate the specified component and cms module', () => __awaiter(void 0, void 0, void 0, function* () {
            assertPathExists(appTree, GENERATED_MODULE_PATH);
            assertPathExists(appTree, GENERATED_SCSS_PATH);
            assertPathExists(appTree, GENERATED_HTML_PATH);
            assertPathExists(appTree, GENERATED_SPEC_PATH);
            assertPathExists(appTree, GENERATED_TS_PATH);
            assertPathExists(appTree, APP_MODULE_PATH);
            // generated cms module assertions
            assertContentExists(appTree, [`import { MyAwesomeCmsComponent } from './my-awesome-cms.component';`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [`declarations: [MyAwesomeCmsComponent],`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [`entryComponents: [MyAwesomeCmsComponent]`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [`exports: [MyAwesomeCmsComponent]`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [
                `ConfigModule.withConfig(<CmsConfig>{`,
                `cmsComponents: {`,
                `MyAwesomeCmsComponent: {`,
                `component: MyAwesomeCmsComponent,`,
            ], GENERATED_MODULE_PATH);
            // generated html assertions
            assertContentExists(appTree, [
                `<ng-container *ngIf="componentData$ | async as data">`,
                `{{data | json}}`,
                `</ng-container>`,
            ], GENERATED_HTML_PATH);
            // generated component assertions
            assertContentExists(appTree, [
                `componentData$: Observable<MyModel> = this.componentData.data$;`,
                `constructor(private componentData: CmsComponentData<MyModel>) { }`,
            ], GENERATED_TS_PATH);
            // app.module.ts assertions
            assertContentDoesNotExist(appTree, [
                `import { MyAwesomeCmsComponent } from './my-awesome-cms/my-awesome-cms.component';`,
                `MyAwesomeCmsComponent`,
                `exports: [MyAwesomeCmsComponent],`,
                `entryComponents: [MyAwesomeCmsComponent]`,
            ], APP_MODULE_PATH);
        }));
    });
    describe('when a cms module already exists', () => {
        const existingModulePath = '/src/app/existing-cms/existing-cms.module.ts';
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            const moduleName = 'existing-cms';
            const moduleOptions = {
                name: moduleName,
                project: defaultOptions.project,
            };
            const dummyComponentOptions = {
                project: defaultOptions.project,
                name: 'dummy',
                module: moduleName,
                entryComponent: true,
                export: true,
            };
            const modifiedOptions = Object.assign(Object.assign({}, commonCmsOptions), { declareCmsModule: moduleName });
            appTree = yield schematicRunner
                .runExternalSchematicAsync(constants_1.ANGULAR_SCHEMATICS, 'module', moduleOptions, appTree)
                .toPromise();
            appTree = yield schematicRunner
                .runExternalSchematicAsync(constants_1.ANGULAR_SCHEMATICS, 'component', dummyComponentOptions, appTree)
                .toPromise();
            appTree = yield schematicRunner
                .runSchematicAsync('add-cms-component', modifiedOptions, appTree)
                .toPromise();
        }));
        it('should generate a component and add it to the specified module', () => __awaiter(void 0, void 0, void 0, function* () {
            assertPathExists(appTree, existingModulePath);
            assertPathDoesNotExists(appTree, GENERATED_MODULE_PATH);
            assertPathExists(appTree, GENERATED_SCSS_PATH);
            assertPathExists(appTree, GENERATED_HTML_PATH);
            assertPathExists(appTree, GENERATED_SPEC_PATH);
            assertPathExists(appTree, GENERATED_TS_PATH);
            assertPathExists(appTree, APP_MODULE_PATH);
            // generated cms module assertions
            assertContentExists(appTree, [
                `import { MyAwesomeCmsComponent } from '../my-awesome-cms/my-awesome-cms.component';`,
            ], existingModulePath);
            assertContentExists(appTree, [`declarations: [DummyComponent, MyAwesomeCmsComponent],`], existingModulePath);
            assertContentExists(appTree, [`entryComponents: [DummyComponent, MyAwesomeCmsComponent]`], existingModulePath);
            assertContentExists(appTree, [`exports: [DummyComponent, MyAwesomeCmsComponent]`], existingModulePath);
            assertContentExists(appTree, [
                `ConfigModule.withConfig(<CmsConfig>{`,
                `cmsComponents: {`,
                `MyAwesomeCmsComponent: {`,
                `component: MyAwesomeCmsComponent,`,
            ], existingModulePath);
            // generated html assertions
            assertContentExists(appTree, [
                `<ng-container *ngIf="componentData$ | async as data">`,
                `{{data | json}}`,
                `</ng-container>`,
            ], GENERATED_HTML_PATH);
            // generated component assertions
            assertContentExists(appTree, [
                `componentData$: Observable<MyModel> = this.componentData.data$;`,
                `constructor(private componentData: CmsComponentData<MyModel>) { }`,
            ], GENERATED_TS_PATH);
            // app.module.ts assertions
            assertContentDoesNotExist(appTree, [
                `import { MyAwesomeCmsComponent } from './my-awesome-cms/my-awesome-cms.component';`,
                `MyAwesomeCmsComponent`,
                `exports: [MyAwesomeCmsComponent],`,
                `entryComponents: [MyAwesomeCmsComponent]`,
            ], APP_MODULE_PATH);
        }));
        describe('when the ConfigModule.withConfig() already contains some CMS mappings', () => {
            beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
                const moduleSource = file_utils_1.getTsSourceFile(appTree, existingModulePath);
                const changes = ast_utils_1.addSymbolToNgModuleMetadata(moduleSource, existingModulePath, 'imports', `${constants_1.CONFIG_MODULE_CLASS}.withConfig(<${constants_1.CMS_CONFIG}>{
            cmsComponents: {
              TestComponent: {
                component: TestComponent,
              },
            },
          }),`);
                file_utils_1.commitChanges(appTree, existingModulePath, changes, file_utils_1.InsertDirection.RIGHT);
            }));
            it('should append the import', () => __awaiter(void 0, void 0, void 0, function* () {
                assertPathExists(appTree, existingModulePath);
                assertPathDoesNotExists(appTree, GENERATED_MODULE_PATH);
                assertPathExists(appTree, GENERATED_SCSS_PATH);
                assertPathExists(appTree, GENERATED_HTML_PATH);
                assertPathExists(appTree, GENERATED_SPEC_PATH);
                assertPathExists(appTree, GENERATED_TS_PATH);
                assertPathExists(appTree, APP_MODULE_PATH);
                // generated cms module assertions
                assertContentExists(appTree, [
                    `import { MyAwesomeCmsComponent } from '../my-awesome-cms/my-awesome-cms.component';`,
                ], existingModulePath);
                assertContentExists(appTree, [`declarations: [DummyComponent, MyAwesomeCmsComponent],`], existingModulePath);
                assertContentExists(appTree, [`entryComponents: [DummyComponent, MyAwesomeCmsComponent]`], existingModulePath);
                assertContentExists(appTree, [`exports: [DummyComponent, MyAwesomeCmsComponent]`], existingModulePath);
                assertContentExists(appTree, [
                    `ConfigModule.withConfig(<CmsConfig>{`,
                    `cmsComponents: {`,
                    `MyAwesomeCmsComponent: {`,
                    `component: MyAwesomeCmsComponent,`,
                    `TestComponent: {`,
                    `component: TestComponent,`,
                ], existingModulePath);
                // generated html assertions
                assertContentExists(appTree, [
                    `<ng-container *ngIf="componentData$ | async as data">`,
                    `{{data | json}}`,
                    `</ng-container>`,
                ], GENERATED_HTML_PATH);
                // generated component assertions
                assertContentExists(appTree, [
                    `componentData$: Observable<MyModel> = this.componentData.data$;`,
                    `constructor(private componentData: CmsComponentData<MyModel>) { }`,
                ], GENERATED_TS_PATH);
                // app.module.ts assertions
                assertContentDoesNotExist(appTree, [
                    `import { MyAwesomeCmsComponent } from './my-awesome-cms/my-awesome-cms.component';`,
                    `MyAwesomeCmsComponent`,
                    `exports: [MyAwesomeCmsComponent],`,
                    `entryComponents: [MyAwesomeCmsComponent]`,
                ], APP_MODULE_PATH);
            }));
        });
    });
    describe('when generating a new cms module and declaring it in app.module.ts', () => {
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            const modifiedOptions = Object.assign(Object.assign({}, commonCmsOptions), { module: 'app' });
            appTree = yield schematicRunner
                .runSchematicAsync('add-cms-component', modifiedOptions, appTree)
                .toPromise();
        }));
        it('should generate the cms module, the component and declare the cms module to app.module.ts', () => __awaiter(void 0, void 0, void 0, function* () {
            assertPathExists(appTree, GENERATED_MODULE_PATH);
            assertPathExists(appTree, GENERATED_SCSS_PATH);
            assertPathExists(appTree, GENERATED_HTML_PATH);
            assertPathExists(appTree, GENERATED_SPEC_PATH);
            assertPathExists(appTree, GENERATED_TS_PATH);
            assertPathExists(appTree, APP_MODULE_PATH);
            // generated cms module assertions
            assertContentExists(appTree, [`import { MyAwesomeCmsComponent } from './my-awesome-cms.component';`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [`declarations: [MyAwesomeCmsComponent],`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [`entryComponents: [MyAwesomeCmsComponent]`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [`exports: [MyAwesomeCmsComponent]`], GENERATED_MODULE_PATH);
            assertContentExists(appTree, [
                `ConfigModule.withConfig(<CmsConfig>{`,
                `cmsComponents: {`,
                `MyAwesomeCmsComponent: {`,
                `component: MyAwesomeCmsComponent,`,
            ], GENERATED_MODULE_PATH);
            // generated html template assertions
            assertContentExists(appTree, [
                `<ng-container *ngIf="componentData$ | async as data">`,
                `{{data | json}}`,
                `</ng-container>`,
            ], GENERATED_HTML_PATH);
            // generated component assertions
            assertContentExists(appTree, [
                `componentData$: Observable<MyModel> = this.componentData.data$;`,
                `constructor(private componentData: CmsComponentData<MyModel>) { }`,
            ], GENERATED_TS_PATH);
            // app.module.ts assertions
            assertContentDoesNotExist(appTree, [
                `exports: [MyAwesomeCmsComponent],`,
                `entryComponents: [MyAwesomeCmsComponent]`,
            ], APP_MODULE_PATH);
            assertContentExists(appTree, [
                `import { MyAwesomeCmsModule } from './my-awesome-cms/my-awesome-cms.module';`,
            ], APP_MODULE_PATH);
        }));
    });
    describe('when a cms module already exists and when module option is specified', () => {
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            const moduleName = 'existing-cms';
            const moduleOptions = {
                name: moduleName,
                project: defaultOptions.project,
            };
            const modifiedOptions = Object.assign(Object.assign({}, commonCmsOptions), { module: 'app', declareCmsModule: moduleName });
            appTree = yield schematicRunner
                .runExternalSchematicAsync(constants_1.ANGULAR_SCHEMATICS, 'module', moduleOptions, appTree)
                .toPromise();
            appTree = yield schematicRunner
                .runSchematicAsync('add-cms-component', modifiedOptions, appTree)
                .toPromise();
        }));
        it('should generate the component and declare it to the cms module, and declare the cms module to the app.module.ts', () => __awaiter(void 0, void 0, void 0, function* () {
            const existingModulePath = '/src/app/existing-cms/existing-cms.module.ts';
            assertPathDoesNotExists(appTree, GENERATED_MODULE_PATH);
            assertPathExists(appTree, existingModulePath);
            assertPathExists(appTree, GENERATED_SCSS_PATH);
            assertPathExists(appTree, GENERATED_HTML_PATH);
            assertPathExists(appTree, GENERATED_SPEC_PATH);
            assertPathExists(appTree, GENERATED_TS_PATH);
            assertPathExists(appTree, APP_MODULE_PATH);
            // generated cms module assertions
            assertContentExists(appTree, [
                `import { MyAwesomeCmsComponent } from '../my-awesome-cms/my-awesome-cms.component';`,
            ], existingModulePath);
            assertContentExists(appTree, [`declarations: [MyAwesomeCmsComponent],`], existingModulePath);
            assertContentExists(appTree, [`entryComponents: [MyAwesomeCmsComponent]`], existingModulePath);
            assertContentExists(appTree, [`exports: [MyAwesomeCmsComponent]`], existingModulePath);
            assertContentExists(appTree, [
                `ConfigModule.withConfig(<CmsConfig>{`,
                `cmsComponents: {`,
                `MyAwesomeCmsComponent: {`,
                `component: MyAwesomeCmsComponent,`,
            ], existingModulePath);
            // generated html template assertions
            assertContentExists(appTree, [
                `<ng-container *ngIf="componentData$ | async as data">`,
                `{{data | json}}`,
                `</ng-container>`,
            ], GENERATED_HTML_PATH);
            // generated component assertions
            assertContentExists(appTree, [
                `componentData$: Observable<MyModel> = this.componentData.data$;`,
                `constructor(private componentData: CmsComponentData<MyModel>) { }`,
            ], GENERATED_TS_PATH);
            // app.module.ts assertions
            assertContentDoesNotExist(appTree, [
                `import { MyAwesomeCmsComponent } from './my-awesome-cms/my-awesome-cms.component';`,
                `MyAwesomeCmsComponent`,
                `exports: [MyAwesomeCmsComponent],`,
                `entryComponents: [MyAwesomeCmsComponent]`,
            ], APP_MODULE_PATH);
            assertContentExists(appTree, [`ExistingCms`], APP_MODULE_PATH);
        }));
    });
});
//# sourceMappingURL=index_spec.js.map