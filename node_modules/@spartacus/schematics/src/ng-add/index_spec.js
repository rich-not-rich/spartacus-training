"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const path = __importStar(require("path"));
const file_utils_1 = require("../shared/utils/file-utils");
const collectionPath = path.join(__dirname, '../collection.json');
// tslint:disable:max-line-length
describe('Spartacus Schematics: ng-add', () => {
    const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    let appTree;
    const workspaceOptions = {
        name: 'workspace',
        version: '0.5.0',
    };
    const appOptions = {
        name: 'schematics-test',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: 'scss',
        skipTests: false,
        projectRoot: '',
    };
    const defaultOptions = {
        project: 'schematics-test',
        target: 'build',
        configuration: 'production',
    };
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree)
            .toPromise();
    }));
    it('should add spartacus deps', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
        const packageJson = tree.readContent('/package.json');
        const packageObj = JSON.parse(packageJson);
        const depPackageList = Object.keys(packageObj.dependencies);
        expect(depPackageList.includes('@spartacus/core')).toBe(true);
        expect(depPackageList.includes('@spartacus/storefront')).toBe(true);
        expect(depPackageList.includes('@spartacus/styles')).toBe(true);
    }));
    it('should add spartacus with PWA via passed parameter', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('ng-add', Object.assign(Object.assign({}, defaultOptions), { pwa: true }), appTree)
            .toPromise();
        const buffer = tree.read('src/manifest.webmanifest');
        expect(buffer).toBeTruthy();
        if (buffer) {
            const webmanifestJSON = JSON.parse(buffer.toString('utf-8'));
            expect(webmanifestJSON.name).toEqual(defaultOptions.project);
        }
    }));
    it('should add spartacus with SSR via passed parameter', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('ng-add', Object.assign(Object.assign({}, defaultOptions), { ssr: true }), appTree)
            .toPromise();
        const packageJsonBuffer = tree.read('/package.json');
        expect(packageJsonBuffer).toBeTruthy();
        const appServerModulePath = file_utils_1.getPathResultsForFile(tree, 'app.server.module.ts', '/src')[0];
        const appServerModuleBuffer = tree.read(appServerModulePath);
        expect(appServerModuleBuffer).toBeTruthy();
        const serverBuffer = tree.read('server.ts');
        expect(serverBuffer).toBeTruthy();
        if (packageJsonBuffer) {
            const packageJSON = JSON.parse(packageJsonBuffer.toString('utf-8'));
            expect(packageJSON.dependencies['@nguniversal/express-engine']).toBeTruthy();
            expect(packageJSON.dependencies['@angular/platform-server']).toBeTruthy();
        }
        if (appServerModuleBuffer) {
            const appServerModuleContent = appServerModuleBuffer.toString('utf-8');
            expect(appServerModuleContent.includes('ServerTransferStateModule')).toBeTruthy();
        }
    }));
});
//# sourceMappingURL=index_spec.js.map