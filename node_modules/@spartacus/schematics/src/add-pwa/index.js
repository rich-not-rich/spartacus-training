"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const rxjs_1 = require("rxjs");
const static_1 = require("@angular-devkit/schematics/src/tree/static");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const project_targets_1 = require("@schematics/angular/utility/project-targets");
const file_utils_1 = require("../shared/utils/file-utils");
function getLineFromTSFile(host, modulePath, position) {
    const tsFile = file_utils_1.getTsSourceFile(host, modulePath);
    const lac = tsFile.getLineAndCharacterOfPosition(position);
    const lineStart = tsFile.getPositionOfLineAndCharacter(lac.line, 0);
    const nextLineStart = tsFile.getPositionOfLineAndCharacter(lac.line + 1, 0);
    return [lineStart, nextLineStart - lineStart];
}
function removeServiceWorkerSetup(host, modulePath) {
    const buffer = host.read(modulePath);
    if (!buffer) {
        return;
    }
    let fileContent = buffer.toString();
    const serviceWorkerImport = `import { ServiceWorkerModule } from '@angular/service-worker';`;
    const serviceWorkerModuleImport = `ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })`;
    if (!fileContent.includes(serviceWorkerModuleImport) ||
        !fileContent.includes(serviceWorkerImport)) {
        return;
    }
    const recorder = host.beginUpdate(modulePath);
    recorder.remove(...getLineFromTSFile(host, modulePath, fileContent.indexOf(serviceWorkerImport)));
    recorder.remove(...getLineFromTSFile(host, modulePath, fileContent.indexOf(serviceWorkerModuleImport)));
    host.commitUpdate(recorder);
    // clean up environment import
    fileContent = (host.read(modulePath) || {}).toString();
    const environmentImport = `import { environment } from '../environments/environment';`;
    if (fileContent.includes(environmentImport)) {
        const importPos = fileContent.indexOf(environmentImport) + environmentImport.length;
        // check if it's not needed
        if (!fileContent.includes('environment', importPos + environmentImport.length)) {
            const envRecorder = host.beginUpdate(modulePath);
            envRecorder.remove(...getLineFromTSFile(host, modulePath, importPos));
            host.commitUpdate(envRecorder);
        }
    }
}
/**
 * We have to use our custom function because pwa schematics is currently private
 * so it's not possible to reuse it via standard externalSchematics
 */
function privateExternalSchematic(collectionName, schematicName, options, executionOptions) {
    return (input, context) => {
        const collection = context.engine.createCollection(collectionName);
        const schematic = collection.createSchematic(schematicName, true);
        return schematic.call(options, rxjs_1.of(static_1.branch(input)), context, executionOptions);
    };
}
function updateAppModule(options) {
    return (host) => {
        const projectTargets = project_targets_1.getProjectTargets(host, options.project);
        if (!projectTargets.build) {
            throw new schematics_1.SchematicsException(`Project target "build" not found.`);
        }
        const mainPath = projectTargets.build.options.main;
        const modulePath = ng_ast_utils_1.getAppModulePath(host, mainPath);
        removeServiceWorkerSetup(host, modulePath);
        return host;
    };
}
function addPWA(options) {
    return (tree, context) => {
        return schematics_1.chain([
            privateExternalSchematic('@angular/pwa', 'ng-add', {
                project: options.project,
            }),
            updateAppModule(options),
        ])(tree, context);
    };
}
exports.addPWA = addPWA;
//# sourceMappingURL=index.js.map