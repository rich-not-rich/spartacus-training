"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const schematics_2 = require("@angular/cdk/schematics");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const file_utils_1 = require("../shared/utils/file-utils");
const module_file_utils_1 = require("../shared/utils/module-file-utils");
const package_utils_1 = require("../shared/utils/package-utils");
const workspace_utils_1 = require("../shared/utils/workspace-utils");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
function addPackageJsonDependencies() {
    return (tree, context) => {
        const angularVersion = package_utils_1.getAngularVersion(tree);
        const dependencies = [
            {
                type: dependencies_1.NodeDependencyType.Default,
                version: angularVersion || '~8.2.5',
                name: '@angular/platform-server',
            },
            {
                type: dependencies_1.NodeDependencyType.Default,
                version: '^8.1.1',
                name: '@nguniversal/express-engine',
            },
            {
                type: dependencies_1.NodeDependencyType.Dev,
                version: '^5.3.2',
                name: 'ts-loader',
            },
            {
                type: dependencies_1.NodeDependencyType.Dev,
                version: '^3.3.2',
                name: 'webpack-cli',
            },
        ];
        dependencies.forEach(dependency => {
            dependencies_1.addPackageJsonDependency(tree, dependency);
            context.logger.log('info', `✅️ Added '${dependency.name}' into ${dependency.type}`);
        });
        return tree;
    };
}
function installPackageJsonDependencies() {
    return (tree, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        context.logger.log('info', `🔍 Installing packages...`);
        return tree;
    };
}
function addPackageJsonScripts(options) {
    return (tree, context) => {
        const buffer = tree.read('package.json');
        if (buffer) {
            const packageJsonFileObject = JSON.parse(buffer.toString('utf-8'));
            packageJsonFileObject.scripts['build:client-and-server-bundles'] = `ng build --prod && ng run ${options.project}:server`;
            packageJsonFileObject.scripts['build:ssr'] =
                'npm run build:client-and-server-bundles && npm run compile:server';
            packageJsonFileObject.scripts['serve:ssr'] = 'node dist/server';
            tree.overwrite('package.json', JSON.stringify(packageJsonFileObject, null, 2));
            context.logger.log('info', `✅️ Added build scripts to package.json file.`);
        }
        return tree;
    };
}
function addServerConfigInAngularJsonFile(options) {
    return (tree, context) => {
        const buffer = tree.read('angular.json');
        if (buffer) {
            const angularJsonFileObject = JSON.parse(buffer.toString('utf-8'));
            const projectArchitectObject = angularJsonFileObject.projects[options.project].architect;
            projectArchitectObject.build.options['outputPath'] = `dist/${options.project}`;
            projectArchitectObject['server'] = {
                builder: '@angular-devkit/build-angular:server',
                options: {
                    outputPath: `dist/${options.project}-server`,
                    main: 'src/main.server.ts',
                    tsConfig: 'tsconfig.server.json',
                    fileReplacements: [
                        {
                            replace: 'src/environments/environment.ts',
                            with: 'src/environments/environment.prod.ts',
                        },
                    ],
                },
            };
            tree.overwrite('angular.json', JSON.stringify(angularJsonFileObject, null, 2));
            context.logger.log('info', `✅️ Modified build scripts in angular.json file.`);
        }
        return tree;
    };
}
function modifyTSConfigServerFile() {
    return (tree, context) => {
        const buffer = tree.read('tsconfig.server.json');
        if (buffer) {
            const newTSConfigServerContent = {
                extends: './tsconfig.json',
                compilerOptions: {
                    outDir: '../out-tsc/app',
                    baseUrl: './',
                    module: 'commonjs',
                    types: [],
                },
                exclude: ['test.ts', 'e2e/src/app.e2e-spec.ts', '**/*.spec.ts'],
                angularCompilerOptions: {
                    entryModule: 'src/app/app.server.module#AppServerModule',
                },
            };
            tree.overwrite('tsconfig.server.json', JSON.stringify(newTSConfigServerContent, null, 2));
            context.logger.log('info', `✅️ Modified tsconfig.server.json file.`);
        }
        return tree;
    };
}
function modifyAppServerModuleFile() {
    return (tree, context) => {
        const appServerModulePath = file_utils_1.getPathResultsForFile(tree, 'app.server.module.ts', '/src')[0];
        if (!appServerModulePath) {
            throw new schematics_1.SchematicsException(`Project file "app.server.module.ts" not found.`);
        }
        module_file_utils_1.addImport(tree, appServerModulePath, 'ServerTransferStateModule', '@angular/platform-server');
        module_file_utils_1.addToModuleImportsAndCommitChanges(tree, appServerModulePath, `ServerTransferStateModule`);
        context.logger.log('info', `✅️ Modified app.server.module.ts file.`);
        return tree;
    };
}
function modifyIndexHtmlFile(project, options) {
    return (tree) => {
        const buffer = tree.read('src/index.html');
        if (buffer) {
            const indexContent = buffer.toString();
            if (!indexContent.includes('<meta name="occ-backend-base-url"')) {
                const projectIndexHtmlPath = file_utils_1.getIndexHtmlPath(project);
                const baseUrl = options.baseUrl || 'OCC_BACKEND_BASE_URL_VALUE';
                const metaTags = [
                    `<meta name="occ-backend-base-url" content="${baseUrl}" />`,
                ];
                metaTags.forEach(metaTag => {
                    schematics_2.appendHtmlElementToHead(tree, projectIndexHtmlPath, metaTag);
                });
            }
        }
        return tree;
    };
}
function provideServerAndWebpackServerConfigs(options) {
    return schematics_1.apply(schematics_1.url('./files'), [
        schematics_1.template(Object.assign(Object.assign(Object.assign({}, core_1.strings), options), { typescriptExt: 'ts', appDistPath: `dist/${options.project}`, serverDistPath: `dist/${options.project}-server` })),
        schematics_1.move('.'),
    ]);
}
function modifyMainServerTSFile() {
    return (tree) => {
        const mainServerPath = 'src/main.server.ts';
        const buffer = tree.read(mainServerPath);
        if (buffer) {
            let mainServerFile = buffer.toString();
            const engineExpressToRemove = `export { ngExpressEngine } from "@nguniversal/express-engine";`;
            if (mainServerFile.includes(engineExpressToRemove)) {
                const startPos = mainServerFile.indexOf(engineExpressToRemove);
                const endPos = startPos + engineExpressToRemove.length + 1;
                mainServerFile =
                    mainServerFile.substr(0, startPos) +
                        mainServerFile.substr(endPos, mainServerFile.length);
                mainServerFile += `import { ngExpressEngine as engine } from '@nguniversal/express-engine';\nimport { NgExpressEngineDecorator } from '@spartacus/core';\nexport const ngExpressEngine = NgExpressEngineDecorator.get(engine);`;
                tree.overwrite(mainServerPath, mainServerFile);
            }
        }
    };
}
function modifyAppModuleFile() {
    return (tree, context) => {
        const appModulePath = file_utils_1.getPathResultsForFile(tree, 'app.module.ts', '/src')[0];
        if (!appModulePath) {
            throw new schematics_1.SchematicsException(`Project file "app.module.ts" not found.`);
        }
        const moduleSource = file_utils_1.getTsSourceFile(tree, appModulePath);
        if (!ast_utils_1.isImported(moduleSource, 'BrowserTransferStateModule', '@angular/platform-browser')) {
            module_file_utils_1.addImport(tree, appModulePath, 'BrowserTransferStateModule', '@angular/platform-browser');
            module_file_utils_1.addToModuleImportsAndCommitChanges(tree, appModulePath, `BrowserTransferStateModule`);
            context.logger.log('info', `✅️ Modified app.module.ts file.`);
        }
        return tree;
    };
}
function addSSR(options) {
    return (tree, context) => {
        const possibleProjectFiles = ['/angular.json', '/.angular.json'];
        const project = workspace_utils_1.getProjectFromWorkspace(tree, options, possibleProjectFiles);
        const templates = provideServerAndWebpackServerConfigs(options);
        return schematics_1.chain([
            addPackageJsonDependencies(),
            schematics_1.externalSchematic('@nguniversal/express-engine', 'ng-add', {
                clientProject: options.project,
            }),
            addPackageJsonScripts(options),
            addServerConfigInAngularJsonFile(options),
            modifyTSConfigServerFile(),
            modifyAppServerModuleFile(),
            modifyIndexHtmlFile(project, options),
            schematics_1.branchAndMerge(schematics_1.chain([schematics_1.mergeWith(templates, schematics_1.MergeStrategy.Overwrite)]), schematics_1.MergeStrategy.Overwrite),
            modifyMainServerTSFile(),
            modifyAppModuleFile(),
            installPackageJsonDependencies(),
        ])(tree, context);
    };
}
exports.addSSR = addSSR;
//# sourceMappingURL=index.js.map