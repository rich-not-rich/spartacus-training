'use strict';
var __awaiter =
  (this && this.__awaiter) ||
  function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function(resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const core_1 = require('@angular-devkit/core');
const testing_1 = require('@angular-devkit/core/node/testing');
const schematics_1 = require('@angular-devkit/schematics');
const testing_2 = require('@angular-devkit/schematics/testing');
const shx = __importStar(require('shelljs'));
const constants_1 = require('../../shared/constants');
const test_utils_1 = require('../../shared/utils/test-utils');
const MIGRATION_SCRIPT_NAME = 'migration-v2-removed-public-api-04';
const REMOVED_NODE_USED_VALID_TEST = `
import { Dummy } from '@angular/core';
import { CartEffects } from '@spartacus/core';
import { notImportant } from '@spartacus/core';
`;
const REMOVED_NODE_USED_EXPECTED = `
import { Dummy } from '@angular/core';
// ${constants_1.TODO_SPARTACUS} 'CartEffects' is no longer part of the public API. Please look into migration guide for more information
import { CartEffects } from '@spartacus/core';
import { notImportant } from '@spartacus/core';
`;
const MULTI_LINE_IMPORT_VALID_TEST = `
import { Dummy } from '@angular/core';
import {
  CartEffects,
  WishlistEffects
 } from '@spartacus/core';
`;
const MULTI_LINE_IMPORT_EXPECTED = `
import { Dummy } from '@angular/core';
// ${constants_1.TODO_SPARTACUS} 'CartEffects' is no longer part of the public API. Please look into migration guide for more information
// ${constants_1.TODO_SPARTACUS} 'WishlistEffects' is no longer part of the public API. Please look into migration guide for more information
import {
  CartEffects,
  WishlistEffects
 } from '@spartacus/core';
`;
const NAMESPACED_IMPORT_VALID_TEST = `
import * as Core from '@spartacus/core';

new Core.CartEffects()
`;
const NAMESPACED_IMPORT_EXPECTED = `
import * as Core from '@spartacus/core';

// ${constants_1.TODO_SPARTACUS} 'CartEffects' is no longer part of the public API. Please look into migration guide for more information
new Core.CartEffects()
`;
const NOT_IMPORTED = `
import { ActiveCartService } from '@spartacus/core';
`;
const NOT_USED_PROPERTY = `
import * as Core from '@spartacus/core';

new Core.ActiveCartService()
`;
describe('removed public api migrations', () => {
  let host = new testing_1.TempScopedNodeJsSyncHost();
  let appTree = schematics_1.Tree.empty();
  let schematicRunner;
  let tmpDirPath;
  let previousWorkingDir;
  beforeEach(() => {
    schematicRunner = new testing_2.SchematicTestRunner(
      'test',
      require.resolve('../migrations.json')
    );
    host = new testing_1.TempScopedNodeJsSyncHost();
    appTree = new testing_2.UnitTestTree(new schematics_1.HostTree(host));
    test_utils_1.writeFile(
      host,
      '/tsconfig.json',
      JSON.stringify({
        compilerOptions: {
          lib: ['es2015'],
        },
      })
    );
    test_utils_1.writeFile(
      host,
      '/angular.json',
      JSON.stringify({
        projects: {
          'spartacus-test': {
            sourceRoot: 'src',
            test: {
              architect: {
                build: { options: { tsConfig: './tsconfig.json' } },
              },
            },
          },
        },
      })
    );
    previousWorkingDir = shx.pwd();
    tmpDirPath = core_1.getSystemPath(host.root);
    // Switch into the temporary directory path. This allows us to run
    // the schematic against our custom unit test tree.
    shx.cd(tmpDirPath);
  });
  afterEach(() => {
    shx.cd(previousWorkingDir);
    shx.rm('-r', tmpDirPath);
  });
  describe('when the import is present in the file', () => {
    it('should leave comment above it', () =>
      __awaiter(void 0, void 0, void 0, function*() {
        test_utils_1.writeFile(
          host,
          '/src/index.ts',
          REMOVED_NODE_USED_VALID_TEST
        );
        yield test_utils_1.runMigration(
          appTree,
          schematicRunner,
          MIGRATION_SCRIPT_NAME
        );
        const content = appTree.readContent('/src/index.ts');
        expect(content).toEqual(REMOVED_NODE_USED_EXPECTED);
      }));
  });
  describe('when the imports are present in the file', () => {
    it('should leave comment above each one', () =>
      __awaiter(void 0, void 0, void 0, function*() {
        test_utils_1.writeFile(
          host,
          '/src/index.ts',
          MULTI_LINE_IMPORT_VALID_TEST
        );
        yield test_utils_1.runMigration(
          appTree,
          schematicRunner,
          MIGRATION_SCRIPT_NAME
        );
        const content = appTree.readContent('/src/index.ts');
        expect(content).toEqual(MULTI_LINE_IMPORT_EXPECTED);
      }));
  });
  describe('when namespaced import is present in the file', () => {
    it('should add comment above access to this property', () =>
      __awaiter(void 0, void 0, void 0, function*() {
        test_utils_1.writeFile(
          host,
          '/src/index.ts',
          NAMESPACED_IMPORT_VALID_TEST
        );
        yield test_utils_1.runMigration(
          appTree,
          schematicRunner,
          MIGRATION_SCRIPT_NAME
        );
        const content = appTree.readContent('/src/index.ts');
        expect(content).toEqual(NAMESPACED_IMPORT_EXPECTED);
      }));
  });
  describe('when the import is not present in the file', () => {
    it('should not change anything', () =>
      __awaiter(void 0, void 0, void 0, function*() {
        test_utils_1.writeFile(host, '/src/index.ts', NOT_IMPORTED);
        yield test_utils_1.runMigration(
          appTree,
          schematicRunner,
          MIGRATION_SCRIPT_NAME
        );
        const content = appTree.readContent('/src/index.ts');
        expect(content).toEqual(NOT_IMPORTED);
      }));
  });
  describe('when the namespaced import is present in the file', () => {
    it('should not change anything when property is not access', () =>
      __awaiter(void 0, void 0, void 0, function*() {
        test_utils_1.writeFile(host, '/src/index.ts', NOT_USED_PROPERTY);
        yield test_utils_1.runMigration(
          appTree,
          schematicRunner,
          MIGRATION_SCRIPT_NAME
        );
        const content = appTree.readContent('/src/index.ts');
        expect(content).toEqual(NOT_USED_PROPERTY);
      }));
  });
});
//# sourceMappingURL=removed-public-api_spec.js.map
