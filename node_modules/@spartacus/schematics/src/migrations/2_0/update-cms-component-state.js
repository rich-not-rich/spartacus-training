'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const ast_utils_1 = require('@schematics/angular/utility/ast-utils');
const constants_1 = require('../../shared/constants');
const file_utils_1 = require('../../shared/utils/file-utils');
const workspace_utils_1 = require('../../shared/utils/workspace-utils');
function migrate() {
  return (tree, context) => {
    let cmsComponentSelectorsChangesMade = false;
    let renamedCmsGetComponentFromPageActionChangesMade = false;
    let cmsActionsChangesMade = false;
    const project = workspace_utils_1.getSourceRoot(tree, {});
    const sourceFiles = file_utils_1.getAllTsSourceFiles(tree, project);
    for (const source of sourceFiles) {
      const sourcePath = source.fileName;
      // adding comments for selectors
      let selectorCommentChanges = [];
      if (
        ast_utils_1.isImported(
          source,
          constants_1.CMS_SELECTORS,
          constants_1.SPARTACUS_CORE
        )
      ) {
        const getComponentStateComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.GET_COMPONENT_STATE_OLD_API,
          `${buildMethodComment(
            constants_1.GET_COMPONENT_STATE_OLD_API,
            constants_1.GET_COMPONENTS_STATE_NEW_API
          )}\n`
        );
        const getComponentEntitiesComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.GET_COMPONENT_ENTITIES_OLD_API,
          `${constants_1.GET_COMPONENT_ENTITIES_COMMENT}\n`
        );
        const componentStateSelectorFactoryComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.COMPONENT_STATE_SELECTOR_FACTORY_OLD_API,
          `${buildMethodComment(
            constants_1.COMPONENT_STATE_SELECTOR_FACTORY_OLD_API,
            constants_1.COMPONENTS_STATE_SELECTOR_FACTORY_NEW_API
          )}\n`
        );
        const componentSelectorFactoryComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.COMPONENT_SELECTOR_FACTORY_OLD_API,
          `${buildMethodComment(
            constants_1.COMPONENT_SELECTOR_FACTORY_OLD_API,
            constants_1.COMPONENTS_SELECTOR_FACTORY_NEW_API
          )}\n`
        );
        selectorCommentChanges = [
          ...getComponentStateComments,
          ...getComponentEntitiesComments,
          ...componentStateSelectorFactoryComments,
          ...componentSelectorFactoryComments,
        ];
        if (selectorCommentChanges.length) {
          cmsComponentSelectorsChangesMade = true;
        }
      }
      let actionCommentChanges = [];
      if (
        ast_utils_1.isImported(
          source,
          constants_1.CMS_ACTIONS,
          constants_1.SPARTACUS_CORE
        )
      ) {
        const loadCmsActionComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.LOAD_CMS_COMPONENT_CLASS,
          `${buildActionComment(constants_1.LOAD_CMS_COMPONENT_CLASS)}\n`
        );
        const loadCmsActionFailComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.LOAD_CMS_COMPONENT_FAIL_CLASS,
          `${buildActionComment(constants_1.LOAD_CMS_COMPONENT_FAIL_CLASS)}\n`
        );
        const loadCmsActionSuccessComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.LOAD_CMS_COMPONENT_SUCCESS_CLASS,
          `${buildActionComment(
            constants_1.LOAD_CMS_COMPONENT_SUCCESS_CLASS
          )}\n`
        );
        const cmsGetComponentFromPageComments = file_utils_1.insertCommentAboveIdentifier(
          sourcePath,
          source,
          constants_1.CMS_GET_COMPONENT_FROM_PAGE,
          `${buildActionComment(constants_1.CMS_GET_COMPONENT_FROM_PAGE)}\n`
        );
        actionCommentChanges = [
          ...loadCmsActionComments,
          ...loadCmsActionFailComments,
          ...loadCmsActionSuccessComments,
          ...cmsGetComponentFromPageComments,
        ];
        if (actionCommentChanges.length) {
          cmsActionsChangesMade = true;
        }
      }
      // Renaming the constant
      let renameCmsGetComponentFromPageConstantChanges = [];
      if (
        ast_utils_1.isImported(
          source,
          constants_1.CMS_ACTIONS,
          constants_1.SPARTACUS_CORE
        )
      ) {
        const constantChanges = renameCmsGetComponentFromPageConstant(
          sourcePath,
          source
        );
        renameCmsGetComponentFromPageConstantChanges = constantChanges;
        if (renameCmsGetComponentFromPageConstantChanges.length) {
          renamedCmsGetComponentFromPageActionChangesMade = true;
        }
      }
      const allChanges = [
        ...selectorCommentChanges,
        ...renameCmsGetComponentFromPageConstantChanges,
        ...actionCommentChanges,
      ];
      file_utils_1.commitChanges(
        tree,
        sourcePath,
        allChanges,
        file_utils_1.InsertDirection.RIGHT
      );
    }
    if (cmsComponentSelectorsChangesMade) {
      context.logger.info('Added comments for CMS component selectors');
    }
    if (cmsActionsChangesMade) {
      context.logger.info('Added comments for CMS actions');
    }
    if (renamedCmsGetComponentFromPageActionChangesMade) {
      context.logger.info(
        `Renamed action constant from 'CMS_GET_COMPONENET_FROM_PAGE' to 'CMS_GET_COMPONENT_FROM_PAGE'`
      );
    }
    return tree;
  };
}
exports.migrate = migrate;
function renameCmsGetComponentFromPageConstant(sourcePath, source) {
  return file_utils_1.renameIdentifierNode(
    sourcePath,
    source,
    'CMS_GET_COMPONENET_FROM_PAGE',
    'CMS_GET_COMPONENT_FROM_PAGE'
  );
}
function buildMethodComment(oldApiMethod, newApiMethod) {
  return `// ${constants_1.TODO_SPARTACUS} '${oldApiMethod}' has been removed. Please try '${newApiMethod}' instead.`;
}
exports.buildMethodComment = buildMethodComment;
function buildActionComment(actionName) {
  return `// ${constants_1.TODO_SPARTACUS} please convert all the parameters to the 'payload' object's properties for '${actionName}' action`;
}
exports.buildActionComment = buildActionComment;
//# sourceMappingURL=update-cms-component-state.js.map
