"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const path = __importStar(require("path"));
const file_utils_1 = require("./file-utils");
const module_file_utils_1 = require("./module-file-utils");
const collectionPath = path.join(__dirname, '../../collection.json');
const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
describe('Module file utils', () => {
    let appTree;
    const workspaceOptions = {
        name: 'workspace',
        version: '0.5.0',
    };
    const appOptions = {
        name: 'schematics-test',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: 'scss',
        skipTests: false,
        projectRoot: '',
    };
    const defaultOptions = {
        project: 'schematics-test',
    };
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree)
            .toPromise();
        appTree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
    }));
    describe('stripTsFromImport', () => {
        it('should strip the .ts when present', () => {
            const test1 = '../../components.ts';
            expect(module_file_utils_1.stripTsFromImport(test1)).toEqual('../../components');
            const test2 = '../../ts.ts.ts';
            expect(module_file_utils_1.stripTsFromImport(test2)).toEqual('../../ts.ts');
        });
        it('should NOT strip the .ts when the import path does not end with it', () => {
            const test = '../ts.tsts';
            expect(module_file_utils_1.stripTsFromImport(test)).toEqual(test);
        });
    });
    describe('addImport', () => {
        it('should add passed import', () => __awaiter(void 0, void 0, void 0, function* () {
            const appModulePath = file_utils_1.getPathResultsForFile(appTree, 'app.module.ts', 'src')[0];
            expect(appModulePath).toBeTruthy();
            module_file_utils_1.addImport(appTree, appModulePath, 'MockUnitTestModule', '@test');
            const buffer = appTree.read(appModulePath);
            expect(buffer).toBeTruthy();
            if (buffer) {
                const fileContent = buffer.toString();
                expect(fileContent.includes("import { MockUnitTestModule } from '@test';")).toBeTruthy();
            }
        }));
    });
    describe('add metadata to ng module', () => {
        describe('addToModuleImports', () => {
            it('should add passed position to imports array', () => __awaiter(void 0, void 0, void 0, function* () {
                const appModulePath = file_utils_1.getPathResultsForFile(appTree, 'app.module.ts', 'src')[0];
                expect(appModulePath).toBeTruthy();
                const resultChange = module_file_utils_1.addToModuleImports(appTree, appModulePath, 'MockUnitTestModule');
                expect(resultChange).toBeTruthy();
                expect(resultChange.length).toEqual(1);
                expect(resultChange[0].toAdd).toContain('MockUnitTestModule');
            }));
        });
        describe('addToModuleDeclarations', () => {
            it('should add passed position to declarations array', () => __awaiter(void 0, void 0, void 0, function* () {
                const appModulePath = file_utils_1.getPathResultsForFile(appTree, 'app.module.ts', 'src')[0];
                expect(appModulePath).toBeTruthy();
                const resultChange = module_file_utils_1.addToModuleDeclarations(appTree, appModulePath, 'MockUnitTestModule');
                expect(resultChange).toBeTruthy();
                expect(resultChange.length).toEqual(1);
                expect(resultChange[0].toAdd).toContain('MockUnitTestModule');
            }));
        });
        describe('addToModuleEntryComponents', () => {
            it('should add passed position to entryComponents array', () => __awaiter(void 0, void 0, void 0, function* () {
                const appModulePath = file_utils_1.getPathResultsForFile(appTree, 'app.module.ts', 'src')[0];
                expect(appModulePath).toBeTruthy();
                const resultChange = module_file_utils_1.addToModuleEntryComponents(appTree, appModulePath, 'MockUnitTestModule');
                expect(resultChange).toBeTruthy();
                expect(resultChange.length).toEqual(1);
                expect(resultChange[0].toAdd).toContain('MockUnitTestModule');
            }));
        });
        describe('addToModuleExports', () => {
            it('should add passed position to exports array', () => __awaiter(void 0, void 0, void 0, function* () {
                const appModulePath = file_utils_1.getPathResultsForFile(appTree, 'app.module.ts', 'src')[0];
                expect(appModulePath).toBeTruthy();
                const resultChange = module_file_utils_1.addToModuleExports(appTree, appModulePath, 'MockUnitTestModule');
                expect(resultChange).toBeTruthy();
                expect(resultChange.length).toEqual(1);
                expect(resultChange[0].toAdd).toContain('MockUnitTestModule');
            }));
        });
    });
});
//# sourceMappingURL=module-file-utils_spec.js.map