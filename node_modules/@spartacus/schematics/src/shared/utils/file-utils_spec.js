"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const change_1 = require("@schematics/angular/utility/change");
const path = __importStar(require("path"));
const ts = __importStar(require("typescript"));
const constants_1 = require("../constants");
const file_utils_1 = require("./file-utils");
const workspace_utils_1 = require("./workspace-utils");
const collectionPath = path.join(__dirname, '../../collection.json');
const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
describe('File utils', () => {
    let appTree;
    const workspaceOptions = {
        name: 'workspace',
        version: '0.5.0',
    };
    const appOptions = {
        name: 'schematics-test',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: 'scss',
        skipTests: false,
        projectRoot: '',
    };
    const defaultOptions = {
        project: 'schematics-test',
    };
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree)
            .toPromise();
        appTree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
    }));
    describe('getTsSourceFile', () => {
        it('should return TS file', () => __awaiter(void 0, void 0, void 0, function* () {
            const tsFile = file_utils_1.getTsSourceFile(appTree, 'src/test.ts');
            const tsFileName = tsFile.fileName.split('/').pop();
            expect(tsFile).toBeTruthy();
            expect(tsFileName).toEqual('test.ts');
        }));
    });
    describe('getIndexHtmlPath', () => {
        it('should return index.html path', () => __awaiter(void 0, void 0, void 0, function* () {
            const project = workspace_utils_1.getProjectFromWorkspace(appTree, defaultOptions, [
                '/angular.json',
                '/.angular.json',
            ]);
            const projectIndexHtmlPath = file_utils_1.getIndexHtmlPath(project);
            expect(projectIndexHtmlPath).toEqual(`src/index.html`);
        }));
    });
    describe('getPathResultsForFile', () => {
        it('should return proper path for file', () => __awaiter(void 0, void 0, void 0, function* () {
            const pathsToFile = file_utils_1.getPathResultsForFile(appTree, 'test.ts', 'src');
            expect(pathsToFile.length).toBeGreaterThan(0);
            expect(pathsToFile[0]).toEqual('/src/test.ts');
        }));
    });
    describe('commitChanges', () => {
        it('should commit provided changes', () => __awaiter(void 0, void 0, void 0, function* () {
            const filePath = 'src/index.html';
            const change = 'xxx';
            const testChange = new change_1.InsertChange(filePath, 0, change);
            const result = file_utils_1.commitChanges(appTree, filePath, [testChange], file_utils_1.InsertDirection.LEFT);
            expect(result).toBeFalsy();
            const buffer = appTree.read(filePath);
            expect(buffer).toBeTruthy();
            if (buffer) {
                const content = buffer.toString(constants_1.UTF_8);
                expect(content).toContain(change);
            }
        }));
    });
    describe('defineProperty', () => {
        it('should create a Change if the constructor exists', () => __awaiter(void 0, void 0, void 0, function* () {
            const testPath = 'path-xxx';
            const toAdd = 'add-xxx';
            const ctorNode = { kind: ts.SyntaxKind.Constructor, pos: 0 };
            const result = file_utils_1.defineProperty([ctorNode], testPath, toAdd);
            expect(result).toBeTruthy();
            expect(result.path).toEqual(testPath);
            expect(result.order).toEqual(1);
            expect(result.toAdd).toEqual(toAdd);
        }));
    });
    describe('injectService', () => {
        it('should create a Change to inject the specified service', () => __awaiter(void 0, void 0, void 0, function* () {
            const testPath = 'path-xxx';
            const parameterListNode = { kind: ts.SyntaxKind.SyntaxList };
            const ctorNode = {
                kind: ts.SyntaxKind.Constructor,
                pos: 0,
                getChildren: () => [parameterListNode],
            };
            const result = file_utils_1.injectService([ctorNode], testPath, 'dummyService', 'DummyProperty');
            expect(result).toBeTruthy();
            expect(result.toAdd).toEqual(`private dummyProperty: DummyService`);
        }));
    });
});
//# sourceMappingURL=file-utils_spec.js.map