"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const testing_1 = require("@angular-devkit/schematics/testing");
const workspace_utils_1 = require("./workspace-utils");
const collectionPath = path.join(__dirname, '../../collection.json');
const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
describe('Workspace utils', () => {
    let appTree;
    const workspaceOptions = {
        name: 'workspace',
        version: '0.5.0',
    };
    const appOptions = {
        name: 'schematics-test',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: 'scss',
        skipTests: false,
        projectRoot: '',
    };
    const defaultOptions = {
        project: 'schematics-test',
    };
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree)
            .toPromise();
        appTree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
    }));
    describe('getWorkspace', () => {
        it('should return data about project', () => __awaiter(void 0, void 0, void 0, function* () {
            const workspaceInfo = workspace_utils_1.getWorkspace(appTree, [
                '/angular.json',
                '/.angular.json',
            ]);
            expect(workspaceInfo.path).toEqual('/angular.json');
            expect(workspaceInfo.workspace.defaultProject).toEqual(appOptions.name);
        }));
    });
    describe('getProjectFromWorkspace', () => {
        it('should return workspace project object', () => __awaiter(void 0, void 0, void 0, function* () {
            const workspaceProjectObject = workspace_utils_1.getProjectFromWorkspace(appTree, defaultOptions, ['/angular.json', '/.angular.json']);
            expect(workspaceProjectObject.projectType).toEqual('application');
            expect(workspaceProjectObject.sourceRoot).toEqual('src');
        }));
    });
});
//# sourceMappingURL=workspace-utils_spec.js.map