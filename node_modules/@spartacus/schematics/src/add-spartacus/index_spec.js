"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const path = __importStar(require("path"));
const collectionPath = path.join(__dirname, '../collection.json');
describe('add-spartacus', () => {
    const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    let appTree;
    const workspaceOptions = {
        name: 'workspace',
        newProjectRoot: 'projects',
        version: '0.5.0',
    };
    const appOptions = {
        name: 'schematics-test',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: 'scss',
        skipTests: false,
    };
    const defaultOptions = {
        project: 'schematics-test',
        target: 'build',
        configuration: 'production',
        baseSite: 'electronics',
        baseUrl: 'https://localhost:9002',
    };
    const newLineRegEx = /(?:\\[rn]|[\r\n]+)+/g;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree)
            .toPromise();
    }));
    it('should add spartacus deps', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
        const packageJson = tree.readContent('/package.json');
        const packageObj = JSON.parse(packageJson);
        const depPackageList = Object.keys(packageObj.dependencies);
        expect(depPackageList.includes('@spartacus/core')).toBe(true);
        expect(depPackageList.includes('@spartacus/storefront')).toBe(true);
        expect(depPackageList.includes('@spartacus/styles')).toBe(true);
    }));
    it('Import Spartacus modules in app.module', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
        const appModule = tree.readContent('/projects/schematics-test/src/app/app.module.ts');
        expect(appModule.includes(`import { B2cStorefrontModule } from '@spartacus/storefront';`)).toBe(true);
        expect(appModule.includes('B2cStorefrontModule.withConfig')).toBe(true);
    }));
    describe('Setup configuration', () => {
        it('should set baseUrl', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield schematicRunner
                .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { baseUrl: 'test-url' }), appTree)
                .toPromise();
            const appModule = tree.readContent('/projects/schematics-test/src/app/app.module.ts');
            expect(appModule.includes(`baseUrl: 'test-url'`)).toBe(true);
        }));
        it('should set baseSite', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield schematicRunner
                .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { baseSite: 'test-site' }), appTree)
                .toPromise();
            const appModule = tree.readContent('/projects/schematics-test/src/app/app.module.ts');
            expect(appModule.includes(`baseSite: ['test-site']`)).toBe(true);
        }));
        it('should set feature level', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield schematicRunner
                .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { featureLevel: '1.5' }), appTree)
                .toPromise();
            const appModule = tree.readContent('/projects/schematics-test/src/app/app.module.ts');
            expect(appModule.includes(`level: '1.5'`)).toBe(true);
        }));
        it('should enable auto-base site by omitting context property in config', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield schematicRunner
                .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { baseSite: '' }), appTree)
                .toPromise();
            const appModule = tree.readContent('/projects/schematics-test/src/app/app.module.ts');
            expect(appModule.includes(`context: {`)).toBeFalsy();
        }));
    });
    it('Import Spartacus styles to main.scss', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
        const stylesFile = tree.readContent('/projects/schematics-test/src/styles.scss');
        expect(stylesFile.includes(`@import '~@spartacus/styles/index';`)).toBe(true);
    }));
    it('Overwrite app.component with cx-storefront', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { overwriteAppComponent: true }), appTree)
            .toPromise();
        const appComponentTemplate = tree
            .readContent('/projects/schematics-test/src/app/app.component.html')
            .replace(newLineRegEx, '');
        expect(appComponentTemplate).toEqual(`<cx-storefront></cx-storefront>`);
    }));
    it('Add cx-storefront component to your app.component', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner
            .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { overwriteAppComponent: false }), appTree)
            .toPromise();
        const appComponentTemplate = tree.readContent('/projects/schematics-test/src/app/app.component.html');
        const cxTemplate = `<cx-storefront></cx-storefront>`;
        expect(appComponentTemplate.includes(cxTemplate)).toBe(true);
        expect(appComponentTemplate.length).toBeGreaterThan(cxTemplate.length);
    }));
    describe('Update index.html', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should not add meta tags by default', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield schematicRunner
                .runSchematicAsync('add-spartacus', defaultOptions, appTree)
                .toPromise();
            const indexHtmlFile = tree.readContent('/projects/schematics-test/src/index.html');
            expect(indexHtmlFile.includes(`<meta name="occ-backend-base-url"`)).toBe(false);
            expect(indexHtmlFile.includes(`<meta name="media-backend-base-url"`)).toBe(false);
        }));
        it('should add meta tags', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield schematicRunner
                .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { useMetaTags: true }), appTree)
                .toPromise();
            const indexHtmlFile = tree.readContent('/projects/schematics-test/src/index.html');
            expect(indexHtmlFile.includes(`<meta name="occ-backend-base-url" content="${defaultOptions.baseUrl}" />`)).toBe(true);
            expect(indexHtmlFile.includes(`<meta name="media-backend-base-url" content="MEDIA_BACKEND_BASE_URL_VALUE" />`)).toBe(true);
        }));
        it('should set baseUrl in meta tag', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield schematicRunner
                .runSchematicAsync('add-spartacus', Object.assign(Object.assign({}, defaultOptions), { useMetaTags: true, baseUrl: 'test-url' }), appTree)
                .toPromise();
            const indexHtmlFile = tree.readContent('/projects/schematics-test/src/index.html');
            const appModule = tree.readContent('/projects/schematics-test/src/app/app.module.ts');
            expect(indexHtmlFile.includes(`<meta name="occ-backend-base-url" content="test-url" />`)).toBe(true);
            expect(appModule.includes(`baseUrl:`)).toBe(false);
        }));
    }));
});
//# sourceMappingURL=index_spec.js.map