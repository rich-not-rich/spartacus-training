{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","HEART","EMPTY_HEART","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MATCH_HTML_TAGS","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","replace","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","OrderDetailsService","userOrderService","routingService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","RoutingService","PromotionService","cartService","orderDetailsService","checkoutService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entries","entryNumber","CartService","CheckoutService","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","deferLoading","DeferLoadingStrategy","INSTANT","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","canActivate","isCanActivate","isObservable","obj","then","Promise","resolve","wrapIntoObservable","first","Error","skipWhile","endWith","shouldForceRefreshPage","isFeatureEnabled","CmsI18nService","translation","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationService","TranslationChunkService","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","pageTemplate","slots","resolveSlots","result","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","join","cacheKey","warn","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","cls","currentClass","removeClass","addClass","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","store","stacked","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","element","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","vcr","deferLoaderService","initializeOutlet","cxOutletDefer","render","changes","cxOutlet","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createComponent","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentElement","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","cartData","checkout","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","CartDataService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","ChangeDetectorRef","SkipLinkService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","blur","SkipLinkScrollPosition","inline","scrollIntoView","findIndex","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","observeOn","asyncScheduler","tabNext","isElement","nextSibling","tabPrev","previousSibling","defaultSkipLinkConfig","SkipLinkDirective","elRef","cxSkipLink","SkipLinkModule","APP_INITIALIZER","useFactory","skipLinkFactory","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","sanitizer","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","DomSanitizer","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","DEFAULT_PRODUCT_SCOPE","isLevel","ProductScope","DETAILS","getProduct","scopes","productCode","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","FormatTimerPipe","transform","totalSeconds","minutes","seconds","slice","Pipe","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmService","AsmModule","AsmCoreModule","AddedToCartDialogComponent","promotionService","quantity","modalIsOpen","entry$","setControl","createEntryFormGroup","markAsPristine","orderPromotions$","dismissModal","removeEntry","updateEntry","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponCode","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","filteredCoupons","applyVoucher","addVoucher","applyCustomerCoupon","filterValue","toLowerCase","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","potentialProductPromotions","_items","every","consignmentEntry","orderEntry","isSaveForLaterEnabled","getPotentialProductPromotionsForItem","_e","_f","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","updateItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","getAllPromotionsForCart","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","ActiveCartService","SaveForLaterModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","steps","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","stepRoute","getRouteConfig","paths","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","CANCEL","RETURN","ValidateQuantity","q","OrderAmendService","getAmendedEntries","getForm","getFormControl","getOrder","buildForm","FormGroup","addControl","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","round","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","AmendOrderType","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","getControl","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","ɵ0$1","CancelOrderConfirmationModule","forChild","CancelOrderComponent","ɵ0$2","CancelOrderModule","OrderCancellationModule","OrderReturnService","returnRequestService","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ɵ0$3","ReturnOrderConfirmationModule","ReturnOrderComponent","ɵ0$4","ReturnOrderModule","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderDetailActionsComponent","OrderConsignedEntriesComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","ɵ0$6","OrderHistoryModule","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","returnCode","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","queryParams","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","count","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","ɵ0$8","MyCouponsModule","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","node","populateLink","itemType","linkName","getLink","categoryCode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","c","avoidReopen","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","behavior","click","h3Elements","h3Element","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","ɵ0$9","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$a","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$b","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","couponClaim","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"iyCAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAuCzB,SAASI,EAAYC,EAASC,GACjC,IAAsGC,EAAGC,EAAGZ,EAAGa,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPhB,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOiB,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEM,KAAMC,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BV,EAAEU,OAAOC,UAAY,WAAa,OAAO9B,OAAUmB,EACvJ,SAASO,EAAKjB,GAAK,OAAO,SAAUsB,GAAK,OACzC,SAAcC,GACV,GAAIf,EAAG,MAAM,IAAIgB,UAAU,mCAC3B,KAAOb,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAMZ,EAAY,EAAR0B,EAAG,GAASd,EAAU,OAAIc,EAAG,GAAKd,EAAS,SAAOZ,EAAIY,EAAU,SAAMZ,EAAEM,KAAKM,GAAI,GAAKA,EAAEO,SAAWnB,EAAIA,EAAEM,KAAKM,EAAGc,EAAG,KAAKE,KAAM,OAAO5B,EAE3J,OADIY,EAAI,EAAGZ,IAAG0B,EAAK,CAAS,EAARA,EAAG,GAAQ1B,EAAE6B,QACzBH,EAAG,IACP,KAAK,EAAG,KAAK,EAAG1B,EAAI0B,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEc,MAAOH,EAAG,GAAIE,MAAM,GAChD,KAAK,EAAGd,EAAEC,QAASH,EAAIc,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIY,MAAOhB,EAAEG,KAAKa,MAAO,SACxC,QACI,KAAkB9B,GAAZA,EAAIc,EAAEG,MAAYZ,OAAS,GAAKL,EAAEA,EAAEK,OAAS,MAAkB,IAAVqB,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAc1B,GAAM0B,EAAG,GAAK1B,EAAE,IAAM0B,EAAG,GAAK1B,EAAE,IAAM,CAAEc,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQf,EAAE,GAAI,CAAEc,EAAEC,MAAQf,EAAE,GAAIA,EAAI0B,EAAI,MAC7D,GAAI1B,GAAKc,EAAEC,MAAQf,EAAE,GAAI,CAAEc,EAAEC,MAAQf,EAAE,GAAIc,EAAEI,IAAIa,KAAKL,GAAK,MACvD1B,EAAE,IAAIc,EAAEI,IAAIY,MAChBhB,EAAEG,KAAKa,MAAO,SAEtBJ,EAAKhB,EAAKJ,KAAKG,EAASK,GAC1B,MAAOkB,GAAKN,EAAK,CAAC,EAAGM,GAAIpB,EAAI,EAAI,QAAWD,EAAIX,EAAI,EACtD,GAAY,EAAR0B,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEG,MAAOH,EAAG,GAAKA,EAAG,QAAK,EAAQE,MAAM,GArB9BK,CAAK,CAAC9B,EAAGsB,MA6BtD,SAASS,EAASC,GACrB,IAAIC,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UAAWtB,EAAI,EAChE,OAAIkC,EAAUA,EAAE9B,KAAK6B,GACd,CACHhB,KAAM,WAEF,OADIgB,GAAKjC,GAAKiC,EAAE9B,SAAQ8B,OAAI,GACrB,CAAEN,MAAOM,GAAKA,EAAEjC,KAAM0B,MAAOO,KAKzC,SAASE,EAAOF,EAAGhC,GACtB,IAAIiC,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UACjD,IAAKY,EAAG,OAAOD,EACf,IAAmBG,EAAYN,EAA3B9B,EAAIkC,EAAE9B,KAAK6B,GAAOI,EAAK,GAC3B,IACI,WAAc,IAANpC,GAAgBA,KAAM,MAAQmC,EAAIpC,EAAEiB,QAAQS,MAAMW,EAAGR,KAAKO,EAAET,OAExE,MAAOW,GAASR,EAAI,CAAEQ,MAAOA,GACjC,QACQ,IACQF,IAAMA,EAAEV,OAASQ,EAAIlC,EAAU,SAAIkC,EAAE9B,KAAKJ,GAE1D,QAAkB,GAAI8B,EAAG,MAAMA,EAAEQ,OAE7B,OAAOD,EAGJ,SAASE,IACZ,IAAK,IAAIF,EAAK,GAAIrC,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CqC,EAAKA,EAAGG,OAAOL,EAAOjC,UAAUF,KACpC,OAAOqC,SC1ITI,KAAO,OACPC,OAAS,SACTC,KAAO,OACPC,KAAO,OACPC,KAAO,OACPC,KAAO,OACPC,WAAa,aACbC,WAAa,aACbC,YAAc,cACdC,MAAQ,QACRC,MAAQ,QACRC,QAAU,UACVC,QAAU,UACVC,KAAO,OACPC,YAAc,cACdC,KAAO,OACPC,YAAc,cACdC,YAAc,cACdC,OAAS,SACTC,SAAW,WACXC,MAAQ,QACRC,OAAS,SACTC,MAAQ,QACRC,YAAc,iBAGhB,oBAkCEC,IAAM,MACNC,KAAO,QC5DIC,EAAoC,CAC/CC,KAAM,CACJC,QAAS,CACP3B,OAAQ,gBACRC,KAAM,uBACNC,KAAM,qBACNH,KAAM,cACNI,KAAM,kBACNC,KAAM,cACNC,WAAY,oBACZE,YAAa,qBACbD,WAAY,oBACZG,MAAO,4BACPC,QAAS,8BACTC,QAAS,sBACTH,MAAO,eACPI,KAAM,iBACNC,YAAa,uBACbC,KAAM,iBACNC,YAAa,wBACbC,YAAa,qBACbE,SAAU,eACVD,OAAQ,cACRE,MAAO,sBACPC,OAAQ,gBACRC,MAAO,eACPC,YAAa,gBAEfM,UAAW,CACT,CACEC,KAAMC,EAAiBN,KACvBO,IAAK,8DCjCbC,EAAA,WAcE,SAAAA,EAAsBC,EAA6BC,GAA7BpF,KAAAmF,OAAAA,EAA6BnF,KAAAoF,OAAAA,EAD3CpF,KAAAqF,gBAAkB,UAM1BH,EAAAhF,UAAAoF,OAAA,SAAOC,GACL,OACEvF,KAAKoF,OAAOR,KAAKE,aACf9E,KAAKoF,OAAOR,KAAKE,UAAUU,KAAI,SAC/BC,GACE,OAAAA,EAAIC,OACJD,EAAIV,OAASC,EAAiBP,KAC9BgB,EAAIC,MAAMC,SAASJ,MAW3BL,EAAAhF,UAAA0F,WAAA,SAAWL,OACHM,EAAc7F,KAAKoF,OAAOR,KAAKE,UAAUU,KAAI,SACjDC,GACE,OAAAA,EAAIV,OAASC,EAAiBP,KAC9BgB,EAAIC,OACJD,EAAIC,MAAMC,SAASJ,KAEvB,GAAIM,EACF,OAAOA,EAAYZ,IACZY,EAAYZ,IAAG,IAAIjF,KAAK8F,UAAUP,GACrC,IAAIvF,KAAK8F,UAAUP,IAQ3BL,EAAAhF,UAAA6F,gBAAA,SAAgBR,GACd,OAAOvF,KAAK8F,UAAUP,IAAa,IAWrCL,EAAAhF,UAAA8F,gBAAA,SAAgBT,OACRU,EAA+BjG,KAAKkG,aACxCX,EACAP,EAAiBN,MAEnB,GAAIuB,GAAYA,EAAShB,MAClBjF,KAAKqF,gBAAgBM,SAASM,EAAShB,KAAM,CAChDjF,KAAKqF,gBAAgBhD,KAAK4D,EAAShB,SAC7BkB,EAAOnG,KAAKmF,OAAOiB,SAASC,qBAAqB,QAAQ,GACzDC,EAAOtG,KAAKmF,OAAOiB,SAASG,cAAc,QAChDD,EAAKE,IAAM,aACXF,EAAKvB,KAAO,WACZuB,EAAKG,KAAOR,EAAShB,IACrBkB,EAAKO,YAAYJ,KAKfpB,EAAAhF,UAAAgG,aAAR,SACEX,EACAoB,GAEA,GAAK3G,KAAKoF,OAAOR,KAAKE,UAAtB,KAIImB,EAAWjG,KAAKoF,OAAOR,KAAKE,UAAUU,KAAI,SAC5CC,GACE,OAAAA,EAAIV,OAAS4B,GAAgBlB,EAAIC,OAASD,EAAIC,MAAMC,SAASJ,KAQjE,OALKU,IACHA,EAAWjG,KAAKoF,OAAOR,KAAKE,UAAUU,KAAI,SACxCC,GAAO,OAACA,EAAIV,OAAS4B,IAAiBlB,EAAIC,OAAUD,EAAIC,QAAU,MAG/DO,IAGDf,EAAAhF,UAAA4F,UAAR,SAAkBP,GAChB,GACEvF,KAAKoF,OAAOR,MACZ5E,KAAKoF,OAAOR,KAAKC,SACjB7E,KAAKoF,OAAOR,KAAKC,QAAQU,GAEzB,OAAOvF,KAAKoF,OAAOR,KAAKC,QAAQU,wBAvGrCqB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATLC,EAAAA,iBAEPC,mJAHF,GCAA,IAAAC,EAAA,WAgCE,SAAAA,EACYC,EACAC,GADAnH,KAAAkH,WAAAA,EACAlH,KAAAmH,WAAAA,EAVUnH,KAAAoH,aAAe,GAgDvC,OA1DE5H,OAAA6H,eACIJ,EAAA/G,UAAA,OAAI,KADR,SACS6E,GACP/E,KAAKsH,MAAQvC,EACb/E,KAAKuH,gBAAgBxC,oCAuBvBvF,OAAA6H,eAAIJ,EAAA/G,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKkH,WAAW5B,OAAOtF,KAAKsH,wCAQrC9H,OAAA6H,eAAIJ,EAAA/G,UAAA,UAAO,KAAX,WACE,OAAOF,KAAKkH,WAAWtB,WAAW5F,KAAKsH,wCAMjCL,EAAA/G,UAAAqH,gBAAR,SAAwBxC,GAClB/E,KAAKsF,cAIuBkC,IAA5BxH,KAAKyH,qBACPzH,KAAKyH,mBAAqBzH,KAAKmH,WAAWO,cAAcC,UAAUxF,MAC9DnC,KAAKmH,WAAWO,cAAcC,UAAUxF,MAAQ,IAChD,IAGNnC,KAAKoH,aACHpH,KAAKyH,mBAAqBzH,KAAKkH,WAAWnB,gBAAgBhB,GAE5D/E,KAAKkH,WAAWlB,gBAAgBjB,yBAlEnC6C,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,UACVC,SAAA,gKALO5C,SADW6C,EAAAA,4CAcjBC,EAAAA,MAAKnB,KAAA,CAAC,8BAUNoB,EAAAA,YAAWpB,KAAA,CAAC,YAgDfI,EAxEA,GCAA,IAAAiB,EAAA,WAOA,SAAAA,KAMyB,2BANxBC,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAACnB,GACfoB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,aAAaC,WAAW7D,IAChD8D,UAAW,CAAC,CAAEC,QAAS1B,EAAY2B,YAAaC,EAAAA,SAChDC,QAAS,CAAC5B,OAEaiB,EAbzB,GCOA,kBAAA,SAAAY,mDAA2C,OAAbC,EAAAA,EAAAA,GAAaD,GAAbE,EAAAA,aCC9BC,EAAA,WAKE,SAAAA,EAAoBC,GAAAlJ,KAAAkJ,gBAAAA,EADZlJ,KAAAmJ,OAAqB,UAG7BF,EAAA/I,UAAAkJ,KAAA,SAAKC,EAAcC,OACbC,EAKJ,OAHAA,EAAcvJ,KAAKkJ,gBAAgBE,KAAKC,EAASC,GACjDtJ,KAAKmJ,OAAO9G,KAAKkH,GAEVA,GAGTN,EAAA/I,UAAAsJ,eAAA,eACQC,EAAQzJ,KAAKmJ,OAAOnJ,KAAKmJ,OAAOxI,OAAS,GAC/C,OAAO8I,GAAgB,MAGzBR,EAAA/I,UAAAwJ,mBAAA,SAAmBC,OACXF,EAAkBzJ,KAAKwJ,iBAEzBC,IACFA,EAAMG,QAAQD,GACd3J,KAAKmJ,OAAO/G,QAIhB6G,EAAA/I,UAAA2J,iBAAA,SAAiBF,OACTF,EAAkBzJ,KAAKwJ,iBAEzBC,IACFA,EAAMK,MAAMH,GACZ3J,KAAKmJ,OAAO/G,4BAnCjBwE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARLiD,EAAAA,2IAOT,oBCuBE,SAAAC,EACU5E,EACA6E,EACAC,GAFAlK,KAAAoF,OAAAA,EACApF,KAAAiK,aAAAA,EACAjK,KAAAkK,yBAAAA,EAhBFlK,KAAAmK,cAAgB,IAAIC,EAAAA,aAE5BpK,KAAAqK,sBAAuB,EACvBrK,KAAAsK,UAAYC,EACZvK,KAAAwK,iBAA6B,GAO7BxK,KAAAyK,UAAYC,EAAAA,eAAe1K,KAAKoF,OAAQ,OAOlCuF,QAAQ3K,KAAKoF,OAAOwF,qBACtB5K,KAAKqK,qBAAuBrK,KAAKoF,OAAOwF,kBAAkBC,6BACtDF,QAAQ3K,KAAKoF,OAAOwF,kBAAkBJ,oBACxCxK,KAAKwK,iBAAmBxK,KAAKoF,OAAOwF,kBAAkBJ,mBAuG9D,OAlGER,EAAA9J,UAAA4K,SAAA,WACE9K,KAAK+K,WAAa/K,KAAKkK,yBAAyBc,eAChDhL,KAAKiL,UAAYjL,KAAKkK,yBAAyBgB,cAC/ClL,KAAKmL,SAAWnL,KAAKkK,yBAAyBkB,2BAGhDpB,EAAA9J,UAAAmL,WAAA,SAAW1B,GACT3J,KAAKiK,aAAaJ,iBAAiBF,IAGrCK,EAAA9J,UAAAoL,UAAA,WAAA,IAAAC,EAAAvL,KACEA,KAAKmK,cAAcqB,IACjBC,EAAAA,cAAc,CAACzL,KAAK+K,WAAY/K,KAAKiL,YAClCS,KACCC,EAAAA,KAAK,GACLC,EAAAA,uBACAC,EAAAA,IAAG,SAAEC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACE,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GACf,OAAAC,EAAUE,QAAO,SAACpE,OACVqE,EAAUZ,EAAKa,wBAAwBtE,EAAUmE,GACvD,GAAIV,EAAKrB,yBAAyBmC,eAAeF,GAAU,CACzD,GAAIZ,EAAKe,kBAAkBxE,GACzB,OAGFyD,EAAKrB,yBAAyBqC,gBAAgBzE,EAAS0E,UAK9DC,aAELzM,KAAKqL,WAAW,cAGlBrB,EAAA9J,UAAAwM,SAAA,WAAA,IAAAnB,EAAAvL,KACEA,KAAKmK,cAAcqB,IACjBC,EAAAA,cAAc,CAACzL,KAAK+K,WAAY/K,KAAKiL,YAClCS,KACCC,EAAAA,KAAK,GACLC,EAAAA,uBACAC,EAAAA,IAAG,SAAEC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACE,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GACf,OAAAC,EAAUE,QAAO,SAACpE,OACVqE,EAAUZ,EAAKa,wBAAwBtE,EAAUmE,GACvD,GACGE,GAAmC,MAAxBA,EAAQQ,cACpBpB,EAAKrB,yBAAyB0C,mBAAmBT,GACjD,CACA,GAAIZ,EAAKe,kBAAkBxE,GACzB,OAGFyD,EAAKrB,yBAAyB2C,YAAY/E,EAAS0E,UAK1DC,aAELzM,KAAKqL,WAAW,aAGVrB,EAAA9J,UAAAoM,kBAAR,SAA0BxE,GACxB,OACE6C,QAAQ3K,KAAKoF,OAAOwF,oBACpBD,QAAQ3K,KAAKoF,OAAOwF,kBAAkBJ,mBACtCxK,KAAKoF,OAAOwF,kBAAkBJ,iBAAiB7E,SAASmC,EAAS0E,KAIrExC,EAAA9J,UAAA4M,gBAAA,SAAgBhB,OACdiB,EAAAjB,EAAAiB,MACAjF,EAAAgE,EAAAhE,SAKIiF,EACF/M,KAAKkK,yBAAyB2C,YAAY/E,EAAS0E,IAEnDxM,KAAKkK,yBAAyBqC,gBAAgBzE,EAAS0E,KAI3DxC,EAAA9J,UAAAkM,wBAAA,SACEtE,EACAmE,gBAAA,IAAAA,IAAAA,EAAA,QAEA,IAAsB,IAAAe,EAAAC,EAAAhB,GAAQiB,EAAAF,EAAAvL,QAAAyL,EAAAhL,KAAAgL,EAAAF,EAAAvL,OAAE,CAA3B,IAAM0K,EAAOe,EAAA/K,MAChB,GAAI2F,EAAS0E,KAAOL,EAAQgB,aAC1B,OAAOhB,oGAGX,OAAO,MAGTnC,EAAA9J,UAAAkN,YAAA,WACEpN,KAAKmK,cAAckD,mCA/HtBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,8BACVC,SAAA,otEAZAwF,EAAAA,+BAQOrE,SAPPsE,EAAAA,4BA0IFvD,KC9IA,IAAAwD,EAAA,WAkBE,SAAAA,EACUvD,EACAC,GADAlK,KAAAiK,aAAAA,EACAjK,KAAAkK,yBAAAA,EARFlK,KAAAmK,cAAgB,IAAIC,EAAAA,aAE5BpK,KAAAyN,eAEIzN,KAAKkK,yBAAyBwD,kBA+BpC,OAxBEF,EAAAtN,UAAAyN,YAAA,WACE3N,KAAK4N,aACL5N,KAAKiK,aAAab,KAAKY,EAAiC,CACtD6D,UAAU,EACVC,KAAM,QAIVN,EAAAtN,UAAAwM,SAAA,WAAA,IAAAnB,EAAAvL,KACEA,KAAKmK,cAAcqB,IACjBxL,KAAKkK,yBACF6D,kBACArC,KAAKG,EAAAA,IAAG,SAACzK,GAAK,OAAAmK,EAAKqC,gBACnBnB,cAIPe,EAAAtN,UAAA0N,WAAA,WACE5N,KAAKkK,yBAAyB8D,uBAAsB,IAGtDR,EAAAtN,UAAAkN,YAAA,WACEpN,KAAKmK,cAAckD,mCAtCtBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yCACVC,SAAA,wiCAJOmB,SAJAsE,EAAAA,4BA8CTC,EA/CA,GCuBA,IAAAS,EAAA,WA4DE,SAAAA,IAvDAjO,KAAAsK,UAAYC,EAGZvK,KAAAkO,WAAmC,IAAIC,EAAAA,aAEvCnO,KAAAoO,eAAuC,IAAID,EAAAA,aAE3CnO,KAAAqO,SAAiC,IAAIF,EAAAA,aAErCnO,KAAAsO,SAAiC,IAAIH,EAAAA,aAErCnO,KAAAuO,WAAmC,IAAIJ,EAAAA,aAGvCnO,KAAAwO,QAAS,EAGTxO,KAAAyO,UAAW,EAGXzO,KAAA0O,WAAY,EAKZ1O,KAAA2O,gBAAiB,EAiCnB,OA7BEV,EAAA/N,UAAA0O,YAAA,WACE5O,KAAKyO,UAAW,GAGlBR,EAAA/N,UAAA2O,WAAA,WACE7O,KAAKyO,UAAW,EAChBzO,KAAKuO,WAAWO,KAAK,IAGvBb,EAAA/N,UAAA6O,OAAA,WACE/O,KAAKkO,WAAWY,KAAK,IAGvBb,EAAA/N,UAAA8O,WAAA,WACEhP,KAAK0O,WAAY,EACjB1O,KAAKoO,eAAeU,KAAK,IAG3Bb,EAAA/N,UAAA+O,KAAA,WACEjP,KAAKqO,SAASS,KAAK,IAGrBb,EAAA/N,UAAAgP,KAAA,WACElP,KAAKsO,SAASQ,KAAK,IAKrBb,EAAA/N,UAAA4K,SAAA,iCA9DDlD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,UACVC,SAAA,u2FAKCqH,EAAAA,+BAEAA,EAAAA,yBAEAA,EAAAA,yBAEAA,EAAAA,2BAEAA,EAAAA,uBAGAnH,EAAAA,wBAGAA,EAAAA,yBAGAA,EAAAA,uBAGAA,EAAAA,8BAEAA,EAAAA,SAkCHiG,EA/DA,GCvBA,IAAAmB,EAAA,WAOA,SAAAA,KAKyB,2BALxBjH,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAc+G,EAAAA,WAAYnH,GACpCE,aAAc,CAAC6F,GACfpF,QAAS,CAACoF,OAEamB,EAZzB,GCAAE,EAAA,WASE,SAAAA,EAAoBnK,GAAAnF,KAAAmF,OAAAA,SAapBmK,EAAApP,UAAAqP,iBAAA,SACE7H,EACA8H,GAFF,IAAAjE,EAAAvL,KAIE,OAAOA,KAAKmF,OAAOsK,QAAQ/D,KACzBgE,EAAAA,IAAG,WAAO,OAAA,EAA+BC,cACzCD,EAAAA,IAAG,SAACE,GAAc,OAAArE,EAAKsE,eAAeD,EAAYJ,OAW9CF,EAAApP,UAAA2P,eAAR,SAAuBC,EAAwBN,OACzCO,EAAkB,EAClBP,EAAUQ,SAAS,QAErBD,EAAkBD,EADNN,EAAUS,UAAU,EAAGT,EAAU7O,OAAS,IAIpD6O,EAAUQ,SAAS,OAErBD,EACED,GAAkBA,GAFPN,EAAUS,UAAU,EAAGT,EAAU7O,OAAS,GAEK,OAG9D,OAAOuP,KAAKC,MAAMJ,IAAoB,uBA/CzCnJ,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLC,EAAAA,6IADT,GC6BA,IAAAqJ,EAAA,WAkDE,SAAAA,EAAsBC,EAA0BC,GAA1BtQ,KAAAqQ,GAAAA,EAA0BrQ,KAAAsQ,QAAAA,EAdvCtQ,KAAAwP,UAAY,QAKZxP,KAAAuQ,gBAAiB,EAEjBvQ,KAAAwQ,cAAgBjG,EAAUjG,OAC1BtE,KAAAyQ,aAAelG,EAAU/G,WACzBxD,KAAA0Q,SAAWnG,EAAU9G,YAkBhC,OA/CEjE,OAAA6H,eACI+I,EAAAlQ,UAAA,WAAQ,KADZ,SACayQ,GACX3Q,KAAK4Q,MAAQD,EAEb3Q,KAAK6Q,YAAc,mCAgCrBT,EAAAlQ,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACOA,KAAK8H,WAAYgJ,EAAAA,YAMtB9Q,KAAK+Q,MAAQ/Q,KAAKsQ,QACff,iBAAiBvP,KAAKqQ,GAAG3I,cAAe1H,KAAKwP,WAC7C9D,KAAKG,EAAAA,IAAG,WAAO,OAACN,EAAKsF,YAAc,KAPpCG,QAAQlO,MACN,0GAvDP8E,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,cACVC,SAAA,4rDACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDA7BzCpJ,EAAAA,kBASOuH,oCA0BNtH,EAAAA,wBAOAA,EAAAA,MAAKnB,KAAA,CAAC,2BAWNmB,EAAAA,yBASAA,EAAAA,8BAKAA,EAAAA,6BAEAA,EAAAA,4BACAA,EAAAA,wBACAA,EAAAA,SAkBHoI,EA/DA,YC1BEgB,GAAK,KACLC,GAAK,KACLC,GAAK,KACLC,GAAK,KACLC,GAAK,QA0CP,iBCtCMC,IAAmB3F,EAAA,IACtB4F,EAAWN,IAAK,IACjBtF,EAAC4F,EAAWL,IAAK,IACjBvF,EAAC4F,EAAWJ,IAAK,IACjBxF,EAAC4F,EAAWH,IAAK,QAGnBI,EAAA,WAIE,SAAAA,EAAoBxM,EAA2BC,GAA3BpF,KAAAmF,OAAAA,EAA2BnF,KAAAoF,OAAAA,SAE/CuM,EAAAzR,UAAA0R,QAAA,SAAQC,GACN,OAAO7R,KAAKoF,OAAO0M,YACf9R,KAAKoF,OAAO0M,YAAYD,GACxBJ,EAAoBI,IAG1BrS,OAAA6H,eAAIsK,EAAAzR,UAAA,cAAW,KAAf,WAAA,IAAAqL,EAAAvL,KACE,OAAKA,KAAK+R,OAGHC,EAAAA,UAAUhS,KAAK+R,OAAQ,UAAUrG,KACtCuG,EAAAA,aAAa,KACbC,EAAAA,UAAU,CAAEC,OAAQnS,KAAK+R,SACzBrC,EAAAA,IAAG,SAAC0C,GAAS,OAAA7G,EAAK8G,cAAuBD,EAAY,OAAEE,cACvD1G,EAAAA,wBANO2G,EAAAA,GAAGb,EAAWN,qCAUzB5R,OAAA6H,eAAIsK,EAAAzR,UAAA,cAAW,KAAf,WACE,MAAO,CACLwR,EAAWN,GACXM,EAAWL,GACXK,EAAWJ,GACXI,EAAWH,GACXG,EAAWF,qCAILG,EAAAzR,UAAAmS,cAAV,SAAwBG,OAChBX,EAAa7R,KAAKyS,WAAWD,GACnC,OAAOd,EAAWG,GAAcH,EAAWH,KAGnCI,EAAAzR,UAAAuS,WAAV,SAAqBD,GAArB,IAAAjH,EAAAvL,KAKE,OAJKwS,IACHA,EAAcxS,KAAK+R,OAAOO,YAGrBE,EAAcxS,KAAK4R,QAAQF,EAAWN,IACzCM,EAAWN,GACXpR,KAAK8R,YAAYY,UAAUlN,KAAI,SAACmN,GAAM,OAAAH,GAAejH,EAAKqG,QAAQe,MAGxEnT,OAAA6H,eAAIsK,EAAAzR,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKmF,OAAOyN,kEAlDtBhM,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAlBLC,EAAAA,iBAQY8L,mJASrB,OCVMC,EAA0B,WAEhCC,EAAA,WAIE,SAAAA,EACY3N,EACA4N,GADAhT,KAAAoF,OAAAA,EACApF,KAAAgT,kBAAAA,SAGZxT,OAAA6H,eAAY0L,EAAA7S,UAAA,eAAY,KAAxB,WACE,MAAO,CACL,CACE+S,KAAM,SACNC,UAAWlT,KAAKgT,kBAAkBpB,QAAQF,EAAWN,KAEvD,CACE6B,KAAM,SACNC,UAAWlT,KAAKgT,kBAAkBpB,QAAQF,EAAWL,KAEvD,CACE4B,KAAM,UACNC,UAAWlT,KAAKgT,kBAAkBpB,QAAQF,EAAWJ,KAEvD,CACE2B,KAAM,aACNC,UAAWlT,KAAKgT,kBAAkBpB,QAAQF,EAAWH,uCAK3DwB,EAAA7S,UAAAiT,SAAA,SAASC,EAAWC,EAAiBC,GAEnC,OADAA,EAAMA,EAAMA,EAAIC,QAAQT,EAAiB,IAAM,KACxC,CACLU,IAAKxT,KAAKyT,aAAaL,EAAWC,GAClCK,OAAQ1T,KAAK2T,UAAUP,GACvBE,IAAKA,GAAOtT,KAAK4T,OAAOR,EAAWC,KAI/BN,EAAA7S,UAAAuT,aAAR,SAAqBI,EAAOR,GAC1B,OAAIQ,GAASA,EAAMR,GA3CM,UA4ChBrT,KAAK8T,YAAYD,EAAMR,GA5CP,UA4CuCpO,KACrD4O,GAASA,EAAM5O,IACjBjF,KAAK8T,YAAYD,EAAM5O,KACrB4O,GAASA,EAAM7T,KAAK+T,0BAA0BF,IAChD7T,KAAK8T,YAAYD,EAAM7T,KAAK+T,0BAA0BF,IAAQ5O,KAE9D,MAOH8N,EAAA7S,UAAA6T,0BAAR,SAAkCF,OAE1BG,EADN,OAAIH,GAGF7T,KAAKiU,aAAa/H,QAAO,SAACmH,KAErBW,GACAA,EAAYd,UAAYG,EAAOH,WAAaW,EAAMR,EAAOJ,SAE1De,EAAcX,KAIXW,EAAYf,MAGd,MAGDF,EAAA7S,UAAA0T,OAAR,SAAeC,EAAOR,OAOZa,EANR,GAAKL,EAEE,OAAIA,EAAMR,GA/EQ,WAgFjBa,EAAUL,EAAMR,GAhFC,UAgF+Ba,SACrCA,EAAQX,QAAQT,EAAiB,IAAMoB,EAC/CL,EAAMK,SACTA,EAAUL,EAAMK,SACLA,EAAQX,QAAQT,EAAiB,IAAMoB,OAFnD,GASDnB,EAAA7S,UAAAyT,UAAR,SAAkBE,GAAlB,IAAAtI,EAAAvL,KACE,GAAK6T,EAAL,KAGMH,EAAS1T,KAAKiU,aAAaE,OAAM,SAAEC,EAAKf,GAS5C,OARMQ,EAAMR,EAAOJ,QACbmB,IACFA,GAAO,MAETA,GAAU7I,EAAKuI,YAAYD,EAAMR,EAAOJ,MAAMhO,KAAI,IAChDoO,EAAOH,UAAS,KAGbkB,GACN,IAEH,MAAkB,KAAXV,OAAgBlM,EAAYkM,IAG7BX,EAAA7S,UAAA4T,YAAR,SAAoB7O,GAClB,OAAKA,EAGEA,EAAIoP,WAAW,QAAUpP,EAAMjF,KAAKsU,aAAerP,EAFjD,MAKH8N,EAAA7S,UAAAoU,WAAR,WACE,OACEtU,KAAKoF,OAAOmP,QAAQV,MAAMW,SAAWxU,KAAKoF,OAAOmP,QAAQE,IAAID,SAAW,wBApH7E5N,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAVL4N,EAAAA,iBACA/C,mJAQT,GCVA,IAAAgD,EAAA,WAoEE,SAAAA,EAAsBC,GAAA5U,KAAA4U,aAAAA,EA5BZ5U,KAAA6U,OAAgC,IAAI1G,EAAAA,aAYTnO,KAAA8U,eAAgB,EAOpB9U,KAAA+U,WAAY,EAOZ/U,KAAAgV,WAAY,EA8C/C,OA1CEL,EAAAzU,UAAA+U,YAAA,WACEjV,KAAKG,UAMCwU,EAAAzU,UAAAC,OAAR,WACEH,KAAK6T,MAAQ7T,KAAK4U,aAAazB,SAC7BnT,KAAKoT,UACLpT,KAAKqT,OACLrT,KAAKsT,KAEFtT,KAAK6T,MAAML,KACdxT,KAAKkV,iBAOTP,EAAAzU,UAAAiV,YAAA,WACEnV,KAAK+U,WAAY,EACjB/U,KAAK8U,eAAgB,EACrB9U,KAAKgV,WAAY,EACjBhV,KAAK6U,OAAO/F,MAAK,IAOnB6F,EAAAzU,UAAAkV,aAAA,WACEpV,KAAKkV,iBAGCP,EAAAzU,UAAAgV,cAAR,WACElV,KAAK+U,WAAY,EACjB/U,KAAK8U,eAAgB,EACrB9U,KAAKgV,WAAY,EACjBhV,KAAK6U,OAAO/F,MAAK,wBAlGpBlH,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,WACVC,SAAA,6KACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC4B,wCAcN/K,EAAAA,sBAKAA,EAAAA,mBAMAA,EAAAA,sBAKAmH,EAAAA,8BAYAlH,EAAAA,YAAWpB,KAAA,CAAC,2CAOZoB,EAAAA,YAAWpB,KAAA,CAAC,uCAOZoB,EAAAA,YAAWpB,KAAA,CAAC,uBA8Cf8N,EAhHA,GCAA,IAAAU,EAAA,WAIA,SAAAA,KAK0B,2BALzBlN,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACuM,GACf9L,QAAS,CAAC8L,OAEcU,EAT1B,GCAAC,EAAA,WAQA,SAAAA,KAK6B,2BAL5BnN,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAciN,EAAAA,aAAcrN,EAAYmN,EAAaG,EAAAA,WAC/DpN,aAAc,CAACgI,GACfvH,QAAS,CAACuH,OAEiBkF,EAb7B,GCqBMG,EAA2B,CAC/B/M,QAASgN,EAAAA,kBAET/M,YAAagN,EAAAA,WAAU,WAAO,OAAAC,IAC9BC,OAAO,GAGTD,EAAA,WAkEE,SAAAA,EAAoBE,GAAA9V,KAAA8V,SAAAA,EAnDpB9V,KAAAmC,MAAQ,EAERnC,KAAAuC,KAAO,EAMPvC,KAAA+V,OAAQ,EAER/V,KAAAgW,eAAgB,EAEhBhW,KAAAiW,mBAAoB,EAGpBjW,KAAAkW,OAAS,IAAI/H,EAAAA,aAIbnO,KAAAmW,mBAAoB,EACpBnW,KAAAoW,WAA0B,IAAIC,EAAAA,YAAY,CACxCC,SAAUtW,KAAKiW,oBAgCjBjW,KAAAuW,QAAO,aACPvW,KAAAwW,cAAa,SAAcC,KAyH7B,OArJEb,EAAA1V,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK0W,WAAW1W,KAAK2W,KAAO,GAC5B3W,KAAK4W,aAAe5W,KAAKoW,WAAWS,aACjCnL,KAAKuG,EAAAA,aAAa,MAClBxF,UAAS,SAACtK,GACLA,GACFoJ,EAAKuL,aAAaC,OAAO5U,OAKjCyT,EAAA1V,UAAA+U,YAAA,WACMjV,KAAKgW,cACPhW,KAAKoW,WAAWY,QAAQ,CACtBC,UAAU,EACVC,WAAW,IAGblX,KAAKoW,WAAWe,OAAO,CACrBF,UAAU,EACVC,WAAW,KAajBtB,EAAA1V,UAAAkX,mBAAA,SAAmBC,GACjB,YAAoB7P,IAAbxH,KAAK2W,KAAqBU,EAAgBrX,KAAK2W,IAClD3W,KAAK2W,SACQnP,IAAbxH,KAAKsX,KAAqBD,EAAgBrX,KAAKsX,IAC/CtX,KAAKsX,IACLD,GAMNzB,EAAA1V,UAAA4W,aAAA,SAAaS,GACXA,EAAWvX,KAAKoX,mBAAmBG,GACnCvX,KAAKwX,YAAYD,GAMjBvX,KAAK8V,SAAS2B,YAAYzX,KAAK0X,MAAMhQ,cAAe,QAAS6P,IAG/D3B,EAAA1V,UAAAyX,UAAA,SAAUvF,GAAV,IAAA7G,EAAAvL,KACQ4X,EAAW,CACfC,UAAS,WAAQ,OAAAtM,EAAKuM,aACtBC,QAAO,WAAQ,OAAAxM,EAAKyM,cAGlBJ,EAASxF,EAAMa,QACjB2E,EAASxF,EAAMa,QACfb,EAAM6F,iBACN7F,EAAM8F,oBAIVtC,EAAA1V,UAAAiY,OAAA,SAAO/F,GACLpS,KAAKoY,OAAQ,EACbhG,EAAM6F,iBACN7F,EAAM8F,kBACNlY,KAAKuW,WAGPX,EAAA1V,UAAAmY,QAAA,SAAQjG,GACNpS,KAAKoY,OAAQ,EACbhG,EAAM6F,iBACN7F,EAAM8F,kBACNlY,KAAKuW,WAMPX,EAAA1V,UAAA8X,UAAA,WACEhY,KAAK8W,aAAa9W,KAAKmC,MAAQnC,KAAKuC,MACpCvC,KAAKsY,UAAS,IAMhB1C,EAAA1V,UAAA4X,UAAA,WACE9X,KAAK8W,aAAa9W,KAAKmC,MAAQnC,KAAKuC,MACpCvC,KAAKsY,UAAS,IAKhB1C,EAAA1V,UAAAqY,kBAAA,SAAkBC,GAChBxY,KAAKuW,QAAUiC,GAGjB5C,EAAA1V,UAAAuY,iBAAA,SAAiBD,GACfxY,KAAKwW,cAAgBgC,GAGvB5C,EAAA1V,UAAAwW,WAAA,SAAWvU,GACTnC,KAAKmC,MAAQA,GAASnC,KAAK2W,KAAO,EAClC3W,KAAKwW,cAAcxW,KAAKmC,QAM1ByT,EAAA1V,UAAAsX,YAAA,SAAYkB,GACL1Y,KAAK+V,OAER/V,KAAK0W,WAAWgC,GAIlB1Y,KAAKkW,OAAOpH,KAAK4J,GACjB1Y,KAAKuW,WAMPX,EAAA1V,UAAAoY,SAAA,SAASK,GACH3Y,KAAK4Y,0BACP5Y,KAAK0X,MAAMhQ,cAAc0Q,QAChBO,EACT3Y,KAAK6Y,aAAanR,cAAc0Q,QAEhCpY,KAAK8Y,aAAapR,cAAc0Q,SAIpCxC,EAAA1V,UAAA0Y,wBAAA,WACE,OAAO5Y,KAAKmC,OAASnC,KAAKsX,KAAOtX,KAAKmC,OAASnC,KAAK2W,KAGtDf,EAAA1V,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,mCA3LvBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,ujCACAW,UAAW,CAACgN,gDArBZsD,EAAAA,4CAyBCC,EAAAA,UAASnS,KAAA,CAAC,mBAAoB,CAAEoS,QAAQ,0BAExCD,EAAAA,UAASnS,KAAA,CAAC,eAAgB,CAAEoS,QAAQ,0BAEpCD,EAAAA,UAASnS,KAAA,CAAC,eAAgB,CAAEoS,QAAQ,mBAGpCjR,EAAAA,oBAEAA,EAAAA,mBAEAA,EAAAA,mBAEAA,EAAAA,qBAEAA,EAAAA,6BAEAA,EAAAA,iCAEAA,EAAAA,sBAGAmH,EAAAA,UAiKHyG,EA9LA,GC5BA,IAAAsD,EAAA,WAYE,SAAAA,EAAoBC,EAAiCrD,GAAjC9V,KAAAmZ,YAAAA,EAAiCnZ,KAAA8V,SAAAA,EANrD9V,KAAAoZ,cAAgB,GAChBpZ,KAAAqZ,gBAAkB,WA4GpB,OAjGEH,EAAAhZ,UAAAoZ,SADA,WAEEtZ,KAAKuZ,cAAcvZ,KAAKmZ,YAAYzR,cAAcvF,QAOpD+W,EAAAhZ,UAAAsZ,QADA,WAEExZ,KAAKuZ,cAAcvZ,KAAKmZ,YAAYzR,cAAcvF,QAQpD+W,EAAAhZ,UAAAuZ,QADA,SACQnX,OACAH,EAAQG,EAAEoX,cAAcC,QAAQ,cACtC3Z,KAAKuZ,cAAcpX,GACnBG,EAAE2V,kBAQJiB,EAAAhZ,UAAA0Z,QADA,SACQtX,OACAH,EAAQG,EAAE6P,OAAc,MAC9BnS,KAAKuZ,cAAcpX,IAQrB+W,EAAAhZ,UAAAyX,UADA,SACUrV,OACFuX,EAAwBvX,EAAE6P,OAAc,MACxC2H,EAAc9Z,KAAK+Z,QAAQzX,GAC3B0X,GAAiC,IAAd1X,EAAE2X,UAAkC,IAAd3X,EAAE4X,QAG7B,CAClB,YACA,YACA,aACA,SACA,OAIYvU,SAASmU,IAEZ,MAARA,GAAeE,GAEP,MAARF,GAAeE,GAEP,MAARF,GAAeE,GAEP,MAARF,GAAeE,IAOlBha,KAAKoZ,cAAgBS,EAGJ,IAAIM,OAAOna,KAAKqZ,iBAAiBe,KAAKN,IAIrDxX,EAAE2V,mBAQNiB,EAAAhZ,UAAAqZ,cAAA,SAAcpX,GACRA,IACFA,EAAQA,EAAMoR,QAAQ,WAAY,IAClCvT,KAAK8V,SAAS2B,YAAYzX,KAAKmZ,YAAYzR,cAAe,QAASvF,KAQvE+W,EAAAhZ,UAAA6Z,QAAA,SAAQzX,GACN,OAAOA,EAAEwX,yBA/GZO,EAAAA,UAASxT,KAAA,CAAC,CACTgB,SAAU,8DAHQE,EAAAA,kBAA0BgR,EAAAA,+CAiB3CuB,EAAAA,aAAYzT,KAAA,CAAC,2BAQbyT,EAAAA,aAAYzT,KAAA,CAAC,0BASbyT,EAAAA,aAAYzT,KAAA,CAAC,QAAS,CAAC,4BAWvByT,EAAAA,aAAYzT,KAAA,CAAC,QAAS,CAAC,8BAUvByT,EAAAA,aAAYzT,KAAA,CAAC,UAAW,CAAC,cA4D5BqS,EAnHA,GCAA,IAAAqB,EAAA,WAGA,SAAAA,KAIwC,2BAJvCpS,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAAC8Q,GACfrQ,QAAS,CAACqQ,OAE4BqB,EAPxC,GCAAC,EAAA,WAOA,SAAAA,KAUgC,2BAV/BrS,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAmS,EAAAA,YACAC,EAAAA,oBACAH,GAEFnS,aAAc,CAACwN,GACf/M,QAAS,CAAC+M,OAEoB4E,EAjBhC,GCKAG,GAAA,WAAA,SAAAA,IAKmB3a,KAAA4a,cAAwB,gBA2B3C,OAlBEpb,OAAA6H,eAAIsT,EAAAza,UAAA,MAAG,KAAP,WACE,MAAuB,WAAhBF,KAAKmS,OAAsB,WAAa,sCAGjD3S,OAAA6H,eAAIsT,EAAAza,UAAA,YAAS,KAAb,WACE,MAAwB,iBAAbF,KAAKiF,IACP,CAACjF,KAAK6a,eAAe7a,KAAKiF,MAE5BjF,KAAKiF,qCAGd0V,EAAAza,UAAA4a,cAAA,WACE,MAA2B,iBAAb9a,KAAKiF,KAAoBjF,KAAK4a,cAAcR,KAAKpa,KAAKiF,MAG9D0V,EAAAza,UAAA2a,eAAR,SAAuB5V,GACrB,OAAOA,EAAIoP,WAAW,KAAOrU,KAAKiF,IAAM,IAAMjF,KAAKiF,yBA9BtD2C,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,4yBAKCE,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,kBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,SAoBH2S,EAhCA,GCLA,IAAAI,GAAA,WAKA,SAAAA,KAKgC,2BAL/B5S,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAciN,EAAAA,cACxBnN,aAAc,CAACuS,IACf9R,QAAS,CAAC8R,QAEoBI,EAVhC,GCYAC,GAAA,WAAA,SAAAA,IAOWhb,KAAAib,kBAAmB,EAClBjb,KAAAkb,cAAsC,IAAI/M,EAAAA,aA2FtD,OAvFU6M,EAAA9a,UAAAib,qBAAR,WACE,OAAOnb,KAAKob,WAAWC,YAAc,GAGvCL,EAAA9a,UAAAob,gBAAA,WACE,OAAOtb,KAAKmb,uBAAyB,GAGvCH,EAAA9a,UAAAqb,YAAA,WACE,OAAOvb,KAAKmb,uBAAyB,GAGvCH,EAAA9a,UAAAsb,gBAAA,WACE,OAAO7b,MAAMK,KAAKob,WAAWK,aAI/BT,EAAA9a,UAAAwb,sBAAA,WACE,OAhCqB,EAiCnBxL,KAAKC,MAAMnQ,KAAKob,WAAWC,YAjCR,IAuCvBL,EAAA9a,UAAAyb,sBAAA,WACE,OAxCqB,EAyCnBzL,KAAKC,MAAMnQ,KAAKob,WAAWC,YAzCR,GA2CnB,GAIJL,EAAA9a,UAAA0b,SAAA,WACE,OAAO5b,KAAKob,WAAWK,WAAa,GAGtCT,EAAA9a,UAAA2b,YAAA,WACE,OAAuC,IAAhC7b,KAAKob,WAAWC,aAGzBL,EAAA9a,UAAA4b,WAAA,WACE,OAAO9b,KAAKob,WAAWC,cAAgBrb,KAAKob,WAAWK,WAAa,GAGtET,EAAA9a,UAAA6b,YAAA,SAAYC,GACV,OAAOhc,KAAKob,WAAWC,cAAgBW,GAGzChB,EAAA9a,UAAA+b,cAAA,SAAcD,GACZ,OACGhc,KAAK0b,wBAA0BM,GAC9Bhc,KAAK2b,wBAA0BK,IAChCA,EAAQ,GAAKA,EAAQhc,KAAKob,WAAWK,WAAa,GAIvDT,EAAA9a,UAAAgc,SAAA,SAASF,GACP,OACEhc,KAAKic,cAAcD,KAClBA,IAAUhc,KAAK2b,wBAA0B,GACxCK,IAAUhc,KAAK0b,wBAA0B,IAI/CV,EAAA9a,UAAAic,YAAA,SAAYC,GAEV,OACEA,GAnFa,GAoFbA,GAAQpc,KAAKob,WAAWK,YACxBW,IAASpc,KAAKmb,wBAEdnb,KAAKqc,WAAWD,GACTA,GAIFpc,KAAKob,WAAWC,aAGzBL,EAAA9a,UAAAmc,WAAA,SAAWD,GACTpc,KAAKkb,cAAcpM,KAAKsN,EAAO,IAGjCpB,EAAA9a,UAAAoc,eAAA,WACE,QAAStc,KAAKib,kBAAoBjb,KAAKob,WAAWK,YAAc,wBAjGnE7T,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gBACVC,SAAA,ozBACAmJ,gBAAiBC,EAAAA,wBAAwBC,+CAGxCnJ,EAAAA,gCACAA,EAAAA,6BACAmH,EAAAA,UA2FH6L,EAnGA,GCZA,IAAAuB,GAAA,WA2BE,SAAAA,IACEvc,KAAKwc,cAAgB,IAAIrO,EAAAA,aAM7B,OAHEoO,EAAArc,UAAAuc,SAAA,SAASC,GACP1c,KAAKwc,cAAc1N,KAAK4N,wBAvB3B9U,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,aACVC,SAAA,8UACAmJ,gBAAiBC,EAAAA,wBAAwBC,sFAGxCnJ,EAAAA,8BAEAA,EAAAA,2BAEAA,EAAAA,0BAEAA,EAAAA,6BAGAmH,EAAAA,UAUHoN,EAlCA,GCAA,IAAAI,GAAA,WAOA,SAAAA,KAKmC,2BALlCxU,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAcsU,EAAAA,eAAgBnC,EAAAA,aACxCrS,aAAc,CAAC4S,GAAqBuB,IACpC1T,QAAS,CAACmS,GAAqBuB,QAEEI,EAZnC,GCIA,IAAAE,GAAA,WAKE,SAAAA,KACF,2BANCjV,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,aACVC,SAAA,0JAIF+U,EANA,GCJAC,GAAA,WAMA,SAAAA,KAK4B,2BAL3B3U,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAc+G,EAAAA,YACxBjH,aAAc,CAACyU,IACfhU,QAAS,CAACgU,QAEgBC,EAX5B,GCAAC,GAAA,WAmBE,SAAAA,EAAsBC,GAAAhd,KAAAgd,qBAAAA,EALtBhd,KAAAsK,UAAYC,EAGZvK,KAAAid,YAAwCC,EAAAA,kBAW1C,OAPEH,EAAA7c,UAAA4K,SAAA,WACE9K,KAAKmd,UAAYnd,KAAKgd,qBAAqBI,OAG7CL,EAAA7c,UAAAmd,MAAA,SAAMtY,EAAyBiX,GAC7Bhc,KAAKgd,qBAAqBM,OAAOvY,EAAMiX,wBAjB1CpU,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,q/CARAyV,EAAAA,wBAyBFR,EA5BA,GCAA,IAAAS,GAAA,WAOA,SAAAA,KAK2C,2BAL1CrV,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAcmV,EAAAA,iBAAkBvV,EAAYmH,EAAAA,YACtDjH,aAAc,CAAC2U,IACflU,QAAS,CAACkU,QAE+BS,EAZ3C,MCAA,aCAA,IAAAE,GAAA,WAYE,SAAAA,EAAoBvY,EAA2BC,GAA3BpF,KAAAmF,OAAAA,EAA2BnF,KAAAoF,OAAAA,EAFvCpF,KAAA2d,iBAAmB,IAAIC,EAAAA,iBAAyB,GAIpDjT,QAAQ3K,KAAKmF,OAAOyN,eACpBjI,QAAQ3K,KAAKmF,OAAOiB,WACpBpG,KAAK6d,0BAEL7d,KAAK8d,aACL9d,KAAK+d,gBAIDL,EAAAxd,UAAA4d,WAAR,WAAA,IAAAvS,EAAAvL,KACEgS,EAAAA,UAAUhS,KAAKmF,OAAOyN,aAAc,iBAAiBnG,UAAS,SAACrL,GAC7D,OAAAmK,EAAKoS,iBAAiBlc,MAAK,MAIvBic,EAAAxd,UAAA6d,MAAR,eACQC,EAAkBhe,KAAKmF,OAAOiB,SAASG,cAAc,UAC3DyX,EAAgBjZ,KAAO,kBACvBiZ,EAAgBC,OAAQ,EACxBD,EAAgBxK,IAAM,qCAEhB0K,EAAWle,KAAKmF,OAAOiB,SAASG,cAAc,OACpD2X,EAAS1R,GAAKxM,KAAKoF,OAAO+Y,UAAUC,UAEpCpe,KAAKmF,OAAOiB,SACTC,qBAAqB,QAAQ,GAC7BK,YAAYsX,GAEfhe,KAAKmF,OAAOiB,SAASC,qBAAqB,QAAQ,GAAGK,YAAYwX,IAG3DR,EAAAxd,UAAA2d,sBAAR,WACE,OACElT,QAAQ3K,KAAKoF,OAAO+Y,YAAcxT,QAAQ3K,KAAKoF,OAAO+Y,UAAUC,YAIpEV,EAAAxd,UAAAme,KAAA,WAAA,IAAA9S,EAAAvL,KACE,OAAOA,KAAK2d,iBAAiBjS,KAC3B4S,EAAAA,OAAM,SAACzJ,GAAU,OAAAA,IACjB0J,EAAAA,UAAS,SAACnd,OACFod,EAAMjT,EAAKpG,OAAOyN,aAAkB,IAC1C,OAAOrH,EAAKkT,eAAe/S,KACzBE,EAAAA,uBACAC,EAAAA,IAAG,SAAC6S,GACEA,IACFF,EAAIG,IAAIC,SACRJ,EAAIG,IAAIN,OAAOnc,KAAKsc,EAAIG,IAAIE,eAa9BnB,EAAAxd,UAAAue,aAAV,WACE,OAAOlM,EAAAA,IAAG,wBArEb3L,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLC,EAAAA,iBAGA+X,qJAJT,GCAA,IAAAC,GAAA,WAYE,SAAAA,EAAoBC,GAAAhf,KAAAgf,gBAAAA,EAFpBhf,KAAAif,kBAAoBjf,KAAKgf,gBAAgBX,OAG3C,2BAVCzW,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,eACVC,SAAU,yHAJH4V,MAYTqB,EAbA,GCEA,OAAaG,GAA0C,CACrDf,UAAW,ICHbgB,GAAA,WAQA,SAAAA,KAsB8B,2BAtB7BhX,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAmV,EAAAA,iBACAlV,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbL,mBAAoB,CAClBM,UAAWN,OAIjBxW,EAAAA,aAAaC,WAAW0W,KAE1B9W,aAAc,CAAC2W,IACfO,gBAAiB,CAACP,IAClBtW,UAAW,CACT,CACEC,QAASoW,GACTnW,YAAaC,EAAAA,aAIWuW,EA9B9B,GCAAI,GAAA,WAEA,SAAAA,KAQwC,2BARvC3X,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gCACVC,SAAU,mKAIVmJ,gBAAiBC,EAAAA,wBAAwBC,WAEHoO,EAVxC,MCGA,iBCUMC,KAAMC,GAAA,IACTC,EAAAA,qBAAsB,WACvB5T,GAAC6T,EAAAA,qBAAsB,eAGzBC,GAAA,WAEE,SAAAA,EAEYC,EACFC,EACEC,GAFA/f,KAAA6f,cAAAA,EACF7f,KAAA8f,kBAAAA,EACE9f,KAAA+f,SAAAA,EA2Fd,OAxFEH,EAAA1f,UAAA8f,SAAA,SAASC,GAAT,IAAA1U,EAAAvL,KACE,OAAOA,KAAKkgB,WAAWD,GAASvU,KAC9B6S,EAAAA,UAAS,SAAEjO,GAA8B,OAAAA,EAAQ6P,WACjD5B,EAAAA,UAAS,SAAC3N,GACR,OAAArF,EAAK6U,WAAWH,GAASvU,KACvB6S,EAAAA,UAAS,SAAC8B,WACFC,EAAY,OAClB,IAAmB,IAAAC,EAAAtT,EAAA2D,GAAK4P,EAAAD,EAAA9e,QAAA+e,EAAAte,KAAAse,EAAAD,EAAA9e,OAAE,CAArB,IAAMgf,EAAID,EAAAre,MACbme,EAAUje,KAAIjC,EAAA,GACTqgB,EAAI,CACPpf,MAAOkK,EAAKmV,eAAeD,EAAMJ,wGAGrC,OAAO9N,EAAAA,GAAG+N,UAOpBV,EAAA1f,UAAAygB,cAAA,SAAcV,GACZ,OAAOjgB,KAAKkgB,WAAWD,GAASvU,KAC9B6S,EAAAA,UAAS,SAAEjO,GAA8B,OAAAA,EAAQsQ,gBAIrDhB,EAAA1f,UAAA2gB,SAAA,SAASZ,GACP,OAAOjgB,KAAKogB,WAAWH,GAASvU,KAC9BgE,EAAAA,IAAG,SAAC2Q,GACF,OAAOb,GAAOa,OAKpBT,EAAA1f,UAAA4gB,UAAA,SAAU3e,EAAe8d,GACvBjgB,KAAKkgB,WAAWD,GACbvU,KAAKC,EAAAA,KAAK,IACVc,UAAS,SAAC6D,GACTA,EAAQwQ,UAAU3e,MAIdyd,EAAA1f,UAAAggB,WAAV,SACED,GADF,IAAA1U,EAAAvL,KAGE,OAAOA,KAAKogB,WAAWH,GAASvU,KAC9BgE,EAAAA,IAAG,SAAE2Q,GAAgB,OAAA9U,EAAKwV,mBAAmBV,KAC7C/B,EAAAA,OAAM,SAAC/d,GAAK,QAAEA,MAIRqf,EAAA1f,UAAAkgB,WAAV,SAAqBH,GACnB,OAAIA,EACK1N,EAAAA,GAAG0N,GACDjgB,KAAK6f,cACP7f,KAAK6f,cAAcmB,MAAMtV,KAC9BgE,EAAAA,IAAG,SAACuR,GAAQ,OAAAA,EAAKhB,UACjBvQ,EAAAA,IAAG,SAAC2Q,GACF,OAAQA,GACN,IAAK,WACH,OAAOX,EAAAA,oBACT,IAAK,WACH,OAAOC,EAAAA,oBACT,QACE,OAAOU,WAVV,GAiBCT,EAAA1f,UAAA6gB,mBAAV,SAA6Bd,GAC3B,OAAOjgB,KAAK+f,SAAS3C,IACnBpd,KAAK8f,kBAAkBG,GACvB,OAIML,EAAA1f,UAAAwgB,eAAV,SAAyBD,EAAWR,GAClC,OAAQA,GACN,KAAKP,EAAAA,oBACH,OAAOe,EAAKS,WACd,KAAKvB,EAAAA,oBACH,OAAOc,EAAKU,OAAS,IAAMV,EAAKW,QAClC,QACE,OAAOX,EAAKW,8BA9FnBxa,EAAAA,sDARQya,GAAgBC,WAAA,CAAA,CAAAvc,KAWpBwc,EAAAA,kBAlBHC,EAAAA,yBAHmBC,EAAAA,YAmHrB7B,EAjGA,OClBA8B,GAAA,WAqBE,SAAAA,EAAoBC,GAAA3hB,KAAA2hB,iBAAAA,EAPpB3hB,KAAAsK,UAAYC,EAwBd,OAfE/K,OAAA6H,eAAIqa,EAAAxhB,UAAA,SAAM,KAAV,WACE,OAAOF,KAAK2hB,iBAAiB3B,SAAShgB,KAAKigB,0CAG7CzgB,OAAA6H,eAAIqa,EAAAxhB,UAAA,cAAW,KAAf,WACE,OAAOF,KAAK2hB,iBAAiBhB,cAAc3gB,KAAKigB,0CAGlDzgB,OAAA6H,eAAIqa,EAAAxhB,UAAA,SAAM,KAAV,SAAWiC,GACTnC,KAAK2hB,iBAAiBb,UAAU3e,EAAOnC,KAAKigB,0CAG9CzgB,OAAA6H,eAAIqa,EAAAxhB,UAAA,SAAM,KAAV,WACE,OAAOF,KAAK2hB,iBAAiBd,SAAS7gB,KAAKigB,8DA7B9CrY,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,2BACVC,SAAA,kbACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlCyO,uCAeN5X,EAAAA,SAmBH0Z,EAtCA,GCAA,IAAAE,GAAA,WAeA,SAAAA,KA6BwC,2BA7BvCzZ,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAhN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbyC,wBAAyB,CACvBxC,UAAWqC,GACXjZ,UAAW,CACT,CACEC,QAASkX,GACTkC,SAAUlC,GACVmC,KAAM,CAACV,GAAkBG,EAAAA,kBAAmBC,EAAAA,aAIlDlC,0BAA2B,CACzBF,UAAWE,OAIjByC,EAAAA,kBACA9Z,GAEFO,UAAW,CAACmX,IACZxX,aAAc,CAACsZ,GAA8BnC,IAC7CD,gBAAiB,CAACoC,GAA8BnC,IAChD1W,QAAS,CAAC6Y,GAA8BnC,QAEFqC,EA5CxC,GCAAK,GAAA,WA+CE,SAAAA,EAAsB5R,EAA0ByF,GAA1B9V,KAAAqQ,GAAAA,EAA0BrQ,KAAA8V,SAAAA,EAxBT9V,KAAAsW,UAAW,EAUxCtW,KAAAkiB,OAAS,IAAI/T,EAAAA,aAEfnO,KAAAmiB,YAAc,EAEtBniB,KAAAsK,UAAYC,EA0Cd,OA9BE0X,EAAA/hB,UAAA4K,SAAA,WACE9K,KAAKoiB,QAAQpiB,KAAKqiB,QAAQ,IAG5BJ,EAAA/hB,UAAAkiB,QAAA,SAAQjgB,EAAemgB,GAChBtiB,KAAKsW,WAAYgM,IAEhBtiB,KAAK8V,SACP9V,KAAK8V,SAASyM,aACZviB,KAAKqQ,GAAG3I,cACR,QACA,gBAAevF,GAASnC,KAAKmiB,aAAW,KAG1CniB,KAAKqQ,GAAG3I,cAAc8a,MAAM/K,YAC1B,cACAtV,GAASnC,KAAKmiB,eAMtBF,EAAA/hB,UAAAuiB,SAAA,SAASJ,GACHriB,KAAKsW,WAGTtW,KAAKmiB,YAAcE,EACnBriB,KAAKoiB,QAAQC,GACbriB,KAAKkiB,OAAOpT,KAAKuT,yBAhEpBza,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,0LACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAbzCpJ,EAAAA,kBAMAgR,EAAAA,+CAcC/Q,EAAAA,OAAK,CAAAjD,KAAIkD,EAAAA,YAAWpB,KAAA,CAAC,iCAKrBmB,EAAAA,sBAKAmH,EAAAA,UA8CH8S,EA/EA,GCAA,IAAAS,GAAA,WAKA,SAAAA,KAK+B,2BAL9Bva,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAcJ,GACxBE,aAAc,CAAC6Z,IACfpZ,QAAS,CAACoZ,QAEmBS,EAV/B,MCAA,aCAA,IAAAC,GAAA,WAIA,SAAAA,KAgBA,OAdSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVla,UAAW,CACTqa,EAAAA,cAAc,CACZC,KAAM,KAER,CACEra,QAASsa,GACTra,YAAaC,EAAAA,+BAXtBT,EAAAA,SAAQtB,KAAA,CAAC,MAgBV8b,EApBA,GCAAM,GAAA,WAME,SAAAA,EAAoB9J,GAAAnZ,KAAAmZ,YAAAA,EAKtB,OAHE8J,EAAA/iB,UAAAgjB,gBAAA,WACEljB,KAAKmZ,YAAYzR,cAAc0Q,6BAPlCiC,EAAAA,UAASxT,KAAA,CAAC,CACTgB,SAAU,6DAHuBE,EAAAA,cAWnCkb,EAXA,GCAA,IAAAE,GAAA,WAGA,SAAAA,KAIuC,2BAJtChb,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAAC6a,IACfpa,QAAS,CAACoa,QAE2BE,EAPvC,iBCKA,SAAAC,KAmBA,OARSA,EAAAC,gBAAP,SACEC,EACAC,EACAC,OAEMC,EAA2BH,EAAKlG,IAAImG,GAC1C,OAAOE,EAAQC,UAAYF,GAAcC,EAAQE,SAAWF,EAAQG,QAExER,KCvBAS,GAAA,WAEA,SAAAA,KA0BA,OAzBSA,EAAAC,qBAAP,SACEL,GAIA,OAFcA,EAAa,MAEdM,MAAM,iBAAmB,KAAO,CAAEC,cAAc,IAGxDH,EAAAI,eAAP,SAAsBR,GAGpB,OAFcA,EAAa,MAEdM,MAAMG,EAAAA,eAAiB,KAAO,CAAEF,cAAc,IAGtDH,EAAAM,kBAAP,SAAyBV,GAEvB,OADiBA,EAAa,MACdM,MAAMK,EAAAA,kBAAoB,KAAO,CAAEC,iBAAiB,IAG/DR,EAAAS,cAAP,SAAqBb,GACnB,OAAIA,EAAQrG,IAAI,YAAYjb,QAAUshB,EAAQrG,IAAI,gBAAgBjb,MACzD,CAAEoiB,UAAU,GAEd,MAEXV,EA5BA,GCCaW,GAAc,CACzBC,GAAI,EACJC,IAAK,EACLC,KAAM,EACNC,GAAI,EACJC,GAAI,EACJC,IAAK,GAGP,SAAgBC,GAAWC,EAAeC,GACxC,OAAKT,GAAYQ,EAAO/R,OAAUuR,GAAYS,EAAOhS,MAG5CuR,GAAYQ,EAAO/R,MAAQuR,GAAYS,EAAOhS,MAF9C,ECbX,IAAAiS,GAAA,WAYE,SAAAA,EACUC,EACAC,GAFV,IAAA7Z,EAAAvL,KACUA,KAAAmlB,iBAAAA,EACAnlB,KAAAolB,eAAAA,EAERplB,KAAKqlB,WAAarlB,KAAKolB,eACpBE,iBACA5Z,KAAKgE,EAAAA,IAAG,SAAC6V,GAAe,OAAAA,EAAYC,MAAMC,OAAOC,aAEpD1lB,KAAK2lB,WAAa3lB,KAAKqlB,WAAW3Z,KAChCG,EAAAA,IAAG,SAAC6Z,GACEA,EACFna,EAAK4Z,iBAAiBS,iBAAiBF,GAEvCna,EAAK4Z,iBAAiBU,sBAG1BC,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAI3Cd,EAAAhlB,UAAA+lB,gBAAA,WAAA,IAAA1a,EAAAvL,KACE,OAAOA,KAAK2lB,WAAWja,KACrB6S,EAAAA,UAAS,WAAO,OAAAhT,EAAK4Z,iBAAiBc,0CA7B3Crf,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALkBof,EAAAA,wBAAhBC,EAAAA,sLADhB,qBCkBE,SAAAC,EACYC,EACAC,EACAC,GAFAvmB,KAAAqmB,YAAAA,EACArmB,KAAAsmB,oBAAAA,EACAtmB,KAAAumB,gBAAAA,SAGZH,EAAAlmB,UAAAsmB,mBAAA,SACEC,GAEA,OAAQA,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAO3mB,KAAK4mB,6BACd,KAAKF,EAAAA,kBAAkBG,SACrB,OAAO7mB,KAAK8mB,iCACd,KAAKJ,EAAAA,kBAAkBK,MACrB,OAAO/mB,KAAKgnB,8BACd,QACE,OAAOzU,EAAAA,GAAG,MAIhB6T,EAAAlmB,UAAA0mB,2BAAA,WAAA,IAAArb,EAAAvL,KACE,OAAOA,KAAKqmB,YACTzF,YACAlV,KAAKgE,EAAAA,IAAG,SAACuX,GAAQ,OAAA1b,EAAK2b,iCAAiCD,OAGpDb,EAAAlmB,UAAAgnB,iCAAR,SAAyCD,OACjCE,EAAsB,GAC5BA,EAAoB9kB,KAAIxB,MAAxBsmB,EAAmBpkB,EAAUkkB,EAAKG,0BAA4B,SAExDC,EAAoB,GAG1B,OAFAA,EAAkBhlB,KAAIxB,MAAtBwmB,EAAiBtkB,EAAUkkB,EAAKK,wBAA0B,KAE1DvkB,EAAWokB,EAAwBE,IAGrCjB,EAAAlmB,UAAA4mB,+BAAA,WAAA,IAAAvb,EAAAvL,KACE,OAAOA,KAAKumB,gBACTN,kBACAva,KAAKgE,EAAAA,IAAG,SAAC6X,GAAS,OAAAhc,EAAKic,kCAAkCD,OAG9DnB,EAAAlmB,UAAA8mB,4BAAA,WAAA,IAAAzb,EAAAvL,KACE,OAAOA,KAAKsmB,oBACTL,kBACAva,KAAKgE,EAAAA,IAAG,SAAC6X,GAAS,OAAAhc,EAAKic,kCAAkCD,OAGtDnB,EAAAlmB,UAAAsnB,kCAAR,SAA0CD,OAClCD,EAAyB,GAG/B,OAFAA,EAAuBjlB,KAAIxB,MAA3BymB,EAAsBvkB,EAAUwkB,EAAMD,wBAA0B,KAEzDA,GAGTlB,EAAAlmB,UAAAunB,4BAAA,SACEhH,EACAgG,GAFF,IAAAlb,EAAAvL,KAIE,OAAQymB,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAO3mB,KAAKqmB,YACTzF,YACAlV,KACCgE,EAAAA,IAAG,SAACuX,GACF,OAAA1b,EAAKmc,oBACHjH,EACAwG,EAAKU,0BAA4B,OAI3C,KAAKjB,EAAAA,kBAAkBG,SACrB,OAAO7mB,KAAKumB,gBACTN,kBACAva,KACCgE,EAAAA,IAAG,SAAC6X,GACF,OAAAhc,EAAKmc,oBACHjH,EACA8G,EAAMI,0BAA4B,OAI5C,KAAKjB,EAAAA,kBAAkBK,MACrB,OAAO/mB,KAAKsmB,oBACTL,kBACAva,KACCgE,EAAAA,IAAG,SAAC6X,GACF,OAAAhc,EAAKmc,oBACHjH,EACA8G,EAAMI,0BAA4B,SAOxCvB,EAAAlmB,UAAAwnB,oBAAR,SACEjH,EACAmH,eAEMC,EAAqC,GAC3C,GAAID,GAAcA,EAAWjnB,OAAS,MACpC,IAAwB,IAAAmnB,EAAA7a,EAAA2a,GAAUG,EAAAD,EAAArmB,QAAAsmB,EAAA7lB,KAAA6lB,EAAAD,EAAArmB,OAAE,CAA/B,IAAMumB,EAASD,EAAA5lB,MAClB,GACE6lB,EAAUC,aACVD,EAAUE,iBACVF,EAAUE,gBAAgBvnB,OAAS,MAEnC,IAA4B,IAAAwnB,GAAAC,OAAA,EAAAnb,EAAA+a,EAAUE,kBAAeG,EAAAF,EAAA1mB,QAAA4mB,EAAAnmB,KAAAmmB,EAAAF,EAAA1mB,OAAE,CAAlD,IAAM6mB,EAAaD,EAAAlmB,MAClBnC,KAAKuoB,kBAAkBD,EAAe7H,IACxCoH,EAAgBxlB,KAAK2lB,wMAM/B,OAAOH,GAGDzB,EAAAlmB,UAAAqoB,kBAAR,SAA0BD,EAAoBE,WACtCC,EAAsBH,EAAcI,iBAC1C,GAAIF,EAAMG,SAAWH,EAAMG,QAAQhoB,OAAS,EAAG,KAC7C,IAAuB,IAAAoL,EAAAkB,EAAAub,EAAMG,SAAOR,EAAApc,EAAAtK,QAAA0mB,EAAAjmB,KAAAimB,EAAApc,EAAAtK,OAAE,CACpC,GADiB0mB,EAAAhmB,MACJymB,cAAgBH,EAC3B,OAAO,oGAGX,OAAO,EAEP,OAAOA,IAAwBD,EAAMI,iCAtI1ChiB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAXZ+hB,EAAAA,mBAQO3D,UALP4D,EAAAA,qMCPF,IAAAC,GAAA,WASE,SAAAA,EAAsB9e,GAAAjK,KAAAiK,aAAAA,EAQxB,OANE8e,EAAA7oB,UAAA8oB,WAAA,WACEhpB,KAAKiK,aAAab,KAAKY,EAAiC,CACtD6D,UAAU,EACVC,KAAM,4BAVXlG,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mCACVC,SAAA,0NAJOmB,KAeT8f,EAjBA,GCAA,IAAAE,GAAA,WAYA,SAAAA,KA8BqD,2BA9BpD9gB,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA+G,EAAAA,WACA6Z,EAAAA,qBACA3gB,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb5R,0CAA2C,CACzC6R,UAAW7R,EACX2b,aAAcC,EAAAA,qBAAqBC,SAErCN,oCAAqC,CACnC1J,UAAW0J,QAKnB3gB,aAAc,CACZoF,EACAub,IAEFlgB,QAAS,CACP2E,EACAub,IAEFzJ,gBAAiB,CACf9R,EACAub,QAGiDE,EA1CrD,GCQAK,GAAA,WAIE,SAAAA,EACUlkB,EACqBmkB,GADrBvpB,KAAAoF,OAAAA,EACqBpF,KAAAupB,WAAAA,SAG/BD,EAAAppB,UAAAspB,mBAAA,SAAmBC,OACXC,EAAQC,EAAAA,iBAAiB3pB,KAAKupB,YAC9BK,GAA4B5pB,KAAKoF,OAAOga,cAAcqK,IAAa,IACtEI,WACH,QAASH,GAASE,IAGpBN,EAAAppB,UAAA4pB,uBAAA,SAAuBC,WACfC,EAAS,OACf,IAA4B,IAAAC,EAAAhd,EAAA8c,GAAcG,EAAAD,EAAAxoB,QAAAyoB,EAAAhoB,KAAAgoB,EAAAD,EAAAxoB,OAAE,CAAvC,IAAM0oB,EAAaD,EAAA/nB,MAClBnC,KAAKwpB,mBAAmBW,IAC1BH,EAAO3nB,KAAIxB,MAAXmpB,EAAMjnB,EAAS/C,KAAKoqB,sBAAsBD,uGAG9C,OAAOH,GAGTV,EAAAppB,UAAAmqB,uBAAA,SAAuBN,WACfO,EAAS,IAAIC,QACnB,IAA4B,IAAAC,EAAAvd,EAAA8c,GAAcU,EAAAD,EAAA/oB,QAAAgpB,EAAAvoB,KAAAuoB,EAAAD,EAAA/oB,OAAE,CAAvC,IAAM0oB,EAAaM,EAAAtoB,MACtBnC,KAAK0qB,sBAAsBP,GAAeje,QAAO,SAACye,GAChD,OAAAL,EAAO9e,IAAImf,uGAGf,OAAOhrB,MAAMirB,KAAKN,IAGpBhB,EAAAppB,UAAA2qB,yBAAA,SAAyBd,WACjBe,EAAW,IAAIP,QACrB,IAA4B,IAAAQ,EAAA9d,EAAA8c,GAAciB,EAAAD,EAAAtpB,QAAAupB,EAAA9oB,KAAA8oB,EAAAD,EAAAtpB,OAAE,CAAvC,IAAM0oB,EAAaa,EAAA7oB,MAClBnC,KAAKwpB,mBAAmBW,IAC1BnqB,KAAKirB,wBAAwBd,GAAeje,QAAO,SAAC4N,GAClD,OAAAgR,EAAStf,IAAIsO,uGAInB,OAAOna,MAAMirB,KAAKE,IAGZxB,EAAAppB,UAAAkqB,sBAAR,SAA8BD,OACtBe,EAAgBlrB,KAAKoF,OAAOga,cAAc+K,GAChD,OAAQe,GAAiBA,EAAcC,aAAgB,IAGjD7B,EAAAppB,UAAAwqB,sBAAR,SAA8BP,OACtBe,EAAgBlrB,KAAKoF,OAAOga,cAAc+K,GAChD,OAAQe,GAAiBA,EAAcZ,QAAW,IAG5ChB,EAAAppB,UAAA+qB,wBAAR,SAAgCd,OACxBe,EAAgBlrB,KAAKoF,OAAOga,cAAc+K,GAChD,OAAQe,GAAiBA,EAAcJ,UAAa,wBA5DvDlkB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARLskB,EAAAA,iBAaoC5rB,OAAM8hB,WAAA,CAAA,CAAAvc,KAA9CsmB,EAAAA,OAAMxkB,KAAA,CAACykB,EAAAA,4KANZ,GCMA,IAAAC,GAAA,WAIE,SAAAA,EACUC,EACAzL,GADA/f,KAAAwrB,WAAAA,EACAxrB,KAAA+f,SAAAA,SAGVwL,EAAArrB,UAAAurB,mBAAA,SACE1B,EACA2B,EACAlG,GAHF,IAAAja,EAAAvL,KAKQsqB,EAAStqB,KAAKwrB,WAAWnB,uBAAuBN,GAEtD,GAAIO,EAAO3pB,OAAQ,KACXgrB,EAAyBrB,EAAO5a,IAAG,SAACkc,OAClCjB,EAAQpf,EAAKwU,SAAS3C,IAAiBwO,EAAY,MACzD,GA2CR,SAAuBjB,GACrB,OAAOA,IAGc5oB,EAHmB4oB,EAAMkB,YAI1B,mBAAN9pB,GADhB,IAAuBA,EA/CX+pB,CAAcnB,GAChB,OAwBV,SACExoB,GAEA,GAAI4pB,EAAAA,aAAa5pB,GACf,OAAOA,EAGT,GAOiB6pB,EAPH7pB,EAQL6pB,GAA2B,mBAAbA,EAAIC,KAPzB,OAAOrB,EAAAA,KAAKsB,QAAQC,QAAQhqB,IAMhC,IAAmB6pB,EAHjB,OAAOzZ,EAAAA,GAAGpQ,GAnCKiqB,CAAmBzB,EAAMkB,YAAYH,EAAOlG,IAAQ9Z,KACzD2gB,EAAAA,SAGF,MAAM,IAAIC,MAAM,6CAIpB,OAAOtpB,EAAAA,OAAMnC,WAAA,EAAAkC,EAAI4oB,IAAwBjgB,KACvC6gB,EAAAA,UAAS,SAAEV,GAAmC,OAAgB,IAAhBA,IAC9CW,EAAAA,SAAQ,GACRH,EAAAA,SAGF,OAAO9Z,EAAAA,IAAG,IAIdgZ,EAAArrB,UAAAusB,uBAAA,eACQrnB,EAASpF,KAAK+f,SAAS3C,IAAIxU,EAAAA,QACjC,OAAQ8jB,EAAAA,iBAAiBtnB,EAAQ,wCAxCpCwB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLwiB,UATY7H,EAAAA,0JAcrB,GCPA,IAAAkL,GAAA,WAIE,SAAAA,EACUnB,EACAoB,EACAC,GAFA7sB,KAAAwrB,WAAAA,EACAxrB,KAAA4sB,YAAAA,EACA5sB,KAAA6sB,iBAAAA,SAGVF,EAAAzsB,UAAA4sB,wBAAA,SAAwB/C,WAChBe,EAAW9qB,KAAKwrB,WAAWX,yBAAyBd,GACpDgD,EAAa,IAAIxC,QACvB,IAAkB,IAAAyC,EAAA/f,EAAA6d,GAAQmC,EAAAD,EAAAvrB,QAAAwrB,EAAA/qB,KAAA+qB,EAAAD,EAAAvrB,OAAE,CAAvB,IAAMqY,EAAGmT,EAAA9qB,MACZ4qB,EAAWvhB,IAAIxL,KAAK6sB,iBAAiBK,mBAAmBpT,sGAE1D9Z,KAAK4sB,YAAYO,WAAWxtB,MAAMirB,KAAKmC,yBAhB1CnmB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPLwiB,UACA8D,EAAAA,0BAAoBC,EAAAA,yNAK7B,GCHA,IAAaC,GAAsB,IAAIC,EAAAA,eACrC,uCCUA,SAAAC,EACUC,EACAroB,EACA4N,EAGA4E,GALA5X,KAAAytB,IAAAA,EACAztB,KAAAoF,OAAAA,EACApF,KAAAgT,kBAAAA,EAGAhT,KAAA4X,SAAAA,EAMF5X,KAAA0tB,gBAAkB,GAClB1tB,KAAA2tB,SAAW,GA8NrB,OA5NEH,EAAAttB,UAAA0tB,SAAA,SAASC,GAAT,IAAAtiB,EAAAvL,KACE,OAAOyL,EAAAA,cAAc,CAACzL,KAAK8tB,MAAO9tB,KAAKgT,kBAAkB+a,cAAcriB,KACrEgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACsQ,EAAArQ,EAAA,GAAM8F,EAAA9F,EAAA,GACJiiB,EAAe5R,EAAKtU,SAE1B,MAAO,CAAEmmB,MADK1iB,EAAK2iB,aAAa9R,EAAMyR,EAAShc,GAC/Bmc,aAAYA,EAAEnc,WAAUA,KAE1C0M,EAAAA,UAAS,SAAEzS,WAAEmiB,EAAAniB,EAAAmiB,MAAOD,EAAAliB,EAAAkiB,aAAcnc,EAAA/F,EAAA+F,WAC5Bsc,EAAS5b,EAAAA,GAAG0b,OAChB,IAAsB,IAAA9F,EAAAlb,EAAA1B,EAAKqM,UAAY,IAAEyQ,EAAAF,EAAA1mB,QAAA4mB,EAAAnmB,KAAAmmB,EAAAF,EAAA1mB,OAAE,CACzC0sB,EADgB9F,EAAAlmB,MACCisB,OAAOD,EAAQH,EAAcH,EAAShc,qGAEzD,OAAOsc,IAETviB,EAAAA,qBAAoB,SAAEyiB,EAAG9uB,GACvB,GAAI8uB,EAAE1tB,SAAWpB,EAAEoB,OACjB,OAAO,EAET,IAAK,IAAIH,EAAI,EAAGA,EAAI6tB,EAAE1tB,OAAQH,IAC5B,GAAI6tB,EAAE7tB,KAAOjB,EAAEiB,GACb,OAAO,EAGX,OAAO,MAWbgtB,EAAAttB,UAAAouB,gBAAA,SAAgBN,GAAhB,IAAAziB,EAAAvL,KACE,OAAOA,KAAKgT,kBAAkB+a,YAAYriB,KACxCgE,EAAAA,IAAG,SAACmC,GACF,IAAKtG,EAAKnG,OAAOmpB,YAEf,OAAO,SAEHC,EAAqBjjB,EAAKnG,OAAOmpB,YAAYP,GAC7C5oB,EAASmG,EAAKkjB,wBAAuB,EAEzC,WACA5c,GAEF,OAAOzM,EAASA,EAAOspB,SAAW,SAKhClB,EAAAttB,UAAAguB,aAAR,SAAqB9R,EAAMyR,EAAShc,OAC5BzM,EAASpF,KAAK2uB,cAClBvS,EAAKtU,SACL,QACA+lB,EACAhc,GAEF,GAAIzM,GAAUA,EAAO6oB,MAAO,KACpBW,EAAYpvB,OAAOqvB,KAAKzS,EAAK6R,OACnC,OAAO7oB,EAAO6oB,MAAM3P,OAAM,SAACwQ,GAAQ,OAAAF,EAAUjpB,SAASmpB,KACjD,OAAKjB,GAIV7tB,KAAK+uB,uBAAuB3S,EAAMyR,GAC3B,KAJP7tB,KAAK+uB,uBAAuB3S,GACrB5c,OAAOqvB,KAAKzS,EAAK6R,SAO5BzuB,OAAA6H,eAAImmB,EAAAttB,UAAA,QAAK,KAAT,WACE,OAAOF,KAAKytB,IAAIuB,iBAAiBtjB,KAAK4S,EAAAA,OAAM,SAAClC,GAAQ,QAAEA,sCAGzD5c,OAAA6H,eAAImmB,EAAAttB,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK8tB,MAAMpiB,KAChB4S,EAAAA,OAAM,SAAClC,GAAQ,QAAEA,EAAKtU,WACtB4H,EAAAA,IAAG,SAAE0M,GAAe,OAAAA,EAAKtU,6CAUnB0lB,EAAAttB,UAAAyuB,cAAV,SACEM,EACAC,EACArB,EACAhc,GAEA,IAAK7R,KAAKoF,OAAOmpB,YACf,OAAO,SAEHC,EAAqBxuB,KAAKoF,OAAOmpB,YAAYU,GAEnD,OAAIpB,EACK7tB,KAAKmvB,wBACVF,EACAC,EACArB,EACAhc,GAIA2c,EACKxuB,KAAKyuB,wBAAuB,EAEjCS,EACArd,QAJJ,GASQ2b,EAAAttB,UAAAivB,wBAAV,SACEF,EACAC,EACArB,EACAhc,OAEM2c,EAAqBxuB,KAAKoF,OAAOmpB,YAAYU,GAEnD,IAAKT,EACH,OAAO,SAKHY,EAAgBZ,EAAmBX,GACrCW,EAAmBX,GACnB7tB,KAAKoF,OAAOmpB,YAAYV,GAE5B,IAAKuB,EACH,OAAO,SAGHC,EAAmBrvB,KAAKyuB,wBAAuB,EAEnDS,EACArd,GAGF,OAAIwd,EAAiBxvB,eAAeqvB,GAC3BG,EACEb,EAAmBX,GAAShuB,eAAeqvB,GAC7CV,EAAmBX,GACjB7tB,KAAKoF,OAAOmpB,YAAYV,GACd7tB,KAAKoF,OAAOmpB,YAAYV,QADtC,GAUCL,EAAAttB,UAAAuuB,wBAAV,SACEa,EACAJ,EACArd,WAEI0d,EAAU,EAGd,IAAKD,IAAqBzd,EACxB,OAAO0d,EAIT,GACED,EAAiBzd,IACjByd,EAAiBzd,GAAYhS,eAAeqvB,GAE5C,OAAmBI,EAAiBzd,OAIhC2d,EAAMxvB,KAAKgT,kBAAkBlB,gBAEnC,IAAiB,IAAA/F,EAAAkB,EAAAuiB,EAAIC,OAAO,EAAGD,EAAIE,QAAQ7d,KAAYsW,EAAApc,EAAAtK,QAAA0mB,EAAAjmB,KAAAimB,EAAApc,EAAAtK,OAAE,CAApD,IAAMkR,EAAEwV,EAAAhmB,MAETmtB,EAAiB3c,IACjB2c,EAAiB3c,GAAI9S,eAAeqvB,KAEpCK,EAAyBD,EAAiB3c,sGAG9C,OAAO4c,GASD/B,EAAAttB,UAAA6uB,uBAAR,SAA+B3S,EAAYyR,GACzC,GAAK/c,EAAAA,YAAL,CAGK9Q,KAAK2tB,SAASvR,EAAKtU,YAGtBkJ,QAAQ2e,KACN,8BAA8BnwB,OAAOqvB,KAAKzS,EAAK6R,OAAO2B,KAAK,OAAM,KAEnE5vB,KAAK2tB,SAASvR,EAAKtU,WAAY,OAG3B+nB,EAAWhC,GAAWzR,EAAKtU,SAC5B9H,KAAK0tB,gBAAgBmC,KACxB7e,QAAQ8e,KACN,8BAA8BD,EAAQ,gFAExC7vB,KAAK0tB,gBAAgBmC,IAAY,yBA1OtCjpB,EAAAA,sDAZQmpB,EAAAA,kBAMPld,SAHOlB,iCAeJ4P,EAAAA,UAAQ,CAAAxc,KACRsmB,EAAAA,OAAMxkB,KAAA,CAACymB,SAsOZE,KC1PA,IAAAwC,GAAA,WA4CE,SAAAA,EACU3f,EACAyF,EACAma,GAHV,IAAA1kB,EAAAvL,KACUA,KAAAqQ,GAAAA,EACArQ,KAAA8V,SAAAA,EACA9V,KAAAiwB,kBAAAA,EA3BDjwB,KAAAkwB,SAAoC,IAAItS,EAAAA,qBAAgBpW,GACxDxH,KAAAmwB,cAAoCnwB,KAAKiwB,kBAC/CE,cAEMnwB,KAAAowB,YAAkCpwB,KAAKkwB,SAASxkB,KACvD6S,EAAAA,UAAS,SAACsP,GAAW,OAACA,EAAUtb,EAAAA,GAAGsb,GAAWtiB,EAAK4kB,gBACnDtkB,EAAAA,IAAG,SAACwkB,GACF9kB,EAAK+kB,WAAaD,KAIbrwB,KAAAuwB,OAA+BvwB,KAAKkwB,SAASxkB,KACpD6S,EAAAA,UAAS,SAACsP,GAAW,OAAAtiB,EAAK0kB,kBAAkBrC,SAASC,MAG9C7tB,KAAAwwB,cAAoCxwB,KAAKmwB,cAAczkB,KAC9D6S,EAAAA,UAAS,SAACkS,GACR,OAAAllB,EAAK0kB,kBAAkB3B,gBAAgBmC,KAEzC7kB,EAAAA,wBAkBJ,OAxCEpM,OAAA6H,eAAa2oB,EAAA9vB,UAAA,UAAO,KAApB,SAAqBiC,GACnBnC,KAAKkwB,SAASzuB,KAAKU,oCAgCrB3C,OAAA6H,eAAI2oB,EAAA9vB,UAAA,aAAU,KAAd,SAAewwB,GACT1wB,KAAK2wB,cACP3wB,KAAK8V,SAAS8a,YAAY5wB,KAAKqQ,GAAG3I,cAAe1H,KAAK2wB,cAExD3wB,KAAK8V,SAAS+a,SAAS7wB,KAAKqQ,GAAG3I,cAAegpB,GAC9C1wB,KAAK2wB,aAAeD,uDA5CvB9oB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,+WACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAXzCpJ,EAAAA,kBAEAgR,EAAAA,iBAIOyU,uCAQNxlB,EAAAA,SAwCHgoB,EAzDA,GCSA,IAAAc,GAAA,WAIE,SAAAA,EAAoBC,EAAwBvF,GAAxBxrB,KAAA+wB,OAAAA,EAAwB/wB,KAAAwrB,WAAAA,SAE5CsF,EAAA5wB,UAAA8wB,cAAA,SAAc/rB,OACNgsB,EAAmBhsB,EAAIoP,WAAW,KAExC,IAAK4c,EACH,OAAO,MAGHC,EAAYjsB,EAAIksB,OAAO,GAE7B,OACEF,KACEjxB,KAAK+wB,OAAO3rB,OAAOI,KAAI,SACtBkmB,GACC,OAAAA,EAAMzK,MAAQyK,EAAMzK,KAAKmQ,mBAAqB1F,EAAM2F,OAASH,KAcrEJ,EAAA5wB,UAAAoxB,uBAAA,SACEC,EACAxH,EACAyH,EACAC,OAEMC,EAAkB1xB,KAAKwrB,WAAW1B,uBACtCC,GAEF,OAAI2H,EAAgB/wB,SACdX,KAAK2xB,cAAcJ,EAAaE,EAAkBC,KACpD1xB,KAAK+wB,OAAOa,cAAcJ,IACnB,IAMLV,EAAA5wB,UAAAyxB,cAAR,SACEJ,EACAM,EACA7H,GAEA,GACEuH,EAAYxsB,OAAS+sB,EAAAA,SAASC,cAC9BF,EAAUxd,WAAW,MACrBwd,EAAUlxB,OAAS,EACnB,KACMqxB,EAAqB,CACzBX,KAAMQ,EAAUV,OAAO,GACvB9R,UAAW2Q,GACXiC,SAAUjI,EACV/I,KAAM,CACJmQ,kBAAmB,CACjBrsB,KAAMwsB,EAAYxsB,KAClByH,GAAIqlB,KAMV,OADA7xB,KAAK+wB,OAAOmB,YAAWnvB,EAAA,CAAEivB,GAAahyB,KAAK+wB,OAAO3rB,UAC3C,EAGT,OAAO,uBA7EVwB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATEqrB,EAAAA,cAGP7I,kJAKT,qBC+CE,SAAA8I,EAEYhN,EACAiN,EACFC,EACAC,EACAC,EACEC,EACAC,GANA1yB,KAAAolB,eAAAA,EACAplB,KAAAqyB,WAAAA,EACFryB,KAAAsyB,UAAAA,EACAtyB,KAAAuyB,QAAAA,EACAvyB,KAAAwyB,UAAAA,EACExyB,KAAAyyB,oBAAAA,EACAzyB,KAAA0yB,qBAAAA,SAGZN,EAAAlyB,UAAA2rB,YAAA,SACEH,EACAlG,GAFF,IAAAja,EAAAvL,KAOE,OAAOA,KAAK0yB,qBACR1yB,KAAK0yB,qBACF7G,YAAYH,GACZhgB,KACC6S,EAAAA,UAAS,SAAC4P,GACR,OAAAA,EAAS5iB,EAAKonB,WAAWjH,EAAOlG,GAASjT,EAAAA,GAAG4b,MAGlDnuB,KAAK2yB,WAAWjH,EAAOlG,IAGrB4M,EAAAlyB,UAAAyyB,WAAR,SACEjH,EACAlG,GAFF,IAAAja,EAAAvL,KAIE,OAAOA,KAAKolB,eAAewN,qBAAqBlnB,KAC9C6S,EAAAA,UAAS,SAACgT,GACR,OAAAhmB,EAAK8mB,WACFQ,QAAQtB,EAAahmB,EAAKinB,UAAU/F,0BACpC/gB,KACC2gB,EAAAA,QACAyG,EAAAA,eAAevgB,EAAAA,GAAGgf,OAGxBhT,EAAAA,UAAS,SAAEzS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACinB,EAAAhnB,EAAA,GAAUwlB,EAAAxlB,EAAA,GACpB,OAAAgnB,EACIxnB,EAAKynB,oBAAoBzB,EAAawB,EAAUrH,EAAOlG,GACvDja,EAAK0nB,mBAAmB1B,EAAa7F,EAAOlG,OAK9C4M,EAAAlyB,UAAA8yB,oBAAR,SACEzB,EACAwB,EACArH,EACAlG,GAJF,IAAAja,EAAAvL,KAME,OAAOA,KAAKqyB,WAAWa,sBAAsB3B,GAAa7lB,KACxDC,EAAAA,KAAK,GACL4S,EAAAA,UAAS,SAACwL,GACR,OAAAxe,EAAKinB,UACF/G,mBAAmB1B,EAAgB2B,EAAOlG,GAC1C9Z,KAAKonB,EAAAA,eAAevgB,EAAAA,GAAGwX,OAE5Ble,EAAAA,IAAG,SAAEC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC+f,EAAA9f,EAAA,GAAage,EAAAhe,EAAA,IACG,IAAhB8f,GACFtgB,EAAKgnB,QAAQzF,wBAAwB/C,KAGzCra,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC+f,EAAA9f,EAAA,GAAage,EAAAhe,EAAA,GACX8lB,EAAYkB,EAAS1xB,OAASkwB,EAAY/kB,GAChD,OACkB,IAAhBqf,GACCH,EAAMzK,KAAKmQ,mBACX7lB,EAAK+mB,UAAUtB,cAAca,GASzBhG,EAPEtgB,EAAK+mB,UAAUhB,uBACpBC,EACAxH,EACAvE,EAAMvgB,IACN4sB,OAQFO,EAAAlyB,UAAA+yB,mBAAR,SACE1B,EACA7F,EACAlG,GAHF,IAAAja,EAAAvL,KAKQmzB,EAAsC,CAC1CpuB,KAAM+sB,EAAAA,SAASC,aACfvlB,GAAIxM,KAAKyyB,oBAAoBrV,IAAI,aAEnC,OAAOpd,KAAKqyB,WAAWQ,QAAQM,GAAwBznB,KACrD6S,EAAAA,UAAS,SAAC6U,GACR,OAAIA,EACK7nB,EAAK8mB,WAAWgB,aAAaF,GAAwBznB,KAC1DG,EAAAA,IAAG,SAACynB,GACF/nB,EAAK8mB,WAAWkB,iBAAiBhC,EAAa+B,KAEhD/U,EAAAA,UAAS,SAAC+U,GACR,OAAA/nB,EAAK8mB,WAAWgB,aAAa9B,GAAa7lB,KAExC4S,EAAAA,OAAM,SAACtC,GAAS,OAAAA,IAAUsX,OAG9B/U,EAAAA,UAAS,WACP,OAAAhT,EAAKynB,oBAAoBzB,EAAa6B,EAAc1H,EAAOlG,MAI1DjT,EAAAA,IAAG,OA5IT6f,EAAAoB,UAAY,mCAJpB5sB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAlBZqf,EAAAA,sBALA4J,EAAAA,kBAoBOe,UADAnE,UADApB,UAZPkI,EAAAA,2BAFAC,EAAAA,mTCPAC,QAAU,UACVC,OAAS,SACTC,MAAQ,SCAVC,GAAA,WAAA,SAAAA,IAIU9zB,KAAA+zB,cAAgB,IAAIC,IACpBh0B,KAAAi0B,oBAAsB,IAAID,IAC1Bh0B,KAAAk0B,mBAAqB,IAAIF,WAyBjCF,EAAA5zB,UAAAsL,IAAA,SACE2oB,EACAC,EACAC,QAAA,IAAAA,IAAAA,EAA2BC,GAAeX,SAEtCU,IAAaC,GAAeV,QAC9B5zB,KAAKu0B,MAAMv0B,KAAKi0B,oBAAqBE,EAAQC,GAE3CC,IAAaC,GAAeX,SAC9B3zB,KAAKu0B,MAAMv0B,KAAK+zB,cAAeI,EAAQC,GAErCC,IAAaC,GAAeT,OAC9B7zB,KAAKu0B,MAAMv0B,KAAKk0B,mBAAoBC,EAAQC,IAahDN,EAAA5zB,UAAAkd,IAAA,SACE+W,EACAE,EACAG,OAEIC,EACJ,YAJA,IAAAJ,IAAAA,EAA2BC,GAAeX,cAC1C,IAAAa,IAAAA,GDxDiC,GC2DzBH,GACN,KAAKC,GAAeV,OAClBa,EAAcz0B,KAAKi0B,oBAAoB7W,IAAI+W,GAC3C,MACF,KAAKG,GAAeT,MAClBY,EAAcz0B,KAAKk0B,mBAAmB9W,IAAI+W,GAC1C,MACF,QACEM,EAAcz0B,KAAK+zB,cAAc3W,IAAI+W,GAEzC,OAAIM,IAAgBD,EACXC,EAAY,GAEdA,GAGDX,EAAA5zB,UAAAq0B,MAAR,SAAcA,EAA2BJ,EAAgBhyB,OAEjDoV,GADWgd,EAAMnX,IAAI+W,IAAW,IACPnxB,OAAO,CAACb,IACvCoyB,EAAMngB,IAAI+f,EAAQ5c,wBAjFrB3Q,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHADd,GCHA,IAAA4tB,GAAA,WAcE,SAAAA,EACUC,EACAC,GADA50B,KAAA20B,IAAAA,EACA30B,KAAA40B,cAAAA,EAMZ,OAHEF,EAAAx0B,UAAA4K,SAAA,WACE9K,KAAK40B,cAAcppB,IAAIxL,KAAK60B,YAAa70B,KAAK20B,IAAK30B,KAAK80B,kCAf3Dza,EAAAA,UAASxT,KAAA,CAAC,CACTgB,SAAU,6DANQktB,EAAAA,mBAGXjB,2CAMN9rB,EAAAA,2BAEAA,EAAAA,SAWH0sB,EAtBA,GCAA,IAAAM,GAAA,WAKA,SAAAA,KAK8B,2BAL7B7sB,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACssB,IACf7rB,QAAS,CAAC6rB,QAEkBM,EAV9B,GCWAC,GAAA,WAIE,SAAAA,EAAsB7vB,GAAApF,KAAAoF,OAAAA,SAUtB6vB,EAAA/0B,UAAAg1B,cAAA,SACEC,EACA7rB,GAEA,OAAOtJ,KAAKo1B,WAAWD,EAAS7rB,GAASoC,KAAK2gB,EAAAA,MAAK,SAACtqB,GAAK,OAAM,IAANA,MAWnDkzB,EAAA/0B,UAAAk1B,WAAR,SACED,EACA7rB,GAFF,IAAAiC,EAAAvL,KAoBE,OAhBwB,IAAIq1B,EAAAA,WAAU,SAACC,OAC/BC,EAAahqB,EAAKiqB,cAAclsB,GAEhCmsB,EAAuB,IAAIC,qBAAoB,SAAC/M,GACpD2M,EAAS7zB,KAAKknB,IAFS,CAAE4M,WAAUA,IAKrC,OADAE,EAAqBE,QAAQR,GAC7B,WACEM,EAAqBG,gBAEtBlqB,KACDmqB,EAAAA,QAAO,SAAElN,GAAyC,OAAAA,IAClDjZ,EAAAA,IAAG,SAAE8Y,GAAqC,OAAAA,EAAMsN,iBAChDlqB,EAAAA,yBAMIqpB,EAAA/0B,UAAAs1B,cAAR,SAAsBlsB,GACpB,GAAIA,EAAQisB,WACV,OAAOjsB,EAAQisB,eAEXQ,EAAe/1B,KAAW,OAChC,OACE+1B,EAAaC,iBACbD,EAAaC,gBAAgBC,mBAEtBF,EAAaC,gBAAgBC,wBAJtC,uBAzDHrvB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATL+L,2HAQT,GCCA,IAAAqjB,GAAA,WAME,SAAAA,EAC+B3M,EACnBnkB,EACA+wB,GAFmBn2B,KAAAupB,WAAAA,EACnBvpB,KAAAoF,OAAAA,EACApF,KAAAm2B,oBAAAA,EAEVn2B,KAAKo2B,mBAAqBhxB,EAAO4wB,gBAC7B5wB,EAAO4wB,gBAAgBK,SACvBjN,EAAAA,qBAAqBC,eAa3B6M,EAAAh2B,UAAAme,KAAA,SACE8W,EACA7rB,GAEA,OAAItJ,KAAKs2B,qBAAqBhtB,GAAW,IAAI6f,cACpC5W,EAAAA,IAAG,GAEHvS,KAAKm2B,oBAAoBjB,cAAcC,EAAS7rB,IAInD4sB,EAAAh2B,UAAAo2B,oBAAR,SACEC,GAEA,OACE5M,EAAAA,iBAAiB3pB,KAAKupB,aACtBgN,IAA2BnN,EAAAA,qBAAqBC,SAC/CkN,IAA2BnN,EAAAA,qBAAqBoN,OAC/Cx2B,KAAKo2B,qBAAuBhN,EAAAA,qBAAqBC,6BA5CxDziB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAM+BtH,OAAM8hB,WAAA,CAAA,CAAAvc,KAA9CsmB,EAAAA,OAAMxkB,KAAA,CAACykB,EAAAA,sBAfHzY,SAEAoiB,qKAMT,GCZA,IAAAwB,GAAA,WAmDE,SAAAA,EACUC,EACAjC,EACAG,EAGA+B,GALA32B,KAAA02B,IAAAA,EACA12B,KAAAy0B,YAAAA,EACAz0B,KAAA40B,cAAAA,EAGA50B,KAAA22B,mBAAAA,EA1BA32B,KAAA6U,OAAgC,IAAI1G,EAAAA,cAAsB,GAEpEnO,KAAA4W,aAAe,IAAIxM,EAAAA,aAwHrB,OA7FUqsB,EAAAv2B,UAAA02B,iBAAR,WACE52B,KAAK02B,IAAIrZ,QACTrd,KAAK4W,aAAavJ,cAClBrN,KAAK4W,aAAe,IAAIxM,EAAAA,aAEpBpK,KAAK62B,cACP72B,KAAKmpB,eAELnpB,KAAK82B,UAITL,EAAAv2B,UAAA+U,YAAA,SAAY8hB,GACNA,EAAQC,UACVh3B,KAAK42B,oBAIDH,EAAAv2B,UAAAipB,aAAR,WAAA,IAAA5d,EAAAvL,KACEA,KAAK6U,OAAO/F,MAAK,OACXqK,EAAcnZ,KAAKi3B,eAAej3B,KAAK02B,IAAIvB,QAAQztB,eAIzD1H,KAAK4W,aAAapL,IAChBxL,KAAK22B,mBACFtY,KAAKlF,EAAanZ,KAAK62B,eACvBpqB,UAAS,WACRlB,EAAKurB,SACLvrB,EAAKsJ,OAAO/F,MAAK,OAKjB2nB,EAAAv2B,UAAA42B,OAAR,WACE92B,KAAKk3B,aAAa5C,GAAeV,QACjC5zB,KAAKk3B,aAAa5C,GAAeX,SACjC3zB,KAAKk3B,aAAa5C,GAAeT,QAG3B4C,EAAAv2B,UAAAg3B,aAAR,SAAqB7C,GAArB,IAAA9oB,EAAAvL,KACMgM,EACFhM,KAAK40B,cAAcxX,IAAIpd,KAAKg3B,SAAU3C,GN/FT,GMkG1BroB,GAAaqoB,IAAaC,GAAeX,UAC5C3nB,EAAY,CAAChM,KAAKy0B,cAKf90B,MAAMw3B,QAAQnrB,KACjBA,EAAY,CAACA,IAGfA,EAAUE,QAAO,SAAC8f,GAChBzgB,EAAKpL,OAAO6rB,MAIRyK,EAAAv2B,UAAAC,OAAR,SAAei3B,GACb,GAAIA,aAAyBC,EAAAA,iBAC3Br3B,KAAK02B,IAAIY,gBAAgBF,QACpB,GAAIA,aAAyBrC,EAAAA,YAAa,CAClC/0B,KAAK02B,IAAIa,mBAAkB,EAEtC,CACEC,UAAWx3B,KAAKy3B,kBAMfC,iBAUDjB,EAAAv2B,UAAA+2B,eAAR,SAAuB9B,GACrB,OAAIA,aAAmBwC,YACdxC,EAEFn1B,KAAKi3B,eAAe9B,EAAQyC,gBAGrCnB,EAAAv2B,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,mCArIrBgN,EAAAA,UAASxT,KAAA,CAAC,CACTgB,SAAU,0DATVgwB,EAAAA,wBADA9C,EAAAA,mBAOOjB,UAHAoC,wCASNluB,EAAAA,+BAEAA,EAAAA,6BAKAA,EAAAA,sBAEAmH,EAAAA,UA0HHsnB,EAzJA,GCAA,IAAAqB,GAAA,WAKA,SAAAA,KAM2B,2BAN1B3vB,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACquB,IACfhuB,UAAW,CAACqrB,IACZjrB,QAAS,CAAC4tB,QAEeqB,EAX3B,iBCgBE,SAAAC,EACYC,EACA5yB,EACkBgB,EACG6xB,GAHrBj4B,KAAAg4B,yBAAAA,EACAh4B,KAAAoF,OAAAA,EACkBpF,KAAAoG,SAAAA,EACGpG,KAAAi4B,SAAAA,EARjCj4B,KAAAk4B,kBAA8B,GAEtBl4B,KAAAm4B,oBAA+C,UA6B7CJ,EAAA73B,UAAAk4B,aAAV,SAAuBC,OACfC,EAAkBt4B,KAAKoF,OAAOga,cAAciZ,GAUlD,OATKC,GACEt4B,KAAKk4B,kBAAkBvyB,SAAS0yB,KACnCr4B,KAAKk4B,kBAAkB71B,KAAKg2B,GAC5BrnB,QAAQ8e,KACN,iEAAiEuI,EAAQ,OACzE,uEAICC,EAAkBA,EAAgBjZ,UAAY,MAGvD0Y,EAAA73B,UAAAq4B,0BAAA,SAA0BF,OAClBhZ,EAAYrf,KAAKo4B,aAAaC,GACpC,IAAKhZ,EACH,OAAO,SAEHmZ,EAAUx4B,KAAKg4B,yBAAyBS,wBAC5CpZ,GAGF,OAAKmZ,IACHxnB,QAAQ8e,KACN,0DAA0DuI,EAAQ,OAClE,iFAEK,OAKXN,EAAA73B,UAAAw4B,eAAA,SAAeL,OACPhZ,EAAYrf,KAAKo4B,aAAaC,GACpC,MAA4B,iBAAdhZ,IAA2BA,GAAa,IAAI1Z,SAAS,MAGrEoyB,EAAA73B,UAAAy4B,iBAAA,SACExO,EACArU,GAFF,IAAAvK,EAAAvL,KAIE,OAAO,IAAIksB,QAAO,SAACC,GACX,IAAArgB,EAAAnJ,EAAA4I,EAAA6sB,aAAAjO,GAAAyO,MAAA,KAAA,GAACvH,EAAAvlB,EAAA,GAAMjE,EAAAiE,EAAA,GAET+sB,EAASttB,EAAK4sB,oBAAoB9G,GAkBtC,GAhBKwH,IACCxH,GACFwH,EAAS/iB,EAASvP,cAAc,UAChCgF,EAAK4sB,oBAAoB9G,GAAQwH,EACjCA,EAAOtW,aAAa,MAAO8O,GAC3Bvb,EAASpP,YAAY6E,EAAKnF,SAASpF,KAAM63B,GACrCC,EAAAA,kBAAkBvtB,EAAK0sB,YACzBY,EAAOE,OAAM,WACXF,EAAOE,OAAS,QAIpBF,EAAS,IAITA,EAAOE,OAAQ,KAIXC,EAAgBH,EAAOE,OAC7BF,EAAOE,OAAM,WACXC,IACA7M,EAAQtkB,SAGVskB,EAAQtkB,0BA1GfjB,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDARxBmyB,EAAAA,gCAMO7N,EAAAA,0CAWJC,EAAAA,OAAMxkB,KAAA,CAACqyB,EAAAA,4CACP7N,EAAAA,OAAMxkB,KAAA,CAACykB,EAAAA,6OCpBZ,IAAA6N,GAAA,WAyCE,SAAAA,EAEqBC,EAEAnS,EACAoS,EAEAC,EACAC,EACAC,EAEA/L,EACAgM,EAEAC,EAEAC,EAEA/M,EAEAgN,EAEAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEZC,EAEAC,EACYC,EAEZC,GA7CY/6B,KAAAo5B,KAAAA,EAEAp5B,KAAAinB,KAAAA,EACAjnB,KAAAq5B,SAAAA,EAEAr5B,KAAAs5B,SAAAA,EACAt5B,KAAAu5B,iBAAAA,EACAv5B,KAAAw5B,gBAAAA,EAEAx5B,KAAAytB,IAAAA,EACAztB,KAAAy5B,SAAAA,EAEAz5B,KAAA05B,cAAAA,EAEA15B,KAAA25B,cAAAA,EAEA35B,KAAA4sB,YAAAA,EAEA5sB,KAAA45B,KAAAA,EAEA55B,KAAA65B,aAAAA,EAEA75B,KAAA85B,QAAAA,EACA95B,KAAA+5B,cAAAA,EACA/5B,KAAAg6B,cAAAA,EACAh6B,KAAAi6B,iBAAAA,EACAj6B,KAAAk6B,UAAAA,EAEAl6B,KAAAm6B,QAAAA,EAEAn6B,KAAAo6B,SAAAA,EACAp6B,KAAAq6B,SAAAA,EACAr6B,KAAAs6B,SAAAA,EAEAt6B,KAAAu6B,KAAAA,EACAv6B,KAAAw6B,YAAAA,EACAx6B,KAAAy6B,YAAAA,EACAz6B,KAAA06B,UAAAA,EACA16B,KAAA26B,YAAAA,EAEZ36B,KAAA46B,kCAAAA,EAEA56B,KAAA66B,qBAAAA,EACY76B,KAAA86B,qBAAAA,EAEZ96B,KAAA+6B,OAAAA,6BArDVn0B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAlCZk0B,EAAAA,YAAW1Z,WAAA,CAAA,CAAAvc,KAyCRwc,EAAAA,kBAtCHsH,EAAAA,YAAWvH,WAAA,CAAA,CAAAvc,KAwCRwc,EAAAA,kBAzCH0Z,EAAAA,gBAAe3Z,WAAA,CAAA,CAAAvc,KA0CZwc,EAAAA,kBAtCHuH,EAAAA,gBAAexH,WAAA,CAAA,CAAAvc,KAwCZwc,EAAAA,kBA1CH2Z,EAAAA,wBAAuB5Z,WAAA,CAAA,CAAAvc,KA2CpBwc,EAAAA,kBA1CH4Z,EAAAA,uBAAsB7Z,WAAA,CAAA,CAAAvc,KA2CnBwc,EAAAA,kBAzCHwO,EAAAA,WAAUzO,WAAA,CAAA,CAAAvc,KA2CPwc,EAAAA,kBApCH6Z,EAAAA,gBAAe9Z,WAAA,CAAA,CAAAvc,KAqCZwc,EAAAA,kBA1CH8Z,EAAAA,qBAAoB/Z,WAAA,CAAA,CAAAvc,KA4CjBwc,EAAAA,kBA3CHhE,EAAAA,qBAAoB+D,WAAA,CAAA,CAAAvc,KA6CjBwc,EAAAA,kBAlCH6L,EAAAA,mBAAkB9L,WAAA,CAAA,CAAAvc,KAoCfwc,EAAAA,kBA9CH+Z,EAAAA,YAAWha,WAAA,CAAA,CAAAvc,KAgDRwc,EAAAA,kBA9CHga,EAAAA,oBAAmBja,WAAA,CAAA,CAAAvc,KAgDhBwc,EAAAA,kBA3CHia,EAAAA,eAAcla,WAAA,CAAA,CAAAvc,KA6CXwc,EAAAA,kBA9CHka,EAAAA,qBAAoBna,WAAA,CAAA,CAAAvc,KA+CjBwc,EAAAA,kBAhDHma,EAAAA,qBAAoBpa,WAAA,CAAA,CAAAvc,KAiDjBwc,EAAAA,kBAlDHoa,EAAAA,wBAAuBra,WAAA,CAAA,CAAAvc,KAmDpBwc,EAAAA,kBA9CHqa,EAAAA,iBAAgBta,WAAA,CAAA,CAAAvc,KA+Cbwc,EAAAA,kBAhDH4E,EAAAA,eAAc7E,WAAA,CAAA,CAAAvc,KAkDXwc,EAAAA,kBA7DHsa,EAAAA,gBAAeva,WAAA,CAAA,CAAAvc,KA+DZwc,EAAAA,kBA3DHua,EAAAA,gBAAexa,WAAA,CAAA,CAAAvc,KA4DZwc,EAAAA,kBAvEHwa,EAAAA,gBAAeza,WAAA,CAAA,CAAAvc,KAwEZwc,EAAAA,kBA/CHya,EAAAA,YAAW1a,WAAA,CAAA,CAAAvc,KAiDRwc,EAAAA,kBArDH0a,EAAAA,mBAAkB3a,WAAA,CAAA,CAAAvc,KAsDfwc,EAAAA,kBArDH2a,EAAAA,mBAAkB5a,WAAA,CAAA,CAAAvc,KAsDfwc,EAAAA,kBArDH2E,EAAAA,iBAAgB5E,WAAA,CAAA,CAAAvc,KAsDbwc,EAAAA,kBArDH4a,EAAAA,mBAAkB7a,WAAA,CAAA,CAAAvc,KAsDfwc,EAAAA,kBApDH6a,EAAAA,kCAAiC9a,WAAA,CAAA,CAAAvc,KAqD9Bwc,EAAAA,kBApDH8a,EAAAA,qBAAoB/a,WAAA,CAAA,CAAAvc,KAsDjBwc,EAAAA,kBArDH+a,EAAAA,qBAAoBhb,WAAA,CAAA,CAAAvc,KAuDjBwc,EAAAA,kBAtFgBgb,EAAAA,yoCAArB,qBCiCE,SAAAC,EACU9F,EACA+F,EACA1c,EACAsS,EACAqK,EACA5mB,EACA1Q,EACqBmkB,GAPrBvpB,KAAA02B,IAAAA,EACA12B,KAAAy8B,gBAAAA,EACAz8B,KAAA+f,SAAAA,EACA/f,KAAAqyB,WAAAA,EACAryB,KAAA08B,wBAAAA,EACA18B,KAAA8V,SAAAA,EACA9V,KAAAoF,OAAAA,EACqBpF,KAAAupB,WAAAA,EA6GjC,OA1GEiT,EAAAt8B,UAAA4K,SAAA,WACO9K,KAAK28B,0BAGN38B,KAAKy8B,gBAAgB/D,eAAe14B,KAAK48B,mBAAmBnT,UAC9DzpB,KAAK68B,qBAEL78B,KAAK88B,oBAIDN,EAAAt8B,UAAAy8B,sBAAR,eACQjT,EAAQC,EAAAA,iBAAiB3pB,KAAKupB,YAC9BK,GACJ5pB,KAAKoF,OAAOga,cAAcpf,KAAK48B,mBAAmBnT,WAAa,IAC/DI,WACF,QAASH,GAASE,IAGZ4S,EAAAt8B,UAAA48B,gBAAR,eACQtE,EAAUx4B,KAAKy8B,gBAAgBlE,0BACnCv4B,KAAK48B,mBAAmBnT,UAGtB+O,IACFx4B,KAAK+8B,OAAS/8B,KAAK02B,IAAIY,gBACrBkB,OACAhxB,EACAxH,KAAKg9B,2BAGHh9B,KAAKqyB,WAAW4K,uBAClBj9B,KAAKk9B,qBAAqBl9B,KAAK+8B,OAAOI,SAASz1B,iBAKvC80B,EAAAt8B,UAAA28B,mBAAd,kB1EdwB97B,OAASq8B,SAAeC,sE0Ee1B,MAAA,CAAA,EAAMr9B,KAAKy8B,gBAAgB9D,iBAC7C34B,KAAK48B,mBAAmBnT,SACxBzpB,KAAK8V,yBAFDwnB,EAAcxxB,EAAAxK,UAMlBtB,KAAKu9B,WAAav9B,KAAK8V,SAASvP,cAAc+2B,GAExCE,EAAmBx9B,KAAKy9B,yBAE9Bz9B,KAAKu9B,WAAWG,MAAKt9B,EAAA,GAChBJ,KAAK+f,SAAS3C,IAAI+b,IAAa,CAClC9X,iBAAkBmc,EAClBA,iBAAgBA,IAGlBx9B,KAAK8V,SAASpP,YACZ1G,KAAK02B,IAAIvB,QAAQztB,cAAckwB,cAC/B53B,KAAKu9B,YAGHv9B,KAAKqyB,WAAW4K,uBAClBj9B,KAAKk9B,qBAAqBl9B,KAAKu9B,qB1EpC5B,KADoCI,YACzBA,EAAIzR,UAAU,SAAUC,EAASyR,GAC/C,SAASC,EAAU17B,GAAS,IAAMI,EAAK86B,EAAU57B,KAAKU,IAAW,MAAOG,GAAKs7B,EAAOt7B,IACpF,SAASw7B,EAAS37B,GAAS,IAAMI,EAAK86B,EAAiB,MAAEl7B,IAAW,MAAOG,GAAKs7B,EAAOt7B,IACvF,SAASC,EAAK4rB,GAAUA,EAAOjsB,KAAOiqB,EAAQgC,EAAOhsB,OAAS,IAAIw7B,EAAE,SAAUxR,GAAWA,EAAQgC,EAAOhsB,SAAW8pB,KAAK4R,EAAWC,GACnIv7B,GAAM86B,EAAYA,EAAUx8B,MAAME,EAASq8B,GAAc,KAAK37B,UAL/D,IAAmBV,EAASq8B,EAAYO,EAAGN,G0E0CxCb,EAAAt8B,UAAAu9B,uBAAR,WAGE,MAAO,CACLM,IAAK/9B,KAAK48B,mBAAmBmB,IAC7B/c,MAAOhhB,KAAKqyB,WAAW2L,iBAAiBh+B,KAAK48B,mBAAmBmB,OAI5DvB,EAAAt8B,UAAA88B,wBAAR,eACQiB,GACHj+B,KAAKoF,OAAOga,cAAcpf,KAAK48B,mBAAmBnT,WAAa,IAC7DhhB,WAAa,GAClB,OAAOgZ,EAAAA,SAASthB,OAAO,CACrBsI,UAAS1F,EAAA,CACP,CACE2F,QAAS2Y,GACT6c,SAAUl+B,KAAKy9B,2BAEdQ,GAELE,OAAQn+B,KAAK+f,YAITyc,EAAAt8B,UAAAg9B,qBAAR,SAA6B/H,GAC3Bn1B,KAAK08B,wBAAwB0B,qBAC3Bp+B,KAAK48B,mBAAmByB,WACxBlJ,EACAn1B,KAAK8V,WAIT0mB,EAAAt8B,UAAAkN,YAAA,WACMpN,KAAK+8B,QACP/8B,KAAK+8B,OAAOuB,UAEVt+B,KAAKu9B,YACPv9B,KAAKu9B,WAAWjgB,8BA3HrBjD,EAAAA,UAASxT,KAAA,CAAC,CACTgB,SAAU,oEAdVgwB,EAAAA,wBAUOE,UAhBPtW,EAAAA,gBAWAsO,EAAAA,kBAEAwO,EAAAA,+BARAxlB,EAAAA,iBAKAqS,EAAAA,iBA0B2C5rB,OAAM8hB,WAAA,CAAA,CAAAvc,KAA9CsmB,EAAAA,OAAMxkB,KAAA,CAACykB,EAAAA,8DAbTtjB,EAAAA,SA0HHw0B,KCtJA,IAAAgC,GAAA,WAIA,SAAAA,KAMkC,2BANjCr2B,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,cACVG,UAAW,GACXL,aAAc,CAACo0B,IACf3zB,QAAS,CAAC2zB,QAEsBgC,EAVlC,GCAAC,GAAA,WA4FE,SAAAA,EACYpM,EACAqK,EACA5mB,EACAqD,EACA/T,EACAs5B,GANZ,IAAAnzB,EAAAvL,KACYA,KAAAqyB,WAAAA,EACAryB,KAAA08B,wBAAAA,EACA18B,KAAA8V,SAAAA,EACA9V,KAAAmZ,YAAAA,EACAnZ,KAAAoF,OAAAA,EACApF,KAAA0+B,MAAAA,EAvDqB1+B,KAAA2+B,WAAY,EACR3+B,KAAA4+B,eAAgB,EACZ5+B,KAAA6+B,YAAa,EAI7C7+B,KAAA8+B,UAAY,IAAIlhB,EAAAA,qBAAwBpW,GAQxCxH,KAAA++B,MAAqC/+B,KAAK8+B,UAAUpzB,KAC3D6S,EAAAA,UAAS,SAAC8V,GAAY,OAAA9oB,EAAK8mB,WAAW2M,eAAe3K,KACrDxoB,EAAAA,IAAG,SAACijB,GAAQ,OAAAvjB,EAAK0zB,sBAAsBnQ,MAGhC9uB,KAAAk/B,YAELl/B,KAAK++B,MAAMrzB,KACbgE,EAAAA,IAAG,SAACof,GAAQ,OAACA,GAAQA,EAAKqQ,WAAarQ,EAAKqQ,WAAa,KACzDvzB,EAAAA,qBAAoB,SACjByiB,EAAG9uB,GACF,OAAA8uB,EAAE1tB,SAAWpB,EAAEoB,SAAW0tB,EAAE7oB,KAAI,SAAE6K,EAAI2L,GAAU,OAAA3L,EAAG0tB,MAAQx+B,EAAEyc,GAAO+hB,SAIlE/9B,KAAA4W,aAAe,IAAIxM,EAAAA,aAuF7B,OA7HE5K,OAAA6H,eACIo3B,EAAAv+B,UAAA,WAAQ,KAIZ,WACE,OAAOF,KAAK8+B,UAAU38B,WANxB,SACakyB,GACXr0B,KAAK8+B,UAAUr9B,KAAK4yB,GACpBr0B,KAAK8V,SAAS+a,SAAS7wB,KAAKmZ,YAAYzR,cAAe2sB,oCAgEzDoK,EAAAv+B,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK4W,aAAapL,IAChBxL,KAAKk/B,YAAYzyB,UAAS,SAAC0yB,GACzB5zB,EAAKqzB,cAAgBO,GAAcA,EAAWx+B,OAAS,EACvD4K,EAAK6zB,sBAAwBD,EAAaA,EAAWx+B,OAAS,EAC9D4K,EAAKozB,UAAYpzB,EAAK6zB,sBAAwB,MAKpDX,EAAAv+B,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,eAQpBoxB,EAAAv+B,UAAAm/B,SAAA,SAASC,GACHA,GACFt/B,KAAKo/B,wBAEPp/B,KAAK2+B,UAAY3+B,KAAKo/B,sBAAwB,EAC1Cp/B,KAAK0+B,OACP1+B,KAAK0+B,MAAMhH,gBAIf+G,EAAAv+B,UAAAq/B,yBAAA,SAAyBpV,GAEvB,MAAO,CAAEhB,aADYnpB,KAAKw/B,wBAAwBrV,KAQ5CsU,EAAAv+B,UAAAs/B,wBAAR,SAAgCrV,GAC9B,GAAInqB,KAAKoF,OACP,OAASpF,KAAW,OAAeof,cAAc+K,IAAkB,IAChEhB,cAICsV,EAAAv+B,UAAA++B,sBAAR,SAA8BnQ,GACxBA,GAAQ9uB,KAAKqyB,WAAW4K,uBAC1Bj9B,KAAKk9B,qBAAqBpO,IAItB2P,EAAAv+B,UAAAg9B,qBAAR,SAA6BpO,GAC3B9uB,KAAK08B,wBAAwB0B,qBAC3BtP,EAAKuP,WACLr+B,KAAKmZ,YAAYzR,cACjB1H,KAAK8V,+BArIVlO,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,8BACVC,SAAA,seACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAbzC4e,EAAAA,kBAIAwO,EAAAA,+BARAxlB,EAAAA,iBALAhR,EAAAA,kBAQAqjB,EAAAA,iBAVAqU,EAAAA,uDAgCCz3B,EAAAA,yBASAC,EAAAA,YAAWpB,KAAA,CAAC,2CACZoB,EAAAA,YAAWpB,KAAA,CAAC,4CACZoB,EAAAA,YAAWpB,KAAA,CAAC,oBAAiB,CAAA9B,KAAGiD,EAAAA,SAkHnCy2B,EA/JA,GCAA,OAAA,qBAYE7K,OAAS,SACTC,MAAQ,SCbV6L,GAAA,WAcE,SAAAA,EAAsBt6B,GAAApF,KAAAoF,OAAAA,EAFdpF,KAAA2/B,WAAa,IAAI/hB,EAAAA,gBAA4B,WAIrD8hB,EAAAx/B,UAAA0/B,aAAA,WACE,OAAO5/B,KAAK2/B,YAGdD,EAAAx/B,UAAAsL,IAAA,SAAIsO,EAAa3H,OACT0tB,EAAkB7/B,KAAKoF,OAAO06B,UAAUt6B,KAAI,SAChDu6B,GAAY,OAAAA,EAASjmB,MAAQA,IAG/B,GAAI+lB,EAAO,KACHG,EAAuBhgC,KAAK2/B,WAAWx9B,MAC7C69B,EAASvQ,OAAOzvB,KAAKigC,wBAAwBnmB,GAAM,EAAG,CACpD3H,OAAQA,EACR+tB,QAASL,EAAMK,QACf7L,SAAUwL,EAAMxL,SAChBva,IAAKA,IAEP9Z,KAAK2/B,WAAWl+B,KAAKu+B,KAIzBN,EAAAx/B,UAAAod,OAAA,SAAOxD,GAKL,GAJwB9Z,KAAKoF,OAAO06B,UAAUt6B,KAAI,SAChDu6B,GAAY,OAAAA,EAASjmB,MAAQA,IAGpB,KACLkmB,EAAuBhgC,KAAK2/B,WAAWx9B,MAC3C69B,EAAWA,EAAS1hB,OAAM,SAACyhB,GAAY,OAAAA,EAASjmB,MAAQA,IACxD9Z,KAAK2/B,WAAWl+B,KAAKu+B,KAIzBN,EAAAx/B,UAAAigC,eAAA,SACEhuB,EACAkiB,EACAjiB,GAEAD,EAAsBA,EAAiB,WACzBC,EAAY,OAAEguB,WACtB92B,EACJ+qB,IAAagM,GAAuBxM,MAAQ,CAAEyM,OAAQ,OAAU,GAElEnuB,EAAOouB,eAAej3B,IAGdo2B,EAAAx/B,UAAA+/B,wBAAV,SAAkCnmB,GAKhC,QAJIkC,EAAgBhc,KAAKoF,OAAO06B,UAAUU,UAAS,SACjDT,GAAY,OAAAA,EAASjmB,MAAQA,iBAI7BkC,QACMykB,EAAqBC,EAAKt7B,OAAO06B,UAAU9jB,GACjD,GAAIykB,EAAU,KAENZ,EADuBa,EAAKf,WAAWx9B,MACdq+B,UAAS,SACtCT,GAAY,OAAAA,EAASjmB,MAAQ2mB,EAAS3mB,MAExC,GAAI+lB,GAAS,eACJA,EAAQ,YATd7jB,EAAQ,GAAC,gDAahB,OAAO,uBAxEVpV,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALZ65B,6HAJF,GCAA,IAAAC,GAAA,WAgBE,SAAAA,EAAoBC,GAAA7gC,KAAA6gC,gBAAAA,EAJpB7gC,KAAA2/B,WAAqC3/B,KAAK6gC,gBACvCjB,eACAl0B,KAAKo1B,EAAAA,UAAUC,EAAAA,iBAiCpB,OA7BEH,EAAA1gC,UAAAigC,eAAA,SAAeJ,EAAoB3tB,GACjCpS,KAAK6gC,gBAAgBV,eACnBJ,EAAS5tB,OACT4tB,EAAS1L,SACTjiB,IAOJwuB,EAAA1gC,UAAAkgC,KAAA,SAAKhuB,GACWA,EAAY,OAAEguB,QAG9BQ,EAAA1gC,UAAA8gC,QAAA,SAAQ5uB,GACFpS,KAAKihC,UAAwB7uB,EAAY,OAAE8uB,cACjB9uB,EAAY,OAAa,YAAEgG,SAG3DwoB,EAAA1gC,UAAAihC,QAAA,SAAQ/uB,GACFpS,KAAKihC,UAAwB7uB,EAAY,OAAEgvB,kBACjBhvB,EAAY,OAAiB,gBAAEgG,SAIvDwoB,EAAA1gC,UAAA+gC,UAAR,SAAkB9L,GAChB,QAASA,GAAWA,aAAmBwC,iCAvC1C/vB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,eACVC,SAAA,6TACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlCuuB,MA4CTkB,EA/CA,GCEA,IAAaS,GAAwC,CACnDvB,UAAW,CACT,CACEhmB,IAAK,cACLomB,QAAS,0BAEX,CACEpmB,IAAK,mBACLua,SAAUgM,GAAuBxM,MACjCqM,QAAS,wBAEX,CACEpmB,IAAK,yBACLomB,QAAS,iCAEX,CAAEpmB,IAAK,kBAAmBomB,QAAS,+BACnC,CAAEpmB,IAAK,SAAUomB,QAAS,4BClB9BoB,GAAA,WAUE,SAAAA,EACUC,EACAV,GADA7gC,KAAAuhC,MAAAA,EACAvhC,KAAA6gC,gBAAAA,EAUZ,OAPES,EAAAphC,UAAA4K,SAAA,WACE9K,KAAK6gC,gBAAgBr1B,IAAIxL,KAAKwhC,WAAYxhC,KAAKuhC,MAAM75B,gBAGvD45B,EAAAphC,UAAAkN,YAAA,WACEpN,KAAK6gC,gBAAgBvjB,OAAOtd,KAAKwhC,iCAjBpCnnB,EAAAA,UAASxT,KAAA,CAAC,CACTgB,SAAU,4DAJkCE,EAAAA,kBACrC23B,0CAMN13B,EAAAA,SAeHs5B,EAtBA,GCAA,IAAAG,GAAA,WAgBA,SAAAA,KAoB6B,2BApB5Bt5B,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA+G,EAAAA,WACA9G,EAAAA,aAAaC,WAAW64B,KAE1Bj5B,aAAc,CAACw4B,GAAmBU,IAClCz4B,QAAS,CAACy4B,IACVhiB,gBAAiB,CAACshB,IAElBn4B,UAAW,CACT,CAAEC,QAASi4B,GAAgBh4B,YAAaC,EAAAA,QACxC,CACEF,QAASg5B,EAAAA,gBACTC,WAAYC,GACZ7f,KAAM,CAACkX,EAAAA,yBAA0BnF,IACjCje,OAAO,QAIgB4rB,EApC7B,GAyCA,SAAgBG,GACd5J,EACApD,GAQA,OANa,eACL4D,EAAUR,EAAyBS,wBACvCmI,IAEFhM,EAAcppB,IAAI,gBAAe,EAAgB8oB,GAAeV,SCjDpE,IAAAiO,GAAA,WAOA,SAAAA,KAM6B,2BAN5B15B,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAcwvB,GAAc0G,GAAqBiD,IAC3Dh5B,UAAW,GACXL,aAAc,CAACq2B,IACf51B,QAAS,CAAC41B,QAEiBoD,EAb7B,GCAAC,GAAA,WAOA,SAAAA,KAM+B,2BAN9B35B,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAcwvB,GAAc+J,IACtCz5B,aAAc,CAAC4nB,IACfvnB,UAAW,CAAC+kB,IACZ3kB,QAAS,CAACmnB,QAEmB8R,EAb/B,MCAA,aAOA,IAAaC,GAA0C,CACrDC,IAAK,CACHC,SAAS,EACTC,iBAAiB,ICVrBC,GAAA,WAiBE,SAAAA,EACU/8B,EACA4X,EACA7X,GAFAnF,KAAAoF,OAAAA,EACApF,KAAAgd,qBAAAA,EACAhd,KAAAmF,OAAAA,EAPFnF,KAAAoiC,UAAY,IAAIxkB,EAAAA,iBAAyB,GAEjD5d,KAAAqiC,WAAkCriC,KAAKoiC,UAAUE,eAO3CtiC,KAAKoF,OAAO48B,IAAIE,iBAClBliC,KAAKuiC,OAwCX,OApCEJ,EAAAjiC,UAAAqiC,KAAA,WAAA,IAAAh3B,EAAAvL,KACMA,KAAKmF,OAAOyN,eACd5S,KAAKmF,OAAOyN,aAAa4vB,iBACvB,sBAAqB,SACrBpwB,GACEA,EAAM6F,iBACN1M,EAAKk3B,cAAgBrwB,EACrB7G,EAAKm3B,0BAIT1iC,KAAKmF,OAAOyN,aAAa4vB,iBAAiB,eAAc,WACtDj3B,EAAKyR,qBAAqBxR,IACxB,CAAEsO,IAAK,yBACPoD,EAAAA,kBAAkBylB,uBAGpBp3B,EAAKq3B,yBACLr3B,EAAKk3B,cAAgB,SAK3BN,EAAAjiC,UAAAwiC,sBAAA,WACE1iC,KAAKoiC,UAAU3gC,MAAK,IAGtB0gC,EAAAjiC,UAAA0iC,uBAAA,WACE5iC,KAAKoiC,UAAU3gC,MAAK,IAGtB0gC,EAAAjiC,UAAA2iC,WAAA,WACM7iC,KAAKyiC,eACPziC,KAAKyiC,cAAcK,8BAnDxBl8B,EAAAA,sDAFQm8B,UALPxlB,EAAAA,4BAEAxW,EAAAA,aA2DFo7B,EA/DA,GCIA,kBAEE,SAAAa,EAAsBC,GAAAjjC,KAAAijC,uBAAAA,EASxB,OAPED,EAAA9iC,UAAA4K,SAAA,WACE9K,KAAKqiC,WAAariC,KAAKijC,uBAAuBZ,YAGhDW,EAAA9iC,UAAA4iC,OAAA,WACE9iC,KAAKijC,uBAAuBJ,cAEhCG,wBCNE,SAAAE,EAAsBD,GAAtB,IAAA13B,EACE43B,EAAAviC,KAAAZ,KAAMijC,IAAuBjjC,YADTuL,EAAA03B,uBAAAA,IAGxB,OAJoDl6B,EAAAA,EAAAA,uBAJnDnB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,+BACVC,SAAA,8kBALOq6B,MAWTe,GAJoDF,uBCClD,SAAAI,EAAsBH,GAAtB,IAAA13B,EACE43B,EAAAviC,KAAAZ,KAAMijC,IAAuBjjC,YADTuL,EAAA03B,uBAAAA,IAGxB,OAJiDl6B,EAAAA,EAAAA,uBAJhDnB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,4BACVC,SAAA,4IALOq6B,MAWTiB,GAJiDJ,ICIjD,SAAgBK,GACdC,GAEA,MAAO,CAAErB,SAAWnxB,EAAAA,aAAewyB,EAAUtB,IAAIC,UAAY,GAG/D,SAAgBsB,GAAWN,GAEzB,OADY,WAAS,OAAAA,GAIvB,IAAAO,GAAA,WAAA,SAAAA,KAyBwB,2BAzBvBr7B,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAWu5B,IACxB0B,EAAAA,oBAAoBC,SAAS,mBAC7Br0B,EAAAA,YAEF5G,UAAW,CACT,CAAEC,QAASq6B,GAAiBp6B,YAAaC,EAAAA,QACzC,CACEF,QAASi7B,EAAAA,sBACThC,WAAY0B,GACZthB,KAAM,CAACnZ,EAAAA,SAET,CACEF,QAASg5B,EAAAA,gBACTC,WAAY4B,GACZxhB,KAAM,CAACogB,IACPtsB,OAAO,GAETssB,IAEF/5B,aAAc,CAACg7B,GAA6BF,IAC5Cr6B,QAAS,CAACu6B,GAA6BF,QAEjBM,EAzBxB,GClBMI,GAAkB,CACtBvS,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,IAGb,SAAgB6T,GAAY9jB,GAK1B,OAJY,WACKA,EAAS3C,IAAI+U,EAAAA,QACrB/sB,OAAO/C,KAAKuhC,KCdvB,IAAAE,GASkBD,GANlBE,GAAA,WAAA,SAAAA,KAU6B,2BAV5B57B,EAAAA,SAAQtB,KAAA,CAAC,CACR4B,UAAW,CACT,CACEC,QAASg5B,EAAAA,gBACT7rB,OAAO,EACPkM,KAAM,CAACN,EAAAA,UACPkgB,WAAUmC,SAIaC,EAV7B,GCHAC,GAAA,WASE,SAAAA,EACYC,EACAC,EACAC,GAFAnkC,KAAAikC,QAAAA,EACAjkC,KAAAkkC,OAAAA,EACAlkC,KAAAmkC,gBAAAA,SAGZH,EAAA9jC,UAAAqiC,KAAA,WAAA,IAAAh3B,EAAAvL,KACEA,KAAKmkC,gBACFC,UACA14B,KAAK4S,EAAAA,OAAO3T,UACZ8B,UAAS,SAAE43B,GAAmB,OAAC94B,EAAK84B,KAAOA,KAGhD7kC,OAAA6H,eAAc28B,EAAA9jC,UAAA,OAAI,KAAlB,SAAmBmkC,GACjBrkC,KAAKskC,MAAQD,EAAKC,MAClBtkC,KAAKioB,YAAcoc,EAAKpc,YACxBjoB,KAAKukC,MAAQF,EAAKE,MAClBvkC,KAAKwkC,OAASH,EAAKG,QAAU,CAACC,EAAAA,eAAeC,MAAOD,EAAAA,eAAeE,yCAGrEnlC,OAAA6H,eAAc28B,EAAA9jC,UAAA,QAAK,KAAnB,SAAoBokC,GAClBtkC,KAAKikC,QAAQW,SAASN,GAAS,qCAGjC9kC,OAAA6H,eAAc28B,EAAA9jC,UAAA,cAAW,KAAzB,SAA0BiC,GACxBnC,KAAK6kC,OAAO,CAAExU,KAAM,cAAehnB,QAASlH,qCAG9C3C,OAAA6H,eAAc28B,EAAA9jC,UAAA,QAAK,KAAnB,SAAoB4kC,GACdA,GACF9kC,KAAK6kC,OAAO,CAAExU,KAAM,WAAYhnB,QAASy7B,qCAI7CtlC,OAAA6H,eAAc28B,EAAA9jC,UAAA,SAAM,KAApB,SAAqBiC,GACfA,GACFnC,KAAK6kC,OAAO,CAAExU,KAAM,SAAUhnB,QAASlH,EAAMytB,KAAK,yCAI5CoU,EAAA9jC,UAAA2kC,OAAV,SAAiBR,GACXA,EAAKh7B,SACPrJ,KAAKkkC,OAAOa,UAAUV,wBA9C3Bz9B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALiBk+B,EAAAA,aAAtBC,EAAAA,YACU7J,EAAAA,gMAFnB,GCGA,IAAa8J,GAA6B,CACxCx8B,QAASg5B,EAAAA,gBACT7rB,OAAO,EACP8rB,WAAYwD,GACZpjB,KAAM,CAAChb,EAAAA,UAAW+0B,EAAAA,kBAMpB,SAAgBqJ,GACdhgC,EACAigC,GAOA,OALY,WACVA,EAAgBxkB,YAAYnU,UAAS,SAAC44B,GACpClgC,EAAOiB,SAASk/B,gBAAgBD,KAAOA,KCnB7C,IAAAE,GAAA,WAiBE,SAAAA,EACiChc,EACrBpkB,EACAqgC,EACAC,GAHqBzlC,KAAAupB,WAAAA,EACrBvpB,KAAAmF,OAAAA,EACAnF,KAAAwlC,gBAAAA,EACAxlC,KAAAylC,UAAAA,SAGZF,EAAArlC,UAAAwlC,MAAA,SAAMC,GACAA,GAAU3lC,KAAK4lC,qBACjB5lC,KAAK6lC,4BAA4BC,UAAY9lC,KAAK+lC,SAASJ,KAQ/DJ,EAAArlC,UAAA0lC,iBAAA,WACE,OAAQ9M,EAAAA,kBAAkB94B,KAAKupB,aAAezY,EAAAA,aAGxCy0B,EAAArlC,UAAA2lC,0BAAR,eACQr5B,EAAK,UACPw5B,EACFhmC,KAAKmF,OAAOiB,SAAS6/B,eAAez5B,GAGtC,IAAKw5B,EAAe,KACZlwB,EAAsB9V,KAAKwlC,gBAAgBU,eAC/C,KACA,MAEIrN,EAA4B/iB,EAASvP,cAAc,UACzDsyB,EAAOrsB,GAAKA,EACZqsB,EAAO9zB,KAAO,sBACd+Q,EAASpP,YAAY1G,KAAKmF,OAAOiB,SAASpF,KAAM63B,GAChDmN,EAAgBnN,EAElB,OAAOmN,GASTT,EAAArlC,UAAA6lC,SAAA,SAASJ,GAAT,IAAAp6B,EAAAvL,KACE,OAAOmmC,KAAKC,UAAUT,EAAM,SAAGU,EAAMlkC,GACnC,MAAiB,iBAAVA,EACHoJ,EAAKk6B,UAAUM,SAASO,EAAAA,gBAAgBC,KAAMpkC,GAC9CA,yBAvDTyE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EAITukB,EAAAA,OAAMxkB,KAAA,CAACykB,EAAAA,sBAPHvkB,EAAAA,iBAJPy/B,EAAAA,wBAGOC,EAAAA,oOAVT,GCSA,IAAAC,GAAA,WAUE,SAAAA,EACYC,EACAlB,GADAzlC,KAAA2mC,oBAAAA,EACA3mC,KAAAylC,UAAAA,EAUd,OAlBEjmC,OAAA6H,eAAaq/B,EAAAxmC,UAAA,WAAQ,KAArB,SAAsBylC,GACpB3lC,KAAK4mC,YAAYjB,oCAUXe,EAAAxmC,UAAA0mC,YAAR,SAAoBjB,GAClB,GAAIA,GAAU3lC,KAAK2mC,oBAAoBf,mBAAoB,KAEnDiB,EAAO,sCADW7mC,KAAK2mC,oBAAoBZ,SAASJ,GACQ,aAClE3lC,KAAK8mC,OAAS9mC,KAAKylC,UAAUsB,wBAAwBF,yBAnB1DxsB,EAAAA,UAASxT,KAAA,CAAC,CACTgB,SAAU,0DARH09B,UADAkB,EAAAA,kDAYNz+B,EAAAA,sBAIAC,EAAAA,YAAWpB,KAAA,CAAC,gBAcf6/B,EAtBA,GCDA,IAAaM,GAAiB,IAAIzZ,EAAAA,eAAe,sBAMpC0Z,GAAyB,IAAI1Z,EAAAA,eACxC,6BCfF2Z,GAAA,WAUE,SAAAA,EACUC,EAGAC,GAHApnC,KAAAmnC,cAAAA,EAGAnnC,KAAAonC,SAAAA,SAGVF,EAAAhnC,UAAAwlC,MAAA,WAAA,IAAAn6B,EAAAvL,KACEA,KAAKqnC,iBAAiB56B,UAAS,SAAEk5B,GAC/Bp6B,EAAK47B,cAAczB,MAAMC,MAIrBuB,EAAAhnC,UAAAmnC,eAAR,WACE,OAAKrnC,KAAKmnC,cAAcvB,oBAAuB5lC,KAAKonC,SAG7C37B,EAAAA,cAAczL,KAAKonC,SAAS13B,IAAG,SAAC43B,GAAW,OAAAA,EAAQ5B,WAAUh6B,OAF3D6G,EAAAA,0BAnBZ3L,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHLy+B,kCAQJhkB,EAAAA,UAAQ,CAAAxc,KACRsmB,EAAAA,OAAMxkB,KAAA,CAACmgC,iJAbZ,GCSA,SAAgBO,GAAyBxnB,GAKvC,OAJY,WACMA,EAAS3C,IAAI8pB,IACrBxB,SAKZ,IAAA8B,GAAA,WAAA,SAAAA,KAamC,2BAblCr/B,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACs+B,IACf79B,QAAS,CAAC69B,IACVj+B,UAAW,CACT,CACEC,QAASg5B,EAAAA,gBACTC,WAAY4F,GACZxlB,KAAM,CAACN,EAAAA,UACP5L,OAAO,QAIsB2xB,EAbnC,GCZA,SAAgBC,GAAe1nB,GAK7B,OAJY,WACMA,EAAS3C,IAAI4mB,IACrBzB,QAKZ,IAAAmF,GAAA,WAAA,SAAAA,KAYwB,2BAZvBv/B,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACm/B,IACV/+B,UAAW,CACT,CACEC,QAASg5B,EAAAA,gBACTC,WAAY8F,GACZ1lB,KAAM,CAACN,EAAAA,UACP5L,OAAO,GAETqvB,QAGoBwC,EAZxB,GCbAC,GAAA,WAUE,SAAAA,EAAsBxD,GAAAnkC,KAAAmkC,gBAAAA,SAEtBwD,EAAAznC,UAAAwlC,MAAA,WAAA,IAAAn6B,EAAAvL,KACE,OAAOA,KAAKmkC,gBACTC,UACA14B,KAAKgE,EAAAA,IAAG,SAAE+pB,GAAuB,OAAAluB,EAAKq8B,QAAQnO,OAGzCkO,EAAAznC,UAAA0nC,QAAV,SAAkBnO,GAChB,GAAKA,EAASoO,YAAd,KAGMC,EAASrO,EAASoO,YAAYn4B,IAAG,SAAEq4B,EAAO/rB,GAC9C,MAAO,CACLgsB,QAAS,WACT3T,SAAUrY,EAAQ,EAClByE,KAAM,CACJwnB,MAAOF,EAAMzhC,KACb+pB,KAAM0X,EAAM1mC,UAgBlB,OAXIo4B,EAAS6K,OACXwD,EAAOzlC,KAAK,CACV2lC,QAAS,WACT3T,SAAUyT,EAAOnnC,OAAS,EAC1B8f,KAAM,CACJwnB,MAAOxO,EAAS6K,MAChBjU,KAAMoJ,EAAS6K,SAKd,CACL4D,WAAY,oBACZF,QAAS,iBACTG,gBAAiBL,yBAzCtBlhC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANKs0B,EAAAA,yJADnB,GCSA,IAAAgN,GAAA,WAAA,SAAAA,YAIEA,EAAAloC,UAAAwlC,MAAA,SAAM5L,GACJ,OAAOvnB,EAAAA,GAAEnS,EAAA,GACJJ,KAAKqoC,eAAevO,GACpB95B,KAAKsoC,gBAAgBxO,GACrB95B,KAAKuoC,gBAAgBzO,MAIpBsO,EAAAloC,UAAAmoC,eAAR,SAAuBvO,OACf3L,EAAc,CAAEqa,IAAK1O,EAAQ7mB,MAOnC,OANI6mB,EAAQzJ,OACVlC,EAAOkC,KAAOyJ,EAAQzJ,MAEpByJ,EAAQ2O,UACVta,EAAOlG,YAAc6R,EAAQ2O,SAExBta,GAGDia,EAAAloC,UAAAqoC,gBAAR,SAAwBzO,GACtB,OAAOA,EAAQ4O,QACb5O,EAAQ4O,OAAOC,SACf7O,EAAQ4O,OAAOC,QAAc,MAC7B7O,EAAQ4O,OAAOC,QAAc,KAAE1jC,IAC7B,CACEs/B,MAAOzK,EAAQ4O,OAAOC,QAAc,KAAE1jC,KAExC,IAGEmjC,EAAAloC,UAAAooC,gBAAR,SAAwBxO,GACtB,OAAOA,EAAsB,aACzB,CACE8O,MAAO9O,EAAsB,cAE/B,0BAvCPlzB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHADd,GCAA+hC,GAAA,WAAA,SAAAA,YAIEA,EAAA3oC,UAAAwlC,MAAA,SAAM5L,OACE6L,EAAc,CAAEqC,QAAS,SAe/B,OAdIlO,EAAQgP,QACNhP,EAAQgP,MAAM3mC,QAChBwjC,EAAOmD,MAAQhP,EAAQgP,MAAM3mC,OAE3B23B,EAAQgP,MAAMC,cAChBpD,EAAOqD,cAAgBlP,EAAQgP,MAAMC,cAIrCjP,EAAQmP,OAASnP,EAAQmP,MAAMC,mBACjCvD,EAAOwD,aAC8B,YAAnCrP,EAAQmP,MAAMC,iBAAiC,UAAY,cAGxD32B,EAAAA,GAAG,CACR62B,OAAQzD,yBArBb/+B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHADd,GCCAuiC,GAAA,WAIE,SAAAA,EAAoBC,GAAAtpC,KAAAspC,cAAAA,SAEpBD,EAAAnpC,UAAAwlC,MAAA,SAAM5L,GAAN,IAAAvuB,EAAAvL,KACE,OAAOA,KAAKspC,cAAcC,iBAAiBzP,EAAQ7mB,MAAMvH,KACvD4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAE85B,GACH,MAAO,CACLC,gBAAiBl+B,EAAKm+B,uBAAuB5P,EAAS0P,GACtDG,OAAQH,EAAQ95B,IAAG,SAACi6B,GAAU,OAAAp+B,EAAKq+B,aAAaD,UAMhDN,EAAAnpC,UAAAwpC,uBAAR,SAA+B5P,EAAkB0P,OACzCK,EAAkB,CACtB7B,QAAS,mBASX,OAPIlO,EAAQgQ,gBACVD,EAAWE,YAAcjQ,EAAQgQ,eAE/BN,IACFK,EAAWG,YAAcR,EAAQlrB,OAAM,SAACwG,GAAO,QAAEA,EAAIzC,SAAQ1hB,OAC7DkpC,EAAWI,YAAcT,EAAQlrB,OAAM,SAACwG,GAAO,QAAEA,EAAIolB,UAASvpC,QAEzDkpC,GAGDR,EAAAnpC,UAAA0pC,aAAR,SAAqBD,OACbQ,EAAoB,CACxBnC,QAAS,UAMX,GAHI2B,EAAOS,WAAaT,EAAOS,UAAU/Z,OACvC8Z,EAAaE,OAASV,EAAOS,UAAU/Z,MAErCsZ,EAAOW,KAAM,KACTA,EAAO,IAAIC,KAAKZ,EAAOW,MAC7BH,EAAaK,cAAmBF,EAAKG,cAAa,KAAIH,EAAKI,WACzD,GAAC,IAAIJ,EAAKK,UAed,OAbIhB,EAAOiB,WACTT,EAAa9Z,KAAOsZ,EAAOiB,UAEzBjB,EAAOO,UACTC,EAAaliB,YAAc0hB,EAAOO,SAEhCP,EAAOtnB,SACT8nB,EAAaU,aAAe,CAC1B7C,QAAS,SACT+B,YAAaJ,EAAOtnB,OAAOyoB,aAIxBX,uBA1DVvjC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAVI40B,EAAAA,mKASlB,GCVA,IAAAqP,GAAA,WA2BE,SAAAA,EACU3lB,EACA4lB,EACEC,GAFFjrC,KAAAolB,eAAAA,EACAplB,KAAAgrC,eAAAA,EACEhrC,KAAAirC,SAAAA,EAGOjrC,KAAAkrC,sBACjBlrC,KAAKirC,UAAYjrC,KAAKirC,SAASE,QAAQ,OAASC,EAAAA,aAAaC,QAAU,UAEzEN,EAAA7qC,UAAAorC,WAAA,SACEC,GADF,IAAAhgC,EAAAvL,KAGE,OAAOA,KAAKolB,eAAeE,iBAAiB5Z,KAC1CgE,EAAAA,IAAG,SAAC8V,GAAS,OAAAA,EAAMA,MAAMC,OAAoB,cAC7CnH,EAAAA,OAAO3T,SACP4T,EAAAA,UAAS,SAAEitB,GACT,OAAAjgC,EAAKy/B,eAAe5tB,IAClBouB,EAEAjgC,EAAK0/B,UAAY1/B,EAAK0/B,SAASE,QAAQ,OACnCI,GAAUhgC,EAAK2/B,2BACf1jC,2BArCbZ,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANZqf,EAAAA,sBADAqV,EAAAA,sBAHAH,EAAAA,6NAFF,GCaA,IAAAoQ,GAAA,WAIE,SAAAA,EACUC,EAGEtE,GAHFpnC,KAAA0rC,eAAAA,EAGE1rC,KAAAonC,SAAAA,SAGZqE,EAAAvrC,UAAAwlC,MAAA,WAAA,IAAAn6B,EAAAvL,KACE,OAAOA,KAAK0rC,eAAeJ,aAAa5/B,KACtCwG,EAAAA,UAAS,MACTqM,EAAAA,UAAS,SAAEub,GACT,OAAIA,EACKruB,EAAAA,cAAcF,EAAKq8B,QAAQ9N,IAAUpuB,KAC1CgE,EAAAA,IAAG,SAAEjK,GAAc,OAAAjG,OAAOa,OAAMQ,MAAbrB,OAAMuD,EAAA,CAAQ,IAAO0C,OAGrC8M,EAAAA,GAAG,QAKNk5B,EAAAvrC,UAAA0nC,QAAV,SAAkB9N,GAChB,IAAKA,IAAYA,EAAQ7mB,KACvB,MAAO,OAEHm0B,EAAWpnC,KAAKonC,SAClBpnC,KAAKonC,SAAS13B,IAAG,SAAC43B,GAAW,OAAAA,EAAQ5B,MAAM5L,KAC3C,GACJ,OAAA/2B,EAAA,CACEwP,EAAAA,GAAG,CACD21B,WAAY,oBACZF,QAAS,aAERZ,wBArCRxgC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAVLikC,kCAeJxpB,EAAAA,UAAQ,CAAAxc,KACRsmB,EAAAA,OAAMxkB,KAAA,CAACogC,iJAPZ,GCCA,IAAA0E,GAAA,WAAA,SAAAA,KA+BkC,2BA/BjCxjC,EAAAA,SAAQtB,KAAA,CAAC,CACR4B,UAAW,CACT,CACEC,QAASs+B,GACTr+B,YAAa8iC,GACb51B,OAAO,GAET,CACEnN,QAASs+B,GACTr+B,YAAag/B,GACb9xB,OAAO,GAIT,CACEnN,QAASu+B,GACTt+B,YAAay/B,GACbvyB,OAAO,GAET,CACEnN,QAASu+B,GACTt+B,YAAakgC,GACbhzB,OAAO,GAET,CACEnN,QAASu+B,GACTt+B,YAAa0gC,GACbxzB,OAAO,QAIqB81B,EA/BlC,GCdA,ICAAC,GAAA,WAeE,SAAAA,EACYC,EACAC,EACA1mB,EACAjgB,GAHAnF,KAAA6rC,YAAAA,EACA7rC,KAAA8rC,eAAAA,EACA9rC,KAAAolB,eAAAA,EACAplB,KAAAmF,OAAAA,SAGZymC,EAAA1rC,UAAA6rC,sCAAA,WAAA,IAAAxgC,EAAAvL,KACEA,KAAK6rC,YACFG,eACAtgC,KAAKC,EAAAA,KAAK,IACVc,UAAS,SAACw/B,GACL1gC,EAAKugC,eAAeI,yBAAyBD,IAC/C1gC,EAAK4gC,iBAEP5gC,EAAKugC,eAAeM,gCAI1BR,EAAA1rC,UAAAisC,eAAA,WACEnsC,KAAK6rC,YAAYQ,SACjBrsC,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,UAGpCX,EAAA1rC,UAAAssC,qCAAA,WAAA,IAAAjhC,EAAAvL,KACE,OAAOA,KAAK6rC,YACTG,eACAtgC,KACC+gC,EAAAA,SAAQ,SAACC,GACP,OAAAn6B,EAAAA,GAAGhH,EAAKugC,eAAeI,yBAAyBQ,QAYxDd,EAAA1rC,UAAA0e,OAAA,WACM5e,KAAKmF,OAAOwnC,cACd3sC,KAAKmF,OAAOwnC,aAAaC,WD1Dc,oCCW5ChmC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATZk0B,EAAAA,mBADA6R,EAAAA,sBAEA1mB,EAAAA,sBACApf,EAAAA,iOALF,GCAA,IAAA+lC,GAAA,WAmCE,SAAAA,EACYjB,EACAC,EACAiB,EACAC,EACAhwB,EACAoI,GALAplB,KAAA6rC,YAAAA,EACA7rC,KAAA8rC,eAAAA,EACA9rC,KAAA+sC,YAAAA,EACA/sC,KAAAgtC,oBAAAA,EACAhtC,KAAAgd,qBAAAA,EACAhd,KAAAolB,eAAAA,EAViBplB,KAAAsW,UAAW,EAEhCtW,KAAAitC,yBAA0B,EAqEpC,OA1DEH,EAAA5sC,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKktC,cAAgBltC,KAAK8rC,eAAeqB,+BACzCntC,KAAKotC,qBAAuBptC,KAAK8rC,eAAeuB,sCAChDrtC,KAAKstC,UAAYttC,KAAK6rC,YAAYG,eAAetgC,KAC/C6S,EAAAA,UAAS,SAAC0tB,GACR,OAAIA,GAAWA,EAAMsB,cACnBhiC,EAAKiiC,sCAAsCvB,GACpC1gC,EAAKwhC,YAAY3vB,OAEjB7K,EAAAA,QAAG/K,OAMVslC,EAAA5sC,UAAAstC,sCAAR,SAA8CvB,GAE1CjsC,KAAKitC,yBACLjtC,KAAK8rC,eAAeI,yBAAyBD,KAE7CjsC,KAAKitC,yBAA0B,EAC/BjtC,KAAKgd,qBAAqBM,OAAOJ,EAAAA,kBAAkBuwB,gBACnDztC,KAAKolB,eAAeknB,GAAG,OAI3BQ,EAAA5sC,UAAAwtC,0BAAA,SAA0B5hC,OACxB6hC,EAAA7hC,EAAA6hC,OACAC,EAAA9hC,EAAA8hC,SAKA5tC,KAAK8rC,eAAe+B,8BAA8BF,EAAQC,IAG5Dd,EAAA5sC,UAAAmsC,OAAA,WACErsC,KAAKgtC,oBAAoBjB,yCAG3Be,EAAA5sC,UAAA4tC,8BAAA,SAA8BhiC,GAA9B,IAAAP,EAAAvL,KAAgC+tC,EAAAjiC,EAAAiiC,WAC9B/tC,KAAK8rC,eACFqB,+BACAzhC,KAAKC,EAAAA,KAAK,IACVc,UAAS,SAACuhC,GACT,OAAAziC,EAAKugC,eAAegC,8BAClBE,EACAD,KAGH1gC,cACHrN,KAAKitC,yBAA0B,GAGjCH,EAAA5sC,UAAA+tC,OAAA,WACEjuC,KAAKsW,UAAW,EAChBtW,KAAKgtC,oBAAoBpuB,8BAhF5BhX,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,8zNAEAomC,cAAeC,EAAAA,kBAAkBC,8+GAhBjCpT,EAAAA,mBADA6R,EAAAA,sBAMA7Q,EAAAA,mBAKO4P,UATPruB,EAAAA,4BAEA4I,EAAAA,oDAoBCle,EAAAA,YAAWpB,KAAA,CAAC,mBAuEfimC,EAtGA,GCgBA,IAAAuB,GAAA,WAOE,SAAAA,EACYlR,EACAh4B,EACA6yB,EACApD,GAHA50B,KAAAm9B,SAAAA,EACAn9B,KAAAmF,OAAAA,EACAnF,KAAAg4B,yBAAAA,EACAh4B,KAAA40B,cAAAA,EANJ50B,KAAAsuC,WAAY,SAapBD,EAAAnuC,UAAAme,KAAA,WACMre,KAAKuuC,aACPvuC,KAAKwuC,SAOTH,EAAAnuC,UAAAquC,UAAA,WAME,OALIvuC,KAAKyuC,eAAiBzuC,KAAK0uC,gBACzB1uC,KAAKmF,OAAOwnC,cACd3sC,KAAKmF,OAAOwnC,aAAagC,QH9CY,cG8C2B,QAG7D3uC,KAAKyuC,cAAgBzuC,KAAK0uC,gBAO3BL,EAAAnuC,UAAAuuC,WAAR,eACQhpB,EAASzlB,KAAKm9B,SAAS9L,OAAOuH,MAAM,KAAK,GAC/C,OAAOnT,GAAUA,EAAOmT,MAAM,KAAKjzB,SAAS,aAMtC0oC,EAAAnuC,UAAAwuC,aAAR,WACE,OACE1uC,KAAKmF,OAAOwnC,cACwD,SAApE3sC,KAAKmF,OAAOwnC,aAAaiC,QHnEc,gBG0EnCP,EAAAnuC,UAAAsuC,MAAR,WACE,IAAIxuC,KAAKsuC,UAAT,KAGM9V,EAAUx4B,KAAKg4B,yBAAyBS,wBAC5CqU,IAEF9sC,KAAK40B,cAAcppB,IAAI,gBAAiBgtB,EAASlE,GAAeV,QAChE5zB,KAAKsuC,WAAY,wBAlEpB1nC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAjBL+nC,EAAAA,gBAMA9nC,EAAAA,iBAHPkyB,EAAAA,gCAIuBnF,mNASzB,GCPA,IAAAgb,GAAA,WAAA,SAAAA,KAW8B,2BAX7B3mC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAck2B,IACxB/1B,UAAW,CACT,CACEC,QAASg5B,EAAAA,gBACTC,WAAYoN,GACZhtB,KAAM,CAACssB,IACPx4B,OAAO,QAIiBi5B,EAX9B,GAmBA,SAAgBC,GAAWC,GAIzB,OAHa,WACXA,EAAkB3wB,QC9BtB,IAAA4wB,GAAA,WAwBE,SAAAA,EACU7pC,EACA4nC,EACAnB,EACAzmB,EACA8pB,GAJAlvC,KAAAoF,OAAAA,EACApF,KAAAgtC,oBAAAA,EACAhtC,KAAA6rC,YAAAA,EACA7rC,KAAAolB,eAAAA,EACAplB,KAAAkvC,kBAAAA,EAVFlvC,KAAAmK,cAAgB,IAAIC,EAAAA,aAEpBpK,KAAAmvC,uBAAyB,IAoEnC,OAzDEF,EAAA/uC,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKovC,SAAWpvC,KAAKqvC,8BACrBrvC,KAAKsvC,SAAWC,YAAW,WACrBhkC,EAAK6jC,SAAW,EAClB7jC,EAAK6jC,YAELI,cAAcjkC,EAAK+jC,UACnB/jC,EAAKyhC,oBAAoBjB,yCAE3BxgC,EAAK2jC,kBAAkBxX,gBACtB,KAEH13B,KAAKyvC,kBACLzvC,KAAK0vC,gCAGCT,EAAA/uC,UAAAuvC,gBAAR,WAAA,IAAAlkC,EAAAvL,KACEA,KAAKmK,cAAcqB,IACjBxL,KAAKolB,eAAeuqB,eAAeljC,UAAS,SAACkjC,GACvCA,GACFpkC,EAAKqkC,iBAMLX,EAAA/uC,UAAAwvC,6BAAR,WAAA,IAAAnkC,EAAAvL,KACEA,KAAKmK,cAAcqB,IACjBxL,KAAK6rC,YACFgE,eACAnkC,KAAKE,EAAAA,wBACLa,UAAS,SAACrL,GAAK,OAAAmK,EAAKqkC,iBAI3BX,EAAA/uC,UAAA0vC,WAAA,WACM5vC,KAAKovC,SAAW,IAClBpvC,KAAKovC,SAAWpvC,KAAKqvC,gCAIjBJ,EAAA/uC,UAAAmvC,4BAAR,WACE,OACErvC,KAAKoF,OAAO0qC,IAAIC,kBAAkBC,uBAClChwC,KAAKmvC,uBAEEnvC,KAAKmvC,uBAELnvC,KAAKoF,OAAO0qC,IAAIC,kBAAkBC,wBAG7Cf,EAAA/uC,UAAAkN,YAAA,WACEpN,KAAKmK,cAAckD,cACfrN,KAAKsvC,UACPE,cAAcxvC,KAAKsvC,+BA1ExB1nC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,kUAEAomC,cAAeC,EAAAA,kBAAkBC,mkCAT1B6B,EAAAA,iBAGArE,UAHW5Q,EAAAA,mBAAa7U,EAAAA,sBAN/BsZ,EAAAA,qBAwFFwP,EAzFA,GCAA,IAAAiB,GAAA,WAEA,SAAAA,KAmBA,OAfEA,EAAAhwC,UAAAiwC,UAAA,SAAUC,GACJA,EAAe,IACjBA,EAAe,OAEXC,EAAkBngC,KAAKC,MAAMigC,EAAe,IAC5CE,EAAkBF,EAAe,GAQvC,OANIC,EAAU,IACS,KAAOA,GAASE,OAAO,GAExBF,EAAU,IAGL,KADQ,KAAOC,GAASC,OAAO,wBAhB7DC,EAAAA,KAAI3pC,KAAA,CAAC,CACJwpB,KAAM,kBAkBR6f,EArBA,GCAAO,GAAA,WA2BE,SAAAA,EAAoBC,GAAA1wC,KAAA0wC,GAAAA,EARZ1wC,KAAA2wC,eAAgB,EAGxB3wC,KAAA4wC,qBAAsB,EAGtB5wC,KAAA6wC,YAAc,IAAI1iC,EAAAA,aA8BpB,OA1BEsiC,EAAAvwC,UAAA4K,SAAA,WACE9K,KAAKsjB,KAAOtjB,KAAK0wC,GAAGI,MAAM,CACxBnD,OAAQ,CAAC,GAAI,CAACoD,EAAAA,WAAWC,WACzBpD,SAAU,CAAC,GAAI,CAACmD,EAAAA,WAAWC,cAI/BP,EAAAvwC,UAAA+wC,SAAA,WACEjxC,KAAK2wC,eAAgB,EACjB3wC,KAAKsjB,KAAKI,SAId1jB,KAAK6wC,YAAY/hC,KAAK,CACpB6+B,OAAQ3tC,KAAKsjB,KAAK4tB,SAASvD,OAAOxrC,MAClCyrC,SAAU5tC,KAAKsjB,KAAK4tB,SAAStD,SAASzrC,SAI1CsuC,EAAAvwC,UAAAixC,WAAA,SAAW5tB,GACT,OAAOH,GAAUC,gBACfrjB,KAAKsjB,KACLC,EACAvjB,KAAK2wC,oCAzCV/oC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,wkCAEAomC,cAAeC,EAAAA,kBAAkBC,0hBAP1BgD,EAAAA,4DAaNppC,EAAAA,2BAGAmH,EAAAA,UA+BHshC,EAvDA,GCAA,IAAAY,GAAA,WAgBE,SAAAA,EACYrE,EACAD,GADA/sC,KAAAgtC,oBAAAA,EACAhtC,KAAA+sC,YAAAA,EAJJ/sC,KAAA4W,aAAe,IAAIxM,EAAAA,aAqB7B,OAdEinC,EAAAnxC,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YAAY3vB,MAAM3Q,UAAS,SAAC8tB,GAAQ,OAAChvB,EAAK+lC,SAAW/W,KAE5Dv6B,KAAKuxC,sCAAwCvxC,KAAKgtC,oBAAoBR,wCAGxE6E,EAAAnxC,UAAAisC,eAAA,WACEnsC,KAAKgtC,oBAAoBb,kBAG3BkF,EAAAnxC,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,mCA5BrBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,8hBAEAomC,cAAeC,EAAAA,kBAAkBC,6gDAN1BxC,UAFM5P,EAAAA,eAkCfqV,EAnCA,GCAA,IAAAG,GAAA,WA0CE,SAAAA,EACUd,EACAe,EACArsC,GAFApF,KAAA0wC,GAAAA,EACA1wC,KAAAyxC,WAAAA,EACAzxC,KAAAoF,OAAAA,EAdFpF,KAAA4W,aAAe,IAAIxM,EAAAA,aAM3BpK,KAAA6wC,YAAc,IAAI1iC,EAAAA,aAgFpB,OArEEqjC,EAAAtxC,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKsjB,KAAOtjB,KAAK0wC,GAAGI,MAAM,CACxBY,WAAY,CAAC,MAEf1xC,KAAKyxC,WAAWE,sBAChB3xC,KAAK4xC,sBAAwB5xC,KAAKyxC,WAAWI,kCAC7C7xC,KAAK8xC,cAAgB9xC,KAAKyxC,WAAWM,2BAErC/xC,KAAK4W,aAAapL,IAChBxL,KAAKsjB,KAAK4tB,SAASQ,WAAW76B,aAC3BnL,KAAKuG,EAAAA,aAAa,MAClBxF,UAAS,SAACulC,GACTzmC,EAAK0mC,iBAAiBD,OAKtBR,EAAAtxC,UAAA+xC,iBAAR,SAAyBD,GAErBrnC,QAAQ3K,KAAKkyC,mBACbF,IAAoBhyC,KAAKkyC,iBAAiB7hB,OAE1CrwB,KAAKkyC,sBAAmB1qC,GAEtBmD,QAAQ3K,KAAKkyC,oBAGjBlyC,KAAKyxC,WAAWE,sBACZK,EAAgBG,OAAOxxC,QAAU,GACnCX,KAAKyxC,WAAWW,eAAe,CAC7BC,MAAOL,EACPM,SAAUtyC,KAAKoF,OAAO0qC,IAAIsC,eAAeG,eAK/Cf,EAAAtxC,UAAAsyC,uBAAA,SAAuBlB,GACrBtxC,KAAKkyC,iBAAmBZ,EACxBtxC,KAAKsjB,KAAK4tB,SAASQ,WAAWe,SAASzyC,KAAKkyC,iBAAiB7hB,MAC7DrwB,KAAKyxC,WAAWE,uBAGlBH,EAAAtxC,UAAA+wC,SAAA,WACMtmC,QAAQ3K,KAAKkyC,mBACflyC,KAAK6wC,YAAY/hC,KAAK,CAAEi/B,WAAY/tC,KAAKkyC,iBAAiBnE,cAI9DyD,EAAAtxC,UAAAwyC,gBAAA,SAAgBtgC,GACd,GAAIzH,QAAQ3K,KAAK2yC,YAAa,CAC5B,GACE3yC,KAAK2yC,WAAWjrC,cAAckrC,SAASxgC,EAAMD,SAC7CnS,KAAK0xC,WAAWhqC,cAAckrC,SAASxgC,EAAMD,QAE7C,OAEAnS,KAAKyxC,WAAWE,wBAKtBH,EAAAtxC,UAAA2yC,aAAA,WACE7yC,KAAKyxC,WAAWE,uBAGlBH,EAAAtxC,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,cAClBrN,KAAKyxC,WAAWE,2CA/FnB/pC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,4lCAEAomC,cAAeC,EAAAA,kBAAkBC,KACjC0E,KAAM,CACJC,mBAAoB,q5OAhBf3B,EAAAA,mBAGP4B,EAAAA,kBADA/C,EAAAA,kDAwBC9gC,EAAAA,2BAGA6J,EAAAA,UAASnS,KAAA,CAAC,aAAc,CAAEoS,QAAQ,wBAClCD,EAAAA,UAASnS,KAAA,CAAC,aAAc,CAAEoS,QAAQ,OA6ErCu4B,EArHA,GCAA,IAAAyB,GAAA,WAYA,SAAAA,KAkBwB,2BAlBvB9qC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACArL,EAAAA,WACA6jC,EAAAA,UAActwB,UACdksB,IAEF1mC,aAAc,CACZ0kC,GACA2D,GACAe,GACAvC,GACAiB,GACAmB,IAEF/xB,gBAAiB,CAACwtB,QAEImG,EA9BxB,GCAAE,GAAA,WAuDE,SAAAA,EACYlpC,EACAoc,EACAqqB,EACA0C,GAHApzC,KAAAiK,aAAAA,EACAjK,KAAAqmB,YAAAA,EACArmB,KAAA0wC,GAAAA,EACA1wC,KAAAozC,iBAAAA,EAvCZpzC,KAAAsK,UAAYC,EAOZvK,KAAAymB,kBAAuCC,EAAAA,kBAAkBC,WACzD3mB,KAAAqzC,SAAW,EACXrzC,KAAAszC,aAAc,EAKdtzC,KAAAsjB,KAAkBtjB,KAAK0wC,GAAGI,MAAM,IAwElC,OA5CEqC,EAAAjzC,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKuzC,OAASvzC,KAAKuzC,OAAO7nC,KACxBG,EAAAA,IAAG,SAAC2c,GACF,GAAIA,EAAO,CACD,IAAAvV,EAAAuV,EAAAsR,QAAA7mB,KACR,GAAK1H,EAAK+X,KAAK4tB,SAASj+B,GAGJ1H,EAAK+X,KAAK4tB,SAASj+B,GAC3Bi+B,SAASmC,SAASZ,SAASjqB,EAAM6qB,eAH3C9nC,EAAK+X,KAAKkwB,WAAWvgC,EAAM1H,EAAKkoC,qBAAqBjrB,IAKvDjd,EAAK+X,KAAKowB,iBACLnoC,EAAK+nC,cACR/nC,EAAK+nC,aAAc,OAM3BtzC,KAAK2zC,iBAAmB3zC,KAAKozC,iBAAiB5sB,mBAC5CxmB,KAAKymB,oBAIT0sB,EAAAjzC,UAAA0zC,aAAA,SAAajqC,GACX3J,KAAKiK,aAAaP,mBAAmBC,IAGvCwpC,EAAAjzC,UAAA2zC,YAAA,SAAYpzB,GACVzgB,KAAKqmB,YAAYwtB,YAAYpzB,UACtBzgB,KAAKsjB,KAAK4tB,SAASzwB,EAAKqZ,QAAQ7mB,MACvCjT,KAAK4zC,aAAa,YAGpBT,EAAAjzC,UAAA4zC,YAAA,SAAYhoC,OAAE2U,EAAA3U,EAAA2U,KAAM/H,EAAA5M,EAAA4M,gBAClB1Y,KAAKqmB,YAAYytB,YAAYrzB,EAAKmI,YAAalQ,IAGzCy6B,EAAAjzC,UAAAuzC,qBAAR,SAA6BjrB,GAC3B,OAAOxoB,KAAK0wC,GAAGI,MAAM,CACnBloB,YAAaJ,EAAMI,YACnByqB,SAAU7qB,EAAM6qB,gCAxFrBzrC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0BACVC,SAAA,iyHALOmB,SARP4f,EAAAA,mBAHOuoB,EAAAA,mBAYAhrB,sCAkBNpN,EAAAA,UAASnS,KAAA,CAAC,SAAU,CAAEoS,QAAQ,EAAO86B,KAAMhsC,EAAAA,gBA2E9CorC,EA1GA,GCAA,IAAAa,GAAA,WA+CE,SAAAA,EACY3tB,EACApc,EACAgqC,EACFC,GAHEl0C,KAAAqmB,YAAAA,EACArmB,KAAAiK,aAAAA,EACAjK,KAAAi0C,sBAAAA,EACFj0C,KAAAk0C,GAAAA,EA7BDl0C,KAAAm0C,cAAe,EAWxBn0C,KAAAo0C,UAAW,EACXp0C,KAAAqzC,SAAW,EACXrzC,KAAAgY,WAAY,EAgGd,OA7EEg8B,EAAA9zC,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACMA,KAAK85B,SACP95B,KAAKwrC,YAAcxrC,KAAK85B,QAAQ7mB,KAChCjT,KAAKq0C,WAAar0C,KAAKqmB,YAAYiuB,SAASt0C,KAAKwrC,aACjDxrC,KAAKu0C,aAAav0C,KAAK85B,SACvB95B,KAAKk0C,GAAGxc,gBACC13B,KAAKwrC,aACdxrC,KAAKq0C,WAAar0C,KAAKqmB,YAAYiuB,SAASt0C,KAAKwrC,aAEjDxrC,KAAKqzC,SAAW,EAChBrzC,KAAKo0C,UAAW,EAChBp0C,KAAKk0C,GAAGxc,gBAER13B,KAAK4W,aAAe5W,KAAKi0C,sBACtB3I,aACA5/B,KAAK4S,EAAAA,OAAO3T,UACZ8B,UAAS,SAAEqtB,GACVvuB,EAAKigC,YAAc1R,EAAQ7mB,KAC3B1H,EAAKgpC,aAAaza,GAClBvuB,EAAK8oC,WAAa9oC,EAAK8a,YAAYiuB,SAAS/oC,EAAKigC,aACjDjgC,EAAK2oC,GAAGxc,kBAKRsc,EAAA9zC,UAAAq0C,aAAR,SAAqBza,GACnB95B,KAAKqzC,SAAW,EAChBrzC,KAAKo0C,SACHta,EAAQmP,OAA4C,eAAnCnP,EAAQmP,MAAMC,iBAC7BlpC,KAAKo0C,UAAYta,EAAQmP,MAAMuL,aACjCx0C,KAAKy0C,YAAc3a,EAAQmP,MAAMuL,aAIrCR,EAAA9zC,UAAAw0C,YAAA,SAAYvyC,GACVnC,KAAKqzC,SAAWlxC,GAGlB6xC,EAAA9zC,UAAAy0C,UAAA,WAAA,IAAAppC,EAAAvL,MACOA,KAAKwrC,aAAexrC,KAAKqzC,UAAY,GAK1CrzC,KAAKqmB,YACFiuB,SAASt0C,KAAKwrC,aACd/+B,UAAS,SAAC+b,GACLA,IACFjd,EAAKyM,WAAY,GAEnBzM,EAAKqpC,YACLrpC,EAAK8a,YAAYwuB,SAAStpC,EAAKigC,YAAajgC,EAAK8nC,UACjD9nC,EAAKyM,WAAY,IAElB3K,eAGG2mC,EAAA9zC,UAAA00C,UAAR,eACME,EACJ90C,KAAK+0C,SAAW/0C,KAAKiK,aAAab,KAAK+pC,GAA4B,CACjEtlC,UAAU,EACVC,KAAM,QAGRgnC,EAAgB90C,KAAK+0C,SAASC,mBAChBzB,OAASvzC,KAAKq0C,WAC5BS,EAAcG,MAAQj1C,KAAKqmB,YAAYzF,YACvCk0B,EAAcI,QAAUl1C,KAAKqmB,YAAY8uB,YACzCL,EAAczB,SAAWrzC,KAAKqzC,SAC9ByB,EAAc98B,UAAYhY,KAAKgY,WAGjCg8B,EAAA9zC,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,mCAjHvBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,qsBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAVlC0X,EAAAA,mBAGU5f,SACV8hC,UAVPtL,EAAAA,0DAmBCz3B,EAAAA,4BACAA,EAAAA,uBAMAA,EAAAA,SAuGHgsC,EAnIA,GCAA,IAAAoB,GAAA,WAYE,SAAAA,KACF,2BAVCxtC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gBACVC,SAAA,gZACAmJ,gBAAiBC,EAAAA,wBAAwBC,qFAGxCnJ,EAAAA,SAIHotC,EAbA,GCAA,IAAAC,GAAA,WAKA,SAAAA,KAK+B,2BAL9BltC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAc4gB,EAAAA,sBACxB9gB,aAAc,CAACgtC,IACfvsC,QAAS,CAACusC,QAEmBC,EAV/B,GCAAC,GAAA,WAmBE,SAAAA,EAAoBC,GAAAv1C,KAAAu1C,mBAAAA,EANpBv1C,KAAAgW,eAAgB,EAEhBhW,KAAAw1C,YAAa,EAEbx1C,KAAAsK,UAAYC,EAcd,OAVE/K,OAAA6H,eAAWiuC,EAAAp1C,UAAA,iBAAc,KAAzB,WAEE,OADAF,KAAKy1C,SAAWz1C,KAAKy1C,UAAY,GAC1Bz1C,KAAKy1C,SAASlF,QAAQmF,KAAI,SAAErnB,EAAG9uB,GACpC,OAAO8uB,EAAEpb,KAAK0iC,cAAcp2C,EAAE0T,yCAIlCqiC,EAAAp1C,UAAA01C,cAAA,SAAcC,GACZ71C,KAAKu1C,mBAAmBK,cAAcC,wBAzBzCjuC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,ixCACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANzB2kC,EAAAA,wDASf9tC,EAAAA,6BAEAA,EAAAA,0BAEAA,EAAAA,SAiBHstC,EA/BA,qBCyDE,SAAAS,EACU1vB,EACAwlB,EACA0J,EACAS,EACEC,EACAvc,GALF15B,KAAAqmB,YAAAA,EACArmB,KAAA6rC,YAAAA,EACA7rC,KAAAu1C,mBAAAA,EACAv1C,KAAAg2C,YAAAA,EACEh2C,KAAAi2C,sBAAAA,EACAj2C,KAAA05B,cAAAA,EAzCZ15B,KAAAk2C,yBAA2B,IASnBl2C,KAAAm2C,kBAAmB,EAEnBn2C,KAAA4W,aAAe,IAAIxM,EAAAA,aAE3BpK,KAAAo2C,mBAAoB,EA4LtB,OA7JEL,EAAA71C,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACMA,KAAKi2C,uBACPj2C,KAAKi2C,sBAAsBI,oBACzBr2C,KAAKk2C,0BAGLl2C,KAAK05B,eAAiB15B,KAAK05B,cAAcyR,QAAQ,OACnDnrC,KAAKi1C,MAAQxpC,EAAAA,cAAc,CACzBzL,KAAKqmB,YAAYzF,YACjB5gB,KAAK6rC,YAAYgE,eACjB7vC,KAAKi2C,sBAAsBK,mBACzBt2C,KAAKk2C,4BAENxqC,KACDG,EAAAA,IAAG,SACAC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmb,EAAAlb,EAAA,GAAM4hC,EAAA5hC,EAAA,GAAQwqC,EAAAxqC,EAAA,GAKdR,EAAKirC,OACH7I,IAAW8I,EAAAA,sBAAwBxvB,EAAKyvB,KAAOzvB,EAAKhU,KACtD1H,EAAKorC,6BAA6B1vB,EAAMsvB,EAAgBK,WAG5DlnC,EAAAA,IAAG,SAAE5D,GAAuD,OAAvDnJ,EAAAmJ,EAAA,GAAC,MAKR9L,KAAKi1C,MAAQxpC,EAAAA,cAAc,CACzBzL,KAAKqmB,YAAYzF,YACjB5gB,KAAK6rC,YAAYgE,iBAChBnkC,KACDG,EAAAA,IAAG,SACAC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmb,EAAAlb,EAAA,GAAM4hC,EAAA5hC,EAAA,GACN,OAACR,EAAKirC,OACJ7I,IAAW8I,EAAAA,sBAAwBxvB,EAAKyvB,KAAOzvB,EAAKhU,OAE1DvD,EAAAA,IAAG,SAAE5D,GAA2B,OAA3BnJ,EAAAmJ,EAAA,GAAC,MAKV9L,KAAK62C,eAAiB72C,KAAKqmB,YACxB8uB,YACAzpC,KAAKgE,EAAAA,IAAG,SAACmF,GAAU,OAACA,KAEvB7U,KAAKu1C,mBAAmBuB,iCAExB92C,KAAKsjB,KAAOtjB,KAAKg2C,YAAYlF,MAAM,CACjCiG,WAAY,CAAC,GAAI,CAAChG,EAAAA,WAAWC,aAG/BhxC,KAAKg3C,gBAAkBvrC,EAAAA,cAAc,CACnCzL,KAAK62C,eACL72C,KAAKsjB,KAAKzM,aAAanL,KACrBwG,EAAAA,WAAU,GACVxC,EAAAA,IAAG,WAAO,OAAAnE,EAAK+X,KAAK2zB,SAEtBj3C,KAAKu1C,mBAAmB2B,+BACvBxrC,KACDgE,EAAAA,IAAG,SACA5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACkK,EAAAjK,EAAA,GAAeorC,EAAAprC,EAAA,GAAYqrC,EAAArrC,EAAA,GAC3B,OAAAiK,IAAkBmhC,GAAcC,KAItCp3C,KAAK4W,aAAapL,IAChBxL,KAAKu1C,mBACF8B,6BACA5qC,UAAS,SAAC6qC,GACT/rC,EAAKgsC,UAAUD,MAIrBt3C,KAAK4W,aAAapL,IAChBxL,KAAKu1C,mBAAmBiC,2BAA2B/qC,UAAS,SAAC3J,GAC3DyI,EAAKksC,QAAQ30C,OAKTizC,EAAA71C,UAAAu3C,QAAV,SAAkB30C,GACZA,IACF9C,KAAKi2C,sBAAsBI,oBACzBr2C,KAAKk2C,0BAEPl2C,KAAKu1C,mBAAmBuB,mCAI5Bf,EAAA71C,UAAAq3C,UAAA,SAAUD,GACJA,IACFt3C,KAAKsjB,KAAKo0B,QACV13C,KAAKu1C,mBAAmBuB,mCAIlBf,EAAA71C,UAAAy2C,6BAAV,SACE1vB,EACA2vB,GAFF,IAAArrC,EAAAvL,KAIEA,KAAK23C,kBAAoBf,GAAW,GAChC3vB,EAAK2wB,iBACP3wB,EAAK2wB,gBAAgB1rC,QAAO,SAAC2rC,GAC3BtsC,EAAKosC,kBAAoBpsC,EAAKosC,kBAAkBr5B,OAAM,SACpDw5B,GAAU,OAAAA,EAAOC,WAAaF,EAAe5kC,SAInDjT,KAAKg4C,gBAAkBh4C,KAAK23C,mBAG9B5B,EAAA71C,UAAA+3C,aAAA,WACEj4C,KAAKu1C,mBAAmB2C,WAAWl4C,KAAKsjB,KAAKnhB,MAAM40C,WAAY/2C,KAAKw2C,SAEtET,EAAA71C,UAAAi4C,oBAAA,SAAoBJ,GAClB/3C,KAAKu1C,mBAAmB2C,WAAWH,EAAU/3C,KAAKw2C,QAClDx2C,KAAKo2C,mBAAoB,GAG3BL,EAAA71C,UAAAoe,OAAA,SAAO+zB,OACC+F,EAAc/F,EAAMgG,cAE1Br4C,KAAKg4C,gBAAkBh4C,KAAK23C,kBAAkBr5B,OAAM,SAClDw5B,GAAU,OAAAA,EAAOC,SAASM,cAAc3oB,QAAQ0oB,IAAgB,KAIpErC,EAAA71C,UAAAkJ,KAAA,WACEpJ,KAAKg4C,gBAAkBh4C,KAAK23C,kBACxB33C,KAAK23C,kBAAkBh3C,OAAS,IAClCX,KAAKo2C,mBAAoB,IAI7BL,EAAA71C,UAAA4J,MAAA,SAAMsI,GACCpS,KAAKm2C,mBACRn2C,KAAKo2C,mBAAoB,EACrBhkC,GAASA,EAAMD,QACHC,EAAY,OAAEguB,QAGhCpgC,KAAKm2C,kBAAmB,GAG1BJ,EAAA71C,UAAAo4C,aAAA,WACEt4C,KAAKm2C,kBAAmB,GAG1BJ,EAAA71C,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,cAEpBrN,KAAKu1C,mBAAmBuB,sDA5M3BlvC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,uoGAfA+gB,EAAAA,mBAEAmS,EAAAA,mBADA8a,EAAAA,0BAJO1E,EAAAA,mBAOPmH,EAAAA,6BAGAld,EAAAA,wBAoNF0a,KC/NA,IAAAyC,GAAA,WAcA,SAAAA,KAqB+B,2BArB9BrwC,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAAC2tC,GAAqBT,IACpCzsC,QAAS,CAACktC,GAAqBT,IAC/BjtC,QAAS,CACP6gB,EAAAA,qBACA5gB,EAAAA,aACAsU,EAAAA,eACAnC,EAAAA,YACAC,EAAAA,oBACArL,EAAAA,WACAnH,EACAK,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbq5B,yBAA0B,CACxBp5B,UAAW02B,QAKnBz2B,gBAAiB,CAACy2B,QAEWyC,EAnC/B,iBCuFE,SAAAE,EACYryB,EACAqqB,EACA5V,EACFpB,GAHE15B,KAAAqmB,YAAAA,EACArmB,KAAA0wC,GAAAA,EACA1wC,KAAA86B,qBAAAA,EACF96B,KAAA05B,cAAAA,EAtEV15B,KAAAw1C,YAAa,EAGbx1C,KAAA24C,WAAY,EAGZ34C,KAAAsJ,QAAoC,CAClCsvC,gBAAgB,EAChBC,YAAa,MAGf74C,KAAA84C,2BAAgD,GAGhD94C,KAAAymB,kBAAuCC,EAAAA,kBAAkBC,WA4BzD3mB,KAAAgW,eAAgB,EAEhBhW,KAAAsjB,KAAkBtjB,KAAK0wC,GAAGI,MAAM,IAExB9wC,KAAA+4C,OAAiB,GAyG3B,OAvIEv5C,OAAA6H,eACIqxC,EAAAx4C,UAAA,QAAK,KA+BT,WACE,OAAOF,KAAK+4C,YAjCd,SACUA,GADV,IAAAxtC,EAAAvL,KAEM+4C,EAAOC,MAAK,SAACv4B,GAAQ,OAAAA,EAAK5gB,eAAe,gBAC3CG,KAAK+4C,OAASA,EAAOrpC,IAAG,SAACupC,OACjBzwB,EAAQhpB,OAAOa,OACnB,GACA,EAAuC64C,YAGzC,OADA1wB,EAAM6qB,SAAW4F,EAAiB5F,SAC3B7qB,KAGTxoB,KAAK+4C,OAASA,EACd/4C,KAAK4Q,MAAM1E,QAAO,SAACuU,GACT,IAAAxN,EAAAwN,EAAAqZ,QAAA7mB,KACH1H,EAAK+X,KAAK4tB,SAASj+B,GAGJ1H,EAAK+X,KAAK4tB,SAASj+B,GAC3Bi+B,SAASmC,SAASZ,SAAShyB,EAAK4yB,UAH1C9nC,EAAK+X,KAAKkwB,WAAWvgC,EAAM1H,EAAKkoC,qBAAqBhzB,wCA0C7Di4B,EAAAx4C,UAAA4K,SAAA,aAGA4tC,EAAAx4C,UAAAi5C,sBAAA,WACE,QAAIn5C,KAAK05B,eACA15B,KAAK05B,cAAc6U,UAAU,iBAMxCmK,EAAAx4C,UAAA2zC,YAAA,SAAYpzB,GACNzgB,KAAK86B,sBAAwB96B,KAAKsJ,QAAQsvC,eAC5C54C,KAAK86B,qBAAqB+Y,YAAYpzB,GAEtCzgB,KAAKqmB,YAAYwtB,YAAYpzB,UAExBzgB,KAAKsjB,KAAK4tB,SAASzwB,EAAKqZ,QAAQ7mB,OAGzCylC,EAAAx4C,UAAA4zC,YAAA,SAAYhoC,OACV2U,EAAA3U,EAAA2U,KACA/H,EAAA5M,EAAA4M,gBAKA1Y,KAAKqmB,YAAYytB,YAAYrzB,EAAKmI,YAAalQ,IAGzCggC,EAAAx4C,UAAAuzC,qBAAR,SAA6BjrB,GAC3B,OAAOxoB,KAAK0wC,GAAGI,MAAM,CACnBloB,YAAaJ,EAAMI,YACnByqB,SAAU7qB,EAAM6qB,YAIpBqF,EAAAx4C,UAAAk5C,qCAAA,SAAqC34B,eAC7BoH,EAAqC,GAE3C,GAAI7nB,KAAKsJ,QAAQsvC,eACf,OAAO/wB,EAET,GACE7nB,KAAK84C,4BACL94C,KAAK84C,2BAA2Bn4C,OAAS,MAEzC,IAAwB,IAAAwnB,EAAAlb,EAAAjN,KAAK84C,4BAA0BzwB,EAAAF,EAAA1mB,QAAA4mB,EAAAnmB,KAAAmmB,EAAAF,EAAA1mB,OAAE,CAApD,IAAMumB,EAASK,EAAAlmB,MAClB,GACE6lB,EAAUC,aACVD,EAAUE,iBACVF,EAAUE,gBAAgBvnB,OAAS,MAEnC,IAA4B,IAAA04C,GAAAjxB,OAAA,EAAAnb,EAAA+a,EAAUE,kBAAeoxB,EAAAD,EAAA53C,QAAA63C,EAAAp3C,KAAAo3C,EAAAD,EAAA53C,OAAE,CAAlD,IAAM6mB,EAAagxB,EAAAn3C,MAClBnC,KAAKuoB,kBAAkBD,EAAe7H,IACxCoH,EAAgBxlB,KAAK2lB,wMAM/B,OAAOH,GAGD6wB,EAAAx4C,UAAAqoB,kBAAR,SAA0BD,EAAoBE,WACtCC,EAAsBH,EAAcI,iBAC1C,GAAIF,EAAMG,SAAWH,EAAMG,QAAQhoB,OAAS,EAAG,KAC7C,IAAuB,IAAAoL,EAAAkB,EAAAub,EAAMG,SAAOR,EAAApc,EAAAtK,QAAA0mB,EAAAjmB,KAAAimB,EAAApc,EAAAtK,OAAE,CACpC,GADiB0mB,EAAAhmB,MACJymB,cAAgBH,EAC3B,OAAO,oGAGX,OAAO,EAEP,OAAOA,IAAwBD,EAAMI,iCA1J1ChhB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,4kEAdA+gB,EAAAA,mBAFOuoB,EAAAA,mBAKP9U,EAAAA,4BACAjB,EAAAA,4DAaCrzB,EAAAA,yBAGAA,EAAAA,uBAGAA,EAAAA,0CAKAA,EAAAA,iCAGAA,EAAAA,qBAGAA,EAAAA,6BAyBAA,EAAAA,SA8GH0wC,KCxJA,IAAAa,GAAA,WAkDE,SAAAA,EACYnG,EACF1Z,GADE15B,KAAAozC,iBAAAA,EACFpzC,KAAA05B,cAAAA,EA9CV15B,KAAAw5C,SAAU,EAKVx5C,KAAAw1C,YAAa,EAEbx1C,KAAAgW,eAAgB,EAGhBhW,KAAAsJ,QAAoC,CAClCsvC,gBAAgB,EAChBC,YAAa,MAGf74C,KAAAymB,kBAAuCC,EAAAA,kBAAkBC,WAMzD3mB,KAAAsd,OAAS,IAAInP,EAAAA,aAEbnO,KAAAkW,OAAS,IAAI/H,EAAAA,aAEbnO,KAAA+iB,KAAO,IAAI5U,EAAAA,aA4Db,OApCEorC,EAAAr5C,UAAA4K,SAAA,WACE9K,KAAKy5C,0BAA4Bz5C,KAAKozC,iBAAiB3rB,4BACrDznB,KAAKygB,KACLzgB,KAAKymB,oBAKT8yB,EAAAr5C,UAAAi5C,sBAAA,WACE,QAAIn5C,KAAK05B,eACA15B,KAAK05B,cAAc6U,UAAU,iBAMxCgL,EAAAr5C,UAAAw5C,oBAAA,SAAoB5f,GAElB,OACEA,GACAA,EAAQmP,OAC2B,eAAnCnP,EAAQmP,MAAMC,kBAIlBqQ,EAAAr5C,UAAAy5C,WAAA,SAAWjhC,GACT1Y,KAAKkW,OAAOpH,KAAK,CAAE2R,KAAMzgB,KAAKygB,KAAM/H,gBAAeA,KAGrD6gC,EAAAr5C,UAAA0sC,WAAA,WACE5sC,KAAKsd,OAAOxO,KAAK9O,KAAKygB,OAGxB84B,EAAAr5C,UAAA05C,SAAA,WACE55C,KAAK+iB,KAAKjU,4BAzFblH,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,eACVC,SAAA,urMAjBOse,UAHAiV,EAAAA,yDAuBNrzB,EAAAA,oBAEAA,EAAAA,0BAGAA,EAAAA,6BAEAA,EAAAA,uBAGAA,EAAAA,iCAKAA,EAAAA,0CAGAA,EAAAA,sBAGAmH,EAAAA,uBAEAA,EAAAA,qBAEAA,EAAAA,uBAGAnH,EAAAA,SA0DHuxC,EA3FA,GCpBA,IAAAM,GAAA,WAGA,SAAAA,KAOA,2BAPCjyC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,w1DAGCE,EAAAA,SAEH6xC,EAVA,GCAA,IAAAC,GAAA,WAaA,SAAAA,KAqB+B,2BArB9B3xC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAijC,GACA99B,EAAAA,oBACAlF,EAAAA,UACAukC,EAAAA,UACA1E,GACAhmC,EAAAA,WACAgG,EACAmF,EACA0O,EAAAA,sBAEF9gB,aAAc,CACZmxC,GACAM,GACAnB,IAEF7vC,QAAS,CAAC0wC,GAAmBb,GAAuBmB,QAEvBC,EAlC/B,GCAAE,GAAA,WAkBA,SAAAA,KAyB8B,2BAzB7B7xC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPyxC,GACAxxC,EAAAA,aACAiN,EAAAA,aACAuH,GACAu4B,GACAnsB,EAAAA,qBACA3gB,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb66B,0BAA2B,CACzB56B,UAAW20B,OAIjBx+B,EAAAA,UACAtN,EACAmH,EAAAA,WACAmL,EACA2I,IAEF/a,aAAc,CAAC4rC,GAAoBb,IACnC7zB,gBAAiB,CAAC00B,GAAoBb,IACtCtqC,QAAS,CAACmrC,GAAoBb,QAEF6G,EA3C9B,iBCgDE,SAAAE,EACY7zB,EACA+sB,EACAtY,EACF+Q,EACAzmB,EACAsU,GALE15B,KAAAqmB,YAAAA,EACArmB,KAAAozC,iBAAAA,EACApzC,KAAA86B,qBAAAA,EACF96B,KAAA6rC,YAAAA,EACA7rC,KAAAolB,eAAAA,EACAplB,KAAA05B,cAAAA,EA5BV15B,KAAAm6C,UAAW,EAEXn6C,KAAAymB,kBAAuCC,EAAAA,kBAAkBC,WAsG3D,OAzEEuzB,EAAAh6C,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKi1C,MAAQj1C,KAAKqmB,YAAYzF,YAM1B5gB,KAAKozC,mBACPpzC,KAAKo6C,YAAcp6C,KAAKozC,iBAAiBxsB,8BAG3C5mB,KAAKq6C,SAAWr6C,KAAKqmB,YAClBi0B,aACA5uC,KAAK4S,EAAAA,OAAM,SAACqK,GAAW,OAAAA,EAAQhoB,OAAS,KAEvCX,KAAKm5C,wBACPn5C,KAAKu6C,YAAc9uC,EAAAA,cAAc,CAC/BzL,KAAKqmB,YAAY8uB,YACjBn1C,KAAK86B,qBAAqBqa,YAC1Bn1C,KAAK6rC,YAAY2O,mBAChB9uC,KACDG,EAAAA,IAAG,SAAEC,OAAKquC,EAALx3C,EAAAmJ,EAAA,GAAK,GAAc,OAACP,EAAK4uC,SAAWA,IACzCzqC,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC2uC,EAAA1uC,EAAA,GAAY2uC,EAAA3uC,EAAA,GAChB,OAD2BA,EAAA,GAChB0uC,GAAcC,EAAYD,KAMzCz6C,KAAKu6C,YAAcv6C,KAAKqmB,YAAY8uB,YAGlCn1C,KAAKozC,mBACPpzC,KAAK2zC,iBAAmB3zC,KAAKozC,iBAAiB5sB,mBAC5CxmB,KAAKymB,qBAMXyzB,EAAAh6C,UAAAi5C,sBAAA,WACE,QAAIn5C,KAAK05B,eACA15B,KAAK05B,cAAc6U,UAAU,iBAWxC2L,EAAAh6C,UAAAy6C,wBAAA,SAAwB1zB,OAChBE,EAAsB,GAC5BA,EAAoB9kB,KAAIxB,MAAxBsmB,EAAmBpkB,EAAUkkB,EAAKG,0BAA4B,KAC9DD,EAAoB9kB,KAAIxB,MAAxBsmB,EAAmBpkB,EAAUkkB,EAAK6xB,4BAA8B,SAE1DzxB,EAAoB,GAI1B,OAHAA,EAAkBhlB,KAAIxB,MAAtBwmB,EAAiBtkB,EAAUkkB,EAAKK,wBAA0B,KAC1DD,EAAkBhlB,KAAIxB,MAAtBwmB,EAAiBtkB,EAAUkkB,EAAKU,0BAA4B,KAE5D5kB,EAAWokB,EAAwBE,IAGrC6yB,EAAAh6C,UAAA06C,aAAA,SAAan6B,GACPzgB,KAAKm6C,UACPn6C,KAAKqmB,YAAYwtB,YAAYpzB,GAC7BzgB,KAAK86B,qBAAqB+Z,SAASp0B,EAAKqZ,QAAQ7mB,KAAMwN,EAAK4yB,WAE3DrzC,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,+BA9GvC3kC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,skDACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAhBzC0X,EAAAA,mBAUOzC,UAJPkW,EAAAA,4BARAtB,EAAAA,mBAOA7U,EAAAA,sBAJAkV,EAAAA,wBA6HF6e,KClIA,IAAAW,GAAA,WAeA,SAAAA,KAsBgC,2BAtB/B1yC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPyxC,GACAxxC,EAAAA,aACAkwC,GACAjjC,EAAAA,aACAC,EAAAA,UACA6/B,GACAnsB,EAAAA,qBACA3gB,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb07B,cAAe,CACbz7B,UAAW66B,OAIjB7qC,EAAAA,YAEFjH,aAAc,CAAC8xC,IACfrxC,QAAS,CAACqxC,IACV56B,gBAAiB,CAAC46B,QAEYW,EArChC,iBCUE,SAAAE,EACU10B,EACAjB,GADAplB,KAAAqmB,YAAAA,EACArmB,KAAAolB,eAAAA,SAGV21B,EAAA76C,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACE,OAAOyL,EAAAA,cAAc,CACnBzL,KAAKqmB,YAAYzF,YACjB5gB,KAAKqmB,YAAY8uB,cAChBzpC,KACD4S,EAAAA,OAAM,SAAExS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACC,EAAA,GAAe,OAAZA,EAAA,KACZ2D,EAAAA,IAAG,SAAE5D,OAACmb,EAADtkB,EAAAmJ,EAAA,GAAC,GACJ,OAAIP,EAAKyvC,QAAQ/zB,KACf1b,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,UAC3B,OAOPwO,EAAA76C,UAAA86C,QAAR,SAAgB/zB,GACd,OAAOA,IAASA,EAAKg0B,gCA1BxBr0C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALC+hB,EAAAA,mBAAa1C,EAAAA,sMCwB1B,SAAA+0B,EACU70B,EACAyU,EACApB,GAFA15B,KAAAqmB,YAAAA,EACArmB,KAAA86B,qBAAAA,EACA96B,KAAA05B,cAAAA,SAGVwhB,EAAAh7C,UAAAkuB,OAAA,SACEmC,EACAvC,EACAH,GAEA,MAAqB,qBAAjBG,GAAwCH,EAuCrC0C,EAtCDvwB,KAAK05B,eAAiB15B,KAAK05B,cAAc6U,UAAU,gBAC9C9iC,EAAAA,cAAc,CACnB8kB,EACAvwB,KAAKqmB,YAAYzF,YACjB5gB,KAAK86B,qBAAqBqgB,YACzBzvC,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmiB,EAAAliB,EAAA,GAAOkb,EAAAlb,EAAA,GAAMqvC,EAAArvC,EAAA,GACjB,OAAIkb,EAAKg0B,WACAhtB,EAAM3P,OAAM,SAACwQ,GAAQ,MAAS,2BAATA,IACnBssB,EAAcH,WAChBhtB,EAAM3P,OAAM,SACjBwQ,GACE,MAAS,2BAATA,GACS,2BAATA,IAGGb,EAAM3P,OAAM,SACjBwQ,GACE,MAAS,eAATA,GAAkC,2BAATA,OAO9BrjB,EAAAA,cAAc,CAAC8kB,EAAQvwB,KAAKqmB,YAAYzF,cAAclV,KAC3DgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmiB,EAAAliB,EAAA,GACJ,OADWA,EAAA,GACFkvC,WACAhtB,EAAM3P,OAAM,SAACwQ,GAAQ,MAAS,2BAATA,IAErBb,EAAM3P,OAAM,SACjBwQ,GAAQ,MAAS,eAATA,GAAkC,2BAATA,4BA3D9CloB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATZ+hB,EAAAA,mBACAyT,EAAAA,4BACAjB,EAAAA,mOCJF,IAAAggB,GAAA,WAcE,SAAAA,EAAsBh1B,GAAArmB,KAAAqmB,YAAAA,EAQxB,OANEg1B,EAAAn7C,UAAA4K,SAAA,WACE9K,KAAKi1C,MAAQj1C,KAAKqmB,YAAYzF,YAC9B5gB,KAAKq6C,SAAWr6C,KAAKqmB,YAClBi0B,aACA5uC,KAAK4S,EAAAA,OAAM,SAACqK,GAAW,OAAAA,EAAQhoB,OAAS,0BAf9CiH,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,wbACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAP5B0X,EAAAA,eAqBfwyB,EAtBA,GCAA,IAAAC,GAAA,WAaA,SAAAA,KAoB+B,2BApB9BnzC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAC,EAAAA,UACAjN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbi8B,oBAAqB,CACnBh8B,UAAWg8B,OAIjBvB,GACAzqC,EAAAA,WACAmpC,IAEFpwC,aAAc,CAACizC,IACfxyC,QAAS,CAACwyC,IACV/7B,gBAAiB,CAAC+7B,QAEWC,EAjC/B,GCAAC,GAAA,WAwBE,SAAAA,EAAsBl1B,GAAArmB,KAAAqmB,YAAAA,EAZtBrmB,KAAAsK,UAAYC,EAEZvK,KAAAw7C,UAAgCx7C,KAAKqmB,YAAYzF,YAAYlV,KAC3DwG,EAAAA,UAAU,CAAEupC,sBAAuB,IACnC/rC,EAAAA,IAAG,SAACuX,GAAQ,OAAAA,EAAKw0B,uBAAyB,KAG5Cz7C,KAAA07C,OAA6B17C,KAAKqmB,YAAYzF,YAAYlV,KACxD4S,EAAAA,OAAM,SAAC2I,GAAQ,QAAEA,EAAK00B,aACtBjsC,EAAAA,IAAG,SAACuX,GAAQ,OAAAA,EAAK00B,WAAWC,kBAIhC,2BAnBCh0C,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,eACVC,SAAA,yTACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDARlC0X,EAAAA,eAwBT0yB,EAzBA,GCAA,IAAAM,GAAA,WAYA,SAAAA,KAmB6B,2BAnB5B1zC,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAhN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbm8B,kBAAmB,CACjBl8B,UAAWk8B,OAIjB/lC,EAAAA,UACAtN,EACAmH,EAAAA,YAEFjH,aAAc,CAACmzC,IACf1yC,QAAS,CAAC0yC,IACVj8B,gBAAiB,CAACi8B,QAESM,EA/B7B,GCAAC,GAAA,WAoCE,SAAAA,EACYC,EACA9H,EACApI,GAHZ,IAAAtgC,EAAAvL,KACYA,KAAA+7C,gBAAAA,EACA/7C,KAAAi0C,sBAAAA,EACAj0C,KAAA6rC,YAAAA,EArBZ7rC,KAAAg8C,SAAgCh8C,KAAKi0C,sBAAsB3I,aAAa5/B,KACtE4S,EAAAA,OAAM,SAACwb,GAAW,OAAAnvB,QAAQmvB,KAC1BjuB,EAAAA,IAAG,SAACiuB,GAAW,OAAAvuB,EAAKgpC,aAAaza,MAGnC95B,KAAAi8C,iBAEIj8C,KAAK+7C,gBAAgBG,cAAcxwC,KACrC4S,EAAAA,OAAM,SAAC69B,GAAY,OAAAxxC,QAAQwxC,KAC3BzsC,EAAAA,IAAG,SAAC0sC,GAAY,OAAAA,EAASzzB,WAG3B3oB,KAAAq8C,cAAqCr8C,KAAK6rC,YAAY2O,iBACtDx6C,KAAAmL,SAAgCnL,KAAK+7C,gBAAgBO,qBAErDt8C,KAAAo0C,UAAW,EACXp0C,KAAAsK,UAAYC,EAyBd,OAjBEuxC,EAAA57C,UAAAsL,IAAA,SAAIsuB,GACF95B,KAAK+7C,gBAAgBlH,SAAS/a,EAAQ7mB,OAGxC6oC,EAAA57C,UAAAod,OAAA,SAAOkL,GACLxoB,KAAK+7C,gBAAgBlI,YAAYrrB,IAGnCszB,EAAA57C,UAAAq8C,qBAAA,SAAqBziB,EAAkBnR,GAErC,OADaA,EAAQnjB,KAAI,SAACgjB,GAAS,OAAAA,EAAMsR,QAAQ7mB,OAAS6mB,EAAQ7mB,QAI5D6oC,EAAA57C,UAAAq0C,aAAR,SAAqBza,GACnB95B,KAAKo0C,SACHta,EAAQmP,OAA4C,eAAnCnP,EAAQmP,MAAMC,sCA7CpCthC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,6iDACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAVzCqrC,EAAAA,uBAKOzR,UARP/P,EAAAA,eAyDF8gB,EA3DA,GCAA,IAAAW,GAAA,WAYA,SAAAA,KAmBkC,2BAnBjCt0C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb08B,uBAAwB,CACtBz8B,UAAWy8B,OAIjBzsC,EAAAA,WACAnH,EACAqN,EAAAA,aACAC,EAAAA,WAEFpN,aAAc,CAAC0zC,IACfx8B,gBAAiB,CAACw8B,IAClBjzC,QAAS,CAACizC,QAEsBW,EA/BlC,iBCyBE,SAAAC,EACYrqB,EACAhM,EACAyU,GAFA96B,KAAAqyB,WAAAA,EACAryB,KAAAqmB,YAAAA,EACArmB,KAAA86B,qBAAAA,EAwBd,OArBE4hB,EAAAx8C,UAAA4K,SAAA,WACE9K,KAAK28C,aAAe38C,KAAKqmB,YACtBzF,YACAlV,KAAKgE,EAAAA,IAAG,SAACuX,GAAQ,QAAEA,GAAQA,EAAKg0B,YAAch0B,EAAKg0B,WAAa,MACnEj7C,KAAK48C,cAAgB58C,KAAK86B,qBAAqBqgB,UAC/Cn7C,KAAKq6C,SAAWr6C,KAAK86B,qBAClBwf,aACA5uC,KAAK4S,EAAAA,OAAM,SAACqK,GAAW,OAAAA,EAAQhoB,OAAS,KAC3CX,KAAKu6C,YAAc9uC,EAAAA,cAAc,CAC/BzL,KAAKqmB,YAAY8uB,YACjBn1C,KAAK86B,qBAAqBqa,cACzBzpC,KAAKgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC2uC,EAAA1uC,EAAA,GAAY2uC,EAAA3uC,EAAA,GAAe,OAAA0uC,GAAcC,KACvD16C,KAAKghB,MAAQhhB,KAAKqyB,WAAW2L,iBAC3B,gCAIJ0e,EAAAx8C,UAAA28C,WAAA,SAAWp8B,GACTzgB,KAAK86B,qBAAqB+Y,YAAYpzB,GACtCzgB,KAAKqmB,YAAYwuB,SAASp0B,EAAKqZ,QAAQ7mB,KAAMwN,EAAK4yB,+BArCrDzrC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,4rCARAioB,EAAAA,kBAFA+sB,EAAAA,yBAHAxgB,EAAAA,wBAkDFogB,KCpDA,IAAAK,GAAA,WAWA,SAAAA,KAoBiC,2BApBhC50C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbs9B,sBAAuB,CACrBr9B,UAAWq9B,KAGfzR,SAAU,CACR2P,aAAc,SAGlBvrC,EAAAA,WACAyqC,IAEF1xC,aAAc,CAACs0C,IACf7zC,QAAS,CAAC6zC,IACVp9B,gBAAiB,CAACo9B,QAEaK,EA/BjC,GCAAC,GAAA,WAYA,SAAAA,KA2BkC,2BA3BjC70C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACP0xC,EAAAA,UACAc,GACAS,GACAxB,GACAiD,IAEFl0C,QAAS,CACP4zC,GACA5B,GACAS,GACAxB,GACAE,GACA6B,GACAoB,EAAAA,WACAF,IAEF30C,aAAc,GACdK,UAAW,CACT,CACEC,QAAS4kB,GACT3kB,YAAauyC,GACbrlC,OAAO,QAIqBmnC,EAvClC,OCGEE,KAAO,OACPC,gBAAkB,kBAClBC,eAAiB,qBAGnB,qBCPEC,iBAAmB,kBACnBC,cAAgB,eAChBC,gBAAkB,iBAClBC,aAAe,eCDjB,IAAaC,GAAwC,CACnDnkB,SAAU,CACRokB,MAAO,CACL,CACElxC,GAAI,kBACJ6jB,KAAM,mCACNstB,UAAW,0BACX54C,KAAM,CAAC64C,GAAiBP,mBAE1B,CACE7wC,GAAI,eACJ6jB,KAAM,gCACNstB,UAAW,uBACX54C,KAAM,CAAC64C,GAAiBN,gBAE1B,CACE9wC,GAAI,iBACJ6jB,KAAM,kCACNstB,UAAW,yBACX54C,KAAM,CAAC64C,GAAiBL,kBAE1B,CACE/wC,GAAI,cACJ6jB,KAAM,+BACNstB,UAAW,sBACX54C,KAAM,CAAC64C,GAAiBJ,gBAG5BK,SAAS,EACTC,oBAAqB,CAACC,GAAwBb,MAC9Cc,OAAO,kBCdT,SAAAC,EACUC,EACAC,GADAn+C,KAAAk+C,eAAAA,EACAl+C,KAAAm+C,qBAAAA,EARVn+C,KAAA09C,MAAwB19C,KAAKk+C,eAAe5kB,SAASokB,MAC7C19C,KAAA69C,QAAmB79C,KAAKk+C,eAAe5kB,SAASukB,QAChD79C,KAAAg+C,MAAiBh+C,KAAKk+C,eAAe5kB,SAAS0kB,MAC9Ch+C,KAAA89C,oBACN99C,KAAKk+C,eAAe5kB,SAASwkB,qBAAuB,UAOtDG,EAAA/9C,UAAAk+C,gBAAA,SAAgBC,GACd,OAAOr+C,KAAK09C,MAAM19C,KAAKs+C,qBAAqB,OAAQD,KAGtDJ,EAAA/9C,UAAAq+C,qBAAA,SAAqBF,GACnB,OAAOr+C,KAAKo+C,gBAAgBC,GAAiBV,WAG/CM,EAAA/9C,UAAAs+C,0BAAA,WACE,OAAOx+C,KAAK09C,MAAM,GAAGC,WAGvBM,EAAA/9C,UAAAu+C,uBAAA,SAAuBC,OACfC,EAAY3+C,KAAK4+C,oBAAoBF,GAE3C,OAAOC,GAAa,GAAK3+C,KAAK09C,MAAMiB,EAAY,GAC5C3+C,KAAK6+C,wBAAwB7+C,KAAK09C,MAAMiB,EAAY,GAAGhB,WACvD,MAGNM,EAAA/9C,UAAA4+C,2BAAA,SAA2BJ,OACnBC,EAAY3+C,KAAK4+C,oBAAoBF,GAE3C,OAAOC,GAAa,GAAK3+C,KAAK09C,MAAMiB,EAAY,GAC5C3+C,KAAK6+C,wBAAwB7+C,KAAK09C,MAAMiB,EAAY,GAAGhB,WACvD,MAGNM,EAAA/9C,UAAA0+C,oBAAA,SAAoBF,WAKdC,EAJEI,EAAyB/+C,KAAKg/C,6BAClCN,GAIE1iC,EAAQ,MACZ,IAAmB,IAAAjQ,EAAAkB,EAAAjN,KAAK09C,OAAKv1B,EAAApc,EAAAtK,QAAA0mB,EAAAjmB,KAAAimB,EAAApc,EAAAtK,OAAE,CAA1B,IAAMc,EAAI4lB,EAAAhmB,MAEX48C,IAAmB,IAAI/+C,KAAK6+C,wBAAwBt8C,EAAKo7C,WAEzDgB,EAAY3iC,EAEZA,sGAIJ,OAAO2iC,GAAa,EAAIA,EAAY,MAG5BV,EAAA/9C,UAAA++C,oBAAV,SACEC,EACAC,GAEA,OAAID,EAAcE,aAAaj9C,MAAQg9C,EAAcC,aAAaj9C,MACzD,EAEP+8C,EAAcE,aAAaj9C,MAAQg9C,EAAcC,aAAaj9C,OAEtD,EAEH,GAGC87C,EAAA/9C,UAAAm/C,yBAAV,SACEC,EACAtjC,GAFF,IAAAzQ,EAAAvL,KAIE,YAFA,IAAAgc,IAAAA,EAAA,GAEQhc,KAAK89C,oBAAoB9hC,IAC/B,KAAK+hC,GAAwBb,KAC3B,GAA4C,IAAxCoC,EAAc,GAAGF,aAAaj9C,MAChC,OAAOm9C,EAAc,GAAGrsC,KAE1B,MACF,KAAK8qC,GAAwBZ,oBACrBoC,EAAsBD,EAAc95C,KAAI,SAC5Cg6C,GAAgB,OAAoC,IAApCA,EAAaJ,aAAaj9C,QAE5C,GAAIo9C,EACF,OAAOA,EAAoBtsC,KAE7B,MACF,KAAK8qC,GAAwBX,eAC3B,OAAOkC,EAAcA,EAAc3+C,OAAS,GAAGsS,KACjD,YACQwsC,EAAYH,EAAc95C,KAAI,SAClCg6C,GAAgB,OAAAA,EAAavsC,OAAS1H,EAAKuyC,oBAAoB9hC,KAEjE,GAAIyjC,EACF,OAAOA,EAAUxsC,KAIvB,OADiBjT,KAAK89C,oBAAoBn9C,OAAS,GAAKqb,EAEpDsjC,EAAc,GAAGrsC,KACjBjT,KAAKq/C,yBAAyBC,EAAetjC,EAAQ,IAG3DiiC,EAAA/9C,UAAAw/C,yBAAA,SAAyBJ,GAEvB,OADAA,EAAc5J,KAAK11C,KAAKi/C,qBACjBj/C,KAAKq/C,yBAAyBC,IAGvCrB,EAAA/9C,UAAAy/C,kBAAA,WACE,OAAO3/C,KAAK69C,SAGdI,EAAA/9C,UAAA0/C,gBAAA,WACE,OAAO5/C,KAAKg+C,OAGNC,EAAA/9C,UAAA8+C,6BAAR,SACEN,GAEA,OAAOA,GACLA,EAAemB,UACfnB,EAAemB,SAAS56C,IACtB,IAAIy5C,EAAemB,SAAS56C,IAAI2qB,KAAK,KACrC,MAGEquB,EAAA/9C,UAAA2+C,wBAAR,SAAgCiB,GAC9B,OAAO9/C,KAAKm+C,qBAAqB4B,eAAeD,GAAWE,MAAM,IAG3D/B,EAAA/9C,UAAAo+C,qBAAR,SAA6BxkC,EAAa3X,GACxC,OAAO2X,GAAO3X,EACVnC,KAAK09C,MAAMld,UAAS,SAAEj+B,GAAuB,OAAAA,EAAKuX,GAAKnU,SAASxD,KAChE,0BA7IPyE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANZm5C,UAFqBC,EAAAA,uMCgBrB,SAAAC,EACU/6B,EACAymB,EACAuU,EACA/5B,EACAg6B,GAJArgD,KAAAolB,eAAAA,EACAplB,KAAA6rC,YAAAA,EACA7rC,KAAAogD,oBAAAA,EACApgD,KAAAqmB,YAAAA,EACArmB,KAAAqgD,sBAAAA,SAGVF,EAAAjgD,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACE,OAAOyL,EAAAA,cAAc,CACnBzL,KAAK6rC,YAAYG,eACjBhsC,KAAKqmB,YAAYi6B,oBAChB50C,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmgC,EAAAlgC,EAAA,GAAOwuB,EAAAxuB,EAAA,GACX,IAAKkgC,EAAMsB,aAAc,CACvB,GAAIhiC,EAAK8a,YAAYk6B,cACnB,OAAO51C,QAAQ4vB,GAEbhvB,EAAK80C,sBAAsBT,kBAC7Br0C,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,SAAW,CAAEiU,QAAQ,IAEvDj1C,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,UAEpChhC,EAAK60C,oBAAoBK,kBAE3B,QAASxU,EAAMsB,qCA7BtB3mC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATZqf,EAAAA,sBAFA6U,EAAAA,mBADA0lB,EAAAA,2BAEA73B,EAAAA,mBAOOo1B,mPCZT,IAAA0C,GAAA,WA2BE,SAAAA,EACUp6B,EACAq6B,EACAC,EACAx6B,GAJV,IAAA9a,EAAAvL,KACUA,KAAAumB,gBAAAA,EACAvmB,KAAA4gD,wBAAAA,EACA5gD,KAAA6gD,uBAAAA,EACA7gD,KAAAqmB,YAAAA,EAERrmB,KAAK8gD,QAAU9gD,KAAKqmB,YAAYzF,YAAYlV,KAC1CgE,EAAAA,IAAG,SAAC2pB,GACF,OACGA,EAASkB,MAAQlB,EAASkB,KAAKwD,MAAQ0Y,EAAAA,uBACxClrC,EAAK8a,YAAYk6B,cAEVlnB,EAASqd,KAEXrd,EAASpmB,OAElBqL,EAAAA,OAAM,SAACk4B,GAAU,QAAEA,KAGrBx2C,KAAK+gD,0BAA4B/gD,KAAK8gD,QAAQp1C,KAC5CG,EAAAA,IAAG,SAAC2qC,GAAU,OAAAjrC,EAAKgb,gBAAgBy6B,oBAAoBxK,KACvD1wB,EAAAA,YAAY,GACZvH,EAAAA,UAAS,WAAO,OAAAhT,EAAKgb,gBAAgB06B,6BACrC10B,EAAAA,UAAS,SAAC1X,GAAU,OAACA,YAIzB8rC,EAAAzgD,UAAAghD,mBAAA,WAAA,IAAA31C,EAAAvL,KACE,OAAOA,KAAK+gD,0BAA0Br1C,KACpC6S,EAAAA,UAAS,WAAO,OAAAhT,EAAKq1C,wBAAwBM,yBAIjDP,EAAAzgD,UAAAihD,4BAAA,WAAA,IAAA51C,EAAAvL,KACE,OAAOA,KAAK+gD,0BAA0Br1C,KACpC6S,EAAAA,UAAS,WACP,OAAAhT,EAAKq1C,wBAAwBO,kCAKnCR,EAAAzgD,UAAAkhD,kBAAA,WAAA,IAAA71C,EAAAvL,KACE,OAAOA,KAAK+gD,0BAA0Br1C,KACpC6S,EAAAA,UAAS,WAAO,OAAAhT,EAAKs1C,uBAAuBO,4CAlDjDx6C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAfZgiB,EAAAA,uBAFAoS,EAAAA,+BACAC,EAAAA,8BAFAtS,EAAAA,0PAHF,qBCyBE,SAAAw4B,EACYC,EACAC,EACAX,EACAC,EACAW,EACAnB,GALArgD,KAAAshD,mBAAAA,EACAthD,KAAAuhD,mBAAAA,EACAvhD,KAAA4gD,wBAAAA,EACA5gD,KAAA6gD,uBAAAA,EACA7gD,KAAAwhD,uBAAAA,EACAxhD,KAAAqgD,sBAAAA,EAEVrgD,KAAKyhD,qBACLzhD,KAAK0hD,kBACL1hD,KAAK2hD,0BAGGN,EAAAnhD,UAAAuhD,mBAAV,WAAA,IAAAl2C,EAAAvL,KACEA,KAAK4hD,oBAAsBn2C,EAAAA,cAAc,CACvCzL,KAAKshD,mBAAmBO,eACxB7hD,KAAKshD,mBAAmBQ,4BACxB9hD,KAAK4gD,wBAAwBmB,iCAC5Br2C,KACDuG,EAAAA,aAAa,GACbpG,EAAAA,IAAG,SACAC,GAAAnJ,EAAAmJ,EAAA,GAAG,IAMAP,EAAK+1C,mBAAmBU,kBAI9B1jC,EAAAA,OAAM,SACHxS,GACC,OADDnJ,EAAAmJ,EAAA,GAAG,KAGNyS,EAAAA,UAAS,SACNzS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACm2C,EAAAl2C,EAAA,GAAam2C,EAAAn2C,EAAA,GAKPo2C,EACJF,EAAUz8C,KAAI,SAAC48C,GAAW,OAAAA,EAAQD,kBAAmBF,EAAU,GACjE,OAAIE,GAAkB3iD,OAAOqvB,KAAKszB,GAAgBxhD,QAG5CuhD,EAA0B5K,SAC1B4K,EAA0Bp/C,OAC1Bo/C,EAA0BG,SAG5B92C,EAAKq1C,wBAAwB0B,mBAAmBH,GAE3C5vC,EAAAA,GAAG2vC,GAA2Bx2C,KACnC4S,EAAAA,OAAM,SAAEikC,GACN,OACGA,EAA+BjL,SAC9BiL,EAA+Bz/C,SAChCy/C,EAA+BF,UAGpC9jC,EAAAA,UAAS,SAAEgkC,GACT,OAAIA,EAA+BjL,QAC1B/rC,EAAKi2C,uBAAuBN,qBAE9B3uC,EAAAA,IAAG,KAEZ7C,EAAAA,IAAG,SAACuR,GAAQ,OAAAtW,QAAQsW,GAAQzhB,OAAOqvB,KAAK5N,GAAMtgB,YAG3C4R,EAAAA,IAAG,OAMR8uC,EAAAnhD,UAAAyhD,iBAAV,WAAA,IAAAp2C,EAAAvL,KACEA,KAAKwiD,kBAAoB/2C,EAAAA,cAAc,CACrCzL,KAAKuhD,mBAAmBkB,oBACxBziD,KAAKuhD,mBAAmBmB,iCACxB1iD,KAAK6gD,uBAAuB8B,sCAC3Bj3C,KACDuG,EAAAA,aAAa,GACbpG,EAAAA,IAAG,SACAC,GAAAnJ,EAAAmJ,EAAA,GAAG,IAMAP,EAAKg2C,mBAAmBqB,uBAI9BtkC,EAAAA,OAAM,SACHxS,GAAgE,OAAhEnJ,EAAAmJ,EAAA,GAAG,KAENyS,EAAAA,UAAS,SACNzS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC+2C,EAAA92C,EAAA,GAAY+2C,EAAA/2C,EAAA,GAKNg3C,EACJF,EAASr9C,KAAI,SAAC48C,GAAW,OAAAA,EAAQW,kBAAmBF,EAAS,GAC/D,OAAIE,GAAkBvjD,OAAOqvB,KAAKk0B,GAAgBpiD,QAG5CmiD,EAAyBxL,SACzBwL,EAAyBhgD,OACzBggD,EAAyBT,SAG3B92C,EAAKs1C,uBAAuBmC,kBAAkBD,GAEzCxwC,EAAAA,GAAGuwC,GAA0Bp3C,KAClC4S,EAAAA,OAAM,SAAE2kC,GACN,OACGA,EAA8B3L,SAC7B2L,EAA8BngD,SAC/BmgD,EAA8BZ,UAGnC9jC,EAAAA,UAAS,SAAE0kC,GACT,OAAIA,EAA8B3L,QACzB/rC,EAAKi2C,uBAAuBJ,oBAE9B7uC,EAAAA,IAAG,KAEZ7C,EAAAA,IAAG,SAACuR,GAAQ,OAAAtW,QAAQsW,GAAQzhB,OAAOqvB,KAAK5N,GAAMtgB,YAG3C4R,EAAAA,IAAG,OAMR8uC,EAAAnhD,UAAAwhD,gBAAV,WAAA,IAAAn2C,EAAAvL,KACEA,KAAKkjD,iBAAmBz3C,EAAAA,cAAc,CACpCzL,KAAK4hD,oBACL5hD,KAAK4gD,wBAAwBuC,4BAC7BnjD,KAAK4gD,wBAAwBwC,4BAC7BpjD,KAAK4gD,wBAAwByC,wCAC5B33C,KACDuG,EAAAA,aAAa,GACbsM,EAAAA,UAAS,SACNzS,OAAAC,EAAApJ,EAAAmJ,EAAA,GACCw3C,EAAAv3C,EAAA,GACAw3C,EAAAx3C,EAAA,GACAy3C,EAAAz3C,EAAA,GACA03C,EAAA13C,EAAA,GAEA,OAAIu3C,EACK/wC,EAAAA,GAAG,CACRgxC,EACAC,EACAC,IACC/3C,KACD4S,EAAAA,OAAM,SACHxS,GAIK,OAJLnJ,EAAAmJ,EAAA,GAAK,GAI4BwrC,UAEpC/4B,EAAAA,UAAS,SACNzS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACwzC,EAAAvzC,EAAA,GAAe23C,EAAA33C,EAAA,GAKf,GAAIpB,QAAQ20C,EAAc3+C,QAAS,KAC3BgjD,EAAwBp4C,EAAK80C,sBAAsBX,yBACvDJ,GAEF,OAAO/sC,EAAAA,GAAG,CACRoxC,EACAD,IACCh4C,KACDG,EAAAA,IAAG,SACAC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC0zC,EAAAzzC,EAAA,GAAc63C,EAAA73C,EAAA,GAKZyzC,KAEEoE,EAA0BtM,SAC1BsM,EAA0B9gD,OAC1B8gD,EAA0BvB,UAG5B92C,EAAKq1C,wBAAwBc,gBAC3BlC,KAKRlhC,EAAAA,OAAM,SACHxS,OAAG83C,EAAHjhD,EAAAmJ,EAAA,GAAG,GAIF,OACG83C,EAA0BtM,SACzBsM,EAA0B9gD,SAC3B8gD,EAA0BvB,UAIjC9jC,EAAAA,UAAS,SACNzS,GAIC,OAJDnJ,EAAAmJ,EAAA,GAAG,GAI4BwrC,QACrB/rC,EAAKi2C,uBAAuBL,8BAE9B5uC,EAAAA,IAAG,KAGd7C,EAAAA,IAAG,SAACuR,GAAQ,OAAAtW,QAAQsW,MAGxB,OAAO1O,EAAAA,IAAG,MAKTA,EAAAA,IAAG,OAOV8uC,EAAAnhD,UAAA2jD,uBAAV,WACE7jD,KAAK4gD,wBAAwBkD,iCAC7B9jD,KAAK6gD,uBAAuBkD,gCAC5B/jD,KAAK4gD,wBAAwBoD,+BAGxB3C,EAAAnhD,UAAA+jD,6BAAP,WAEE,OADAjkD,KAAK6jD,yBACEp4C,EAAAA,cAAc,CAACzL,KAAKkjD,iBAAkBljD,KAAKwiD,oBAAoB92C,KACpEgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACo4C,EAAAn4C,EAAA,GAAiBo4C,EAAAp4C,EAAA,GACrB,OAAApB,QAAQu5C,GAAmBC,2BA/PlCv9C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAXZm1B,EAAAA,0BACAE,EAAAA,0BAFAjB,EAAAA,+BAKAC,EAAAA,8BAIOwlB,UADA1C,4RCdT,IAAAmG,GAAA,WAwCE,SAAAA,EACUrzB,EACA3rB,EACA+4C,EACEkC,EACAgE,EACAh+B,GALFrmB,KAAA+wB,OAAAA,EACA/wB,KAAAoF,OAAAA,EACApF,KAAAm+C,qBAAAA,EACEn+C,KAAAqgD,sBAAAA,EACArgD,KAAAqkD,uBAAAA,EACArkD,KAAAqmB,YAAAA,EAKNrmB,KAAKqgD,sBACPrgD,KAAKskD,WAAa/xC,EAAAA,GAChBvS,KAAK+wB,OAAOwzB,SACVvkD,KAAKm+C,qBAAqB4B,eACxB//C,KAAKqgD,sBAAsB7B,6BAC3BwB,MAAM,KAIZhgD,KAAKskD,WAAa/xC,EAAAA,GAChBvS,KAAK+wB,OAAOwzB,SACVvkD,KAAKm+C,qBAAqB4B,eACxB//C,KAAKoF,OAAOk0B,SAASokB,MAAM,GAAGC,WAC9BqC,MAAM,YAMhBoE,EAAAlkD,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KAIE,OACEA,KAAKqgD,uBACLrgD,KAAKqkD,wBACLrkD,KAAKqmB,aAGHrmB,KAAKqgD,sBAAsBV,sBAC1B3/C,KAAKqmB,YAAYk6B,cAEXvgD,KAAKqkD,uBAAuBJ,+BAA+Bv4C,KAChE6S,EAAAA,UAAS,SAAEimC,GACT,OAAOA,EACHjyC,EAAAA,GACEhH,EAAKwlB,OAAOwzB,SACVh5C,EAAK4yC,qBAAqB4B,eACxBx0C,EAAK80C,sBAAsB9B,qBACzBX,GAAiBJ,eAEnBwC,MAAM,KAGZz0C,EAAK+4C,cAKVtkD,KAAKskD,gCA1Ff19C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAVQqrB,EAAAA,cAIb8tB,UAHaC,EAAAA,4BAKbjC,UACAoD,UANAx4B,EAAAA,sPAFT,GCAA,IAAA47B,GAAA,WAQE,SAAAA,KACF,2BAPC78C,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,2BACVC,SAAA,GACAmJ,gBAAiBC,EAAAA,wBAAwBC,iDAI3CszC,EATA,GCAAC,GAAA,WAUA,SAAAA,KAkByC,2BAlBxCv8C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAWi1C,IACxBl1C,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbulC,qBAAsB,CACpBtlC,UAAWolC,GACXn6B,OAAQ,CAAC61B,GAAmBpF,GAAmBqJ,SAKvD37C,UAAW,CAAC,CAAEC,QAASu3C,GAAgBt3C,YAAaC,EAAAA,SACpDR,aAAc,CAACq8C,IACfnlC,gBAAiB,CAACmlC,IAClB57C,QAAS,CAAC47C,QAE6BC,EA5BzC,GCAAE,GAAA,WAWE,SAAAA,EAAsBv+B,GAAArmB,KAAAqmB,YAAAA,EACpBrmB,KAAKi1C,MAAQj1C,KAAKqmB,YAAYzF,YAElC,2BAXChZ,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,4BACVC,SAAA,iEACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAJlC0X,EAAAA,eAYT+7B,EAdA,GCAA,IAAAC,GAAA,WAMA,SAAAA,KAgByC,2BAhBxC18C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAwxC,GACAvxC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb0lC,qBAAsB,CACpBzlC,UAAWulC,QAKnBx8C,aAAc,CAACw8C,IACftlC,gBAAiB,CAACslC,IAClB/7C,QAAS,CAAC+7C,QAE6BC,EAtBzC,GCAAE,GAAA,WAYE,SAAAA,EACY3/C,EACAggB,EACA+4B,GAFAn+C,KAAAoF,OAAAA,EACApF,KAAAolB,eAAAA,EACAplB,KAAAm+C,qBAAAA,EAyBd,OAjBE4G,EAAA7kD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK09C,MAAQ19C,KAAKoF,OAAOk0B,SAASokB,MAClC19C,KAAKglD,aAAehlD,KAAKolB,eAAeE,iBAAiB5Z,KACvDG,EAAAA,IAAG,SAACklB,GACFxlB,EAAK05C,cAAgBl0B,EAAOvL,MAAMvF,QAAQzT,GAE1CjB,EAAKmyC,MAAMxxC,QAAO,SAAE3J,EAAMyZ,GACP,IACfzQ,EAAK4yC,qBAAqB4B,eAAex9C,EAAKo7C,WAAWqC,MAAM,KAEhDz0C,EAAK05C,gBACpB15C,EAAK25C,gBAAkBlpC,6BA3BlCpU,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qCACVC,SAAA,4VALOm4C,UAHA95B,EAAAA,sBAAgB+5B,EAAAA,wBAuCzB6E,EAxCA,GCAA,IAAAI,GAAA,WAaA,SAAAA,KAoBiD,2BApBhDh9C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAkN,EAAAA,UACAnG,EAAAA,WACAkG,EAAAA,aACAhN,EAAAA,aAAaC,WAAWi1C,IACxBl1C,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbgmC,6BAA8B,CAC5B/lC,UAAW0lC,GACXz6B,OAAQ,CAAC61B,GAAmBpF,SAKpC3yC,aAAc,CAAC28C,IACfzlC,gBAAiB,CAACylC,IAClBl8C,QAAS,CAACk8C,QAEqCI,EAjCjD,GCAAE,GAAA,WAkBE,SAAAA,EACYjgD,EACAggB,EACAiB,EACA83B,GAHAn+C,KAAAoF,OAAAA,EACApF,KAAAolB,eAAAA,EACAplB,KAAAqmB,YAAAA,EACArmB,KAAAm+C,qBAAAA,EA2Bd,OAlBEkH,EAAAnlD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK09C,MAAQ19C,KAAKoF,OAAOk0B,SAASokB,MAClC19C,KAAKi1C,MAAQj1C,KAAKqmB,YAAYzF,YAC9B5gB,KAAKglD,aAAehlD,KAAKolB,eAAeE,iBAAiB5Z,KACvDG,EAAAA,IAAG,SAACklB,GACFxlB,EAAK05C,cAAgBl0B,EAAOvL,MAAMvF,QAAQzT,GAE1CjB,EAAKmyC,MAAMxxC,QAAO,SAAE3J,EAAMyZ,GACP,IACfzQ,EAAK4yC,qBAAqB4B,eAAex9C,EAAKo7C,WAAWqC,MAAM,KAEhDz0C,EAAK05C,gBACpB15C,EAAK25C,gBAAkBlpC,6BA9BlCpU,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kCACVC,SAAA,29BALOm4C,UALP95B,EAAAA,sBACA0C,EAAAA,mBAEAq3B,EAAAA,wBAyCFmF,EAjDA,GCAA,IAAAC,GAAA,WAaA,SAAAA,KAoB8C,2BApB7Cn9C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAkN,EAAAA,UACAnG,EAAAA,WACAkG,EAAAA,aACAhN,EAAAA,aAAaC,WAAWi1C,IACxBl1C,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbmmC,0BAA2B,CACzBlmC,UAAWgmC,GACX/6B,OAAQ,CAAC61B,GAAmBpF,SAKpC3yC,aAAc,CAACi9C,IACf/lC,gBAAiB,CAAC+lC,IAClBx8C,QAAS,CAACw8C,QAEkCC,EAjC9C,GCAAE,GAAA,WAaE,SAAAA,EACYpgD,EACAggB,EACA+4B,GAFAn+C,KAAAoF,OAAAA,EACApF,KAAAolB,eAAAA,EACAplB,KAAAm+C,qBAAAA,EAyBd,OAjBEqH,EAAAtlD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK09C,MAAQ19C,KAAKoF,OAAOk0B,SAASokB,MAClC19C,KAAKglD,aAAehlD,KAAKolB,eAAeE,iBAAiB5Z,KACvDG,EAAAA,IAAG,SAACklB,GACFxlB,EAAK05C,cAAgBl0B,EAAOvL,MAAMvF,QAAQzT,GAE1CjB,EAAKmyC,MAAMxxC,QAAO,SAAE3J,EAAMyZ,GACP,IACfzQ,EAAK4yC,qBAAqB4B,eAAex9C,EAAKo7C,WAAWqC,MAAM,KAEhDz0C,EAAK05C,gBACpB15C,EAAK25C,gBAAkBlpC,6BA5BlCpU,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,8jBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDARlC8uC,UAFA95B,EAAAA,sBAAgB+5B,EAAAA,wBAyCzBsF,EAzCA,GCAA,IAAAC,GAAA,WAgBA,SAAAA,KAqBqC,2BArBpCt9C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAkN,EAAAA,UACAnG,EAAAA,WACAkG,EAAAA,aACAhN,EAAAA,aAAaC,WAAWi1C,IACxBl1C,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbsmC,iBAAkB,CAChBrmC,UAAWmmC,GACXl7B,OAAQ,CAAC61B,GAAmBpF,SAKpC3yC,aAAc,CAACo9C,IACflmC,gBAAiB,CAACkmC,IAClB38C,QAAS,CAAC28C,IACV/8C,UAAW,CAAC,CAAEC,QAASu3C,GAAgBt3C,YAAaC,EAAAA,aAEjB68C,EArCrC,GCAAE,GAAA,WAaE,SAAAA,EACUnE,EACAnB,EACAlC,EACAptB,GAHA/wB,KAAAwhD,uBAAAA,EACAxhD,KAAAqgD,sBAAAA,EACArgD,KAAAm+C,qBAAAA,EACAn+C,KAAA+wB,OAAAA,SAGV40B,EAAAzlD,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACQ4lD,EAA6B5lD,KAAKqgD,sBAAsBjC,gBAC5DR,GAAiBP,kBASnB,OANKuI,GAAgB90C,EAAAA,aACnBE,QAAQ8e,KACN,0BAA0B8tB,GAAiBP,iBAAgB,+BAIxDr9C,KAAKwhD,uBACTN,qBACAx1C,KACCgE,EAAAA,IAAG,SAAEm2C,GACH,SAAAA,IAAmBrmD,OAAOqvB,KAAKg3B,GAAiBllD,SAE5C4K,EAAKwlB,OAAOwzB,SACVqB,GACEr6C,EAAK4yC,qBAAqB4B,eACxB6F,EAAajI,WACbqC,MAAM,4BAhCzBp5C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHL65C,UADA1C,UAJSiC,EAAAA,4BADI/tB,EAAAA,wMADtB,qBCoCE,SAAA2zB,EACUpV,EACAkQ,EACAx7B,EACAi7B,EACA3B,GAJA1+C,KAAA0wC,GAAAA,EACA1wC,KAAA4gD,wBAAAA,EACA5gD,KAAAolB,eAAAA,EACAplB,KAAAqgD,sBAAAA,EACArgD,KAAA0+C,eAAAA,EAbF1+C,KAAA+lD,eAAgB,EAIxB/lD,KAAAgmD,KAAkBhmD,KAAK0wC,GAAGI,MAAM,CAC9BmV,eAAgB,CAAC,GAAIlV,EAAAA,WAAWC,YAmFpC,OAxEE8U,EAAA5lD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKkmD,oBAAsBlmD,KAAKqgD,sBAAsB5B,uBACpDz+C,KAAK0+C,gBAEP1+C,KAAKmmD,wBAA0BnmD,KAAKqgD,sBAAsBvB,2BACxD9+C,KAAK0+C,gBAGP1+C,KAAKomD,wBAA0BpmD,KAAK4gD,wBAAwBuC,4BAE5DnjD,KAAKqmD,gBAAkBrmD,KAAKomD,wBACzB16C,KACConB,EAAAA,eACE9yB,KAAK4gD,wBACF0F,0BACA56C,KACCgE,EAAAA,IAAG,SAAE8vC,GACH,OAAAA,GAAgBA,EAAavsC,KAAOusC,EAAavsC,KAAO,UAKjExG,UAAS,SAAEX,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACwzC,EAAAvzC,EAAA,GAAekH,EAAAlH,EAAA,IACrBkH,GAAQqsC,GAAiBA,EAAc3+C,SAC1CsS,EAAO1H,EAAK80C,sBAAsBX,yBAChCJ,IAIF/zC,EAAKw6C,eACH9yC,GACFA,IAAS1H,EAAKg7C,uBAEdh7C,EAAK6Z,eAAeknB,GAAG/gC,EAAK26C,qBAE9B36C,EAAKg7C,sBAAwBtzC,EACzBA,GACF1H,EAAKy6C,KAAK9U,SAAyB,eAAEuB,SAASx/B,MAKtD6yC,EAAA5lD,UAAAsmD,WAAA,SAAWvzC,GACLA,IAASjT,KAAKumD,wBAChBvmD,KAAKumD,sBAAwBtzC,IAIjC6yC,EAAA5lD,UAAAuB,KAAA,WACEzB,KAAK+lD,eAAgB,EACjB/lD,KAAKgmD,KAAK/O,OAASj3C,KAAKgmD,KAAK7jD,QAC1BnC,KAAKumD,wBACRvmD,KAAKumD,sBAAwBvmD,KAAKgmD,KAAK7jD,MAAM8jD,gBAE/CjmD,KAAK4gD,wBAAwBc,gBAAgB1hD,KAAKumD,wBAEpDvmD,KAAKolB,eAAeknB,GAAGtsC,KAAKkmD,sBAG9BJ,EAAA5lD,UAAAumD,KAAA,WACEzmD,KAAKolB,eAAeknB,GAAGtsC,KAAKmmD,0BAG9B3mD,OAAA6H,eAAIy+C,EAAA5lD,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAKgmD,KAAK9U,SAAyB,eAAExtB,yCAG9CoiC,EAAA5lD,UAAAkN,YAAA,WACMpN,KAAKqmD,iBACPrmD,KAAKqmD,gBAAgBh5C,mCAhG1BzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,m2DACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAdlCigC,EAAAA,mBAGPlW,EAAAA,+BAEA/U,EAAAA,sBAIO83B,UARAyI,EAAAA,kBA6GTZ,KCpHA,IAAAa,GAAA,WAUA,SAAAA,KAuBiC,2BAvBhCx+C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACArL,EAAAA,WACAyN,GACAvU,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbwnC,qBAAsB,CACpBvnC,UAAWymC,GACXx7B,OAAQ,CACN61B,GACApF,GACA4K,SAMVv9C,aAAc,CAAC09C,IACfxmC,gBAAiB,CAACwmC,IAClBj9C,QAAS,CAACi9C,QAEqBa,EAjCjC,GCAAE,GAAA,WAaE,SAAAA,EACUrF,EACAnB,EACAlC,EACAptB,GAHA/wB,KAAAwhD,uBAAAA,EACAxhD,KAAAqgD,sBAAAA,EACArgD,KAAAm+C,qBAAAA,EACAn+C,KAAA+wB,OAAAA,SAGV81B,EAAA3mD,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACQ4lD,EAA6B5lD,KAAKqgD,sBAAsBjC,gBAC5DR,GAAiBN,eASnB,OANKsI,GAAgB90C,EAAAA,aACnBE,QAAQ8e,KACN,0BAA0B8tB,GAAiBN,cAAa,+BAIrDt9C,KAAKwhD,uBACTL,8BACAz1C,KACCgE,EAAAA,IAAG,SAAEs2C,GACH,SAAAA,IAAQA,EAAKrlD,SAET4K,EAAKwlB,OAAOwzB,SACVqB,GACEr6C,EAAK4yC,qBAAqB4B,eACxB6F,EAAajI,WACbqC,MAAM,4BAhCzBp5C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHL65C,UADA1C,UAJAiC,EAAAA,4BADa/tB,EAAAA,wMADtB,GCAA,IAAA20B,GAAA,WA0BE,SAAAA,EAAsBxF,GAAAthD,KAAAshD,mBAAAA,EAFtBthD,KAAA+mD,iBAA4C,IAAInpC,EAAAA,gBAAwB,IA8B1E,OA1BEkpC,EAAA5mD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKgnD,SAAWhnD,KAAK+mD,iBAAiBr7C,KACpC6S,EAAAA,UAAS,SAAC0oC,GAAW,OAAA17C,EAAK+1C,mBAAmB4F,WAAWD,KACxDp7C,EAAAA,IAAG,SAACs7C,OACIC,EAAgB77C,EAAK87C,eAAejqC,IAAI,uBAC1C+pC,EAAQxmD,OAAS,EACnBymD,EAAcjwC,SAEdiwC,EAAcpwC,cAMtB8vC,EAAA5mD,UAAAonD,gBAAA,SAAgBL,GACdjnD,KAAKqnD,eAAyB,SAAEJ,QAAkB,SAAE7lC,QAAQqxB,SAC1DwU,EAAQ7lC,SAEVphB,KAAK+mD,iBAAiBtlD,KAAKwlD,EAAQ7lC,UAGrC0lC,EAAA5mD,UAAAqnD,eAAA,SAAeC,GACbxnD,KAAKqnD,eAAyB,SAAEG,OAAiB,SAAEC,aAAahV,SAC9D+U,EAAOC,mCAxCZ7/C,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0BACVC,SAAA,igIACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAPjB8qB,EAAAA,8DAYvBj0B,EAAAA,0BAGAA,EAAAA,SAgCH8+C,EAtDA,GCAA,IAAAY,GAAA,WASA,SAAAA,KAYuC,2BAZtCv/C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACAD,EAAAA,YACAlF,EAAAA,aACAqH,EAAAA,eACAvN,EAAAA,YAEFjH,aAAc,CAAC0+C,IACfj+C,QAAS,CAACi+C,QAE2BY,EArBvC,GCAAC,GAAA,WAkBE,SAAAA,EAAsB19C,GAAAjK,KAAAiK,aAAAA,EAFtBjK,KAAAsK,UAAYC,EAoBd,OATEo9C,EAAAznD,UAAA4K,SAAA,WACE9K,KAAK4nD,gBAAkB5nD,KAAK6nD,mBAAmBlnD,OAC3CX,KAAK6nD,mBAAmB,GACxB7nD,KAAK8nD,gBAGXH,EAAAznD,UAAAmL,WAAA,SAAW1B,GACT3J,KAAKiK,aAAaJ,iBAAiBF,wBAxBtC/B,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gCACVC,SAAA,66GACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlClI,iDAaNjB,EAAAA,8BAEAA,EAAAA,SAcH2/C,EApCA,qBCiGE,SAAAI,EACYlH,EACAD,EACAW,EACAvkC,EACF0zB,EACAzmC,GALEjK,KAAA6gD,uBAAAA,EACA7gD,KAAA4gD,wBAAAA,EACA5gD,KAAAuhD,mBAAAA,EACAvhD,KAAAgd,qBAAAA,EACFhd,KAAA0wC,GAAAA,EACA1wC,KAAAiK,aAAAA,EA9DVjK,KAAAsK,UAAYC,EAKZvK,KAAAgoD,OAAsB,GACtBhoD,KAAAioD,MAAoB,GAMpBjoD,KAAAkoD,uBAAwB,EASxBloD,KAAAmoD,OAAS,IAAIh6C,EAAAA,aAGbnO,KAAAooD,UAAY,IAAIj6C,EAAAA,aAGhBnO,KAAAgjD,kBAAoB,IAAI70C,EAAAA,aAExBnO,KAAAqoD,QAAqBroD,KAAK0wC,GAAGI,MAAM,CACjCiS,eAAgB,EAAC,GACjBuF,kBAAmB,CAAC,GAAIvX,EAAAA,WAAWC,UACnCuX,WAAY,CAAC,GAAIxX,EAAAA,WAAWC,UAC5BwX,SAAUxoD,KAAK0wC,GAAGI,MAAM,CACtB79B,KAAM,CAAC,GAAI89B,EAAAA,WAAWC,YAExByX,YAAa,CAAC,GAAI1X,EAAAA,WAAWC,UAC7B0X,WAAY,CAAC,GAAI3X,EAAAA,WAAWC,UAC5B2X,IAAK,CAAC,GAAI5X,EAAAA,WAAWC,YAGvBhxC,KAAAqnD,eAA4BrnD,KAAK0wC,GAAGI,MAAM,CACxC8X,UAAW,CAAC,GAAI7X,EAAAA,WAAWC,UAC3B6X,SAAU,CAAC,GAAI9X,EAAAA,WAAWC,UAC1B8X,MAAO,CAAC,GAAI/X,EAAAA,WAAWC,UACvB+X,MAAO,CAAC,IACRC,KAAM,CAAC,GAAIjY,EAAAA,WAAWC,UACtBwW,OAAQxnD,KAAK0wC,GAAGI,MAAM,CACpB2W,aAAc,CAAC,KAAM1W,EAAAA,WAAWC,YAElCiW,QAASjnD,KAAK0wC,GAAGI,MAAM,CACrB1vB,QAAS,CAAC,KAAM2vB,EAAAA,WAAWC,YAE7BiY,WAAY,CAAC,GAAIlY,EAAAA,WAAWC,YAmMhC,OAvLE+W,EAAA7nD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKkpD,kBACLlpD,KAAKmpD,WAAanpD,KAAKuhD,mBAAmB6H,yBAAyB19C,KACjEG,EAAAA,IAAG,SAACw9C,GAEoC,IAAlC7pD,OAAOqvB,KAAKw6B,GAAW1oD,QACzB4K,EAAKg2C,mBAAmB+H,0BAK9BtpD,KAAKupD,WAAavpD,KAAK6gD,uBAAuB2I,eAAe99C,KAC3DG,EAAAA,IAAG,SAAC49C,GACoC,IAAlCjqD,OAAOqvB,KAAK46B,GAAW9oD,QACzB4K,EAAKs1C,uBAAuB6I,4BAKlC1pD,KAAK2pD,iBAAmB3pD,KAAK4gD,wBAAwBM,qBACrDlhD,KAAKmL,SAAWnL,KAAK6gD,uBAAuB8B,oCAE5C3iD,KAAK4pD,YAAc5pD,KAAK6pD,oCAAoCp9C,UAAS,SAClEq9C,GAECv+C,EAAK28C,sBAAwB4B,IAKjC9pD,KAAK+pD,iBAAmB/pD,KAAK4gD,wBAC1BoJ,gCACAv9C,UAAS,SAAEw9C,GACe,SAArBA,EAAQC,SACV3+C,EAAKq1C,wBAAwBuJ,kCACC,WAArBF,EAAQC,SACjB3+C,EAAK9J,OACyB,WAArBwoD,EAAQC,UACjB3+C,EAAKyR,qBAAqBxR,IACxB,CAAEsO,IAAK,8BACPoD,EAAAA,kBAAkBuwB,gBAEpBliC,EAAKq1C,wBAAwBuJ,mCACC,WAArBF,EAAQC,UACjB3+C,EAAK6+C,qBAAqBH,MAKlClC,EAAA7nD,UAAAgpD,gBAAA,WAEE,QADMmB,GAAO,IAAI9f,MAAOE,cACfjqC,EAAI,EAAGA,EAAI,GAAIA,IACtBR,KAAKioD,MAAM5lD,KAAK,CAAEmK,GAAIhM,EAAI,EAAG6vB,KAAMg6B,EAAO7pD,IAE5C,IAAK,IAAI8pD,EAAI,EAAGA,GAAK,GAAIA,IACnBA,EAAI,GACNtqD,KAAKgoD,OAAO3lD,KAAK,CAAEmK,GAAI89C,EAAGj6B,KAAM,IAAMi6B,EAAExf,aAExC9qC,KAAKgoD,OAAO3lD,KAAK,CAAEmK,GAAI89C,EAAGj6B,KAAMi6B,EAAExf,cAKxCid,EAAA7nD,UAAAqqD,2BAAA,WACEvqD,KAAKqoD,QAAQlmD,MAAM4gD,gBAAkB/iD,KAAKqoD,QAAQlmD,MAAM4gD,gBAG1DgF,EAAA7nD,UAAAsqD,gBAAA,SAAgBC,GACdzqD,KAAKqoD,QAAkB,SAAEG,SAAmB,SAAEv1C,KAAKw/B,SAASgY,EAAKx3C,OAGnE80C,EAAA7nD,UAAAwqD,cAAA,SAAcC,GACZ3qD,KAAKqoD,QAAkB,SAAEI,YAAYhW,SAASkY,EAAMt6B,OAGtD03B,EAAA7nD,UAAA0qD,aAAA,SAAaP,GACXrqD,KAAKqoD,QAAkB,SAAEK,WAAWjW,SAAS4X,EAAKh6B,OAGpD03B,EAAA7nD,UAAA2qD,4BAAA,WACE7qD,KAAKkoD,uBAAyBloD,KAAKkoD,uBAGrCH,EAAA7nD,UAAA4qD,yBAAA,WACE,OACE9qD,KAAKqoD,QAAQ3kC,UACX1jB,KAAKkoD,uBAAyBloD,KAAKqnD,eAAe3jC,SASxDqkC,EAAA7nD,UAAA2pD,kCAAA,WACE,OAAOp+C,EAAAA,cAAc,CAACzL,KAAKmpD,WAAYnpD,KAAK2pD,mBAAmBj+C,KAC7DgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACu9C,EAAAt9C,EAAA,GAAWq2C,EAAAr2C,EAAA,GACf,YACcvE,IAAZ46C,QACoB56C,IAApB46C,EAAQ6E,WACNoC,EAAU/qC,OAAM,SACf2oC,GACC,OAAAA,EAAQ7lC,UAAYghC,EAAQ6E,QAAQ7lC,UACtCzgB,WAMVonD,EAAA7nD,UAAA6qD,sBAAA,SAAsB3I,OAChBoF,EAAS,GAKb,OAJIpF,EAAQoF,QAAUpF,EAAQoF,OAAOpmC,UACnComC,EAASpF,EAAQoF,OAAOpmC,QAAU,MAG7B,CACL4pC,SAAU5I,EAAQwG,UAAY,IAAMxG,EAAQyG,SAC5CoC,KAAM,CACJ7I,EAAQ0G,MACR1G,EAAQ2G,MACR3G,EAAQ4G,KAAO,KAAOxB,EAASpF,EAAQ6E,QAAQ7lC,QAC/CghC,EAAQ6G,WACR7G,EAAQ8I,SAKdnD,EAAA7nD,UAAAkqD,qBAAA,SAAqBH,GAArB,IAAA1+C,EAAAvL,KACOA,KAAKmrD,2BACRnrD,KAAKmrD,yBAA2BnrD,KAAKiK,aAAab,KAChDu+C,GACA,CAAE95C,UAAU,EAAMC,KAAM,OAE1B9N,KAAKmrD,yBAAyBnW,kBAAkB8S,eAAiB9nD,KAAKqnD,eAAellD,MACrFnC,KAAKmrD,yBAAyBnW,kBAAkB6S,mBAC9CoC,EAAQpC,mBACV7nD,KAAKmrD,yBAAyBh9B,OAC3BlC,KAAI,WACH1gB,EAAKq1C,wBAAwBuJ,kCAC7B5+C,EAAK4/C,yBAA2B,OAEjCC,MAAK,WAEJ7/C,EAAKq1C,wBAAwBuJ,kCAC7B5+C,EAAK4/C,yBAA2B,SAKxCpD,EAAA7nD,UAAA4J,MAAA,WACE9J,KAAKooD,UAAUt5C,QAGjBi5C,EAAA7nD,UAAAumD,KAAA,WACEzmD,KAAKmoD,OAAOr5C,QAGdi5C,EAAA7nD,UAAAmrD,cAAA,WACMrrD,KAAKkoD,sBACPloD,KAAKyB,OAELzB,KAAK4gD,wBAAwByK,cAAcrrD,KAAKqnD,eAAellD,QAInE4lD,EAAA7nD,UAAAuB,KAAA,WACEzB,KAAKgjD,kBAAkBl0C,KAAK,CAC1Bw8C,eAAgBtrD,KAAKqoD,QAAQlmD,MAC7BklD,eAAgBrnD,KAAKkoD,sBACjB,KACAloD,KAAKqnD,eAAellD,SAI5B4lD,EAAA7nD,UAAAkN,YAAA,WACMpN,KAAK4pD,aACP5pD,KAAK4pD,YAAYv8C,cAEfrN,KAAK+pD,kBACP/pD,KAAK+pD,iBAAiB18C,mCA3P3BzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,27MACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAvBzCgqB,EAAAA,8BADAD,EAAAA,+BAMAiB,EAAAA,0BAHA5e,EAAAA,4BARO6zB,EAAAA,mBAkBPnoC,gDA4BCjB,EAAAA,mCAGAA,EAAAA,sBAGAmH,EAAAA,0BAGAA,EAAAA,kCAGAA,EAAAA,UA8NH44C,KCjSA,IAAAwD,GAAA,WAWA,SAAAA,KAegC,2BAf/BpjD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACAkC,EAAAA,eACAxN,EACAs4C,GACAr4C,EAAAA,WACAnH,EACA4U,IAEF1U,aAAc,CAAC2/C,IACfzoC,gBAAiB,CAACyoC,IAClBl/C,QAAS,CAACk/C,QAEoBwD,EA1BhC,iBC2EE,SAAAC,EACYjK,EACAh7B,EACAq6B,EACAC,EACA7jC,EACAoI,EACAi7B,EACA3B,EACA9xB,EACAvG,GATArmB,KAAAuhD,mBAAAA,EACAvhD,KAAAumB,gBAAAA,EACAvmB,KAAA4gD,wBAAAA,EACA5gD,KAAA6gD,uBAAAA,EACA7gD,KAAAgd,qBAAAA,EACAhd,KAAAolB,eAAAA,EACAplB,KAAAqgD,sBAAAA,EACArgD,KAAA0+C,eAAAA,EACA1+C,KAAA4sB,YAAAA,EACA5sB,KAAAqmB,YAAAA,EArDZrmB,KAAAsK,UAAYC,EACZvK,KAAAyrD,8BAA+B,EAK/BzrD,KAAA4/C,iBAAkB,EA2PpB,OAzME4L,EAAAtrD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK0rD,cAAe,EACpB1rD,KAAK2rD,WAAa3rD,KAAKuhD,mBAAmBqK,2BAErC5rD,KAAKqmB,YAAYk6B,cAGpBvgD,KAAK4/C,iBAAkB,EAFvB5/C,KAAKuhD,mBAAmBqB,qBAK1B5iD,KAAKkmD,oBAAsBlmD,KAAKqgD,sBAAsB5B,uBACpDz+C,KAAK0+C,gBAGP1+C,KAAKmmD,wBAA0BnmD,KAAKqgD,sBAAsBvB,2BACxD9+C,KAAK0+C,gBAGP1+C,KAAK4gD,wBACFM,qBACAx1C,KAAKC,EAAAA,KAAK,IACVc,UAAS,SAAE21C,GACV72C,EAAKs6C,gBAAkBzD,IAG3BpiD,KAAK6rD,wBAA0B7rD,KAAKuhD,mBAAmBkB,oBACvDziD,KAAK8rD,qBAAuB9rD,KAAK6gD,uBAC9BO,oBACA11C,KACC4S,EAAAA,OAAM,SAACytC,GAAe,OAAAA,KAAiBvsD,OAAOqvB,KAAKk9B,GAAaprD,UAEjE8L,UAAS,SAACs/C,GACLxgD,EAAKmgD,cACPngD,EAAK6Z,eAAeknB,GAAG/gC,EAAK26C,qBAEzB6F,EAAsB,UAGzBvsD,OAAOqvB,KAAKk9B,GAAa7/C,QAAO,SAAC4N,GAC3BA,EAAIzF,WAAW,iBACjB9I,EAAKygD,mCAAmCD,EAAYjyC,MAGxDvO,EAAKgb,gBAAgB0lC,kBAAkB,IAPvC1gD,EAAK2gD,gBAAkBH,KAY/BP,EAAAtrD,UAAAisD,eAAA,SAAe9D,GAAf,IAAA98C,EAAAvL,KAKE,OAJKA,KAAKksD,iBAAmB7D,EAAQtF,iBACnC/iD,KAAKksD,gBAAkB7D,GAGlB58C,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,sBAAuB,CAChDzB,MAAOtC,EAAQI,YACf4B,KAAMhC,EAAQK,aAEhB1oD,KAAK4sB,YAAYw/B,UAAU,8BAC3BpsD,KAAK4sB,YAAYw/B,UAAU,oCAC3BpsD,KAAK4sB,YAAYw/B,UAAU,0BAC1B1gD,KACDgE,EAAAA,IAAG,SACA5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GACCugD,EAAAtgD,EAAA,GACAugD,EAAAvgD,EAAA,GACAwgD,EAAAxgD,EAAA,GACAygD,EAAAzgD,EAAA,GAEA,OAAOR,EAAKkhD,WAAWpE,EAAS,CAC9BgE,YAAWA,EACXC,mBAAkBA,EAClBC,yBAAwBA,EACxBC,aAAYA,QAOtBhB,EAAAtrD,UAAAwsD,oBAAA,SAAoBpB,GAClBtrD,KAAKksD,gBAAkBZ,GAGzBE,EAAAtrD,UAAAysD,mBAAA,WACE3sD,KAAKyrD,8BAA+B,GAGtCD,EAAAtrD,UAAA0sD,mBAAA,WACE5sD,KAAKyrD,8BAA+B,GAGtCD,EAAAtrD,UAAA8iD,kBAAA,SAAkBl3C,OAChBw/C,EAAAx/C,EAAAw/C,eACAjE,EAAAv7C,EAAAu7C,eACAt7C,EAAAD,EAAA+gD,aAAAA,OAAA,IAAA9gD,GAAAA,EAMM+gD,EAAO1sD,EAAA,GAAwBkrD,GACrCwB,EAAQzF,eAAiBA,GAAkBrnD,KAAK6lD,gBAE5CgH,EACF7sD,KAAK6gD,uBAAuBkM,qBAAqBD,GACxC9sD,KAAKksD,iBAAmBlsD,KAAKksD,gBAAgB1/C,KAAOsgD,EAAQtgD,IACrExM,KAAK6gD,uBAAuBmC,kBAAkB8J,GAGhD9sD,KAAK0rD,cAAe,GAGtBF,EAAAtrD,UAAAkN,YAAA,WACMpN,KAAK8rD,sBACP9rD,KAAK8rD,qBAAqBz+C,cAG5BrN,KAAK6gD,uBAAuBmM,yBAGpBxB,EAAAtrD,UAAA+sD,YAAV,SAAsBh6C,GAcpB,MAZa,SAATA,EACOjT,KAAKsK,UAAUxG,KACN,WAATmP,GAA8B,wBAATA,EACrBjT,KAAKsK,UAAUvG,YACN,WAATkP,EACAjT,KAAKsK,UAAUrG,YACN,SAATgP,EACAjT,KAAKsK,UAAUtG,KAEfhE,KAAKsK,UAAUpG,aAMlBsnD,EAAAtrD,UAAA8rD,mCAAV,SAA6CkB,GAC3CltD,KAAKgd,qBAAqBxR,IACxB,CACEsO,IAAK,8BACL2L,OAAQ,CAAE0nC,MAAOD,IAEnBhwC,EAAAA,kBAAkBuwB,iBAIZ+d,EAAAtrD,UAAAusD,WAAV,SAAqBnB,EAAgB8B,GACnC,MAAO,CACL9oB,MAAOgnB,EAAevI,eAClBqK,EAAWb,yBACX,GACJvB,SAAUM,EAAehD,kBACzB2C,KAAM,CAACK,EAAe/C,WAAY6E,EAAWf,aAC7CgB,IAAKrtD,KAAKitD,YAAY3B,EAAe9C,SAASv1C,MAC9Cq6C,QAAS,CAAC,CAAEj9B,KAAM+8B,EAAWd,mBAAoBl6C,MAAO,SACxDm7C,OACEvtD,KAAKksD,iBAAmBlsD,KAAKksD,gBAAgB1/C,KAAO8+C,EAAe9+C,GAC/D4gD,EAAWZ,kBACXhlD,IAIVgkD,EAAAtrD,UAAAstD,OAAA,WACExtD,KAAKgjD,kBAAkB,CACrBsI,eAAgBtrD,KAAKksD,gBACrBW,cAAc,KAIlBrB,EAAAtrD,UAAAutD,WAAA,WACEztD,KAAKolB,eAAeknB,GAAGtsC,KAAKmmD,0BAQ9BqF,EAAAtrD,UAAAuB,KAAA,WACEzB,KAAKwtD,UAQPhC,EAAAtrD,UAAAumD,KAAA,WACEzmD,KAAKytD,cAQPjC,EAAAtrD,UAAAwtD,sBAAA,SAAsBpC,GACpBtrD,KAAK0sD,oBAAoBpB,wBArQ5B1jD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,u5EACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAXzCgrB,EAAAA,0BANArT,EAAAA,uBAFAoS,EAAAA,+BACAC,EAAAA,8BAEA5d,EAAAA,4BAGA4I,EAAAA,sBAQO83B,UAlBAyI,EAAAA,sBAWPt5B,EAAAA,0BARAvE,EAAAA,eAwRF2iC,KCjSA,IAAAmC,GAAA,WAkBA,SAAAA,KA2BkC,2BA3BjCxlD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAg2C,GACAn8C,EACA0N,GACAzN,EAAAA,WACA9G,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbwuC,uBAAwB,CACtBvuC,UAAWmsC,GACXlhC,OAAQ,CACN61B,GACApF,GACA4K,GACAkB,SAMVp+C,UAAW,CAACuzB,EAAAA,aACZ5zB,aAAc,CAACojD,IACflsC,gBAAiB,CAACksC,IAClB3iD,QAAS,CAAC2iD,QAEsBmC,EA7ClC,GCAAE,GAAA,WAqBE,SAAAA,EACUtnC,EACAnB,GADAplB,KAAAumB,gBAAAA,EACAvmB,KAAAolB,eAAAA,EALVplB,KAAA8tD,cAAe,EA8BjB,OAtBED,EAAA3tD,UAAA6tD,YAAA,WACE/tD,KAAK8tD,cAAgB9tD,KAAK8tD,cAG5BD,EAAA3tD,UAAA8tD,WAAA,WACEhuD,KAAKumB,gBAAgBynC,cAGvBH,EAAA3tD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKiuD,uBAAyBjuD,KAAKumB,gBAChCN,kBACAva,KAAK4S,EAAAA,OAAM,SAACiJ,GAAS,OAA8B,IAA9B/nB,OAAOqvB,KAAKtH,GAAO5mB,UACxC8L,UAAS,WACRlB,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,yBAIxCshB,EAAA3tD,UAAAkN,YAAA,WACMpN,KAAKiuD,wBACPjuD,KAAKiuD,uBAAuB5gD,mCAjCjCzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,qpBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDARlC2X,EAAAA,uBAAiB3C,EAAAA,kBAyC1B0nC,EAhDA,GCAA,IAAAK,GAAA,WAaA,SAAAA,KAmB+B,2BAnB9B/lD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAC,EAAAA,UACAnG,EAAAA,WACA9G,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb+uC,mBAAoB,CAClB9uC,UAAWwuC,GACXvjC,OAAQ,CAAC61B,GAAmBpF,SAKpC3yC,aAAc,CAACylD,IACfvuC,gBAAiB,CAACuuC,IAClBhlD,QAAS,CAACglD,QAEmBK,EAhC/B,GCAAE,GAAA,WAaE,SAAAA,EACU5M,EACAnB,EACAlC,EACAptB,GAHA/wB,KAAAwhD,uBAAAA,EACAxhD,KAAAqgD,sBAAAA,EACArgD,KAAAm+C,qBAAAA,EACAn+C,KAAA+wB,OAAAA,SAGVq9B,EAAAluD,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACQ4lD,EAA6B5lD,KAAKqgD,sBAAsBjC,gBAC5DR,GAAiBL,iBASnB,OANKqI,GAAgB90C,EAAAA,aACnBE,QAAQ8e,KACN,0BAA0B8tB,GAAiBL,gBAAe,+BAIvDv9C,KAAKwhD,uBACTJ,oBACA11C,KACCgE,EAAAA,IAAG,SAAC47C,GACF,SAAAA,GAAyD,IAAvC9rD,OAAOqvB,KAAKy8B,GAAgB3qD,SAE1C4K,EAAKwlB,OAAOwzB,SACVqB,GACEr6C,EAAK4yC,qBAAqB4B,eACxB6F,EAAajI,WACbqC,MAAM,4BAhCzBp5C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHL65C,UADA1C,UAJAiC,EAAAA,4BADa/tB,EAAAA,wMADtB,qBC8EE,SAAAk8B,EACYzN,EACAC,EACAS,EACAj7B,EACAuG,EACAyzB,EACAjN,GANApzC,KAAA4gD,wBAAAA,EACA5gD,KAAA6gD,uBAAAA,EACA7gD,KAAAshD,mBAAAA,EACAthD,KAAAqmB,YAAAA,EACArmB,KAAA4sB,YAAAA,EACA5sB,KAAAqgD,sBAAAA,EACArgD,KAAAozC,iBAAAA,EAxDZpzC,KAAAsuD,iBAAmB1Q,GAQnB59C,KAAAymB,kBAAuCC,EAAAA,kBAAkBC,WA2J3D,OAxGE0nC,EAAAnuD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKi1C,MAAQj1C,KAAKqmB,YAAYzF,YAC9B5gB,KAAKq6C,SAAWr6C,KAAKqmB,YAAYi0B,aACjCt6C,KAAKuuD,iBAAmBvuD,KAAK4gD,wBAAwBM,qBACrDlhD,KAAKwuD,gBAAkBxuD,KAAK6gD,uBAAuBO,oBACnDphD,KAAK2zC,iBAAmB3zC,KAAKozC,iBAAiB5sB,mBAC5CxmB,KAAKymB,mBAGPzmB,KAAKyuD,cAAgBzuD,KAAK4gD,wBACvB0F,0BACA56C,KACCG,EAAAA,IAAG,SAAE6iD,GACc,OAAbA,GACFnjD,EAAKq1C,wBAAwB+N,gCAKrC3uD,KAAK4uD,aAAe5uD,KAAKuuD,iBAAiB7iD,KACxC6S,EAAAA,UAAS,SAAE6jC,GACT,OAAA72C,EAAK+1C,mBAAmBuN,WAAWzM,EAAQ6E,QAAQ7lC,WAErDvV,EAAAA,IAAG,SAAEo7C,GACa,OAAZA,GACF17C,EAAK+1C,mBAAmBwN,0BAG5Bp/C,EAAAA,IAAG,SAAEu3C,GAAqB,OAAAA,GAAWA,EAAQ52B,SAIjDg+B,EAAAnuD,UAAA6uD,uBAAA,SACElJ,EACAmJ,GAEA,OAAOvjD,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,wBAC1B1gD,KACDgE,EAAAA,IAAG,SAAE5D,OAACmjD,EAADtsD,EAAAmJ,EAAA,GAAC,GACCkjD,IACHA,EAAcnJ,EAAgBoB,QAAQ7lC,aAGpComC,EAAS,GAKb,OAJI3B,EAAgB2B,QAAU3B,EAAgB2B,OAAOpmC,UACnDomC,EAAS3B,EAAgB2B,OAAOpmC,QAAU,MAGrC,CACLkjB,MAAO2qB,EACPjE,SAAUnF,EAAgB+C,UAAY,IAAM/C,EAAgBgD,SAC5DoC,KAAM,CACJpF,EAAgBiD,MAChBjD,EAAgBkD,MAChBlD,EAAgBmD,KAAO,KAAOxB,EAASwH,EACvCnJ,EAAgBoD,WAChBpD,EAAgBqF,YAO1BmD,EAAAnuD,UAAAgvD,oBAAA,SAAoB1P,GAClB,OAAO/zC,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,qCAC1B1gD,KACDgE,EAAAA,IAAG,SAAE5D,GACH,MAAO,CACLw4B,MAFC3hC,EAAAmJ,EAAA,GAAC,GAGFk/C,SAAUxL,EAAanvB,KACvB46B,KAAM,CAACzL,EAAav3B,kBAM5BomC,EAAAnuD,UAAAivD,qBAAA,SAAqB7D,GACnB,OAAO7/C,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,uBAC3BpsD,KAAK4sB,YAAYw/B,UAAU,sBAAuB,CAChDzB,MAAOW,EAAe7C,YACtB4B,KAAMiB,EAAe5C,eAEtBh9C,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmjD,EAAAljD,EAAA,GAAWsgD,EAAAtgD,EAAA,GACf,MAAO,CACLu4B,MAAO2qB,EACPjE,SAAUM,EAAehD,kBACzB2C,KAAM,CAACK,EAAe/C,WAAY8D,QAM1CgC,EAAAnuD,UAAAkvD,mBAAA,SAAmBC,GAEjB,GAAIrvD,KAAKqgD,sBAAuB,KACxB99C,EAAOvC,KAAKqgD,sBAAsBjC,gBAAgBiR,GAExD,OAAO9sD,GAAQA,EAAKo7C,gCAtKzB/1C,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,yvHACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDArBzC+pB,EAAAA,+BACAC,EAAAA,8BAMAc,EAAAA,0BARApT,EAAAA,mBAOAuE,EAAAA,0BASO6wB,UACA73B,MA2KTioC,KChMA,IAAAiB,GAAA,WAoBA,SAAAA,KA6BiC,2BA7BhCnnD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA8G,EACA0qC,GACAzqC,EAAAA,WACAmG,EAAAA,UACAD,EAAAA,aACA8/B,GACAnsB,EAAAA,qBACA3gB,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbmwC,oBAAqB,CACnBlwC,UAAWgvC,GACX/jC,OAAQ,CACN61B,GACApF,GACA4K,GACAkB,GACAuH,SAMVhmD,aAAc,CAACimD,IACf/uC,gBAAiB,CAAC+uC,IAClBxlD,QAAS,CAACwlD,QAEqBiB,EAjDjC,iBCwFE,SAAAE,EACU9e,EACEkQ,EACA7T,EACAuU,EACAtkC,EACF/S,GALAjK,KAAA0wC,GAAAA,EACE1wC,KAAA4gD,wBAAAA,EACA5gD,KAAA+sC,YAAAA,EACA/sC,KAAAshD,mBAAAA,EACAthD,KAAAgd,qBAAAA,EACFhd,KAAAiK,aAAAA,EAtDVjK,KAAA+mD,iBAA4C,IAAInpC,EAAAA,gBAAwB,IAkBxE5d,KAAAyvD,eAAgB,EAGhBzvD,KAAA0vD,cAAgB,IAAIvhD,EAAAA,aAGpBnO,KAAA2vD,cAAgB,IAAIxhD,EAAAA,aAMpBnO,KAAAoiD,QAAqBpiD,KAAK0wC,GAAGI,MAAM,CACjCqR,eAAgB,EAAC,GACjByN,UAAW,CAAC,IACZhH,UAAW,CAAC,GAAI7X,EAAAA,WAAWC,UAC3B6X,SAAU,CAAC,GAAI9X,EAAAA,WAAWC,UAC1B8X,MAAO,CAAC,GAAI/X,EAAAA,WAAWC,UACvB+X,MAAO,CAAC,IACRC,KAAM,CAAC,GAAIjY,EAAAA,WAAWC,UACtBwW,OAAQxnD,KAAK0wC,GAAGI,MAAM,CACpB1vB,QAAS,CAAC,KAAM2vB,EAAAA,WAAWC,YAE7BiW,QAASjnD,KAAK0wC,GAAGI,MAAM,CACrB1vB,QAAS,CAAC,KAAM2vB,EAAAA,WAAWC,YAE7BiY,WAAY,CAAC,GAAIlY,EAAAA,WAAWC,UAC5Bka,MAAO,KA4LX,OAhLEsE,EAAAtvD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KAEEA,KAAKmpD,WAAanpD,KAAKshD,mBAAmBuO,uBAAuBnkD,KAC/DG,EAAAA,IAAG,SAACw9C,GACoC,IAAlC7pD,OAAOqvB,KAAKw6B,GAAW1oD,QACzB4K,EAAK+1C,mBAAmBwN,2BAM9B9uD,KAAK8vD,QAAU9vD,KAAK+sC,YAAYgjB,YAAYrkD,KAC1CG,EAAAA,IAAG,SAACmkD,GACiC,IAA/BxwD,OAAOqvB,KAAKmhC,GAAQrvD,QACtB4K,EAAKwhC,YAAYkjB,eAGrBvgD,EAAAA,IAAG,SAACsgD,GACFA,EAAOta,KAAK3wB,IAEZ,OAAAhiB,EAAA,CADkB,CAAEkQ,KAAM,GAAIod,KAAM,UACd2/B,MAK1BhwD,KAAKgnD,SAAWhnD,KAAK+mD,iBAAiBr7C,KACpC6S,EAAAA,UAAS,SAAC0oC,GAAW,OAAA17C,EAAK+1C,mBAAmB4F,WAAWD,KACxDp7C,EAAAA,IAAG,SAACs7C,OACIC,EAAgB77C,EAAK62C,QAAQhlC,IAAI,kBACnC+pC,GAAWA,EAAQxmD,OAAS,EAC9BymD,EAAcjwC,SAEdiwC,EAAcpwC,aAMpBhX,KAAK+pD,iBAAmB/pD,KAAK4gD,wBAC1BoJ,gCACAv9C,UAAS,SAAEw9C,GACe,SAArBA,EAAQC,SACV3+C,EAAKq1C,wBAAwBuJ,kCACC,WAArBF,EAAQC,SACjB3+C,EAAKmkD,cAAc5gD,KAAKvD,EAAK62C,QAAQjgD,OACP,WAArB8nD,EAAQC,UAGfD,EAAQiG,OAAOA,OAAOC,KAAI,SAACrtD,GAAS,MAAkB,cAAlBA,EAAMstD,UAE1C7kD,EAAKyR,qBAAqBxR,IACxB,CAAEsO,IAAK,6BACPoD,EAAAA,kBAAkBuwB,gBAGpBliC,EAAKyR,qBAAqBxR,IACxB,CAAEsO,IAAK,8BACPoD,EAAAA,kBAAkBuwB,gBAGtBliC,EAAKq1C,wBAAwBuJ,mCACC,WAArBF,EAAQC,UACjB3+C,EAAK6+C,qBAAqBH,KAI5BjqD,KAAKqwD,aAAwD,IAAzC7wD,OAAOqvB,KAAK7uB,KAAKqwD,aAAa1vD,SACpDX,KAAKoiD,QAAQkO,WAAWtwD,KAAKqwD,aAE7BrwD,KAAKsnD,gBAAgBtnD,KAAKqwD,YAAYpJ,SAClCjnD,KAAKqwD,YAAY7I,QACnBxnD,KAAKunD,eAAevnD,KAAKqwD,YAAY7I,UAK3CgI,EAAAtvD,UAAAqwD,cAAA,SAAcjsB,GACZtkC,KAAKoiD,QAAkB,SAAEwN,UAAUnd,SAASnO,EAAMrxB,OAGpDu8C,EAAAtvD,UAAAonD,gBAAA,SAAgBL,GACdjnD,KAAKoiD,QAAkB,SAAE6E,QAAkB,SAAE7lC,QAAQqxB,SACnDwU,EAAQ7lC,SAEVphB,KAAK+mD,iBAAiBtlD,KAAKwlD,EAAQ7lC,UAGrCouC,EAAAtvD,UAAAqnD,eAAA,SAAeC,GACbxnD,KAAKoiD,QAAkB,SAAEoF,OAAiB,SAAEpmC,QAAQqxB,SAClD+U,EAAOpmC,UAIXouC,EAAAtvD,UAAAswD,qBAAA,WACExwD,KAAKoiD,QAAkB,SAAED,eAAe1P,SACtCzyC,KAAKoiD,QAAQjgD,MAAMggD,iBAIvBqN,EAAAtvD,UAAAumD,KAAA,WACEzmD,KAAK2vD,cAAc7gD,QAGrB0gD,EAAAtvD,UAAAmrD,cAAA,WAAA,IAAA9/C,EAAAvL,KACMA,KAAKoiD,QAAQlR,SAAiB,OAAE/uC,MAAMif,UACxCphB,KAAKywD,WAAazwD,KAAKgnD,SAASt7C,KAAKC,EAAAA,KAAK,IAAIc,UAAS,SAAC06C,OAChDn7B,EAAMm7B,EAAQ3hD,KAAI,SACtBgiD,GACE,OAAAA,EAAOpmC,UAAY7V,EAAK62C,QAAQlR,SAAiB,OAAE/uC,MAAMif,UAE7D5hB,OAAOa,OAAOkL,EAAK62C,QAAQjgD,MAAMqlD,OAAQ,CACvCC,aAAcz7B,EAAIy7B,kBAKpBznD,KAAKoiD,QAAQx+B,MACf5jB,KAAK4gD,wBAAwByK,cAAcrrD,KAAKoiD,QAAQjgD,OAIxDnC,KAAK0vD,cAAc5gD,UAAKtH,IAI5BgoD,EAAAtvD,UAAAkqD,qBAAA,SAAqBH,GAArB,IAAA1+C,EAAAvL,KACOA,KAAKmrD,2BACRnrD,KAAKmrD,yBAA2BnrD,KAAKiK,aAAab,KAChDu+C,GACA,CAAE95C,UAAU,EAAMC,KAAM,OAE1B9N,KAAKmrD,yBAAyBnW,kBAAkB8S,eAAiB9nD,KAAKoiD,QAAQjgD,MAC9EnC,KAAKmrD,yBAAyBnW,kBAAkB6S,mBAC9CoC,EAAQpC,mBACV7nD,KAAKmrD,yBAAyBh9B,OAC3BlC,KAAI,SAACm2B,GACJ72C,EAAKq1C,wBAAwBuJ,kCACzB/H,IACFA,EAAU5iD,OAAOa,OACf,CACEuvD,UAAWrkD,EAAK62C,QAAQjgD,MAAMytD,UAC9B1E,MAAO3/C,EAAK62C,QAAQjgD,MAAM+oD,MAC1BwD,UAAU,GAEZtM,GAEF72C,EAAKmkD,cAAc5gD,KAAKszC,IAE1B72C,EAAK4/C,yBAA2B,OAEjCC,MAAK,WAEJ7/C,EAAKq1C,wBAAwBuJ,sCACvB/H,EAAU5iD,OAAOa,OACrB,CACEquD,UAAU,GAEZnjD,EAAK62C,QAAQjgD,OAEfoJ,EAAKmkD,cAAc5gD,KAAKszC,GACxB72C,EAAK4/C,yBAA2B,SAKxCqE,EAAAtvD,UAAAkN,YAAA,WACEpN,KAAK4gD,wBAAwBuJ,kCAEzBnqD,KAAK+pD,kBACP/pD,KAAK+pD,iBAAiB18C,cAGpBrN,KAAKywD,YACPzwD,KAAKywD,WAAWpjD,mCA/OrBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,27NACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAzBlCigC,EAAAA,mBAIPlW,EAAAA,+BAOAc,EAAAA,mBADAC,EAAAA,0BAJA1e,EAAAA,4BAWAtU,0CAgBCjB,EAAAA,8BAGAA,EAAAA,8BAGAA,EAAAA,iCAGAA,EAAAA,6BAGAA,EAAAA,6BAGAA,EAAAA,6BAGAmH,EAAAA,8BAGAA,EAAAA,UAkNHqgD,KCjRA,IAAAkB,GAAA,WAWA,SAAAA,KAegC,2BAf/BvoD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACAD,EAAAA,YACAlF,EAAAA,aACAqH,EAAAA,eACA1U,EACAmH,EAAAA,WACA8T,IAEF/a,aAAc,CAAConD,GAAsB7H,IACrCroC,gBAAiB,CAACqoC,IAClB9+C,QAAS,CAAC2mD,GAAsB7H,QAEF+I,EA1BhC,GCAAC,GAAA,WAUE,SAAAA,EAAoBnP,GAAAxhD,KAAAwhD,uBAAAA,SAEpBmP,EAAAzwD,UAAA2rB,YAAA,WACE,OAAO7rB,KAAKwhD,uBAAuBT,+CAPtCn6C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHL65C,6HAJT,GC0BA,IAAAiQ,GAAA,WAME,SAAAA,EACYtP,EACAj7B,EACAjB,EACAw7B,EACFP,EACA3B,EACA9xB,GANE5sB,KAAAshD,mBAAAA,EACAthD,KAAAqmB,YAAAA,EACArmB,KAAAolB,eAAAA,EACAplB,KAAA4gD,wBAAAA,EACF5gD,KAAAqgD,sBAAAA,EACArgD,KAAA0+C,eAAAA,EACA1+C,KAAA4sB,YAAAA,EAGV5sB,KAAA6wD,8BAA+B,EAI/B7wD,KAAA8wD,aAAc,EAOd9wD,KAAA+wD,MAAgB,GAMhB/wD,KAAAgxD,KAAyB,KAwBzBhxD,KAAAkmD,oBAAsBlmD,KAAKqgD,sBAAsB5B,uBAC/Cz+C,KAAK0+C,gBAOP1+C,KAAAmmD,wBAA0B,OAE1BnmD,KAAA4/C,iBAAkB,EAwNpB,OA/MEgR,EAAA1wD,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKgxD,KAAO,KACZhxD,KAAKkmD,oBAAsBlmD,KAAKqgD,sBAAsB5B,uBACpDz+C,KAAK0+C,gBAEP1+C,KAAKmmD,wBAA0B,OAC/BnmD,KAAK2rD,WAAa3rD,KAAKshD,mBAAmB2P,sBAC1CjxD,KAAKkxD,mBAAqBlxD,KAAKshD,mBAAmBO,eAClD7hD,KAAKmxD,iBAAmBnxD,KAAK4gD,wBAAwBM,qBAErDlhD,KAAKoxD,OAAS3lD,EAAAA,cAAc,CAC1BzL,KAAKkxD,mBACLlxD,KAAKmxD,iBACLnxD,KAAK4sB,YAAYw/B,UAAU,0CAC3BpsD,KAAK4sB,YAAYw/B,UAAU,qCAC3BpsD,KAAK4sB,YAAYw/B,UAAU,0BAC1B1gD,KACDgE,EAAAA,IAAG,SACA5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GACCm2C,EAAAl2C,EAAA,GACA2iD,EAAA3iD,EAAA,GACAslD,EAAAtlD,EAAA,GACAulD,EAAAvlD,EAAA,GACAygD,EAAAzgD,EAAA,GAGA,GACEk2C,EAAUthD,UACR+tD,GACiC,IAAjClvD,OAAOqvB,KAAK6/B,GAAU/tD,SACrB4K,EAAKq8C,iBACR,KACMzF,EAAiBF,EAAUz8C,KAAI,SACnC48C,GAAW,OAAAA,EAAQD,iBAErBuM,EAAWvM,EACX52C,EAAKgmD,cAAcpP,GAErB,OAAOF,EAAUvyC,IAAG,SAAC0yC,GAQnB,MAAO,CACLA,QAAOA,EACPqI,KATWl/C,EAAK4gD,eAChB/J,EACAsM,EACA2C,EACAC,EACA9E,SAWLxsD,KAAKqmB,YAAYk6B,cAGpBvgD,KAAK4/C,iBAAkB,EAFvB5/C,KAAKshD,mBAAmBU,iBAM5B4O,EAAA1wD,UAAAisD,eAAA,SACE/J,EACAsM,EACA2C,EACAC,EACA9E,OAEIhF,EAAS,GAMb,OAJIpF,EAAQoF,QAAUpF,EAAQoF,OAAOpmC,UACnComC,EAASpF,EAAQoF,OAAOpmC,QAAU,MAG7B,CACLkjB,MAAO8d,EAAQD,eAAiBkP,EAA6B,GAC7DrG,SAAU5I,EAAQwG,UAAY,IAAMxG,EAAQyG,SAC5CoC,KAAM,CACJ7I,EAAQ0G,MACR1G,EAAQ2G,MACR3G,EAAQ4G,KAAO,KAAOxB,EAASpF,EAAQ6E,QAAQ7lC,QAC/CghC,EAAQ6G,WACR7G,EAAQ8I,OAEVoC,QAAS,CAAC,CAAEj9B,KAAMihC,EAAuBl/C,MAAO,SAChDm7C,OAAQmB,GAAYA,EAASliD,KAAO41C,EAAQ51C,GAAKggD,EAAe,KAIpEoE,EAAA1wD,UAAAqxD,cAAA,SAAcnP,GACZpiD,KAAK4nD,gBAAkBxF,EACvBpiD,KAAK4gD,wBAAwB0B,mBAAmBF,IASlDwO,EAAA1wD,UAAAsxD,WAAA,SACEpP,GADF,IAAA72C,EAAAvL,KAIQyxD,EAAuBrP,EAAiB,QAC1CA,EAAiB,QACjBA,EAEEsP,EAAc1xD,KAAKmxD,iBAAiB1kD,UAAS,SAACiiD,GAC9CA,GAAYA,EAASiD,kBACvBpmD,EAAKiiD,SACLkE,EAAYrkD,iBAIhBrN,KAAK8wD,aAAc,EAGf1O,EAAiB,SAAKA,EAAoB,WAC5CA,EAAoB,WAChBpiD,KAAK4gD,wBAAwBgR,oBAAoBH,GACjDzxD,KAAKuxD,cAAcE,GAGvBzxD,KAAKkxD,mBAAmBxlD,KAAKC,EAAAA,KAAK,IAAIc,UAAS,SAACw1C,GAC9CA,EAAUt8C,SAAS8rD,GACflmD,EAAKgmD,cAAcE,GACnBlmD,EAAKq1C,wBAAwBgR,oBAAoBH,MAK3Db,EAAA1wD,UAAA2xD,mBAAA,WACE7xD,KAAK6wD,8BAA+B,GAGtCD,EAAA1wD,UAAA4xD,mBAAA,SAAmBrE,QAAA,IAAAA,IAAAA,GAAA,GACjBztD,KAAK6wD,8BAA+B,EAChCpD,GACFztD,KAAKytD,cAITmD,EAAA1wD,UAAAstD,OAAA,WACExtD,KAAKolB,eAAeknB,GAClBtsC,KAAKqgD,sBAAsB5B,uBAAuBz+C,KAAK0+C,kBAI3DkS,EAAA1wD,UAAAutD,WAAA,WACEztD,KAAKolB,eAAeknB,GAClBtsC,KAAKqgD,sBAAsBvB,2BACzB9+C,KAAK0+C,iBACF,SASTkS,EAAA1wD,UAAA6xD,gBAAA,SAAgB3P,GACdpiD,KAAKuxD,cAAcnP,IAQrBwO,EAAA1wD,UAAAumD,KAAA,WACEzmD,KAAKytD,cAQPmD,EAAA1wD,UAAAuB,KAAA,WACEzB,KAAKwtD,UAQPoD,EAAA1wD,UAAA8xD,cAAA,SAAc5P,GACZpiD,KAAKwxD,WAAWpP,IAQlBwO,EAAA1wD,UAAAkN,YAAA,WACMpN,KAAKiyD,eACPjyD,KAAKiyD,cAAc5kD,cAEjBrN,KAAKkyD,oBACPlyD,KAAKkyD,mBAAmB7kD,mCAxR7BzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,sBACVC,SAAA,s+FACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAhBzC8qB,EAAAA,0BAJApT,EAAAA,mBAEA1C,EAAAA,sBADA+U,EAAAA,+BAQO+iB,UAZAyI,EAAAA,sBAMPt5B,EAAAA,sBAySFwjC,EA3RA,GC1BA,IAAAuB,GAAA,WAeA,SAAAA,KA2BoC,2BA3BnChqD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAm7C,GACAthD,EACA0N,GACAzN,EAAAA,WACAi2C,GACAH,GACA58C,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbgzC,wBAAyB,CACvB/yC,UAAWuxC,GACXtmC,OAAQ,CACN61B,GACApF,GACA4V,SAMVvoD,aAAc,CAACwoD,IACftxC,gBAAiB,CAACsxC,IAClB/nD,QAAS,CAAC+nD,QAEwBuB,EA1CpC,GCAAE,GAAA,WAgBA,SAAAA,KAgBsC,2BAhBrClqD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAo8C,GACAG,GACAY,GACAH,GACAH,GACAwB,GACAgH,GACAO,GACA7Y,GACAia,GACA6C,QAGkCE,EAhCtC,GCAAC,GAAA,WAUE,SAAAA,EACUltC,EACAymB,EACAxlB,GAFArmB,KAAAolB,eAAAA,EACAplB,KAAA6rC,YAAAA,EACA7rC,KAAAqmB,YAAAA,SAGVisC,EAAApyD,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACE,OAAOA,KAAK6rC,YAAYG,eAAetgC,KACrCgE,EAAAA,IAAG,SAACu8B,GACF,GAAIA,EAAMsB,aACRhiC,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,cAC7B,GAAIhhC,EAAK8a,YAAYk6B,cAE1B,OADAh1C,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,UAC3B,EAET,OAAQN,EAAMsB,qCAnBrB3mC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALqBqf,EAAAA,sBAA1B6U,EAAAA,mBAAanS,EAAAA,wMAFtB,GCAA,IAAA0pC,GAAA,WAWE,SAAAA,EAAYxhC,GAAZ,IAAAxlB,EAAAvL,KAFAA,KAAAwyD,WAAuC,IAAI50C,EAAAA,iBAAgB,GAGzDmT,EAAO0hC,OACJ/mD,KAAK4S,EAAAA,OAAM,SAAClM,GAAS,OAAAA,aAAiBsgD,EAAAA,mBACtCjmD,UAAS,WACRlB,EAAKonD,QAAO,YAOlBJ,EAAAryD,UAAAyyD,OAAA,SAAOC,GACDA,EACF5yD,KAAKwyD,WAAW/wD,MAAK,GAErBzB,KAAKwyD,WAAW/wD,MAAMzB,KAAKwyD,WAAWrwD,4BArB3CyE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALYqrB,EAAAA,uIAD1B,GCAA,IAAA0gC,GAAA,WAUE,SAAAA,EAAoBC,GAAA9yD,KAAA8yD,qBAAAA,EAStB,OAPED,EAAA3yD,UAAAyyD,OAAA,WACE3yD,KAAK8yD,qBAAqBH,UAG5BnzD,OAAA6H,eAAIwrD,EAAA3yD,UAAA,aAAU,KAAd,WACE,OAAOF,KAAK8yD,qBAAqBN,gEAbpC5qD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,6XACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCohD,MAiBTM,EAnBA,GCAA,IAAAE,GAAA,WAIA,SAAAA,KAekC,2BAfjC5qD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbyzC,uBAAwB,CACtBxzC,UAAWwzC,QAKnBzqD,aAAc,CAACyqD,IACfhqD,QAAS,CAACgqD,IACVvzC,gBAAiB,CAACuzC,QAEcE,EAnBlC,GCAAC,GAAA,WAKA,SAAAA,KAK2B,2BAL1B7qD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAAC2sB,IACVvsB,UAAW,CAAC,CAAEC,QAASmK,EAAclK,YAAaC,EAAAA,SAClDC,QAAS,CAACmsB,QAEeg+B,EAV3B,GCAAC,GAAA,WAoCE,SAAAA,IAxBAjzD,KAAAkzD,cAAe,EAMflzD,KAAAwK,iBAA6B,GAG7BxK,KAAAmzD,4BAA6B,EAO7BnzD,KAAAyK,WAAY,EAGZzK,KAAAozD,eAAiB,IAAIjlD,EAAAA,aAqCvB,OA9BE8kD,EAAA/yD,UAAA4K,SAAA,WACM9K,KAAKmzD,4BAA8BnzD,KAAKmM,QAC1CnM,KAAKkzD,aAAevoD,QAClB3K,KAAKmM,QAAQQ,eAAiB0mD,EAAAA,yBAAyBC,OAGrDtzD,KAAKuzD,iBAAmBvzD,KAAKuzD,gBAAgBC,iBAC3CxzD,KAAKuzD,gBAAgBC,eAAeC,qBACtCzzD,KAAKkzD,cAAe,EACXlzD,KAAKuzD,gBAAgBC,eAAeE,mBAC7C1zD,KAAKkzD,cAAe,KAM5BD,EAAA/yD,UAAA4M,gBAAA,WACE9M,KAAKkzD,cAAgBlzD,KAAKkzD,aAE1BlzD,KAAKozD,eAAetkD,KAAK,CACvB/B,MAAO/M,KAAKkzD,aACZprD,SAAU9H,KAAKuzD,mBAInBN,EAAA/yD,UAAAyzD,WAAA,SAAWC,GACT,QAAO5zD,KAAKmzD,4BACRnzD,KAAKwK,iBAAiB7E,SAASiuD,wBA1DtChsD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,6BACVC,SAAA,4uBAKCE,EAAAA,gCAGAA,EAAAA,0CAGAA,EAAAA,uBAGAA,EAAAA,yBAIAA,EAAAA,8BAGAmH,EAAAA,UAsCH8jD,EApEA,qBC4EE,SAAAY,EACUC,EACA92C,EACA+2C,EACA7pD,EACA2hC,GAJA7rC,KAAA8zD,mBAAAA,EACA9zD,KAAAgd,qBAAAA,EACAhd,KAAA+zD,wBAAAA,EACA/zD,KAAAkK,yBAAAA,EACAlK,KAAA6rC,YAAAA,EA9CF7rC,KAAAmK,cAAgB,IAAIC,EAAAA,aACpBpK,KAAAg0D,mBAAqB,IAAIp2C,EAAAA,iBAAyB,GAK1D5d,KAAAwK,iBAA6B,GAE7BxK,KAAAmzD,2BAA6BzmC,EAAAA,iBAC3B1sB,KAAK+zD,wBACLE,EAAAA,4BAIFj0D,KAAAyK,UAAYC,EAAAA,eAAe1K,KAAK+zD,wBAAyB,OAuU3D,OApSEF,EAAA3zD,UAAA4K,SAAA,WACE9K,KAAKmL,SAAWM,EAAAA,cAAc,CAC5BzL,KAAK8zD,mBAAmBI,2BACxBl0D,KAAK8zD,mBAAmBK,8BACxBn0D,KAAK8zD,mBAAmBM,kCACxBp0D,KAAK6rC,YAAY2O,iBACjBx6C,KAAKg0D,qBACJtoD,KACDgE,EAAAA,IAAG,SACA5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GACCuoD,EAAAtoD,EAAA,GACAuoD,EAAAvoD,EAAA,GACAwoD,EAAAxoD,EAAA,GACAyuC,EAAAzuC,EAAA,GACAioD,EAAAjoD,EAAA,GAEA,OAAAsoD,GACAC,GACAC,IACC/Z,GACDwZ,KAGNh0D,KAAKw0D,kBACLx0D,KAAKy0D,kBACLz0D,KAAK00D,uBAGCb,EAAA3zD,UAAAs0D,gBAAR,WAAA,IAAAjpD,EAAAvL,KACEA,KAAK20D,cAAgB30D,KAAK8zD,mBAAmB5oD,cAAcQ,KACzDonB,EAAAA,eACE9yB,KAAKkK,yBAAyBc,eAC9BhL,KAAK6rC,YAAY2O,kBAEnBl8B,EAAAA,OAAM,SACHxS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACC,EAAA,GAAeA,EAAA,GAAyC,OAApBA,EAAA,KAExCF,EAAAA,IAAG,SAAEC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC8oD,EAAA7oD,EAAA,GAAcA,EAAA,GACbR,EAAKspD,eAAeD,IACvBrpD,EAAKuoD,mBAAmBgB,iBAG5BplD,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC8oD,EAAA7oD,EAAA,GAAcgpD,EAAAhpD,EAAA,GAClB,OAAKR,EAAK4nD,4BAINxoD,QAAQY,EAAKwoD,wBAAwBnpD,qBAErCD,QACEY,EAAKwoD,wBAAwBnpD,kBAAkBJ,oBAGjDe,EAAKf,iBAAmBe,EAAKwoD,wBAAwBnpD,kBAAkBJ,kBAGvEG,QACEY,EAAKwoD,wBAAwBnpD,kBAC1BoqD,wBAGEzpD,EAAK0pD,sBAAsBL,EAAcG,GAjB3CH,MA0BPf,EAAA3zD,UAAA+0D,sBAAR,SACEL,EACAG,QAAA,IAAAA,IAAAA,EAAA,QAEIG,EAA4B,GAEhC,OACGl1D,KAAK+zD,wBAAwBnpD,kBAAkBoqD,sBAC7CG,uBAUHxqD,QACE3K,KAAK+zD,wBAAwBnpD,kBAAkBoqD,sBAC5CI,eAELp1D,KAAK+zD,wBAAwBnpD,kBAAkBoqD,sBAC5CI,aAAaz0D,OAAS,IAEzBu0D,EAAkBl1D,KAAK+zD,wBAAwBnpD,kBAC5CoqD,sBAAsBI,cAGpBp1D,KAAK8zD,mBAAmBuB,uBAC7BT,EACAM,KArBAA,EAAkBH,EAAmBrlD,IAAG,SAAC5H,GAAY,OAAAA,EAAS0E,KACvDxM,KAAK8zD,mBAAmBuB,uBAC7BT,EACAM,KAsBErB,EAAA3zD,UAAAu0D,gBAAR,WAAA,IAAAlpD,EAAAvL,KACEA,KAAK8zD,mBAAmBwB,+BACxBt1D,KAAKmK,cAAcqB,IACjBxL,KAAK8zD,mBACFyB,8BACA9oD,UAAS,SAAC6qC,GAAW,OAAA/rC,EAAKiqD,sBAAsBle,OAI/Cuc,EAAA3zD,UAAAw0D,oBAAR,WAAA,IAAAnpD,EAAAvL,KACEA,KAAK8zD,mBAAmB2B,mCACxBz1D,KAAKmK,cAAcqB,IACjBxL,KAAK8zD,mBACFM,kCACA1oD,KACC6gB,EAAAA,UAAU5hB,SACVmoB,EAAAA,eACE9yB,KAAK8zD,mBAAmB4B,mCAE1BhmD,EAAAA,IAAG,SAAE5D,GAA0B,OAA1BnJ,EAAAmJ,EAAA,GAAG,KACRD,EAAAA,IAAG,SAAC8pD,GACEA,GACFpqD,EAAKuoD,mBAAmBgB,kBAI7BroD,UAAS,SAACkpD,GACT,OAAApqD,EAAKqqD,0BAA0BD,OAK/B9B,EAAA3zD,UAAA20D,eAAR,SAAuBD,GACrB,OAAOjqD,QAAQiqD,IAAiBA,EAAaj0D,OAAS,GAGxDkzD,EAAA3zD,UAAA4M,gBAAA,SAAgBhB,OACdiB,EAAAjB,EAAAiB,MACAjF,EAAAgE,EAAAhE,SAKIiF,EACF/M,KAAK8zD,mBAAmBjnD,YAAY/E,EAAS0E,GAAI1E,EAAS+tD,SAE1D71D,KAAK8zD,mBAAmBvnD,gBAAgBzE,EAAS0rD,eAAevgD,OAI5D4gD,EAAA3zD,UAAAs1D,sBAAR,SAA8Ble,GACxBA,IACFt3C,KAAK8zD,mBAAmBwB,+BACxBt1D,KAAKgd,qBAAqBxR,IACxB,CAAEsO,IAAK,+CACPoD,EAAAA,kBAAkBylB,yBAKhBkxB,EAAA3zD,UAAA01D,0BAAR,SAAkCte,GAC5BA,IACFt3C,KAAK8zD,mBAAmB2B,mCACxBz1D,KAAKgd,qBAAqBxR,IACxB,CAAEsO,IAAK,mDACPoD,EAAAA,kBAAkBylB,yBAKxBkxB,EAAA3zD,UAAAoL,UAAA,SAAUU,GAAV,IAAAT,EAAAvL,UAAU,IAAAgM,IAAAA,EAAA,QACF8pD,EAAwC,GAC9C9pD,EAAUE,QAAO,SAACpE,GAChB,GAAIyD,EAAKuoD,mBAAmBznD,eAAevE,EAAS0rD,gBAAiB,CACnE,GAAIjoD,EAAKe,kBAAkBxE,GACzB,OAEFguD,EAAmBzzD,KAAKyF,MAI5B9H,KAAKg0D,mBAAmBvyD,MAAK,GAE7BzB,KAAKmK,cAAcqB,IACjBxL,KAAK+1D,sBAAsBD,GACxBpqD,KAAKG,EAAAA,IAAG,SAACmqD,GAAgB,OAAAzqD,EAAKyoD,mBAAmBvyD,MAAK,MACtDgL,cAIConD,EAAA3zD,UAAA61D,sBAAR,SACED,GADF,IAAAvqD,EAAAvL,KAuBE,YAtBA,IAAA81D,IAAAA,EAAA,IAEiB9yD,EAAAA,OACfhD,KAAK8zD,mBAAmBM,mCACxB1oD,KACAE,EAAAA,uBACA0S,EAAAA,OAAM,SAAC+jC,GAAW,OAACA,KAEG32C,KAAKuqD,EAAAA,KAAI,SAAEC,EAAKC,GAAW,OAAAD,EAAM,IAAI,IACpCxqD,KACvBG,EAAAA,IAAG,SAACrL,GACEA,EAAIs1D,EAAmBn1D,QACzB4K,EAAKuoD,mBAAmBvnD,gBACtBupD,EAAmBt1D,GAAGgzD,eAAevgD,SAKTvH,KAClC4S,EAAAA,OAAM,SAAC83C,GAAe,OAAAA,IAAgBN,EAAmBn1D,WAM7DkzD,EAAA3zD,UAAAwM,SAAA,SAASV,GAAT,IAAAT,EAAAvL,UAAS,IAAAgM,IAAAA,EAAA,QACDqqD,EAAoC,GAC1CrqD,EAAUE,QAAO,SAACpE,GAChB,GAAIyD,EAAKuoD,mBAAmBlnD,mBAAmB9E,EAAS0rD,gBAAiB,CACvE,GAAIjoD,EAAKe,kBAAkBxE,GACzB,OAGFuuD,EAAeh0D,KAAKyF,MAIxB9H,KAAKg0D,mBAAmBvyD,MAAK,GAE7BzB,KAAKmK,cAAcqB,IACjBxL,KAAKs2D,gBAAgBD,GAClB3qD,KAAKG,EAAAA,IAAG,SAACmqD,GAAgB,OAAAzqD,EAAKyoD,mBAAmBvyD,MAAK,MACtDgL,cAIConD,EAAA3zD,UAAAo2D,gBAAR,SACED,GADF,IAAA9qD,EAAAvL,KAwBE,YAvBA,IAAAq2D,IAAAA,EAAA,IAEiBrzD,EAAAA,OACfhD,KAAK8zD,mBAAmBK,+BACxBzoD,KACAE,EAAAA,uBACA0S,EAAAA,OAAM,SAAC+jC,GAAW,OAACA,KAEG32C,KAAKuqD,EAAAA,KAAI,SAAEC,EAAKC,GAAW,OAAAD,EAAM,IAAI,IACjCxqD,KAC1BG,EAAAA,IAAG,SAACrL,GACEA,EAAI61D,EAAe11D,QACrB4K,EAAKuoD,mBAAmBjnD,YACtBwpD,EAAe71D,GAAGgM,GAClB6pD,EAAe71D,GAAGq1D,YAKanqD,KACrC4S,EAAAA,OAAM,SAAC83C,GAAe,OAAAA,IAAgBC,EAAe11D,WAMjDkzD,EAAA3zD,UAAAoM,kBAAR,SAA0BxE,GACxB,QAAK9H,KAAKmzD,6BAKRxoD,QAAQ3K,KAAK+zD,wBAAwBnpD,oBACrCD,QACE3K,KAAK+zD,wBAAwBnpD,kBAAkBJ,mBAEjDxK,KAAK+zD,wBAAwBnpD,kBAAkBJ,iBAAiB7E,SAC9DmC,EAAS0E,MAKfqnD,EAAA3zD,UAAAkN,YAAA,WACEpN,KAAKmK,cAAckD,cACnBrN,KAAKg0D,mBAAmB3mD,cAExBrN,KAAK8zD,mBAAmBwB,+BACxBt1D,KAAK8zD,mBAAmB2B,wDAxV3B7tD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,6zEArBAo0B,EAAAA,0BAJA3e,EAAAA,4BALAjQ,EAAAA,+BACAC,EAAAA,gCAEAytB,EAAAA,eAmXF64B,KCxXA,IAAA0C,GAAA,WAcA,SAAAA,KAqBsC,2BArBrCpuD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAmS,EAAAA,YACAC,EAAAA,oBACAoC,GACAzN,EAAAA,WACAnH,EACAK,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACby0C,2BAA4B,CAC1Bx0C,UAAWw0C,GACXvpC,OAAQ,CAACksC,EAAAA,gBAKjBpuD,aAAc,CAACyrD,GAA4BZ,IAC3CpqD,QAAS,CAACgrD,GAA4BZ,IACtC3zC,gBAAiB,CAACu0C,QAEkB0C,EAnCtC,GCAAE,GAAA,WAQA,SAAAA,KAYsC,2BAZrCtuD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA+G,EAAAA,WACAnH,EACA4U,GACAy5C,IAEFnuD,aAAc,CAAC4B,GACfsV,gBAAiB,CAACtV,GAClBnB,QAAS,CAACmB,OAE0BysD,EApBtC,GCAAC,GAAA,WAgBE,SAAAA,EACU5D,EACA1tC,GADAplB,KAAA8yD,qBAAAA,EACA9yD,KAAAolB,eAAAA,EAPVplB,KAAA22D,YAAmC32D,KAAK8yD,qBAAqBN,WAkC/D,OAxBEkE,EAAAx2D,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK42D,qBAAuB52D,KAAKolB,eAC9BuqB,eACAljC,UAAS,SAACoqD,GACTtrD,EAAKurD,iBAA0B,IAARD,EACvBtrD,EAAKwrD,gBAAyB,IAARF,KAI5BH,EAAAx2D,UAAA82D,2BAAA,SAA2B5kD,GACPA,EAAY,OAAE6kD,UAAUtxD,SAAS,gBACjD3F,KAAKk3D,gBAITR,EAAAx2D,UAAAg3D,aAAA,WACEl3D,KAAK8yD,qBAAqBH,QAAO,IAGnC+D,EAAAx2D,UAAAkN,YAAA,WACMpN,KAAK42D,sBACP52D,KAAK42D,qBAAqBvpD,mCArC/BzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gBACVC,SAAA,2uBAJOyqD,UAFApsC,EAAAA,2DAYNle,EAAAA,YAAWpB,KAAA,CAAC,kDACZoB,EAAAA,YAAWpB,KAAA,CAAC,4BA+Bf6vD,EA7CA,GCAA,IAAAS,GAAA,WAaA,SAAAA,KAiByB,2BAjBxBhvD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAiI,GACAsa,GACA9C,GACAwO,GACA1B,GACA4F,GACA7F,GACA40B,GACAvtC,EAAAA,sBAEF9gB,aAAc,CAACsuD,IACf7tD,QAAS,CAAC6tD,QAEaS,EA9BzB,GCaAC,GAAA,WAwBE,SAAAA,EACUv3C,EACAwS,GAFV,IAAA9mB,EAAAvL,KACUA,KAAA6f,cAAAA,EACA7f,KAAAqyB,WAAAA,EApBFryB,KAAAq3D,eAAoCr3D,KAAK6f,cAAcmB,MAAMtV,KACnE4S,EAAAA,OAAO3T,SACPkB,EAAAA,IAAG,SAAEvM,GAAa,OAACiM,EAAK+rD,MAAWh4D,EAAEi4D,OAAM,YAGrCv3D,KAAAw3D,OAEJx3D,KAAKq3D,eAAe3rD,KACtBgE,EAAAA,IAAG,SAACuR,GAAQ,OAAAA,EAAKw2C,QAAQtlB,OAAOvZ,MAAM,OACtClpB,EAAAA,IAAG,SAACgoD,GAAS,OAAAA,EAAMhoD,IAAG,SAACuD,GAAQ,OAAA1H,EAAK8mB,WAAW2L,iBAAiB/qB,QAO5CjT,KAAAs3D,MAAQ,GAehC,OAHEF,EAAAl3D,UAAA8f,SAAA,WACE,OAAOhgB,KAAKw3D,4BAnCf5vD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,2WACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDARlCkQ,UALP0O,EAAAA,6CAgCC9nB,EAAAA,YAAWpB,KAAA,CAAC,YAefuwD,EArCA,GCbA,IAAAO,GAAA,WAOA,SAAAA,KAkBmC,2BAlBlCxvD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbw4C,wBAAyB,CACvBv4C,UAAW+3C,OAIjB54B,GACAlpB,EACAD,GAEFjN,aAAc,CAACgvD,IACf93C,gBAAiB,CAAC83C,IAClBvuD,QAAS,CAACuuD,QAEuBO,EAzBnC,GCAAE,GAAA,WAUE,SAAAA,EAAmBx4C,GAAArf,KAAAqf,UAAAA,EACrB,2BAPCzX,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,YACVC,SAAA,0ZACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCkQ,MASTw2C,EAXA,GCAA,IAAAC,GAAA,WAQA,SAAAA,KAwB2B,2BAxB1B3vD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAwF,GACA1F,EACA9M,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb24C,gCAAiC,CAC/B14C,UAAWw4C,IAEbA,gBAAiB,CACfx4C,UAAWw4C,IAEbG,sBAAuB,CACrB34C,UAAWw4C,QAKnBzvD,aAAc,CAACyvD,IACfv4C,gBAAiB,CAACu4C,IAClBhvD,QAAS,CAACgvD,QAEeC,EAhC3B,GCAAG,GAAA,WAUE,SAAAA,EAAmB54C,GAAArf,KAAAqf,UAAAA,EACrB,2BAPCzX,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,UACVC,SAAA,kKACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCkQ,MAST42C,EAXA,GCAA,IAAAC,GAAA,WAOA,SAAAA,KAeyB,2BAfxB/vD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAwF,GACAxS,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb+4C,iBAAkB,CAAE94C,UAAW44C,QAIrC7vD,aAAc,CAAC6vD,IACfpvD,QAAS,CAACovD,IACV34C,gBAAiB,CAAC24C,QAEKC,EAtBzB,GCAAE,GAAA,WAUE,SAAAA,EAAmB/4C,GAAArf,KAAAqf,UAAAA,EACrB,2BAPCzX,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,eACVC,SAAA,+EACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCkQ,MAST+2C,EAXA,GCAA,IAAAC,GAAA,WAMA,SAAAA,KAkBiC,2BAlBhClwD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbk5C,sBAAuB,CACrBj5C,UAAW+4C,IAEbG,yBAA0B,CACxBl5C,UAAW+4C,QAKnBhwD,aAAc,CAACgwD,IACfvvD,QAAS,CAACuvD,IACV94C,gBAAiB,CAAC84C,QAEaC,EAxBjC,iBCwDE,SAAAG,EACS34C,EACCwS,EACAltB,GAHV,IAAAoG,EAAAvL,KACSA,KAAA6f,cAAAA,EACC7f,KAAAqyB,WAAAA,EACAryB,KAAAmF,OAAAA,EA5BVnF,KAAAy4D,aAAe,EAMfz4D,KAAA04D,eAAoC,GAyBpC14D,KAAAk/B,YAAiCl/B,KAAK6f,cAAcmB,MAAMtV,KACxDitD,EAAAA,wBAAwB,cACxBp6C,EAAAA,UAAS,SAAC0C,GACR,OAAAxV,EAAAA,cACEwV,EAAKke,WAAWvG,MAAM,KAAKlpB,IAAG,SAAC2P,GAC7B,OAAA9T,EAAK8mB,WAAW2L,iBAAsB3e,GAAW3T,KAC/CE,EAAAA,uBACA8D,EAAAA,IAAG,SAACkpD,GAQF,OAPKA,EAAInvC,WACPmvC,EAAGx4D,EAAA,GACEw4D,EAAG,CACNnvC,SAAUmvC,EAAIvgC,YAIlBj4B,EAAA,GACKw4D,EAAG,CACNt0B,MAAUrjB,EAAK8c,IAAG,SAAS66B,EAAI76B,eAuD/C,OA9CEy6B,EAAAt4D,UAAA24D,OAAA,SAAOC,GACL94D,KAAKy4D,aAAeK,GAGtBN,EAAAt4D,UAAA4K,SAAA,WACE,GAAI9K,KAAKmF,QAAUnF,KAAKmF,OAAOyN,aAAc,KACrCmmD,EACJ/4D,KAAKmF,OAAOyN,aAAaomD,SACzBh5D,KAAKmF,OAAOyN,aAAaomD,QAAQxzC,MAE/BuzC,GAAcA,EAAsB,YACtC/4D,KAAKy4D,aAAeM,EAAsB,aAKhDP,EAAAt4D,UAAAgjB,gBAAA,WAAA,IAAA3X,EAAAvL,KAKMA,KAAKiyB,SAAStxB,OAAS,EACzBX,KAAKi5D,eAAej5D,KAAKiyB,UAEzBjyB,KAAK4W,aAAe5W,KAAKiyB,SAAS8E,QAAQtqB,UAAS,SAChDysD,GACC,OAAA3tD,EAAK0tD,eAAeC,MAKpBV,EAAAt4D,UAAA+4D,eAAR,SAAuBhnC,GAAvB,IAAA1mB,EAAAvL,KACEiyB,EAAS/lB,QAAO,SAACitD,GACXA,EAAKp8B,QAAUo8B,EAAKp8B,OAAOq8B,SAASC,eACtC9tD,EAAKmtD,eAAer2D,KAAK82D,EAAKp8B,OAAOq8B,SAASC,gBAE9C9tD,EAAKmtD,eAAer2D,KAAK,SAK/Bm2D,EAAAt4D,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,mCA3GvBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,6BACVC,SAAA,odACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCkQ,UAZP0O,EAAAA,kBAEAhpB,EAAAA,+CAqBCuyD,EAAAA,aAAYzyD,KAAA,CAAC21B,OAqGhBg8B,KCtIA,IAAAe,GAAA,WAOA,SAAAA,KAkB0C,2BAlBzCpxD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbo6C,yBAA0B,CACxBn6C,UAAWm5C,OAIjBh6B,GACA1G,GACAzoB,EAAAA,YAEFjH,aAAc,CAACowD,IACfl5C,gBAAiB,CAACk5C,IAClB3vD,QAAS,CAAC2vD,QAE8Be,EAzB1C,GCAAE,GAAA,WAyBE,SAAAA,EACUnY,EACEV,EACF8Y,GAFA15D,KAAAshD,mBAAAA,EACEthD,KAAA4gD,wBAAAA,EACF5gD,KAAA05D,qBAAAA,EAgCZ,OA7BED,EAAAv5D,UAAA2hD,aAAA,WACE,OAAO7hD,KAAKshD,mBAAmBO,gBAGjC4X,EAAAv5D,UAAAy5D,yBAAA,WACE,OAAO35D,KAAKshD,mBAAmB2P,uBAGjCwI,EAAAv5D,UAAA8hD,cAAA,WACEhiD,KAAKshD,mBAAmBU,iBAG1ByX,EAAAv5D,UAAA05D,eAAA,SAAexX,GACbpiD,KAAKshD,mBAAmBsY,eAAexX,IAGzCqX,EAAAv5D,UAAA25D,kBAAA,SAAkBC,EAAmB1X,GACnCpiD,KAAKshD,mBAAmBuY,kBAAkBC,EAAW1X,GAKnDpiD,KAAK05D,sBACL15D,KAAK05D,qBAAqBvuB,QAAQ,QAClCnrC,KAAK4gD,yBAEL5gD,KAAK4gD,wBAAwBmZ,oDAhDlCnzD,EAAAA,sDAJCq1B,EAAAA,0BAFAf,EAAAA,+BACAG,EAAAA,wBAwDFo+B,EA5DA,GCAA,IAAAO,GAAA,WAiBE,SAAAA,EAAmB1pD,GAAAtQ,KAAAsQ,QAAAA,EAHnBtQ,KAAAi6D,oBAAqB,EACrBj6D,KAAAk6D,qBAAsB,EAsCxB,OAlCEF,EAAA95D,UAAA4K,SAAA,WACE9K,KAAKm6D,WAAan6D,KAAKsQ,QAAQuxC,eAC/B7hD,KAAKo6D,uBAAyBp6D,KAAKsQ,QAAQqpD,2BAC3C35D,KAAKsQ,QAAQ0xC,iBAGfgY,EAAA95D,UAAAm6D,uBAAA,WACEr6D,KAAKk6D,qBAAsB,EAC3Bl6D,KAAKi6D,oBAAqB,GAG5BD,EAAA95D,UAAAo6D,wBAAA,SAAwBlY,GACtBpiD,KAAKi6D,oBAAqB,EAC1Bj6D,KAAKk6D,qBAAsB,EAC3Bl6D,KAAKu6D,eAAiBnY,GAGxB4X,EAAA95D,UAAAs6D,iBAAA,SAAiBpY,GACfpiD,KAAKi6D,oBAAqB,EAC1Bj6D,KAAKsQ,QAAQspD,eAAexX,IAG9B4X,EAAA95D,UAAAu6D,iBAAA,WACEz6D,KAAKi6D,oBAAqB,GAG5BD,EAAA95D,UAAAw6D,kBAAA,SAAkBtY,GAChBpiD,KAAKk6D,qBAAsB,EAC3Bl6D,KAAKsQ,QAAQupD,kBAAkB75D,KAAKu6D,eAAmB,GAAGnY,IAG5D4X,EAAA95D,UAAAy6D,kBAAA,WACE36D,KAAKk6D,qBAAsB,uBA9C9BtyD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,szEAJO2xD,MAkDTO,EArDA,GCAA,IAAAY,GAAA,WAkCE,SAAAA,EACUtZ,EACEV,EACF8Y,GAFA15D,KAAAshD,mBAAAA,EACEthD,KAAA4gD,wBAAAA,EACF5gD,KAAA05D,qBAAAA,EAnBA15D,KAAA66D,UAAY,IAAI1sD,EAAAA,aA6D5B,OAvCEysD,EAAA16D,UAAA46D,kBAAA,WACE96D,KAAK66D,UAAU/rD,QAGjB8rD,EAAA16D,UAAA2O,WAAA,WACE7O,KAAKyO,UAAW,GAGlBmsD,EAAA16D,UAAA0O,YAAA,WACE5O,KAAKyO,UAAW,GAGlBmsD,EAAA16D,UAAA66D,oBAAA,SAAoBjB,GAClB95D,KAAKshD,mBAAmByZ,oBAAoBjB,GAK1C95D,KAAK05D,sBACL15D,KAAK05D,qBAAqBvuB,QAAQ,QAClCnrC,KAAK4gD,yBAEL5gD,KAAK4gD,wBAAwBmZ,gCAIjCa,EAAA16D,UAAA86D,cAAA,SAAclB,GACZ95D,KAAKshD,mBAAmB2Z,kBAAkBnB,GAKxC95D,KAAK05D,sBACL15D,KAAK05D,qBAAqBvuB,QAAQ,QAClCnrC,KAAK4gD,yBAEL5gD,KAAK4gD,wBAAwBmZ,oDApElCnyD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,6pEALAm0B,EAAAA,0BAFAf,EAAAA,+BACAG,EAAAA,yDAYCrzB,EAAAA,yBAEAmH,EAAAA,UA6DHyrD,EA/EA,GCAA,IAAAM,GAAA,WAgBA,SAAAA,KA4BgC,2BA5B/B/yD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb+7C,4BAA6B,CAC3B97C,UAAW26C,GACXvxD,UAAW,CACT,CACEC,QAAS+wD,GACT33C,SAAU23C,GACV13C,KAAM,CAACka,EAAAA,sBAGX3R,OAAQ,CAACksC,EAAAA,eAIfpnD,EACAshD,GACA5zC,GACAzN,EAAAA,YAEFjH,aAAc,CAAC4xD,GAAsBY,IACrC/xD,QAAS,CAACmxD,GAAsBY,IAChCnyD,UAAW,CAACwzB,EAAAA,mBAAoBw9B,IAChCn6C,gBAAiB,CAAC06C,QAEYkB,EA5ChC,GCAAE,GAAA,WAgCE,SAAAA,EACYnxD,EACF8iC,EACAlB,EACA7uB,EACAoI,EACAi2C,GALEr7D,KAAAiK,aAAAA,EACFjK,KAAA+sC,YAAAA,EACA/sC,KAAA6rC,YAAAA,EACA7rC,KAAAgd,qBAAAA,EACAhd,KAAAolB,eAAAA,EACAplB,KAAAq7D,mBAAAA,EAZVr7D,KAAAsK,UAAYC,EAEJvK,KAAA4W,aAAe,IAAIxM,EAAAA,aAuE7B,OA1DEgxD,EAAAl7D,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKs7D,WAAat7D,KAAK6rC,YAAYG,eACnChsC,KAAK+sC,YAAYwuB,8BACjBv7D,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YACFyuB,6BACA/uD,UAAS,SAAC6qC,GAAW,OAAA/rC,EAAKgsC,UAAUD,MAGzCt3C,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YACF0uB,2BACAhvD,UAAS,SAAC3J,GAAS,OAAAyI,EAAKksC,QAAQ30C,MAErC9C,KAAK2rD,WAAa3rD,KAAK+sC,YAAY2uB,8BAGrCN,EAAAl7D,UAAAq3C,UAAA,SAAUD,GAAV,IAAA/rC,EAAAvL,KACMs3C,IACFt3C,KAAK4zC,eACL5zC,KAAKq7D,mBACFjP,UAAU,0CACV1gD,KAAK2gB,EAAAA,SACL5f,UAAS,SAACw+C,GACT1/C,EAAKyR,qBAAqBxR,IACxBy/C,EACA/tC,EAAAA,kBAAkBylB,yBAGxB3iC,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,WAItC6uB,EAAAl7D,UAAAu3C,QAAA,SAAQ30C,GAAR,IAAAyI,EAAAvL,KACM8C,IACF9C,KAAK4zC,eACL5zC,KAAKq7D,mBACFjP,UAAU,qCACV1gD,KAAK2gB,EAAAA,SACL5f,UAAS,SAACw+C,GACT1/C,EAAKyR,qBAAqBxR,IAAIy/C,EAAM/tC,EAAAA,kBAAkBuwB,oBAK9D2tB,EAAAl7D,UAAA0zC,aAAA,SAAajqC,GACX3J,KAAKiK,aAAaP,mBAAmBC,IAGvCyxD,EAAAl7D,UAAAy7D,aAAA,WACE37D,KAAK+sC,YAAYzvB,UAGnB89C,EAAAl7D,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,mCA5EvBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,yvCACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlClI,SANP+yB,EAAAA,mBALAhB,EAAAA,mBACAzd,EAAAA,4BAEA4I,EAAAA,sBACAiH,EAAAA,sBAwFFguC,EAnGA,GCAA,IAAAQ,GAAA,WAYE,SAAAA,EAAoB3xD,GAAAjK,KAAAiK,aAAAA,EAOtB,OALE2xD,EAAA17D,UAAA00C,UAAA,WACE50C,KAAKyJ,MAAQzJ,KAAKiK,aAAab,KAAKgyD,GAA4B,CAC9DvtD,UAAU,IACTmnC,uCAZNptC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,6dACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlClI,KAgBT2yD,EAnBA,GCAA,IAAAC,GAAA,WAeA,SAAAA,KAqBiC,2BArBhC1zD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAC,EAAAA,UACAnG,EAAAA,WACAnH,EACA4U,GACAvU,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbw8C,sBAAuB,CACrBv8C,UAAWu8C,GACXtxC,OAAQ,CAACksC,EAAAA,gBAKjBpuD,aAAc,CAACwzD,GAAuBR,IACtCvyD,QAAS,CAAC+yD,GAAuBR,IACjC97C,gBAAiB,CAACs8C,GAAuBR,QAEVS,EApCjC,GCAAC,GAAA,WAWE,SAAAA,EACUprB,EACA3D,EACA3nB,GAFAplB,KAAA0wC,GAAAA,EACA1wC,KAAA+sC,YAAAA,EACA/sC,KAAAolB,eAAAA,EAJVplB,KAAA+7D,UAAW,EAyBb,OAlBED,EAAA57D,UAAA4K,SAAA,WACE9K,KAAKsjB,KAAOtjB,KAAK0wC,GAAGI,MAAM,CACxBkrB,UAAW,CACT,GACA,CAACjrB,EAAAA,WAAWC,SAAUntB,GAAqBI,oBAKjD63C,EAAA57D,UAAA+7D,2BAAA,WACEj8D,KAAK+7D,UAAW,EAEZ/7D,KAAKsjB,KAAKI,UAGd1jB,KAAK+sC,YAAYkvB,2BAA2Bj8D,KAAKsjB,KAAKnhB,MAAM65D,WAC5Dh8D,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,gCA7BrC3kC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,+3CALOspC,EAAAA,mBACgBpV,EAAAA,mBAAhB7V,EAAAA,kBAiCT21C,EAnCA,GCAA,IAAAI,GAAA,WAaA,SAAAA,KAoBmC,2BApBlC/zD,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACAnF,EAAAA,aACAC,EAAAA,UACAjN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb08C,wBAAyB,CACvBz8C,UAAWy8C,GACXxxC,OAAQ,CAAC6xC,EAAAA,kBAIf9sD,EAAAA,YAEFjH,aAAc,CAAC0zD,IACfjzD,QAAS,CAACizD,IACVx8C,gBAAiB,CAACw8C,QAEeI,EAjCnC,GCAAE,GAAA,WAOA,SAAAA,IAWwBp8D,KAAAq8D,OAAS,MACjC,2BAZCz0D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,ozBACAmJ,gBAAiBC,EAAAA,wBAAwBC,8CAGxCnJ,EAAAA,uBACAA,EAAAA,yBACAA,EAAAA,4BACAA,EAAAA,sBAEAC,EAAAA,YAAWpB,KAAA,CAAC,YACfu1D,EAnBA,GCAA,IAAAE,GAAA,WAMA,SAAAA,KAKsC,2BALrCn0D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAciN,EAAAA,aAAcC,EAAAA,UAAWnG,EAAAA,YACjDjH,aAAc,CAACg0D,IACfvzD,QAAS,CAACuzD,QAE0BE,EAXtC,OCCEC,OAAA,EACAC,OAAA,GCOF,SAASC,GAAiBh5C,OACpBi5C,EAAI,EAGR,OAFAl9D,OAAOqvB,KAAKpL,EAAQthB,OAAO+J,QAAO,SAAC4N,GAAO,OAAC4iD,GAAKj5C,EAAQthB,MAAM2X,KAEvD4iD,EAAI,EAAI,KAAO,CAAE1rB,UAAU,iDAGpC,IAAA2rB,GAAA,WAKE,SAAAA,EAAsBr2C,GAAAtmB,KAAAsmB,oBAAAA,EAsGxB,OA5FEq2C,EAAAz8D,UAAA08D,kBAAA,WAAA,IAAArxD,EAAAvL,KACE,OAAOA,KAAK68D,UAAUnxD,KACpB6S,EAAAA,UAAS,SAAC+E,GACR,OAAO/X,EAAK+uC,aAAa5uC,KACvBgE,EAAAA,IAAG,SAACiZ,GACF,OAAAA,EAAQrK,OAAM,SAACkK,GAAS,OAAAjd,EAAKuxD,eAAex5C,EAAMkF,GAAOrmB,MAAQ,WAY3Ew6D,EAAAz8D,UAAA68D,SAAA,WACE,OAAO/8D,KAAKsmB,oBAAoBL,mBAMlC02C,EAAAz8D,UAAA28D,QAAA,WAAA,IAAAtxD,EAAAvL,KACE,OAAOA,KAAK+8D,WAAWrxD,KACrBG,EAAAA,IAAG,SAAC0b,GACGhc,EAAK+X,MAAQ/X,EAAK+X,KAAKlG,IAAI,aAAajb,QAAUolB,EAAMtU,MAC3D1H,EAAKyxD,UAAUz1C,KAGnB7X,EAAAA,IAAG,WAAO,OAAAnE,EAAK+X,SAIXq5C,EAAAz8D,UAAA88D,UAAR,SAAkBz1C,GAAlB,IAAAhc,EAAAvL,KACEA,KAAKsjB,KAAO,IAAI25C,EAAAA,UAAU,IAC1Bj9D,KAAKsjB,KAAK45C,WAAW,YAAa,IAAI7mD,EAAAA,YAAYkR,EAAMtU,WAElDkqD,EAAa,IAAIF,EAAAA,UAAU,GAAI,CAAEG,WAAY,CAACX,MACpDz8D,KAAKsjB,KAAK45C,WAAW,UAAWC,IAE/B51C,EAAMoB,SAAW,IAAIzc,QAAO,SAACsc,OACtB1O,EAAM0O,EAAMI,YAAYkiB,WAC9BqyB,EAAWD,WACTpjD,EACA,IAAIzD,EAAAA,YAAY,EAAG,CACjB+mD,WAAY,CACVrsB,EAAAA,WAAWp6B,IAAI,GACfo6B,EAAAA,WAAWz5B,IAAI/L,EAAK8xD,oBAAoB70C,WAOxCm0C,EAAAz8D,UAAA48D,eAAV,SAAyBx5C,EAAiBkF,GACxC,OAAoBlF,EAAKlG,IAAI,WAAWA,IAAIoL,EAAMI,YAAYkiB,aAOhE6xB,EAAAz8D,UAAAo9D,gBAAA,SAAgB90C,OACR+0C,EAAkBv9D,KAAK88D,eAAe98D,KAAKsjB,KAAMkF,GAAOrmB,MACxDq7D,EAAeh+D,OAAOa,OAAO,GAAImoB,EAAMi1C,WAY7C,OAXAD,EAAar7D,MACX+N,KAAKwtD,MAAMl1C,EAAMi1C,UAAUt7D,MAAQo7D,EAAkB,KAAO,IAE9DC,EAAa5hB,eAAiB+hB,EAAAA,eAC5BH,EAAar7D,MAEb,KACAy7D,EAAAA,kBAAkBJ,EAAaz0B,YAAa,UAC5Cy0B,EAAaz0B,aAGRy0B,GAGTb,EAAAz8D,UAAAm9D,oBAAA,SAAoB70C,GAClB,OACGxoB,KAAK69D,iBACFr1C,EAAMs1C,oBACNt1C,EAAMu1C,qBAAuBv1C,EAAM6qB,UAI3CspB,EAAAz8D,UAAA29D,eAAA,WACE,OAAO79D,KAAKg+D,YAAcC,GAAe1B,4BAzG5C31D,EAAAA,sDAVQse,MAqHTy3C,EA3GA,GChBA,IAAAuB,GAAA,WAiBE,SAAAA,EAAsBC,GAAAn+D,KAAAm+D,kBAAAA,EAJbn+D,KAAAo+D,gBAAiB,EAE1Bp+D,KAAAq+D,MAA+Br+D,KAAKm+D,kBAAkBtB,UAyBxD,OArBEqB,EAAAh+D,UAAAo+D,WAAA,SAAWh7C,EAAiBkF,GAC1B,OAAoBlF,EAAKlG,IAAI,WAAWA,IAAIoL,EAAMI,YAAYkiB,aAGhEozB,EAAAh+D,UAAAq+D,OAAA,SAAOj7C,GAAP,IAAA/X,EAAAvL,KACEA,KAAK2oB,QAAQzc,QAAO,SAACsc,GACnB,OAAAjd,EAAK+yD,WAAWh7C,EAAMkF,GAAOiqB,SAASlnC,EAAK8xD,oBAAoB70C,OAInE01C,EAAAh+D,UAAAs+D,aAAA,SAAah2C,GACX,OAAOxoB,KAAKm+D,kBAAkBb,gBAAgB90C,IAGhD01C,EAAAh+D,UAAAm9D,oBAAA,SAAoB70C,GAClB,OAAOxoB,KAAKm+D,kBAAkBd,oBAAoB70C,IAGpD01C,EAAAh+D,UAAA29D,eAAA,WACE,OAAO79D,KAAKm+D,kBAAkBN,sCAhCjCj2D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,8xKACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCwrD,uCAQN30D,EAAAA,8BACAA,EAAAA,SA2BHk2D,EAxCA,GCAA,IAAAO,GAAA,WAOA,SAAAA,KAaoC,2BAbnCt2D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACArL,EAAAA,WACAgG,EACAmF,EACA0O,EAAAA,sBAEF9gB,aAAc,CAAC81D,IACfr1D,QAAS,CAACq1D,IACV5+C,gBAAiB,CAAC4+C,QAEgBO,EApBpC,GCAAC,GAAA,WAuBE,SAAAA,EAAsBP,GAAtB,IAAA5yD,EAAAvL,KAAsBA,KAAAm+D,kBAAAA,EARtBn+D,KAAAq+D,MAAQr+D,KAAKm+D,kBACVtB,UACAnxD,KAAKG,EAAAA,IAAG,SAACyX,GAAQ,OAAC/X,EAAKma,UAAYpC,EAAKnhB,MAAMujB,aAEjD1lB,KAAAq6C,SAEIr6C,KAAKm+D,kBAAkBvB,oBAQ7B,OAJE8B,EAAAx+D,UAAAy+D,OAAA,SAAOr7C,GACLA,EAAKtM,UACLhX,KAAKm+D,kBAAkBS,4BApB1Bh3D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,+BACVC,SAAA,gmBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCwrD,MAwBT+B,EA7BA,sBCqBE,SAAAG,EACYv4C,EACAnB,EACAgV,EACAnd,GAJZ,IAAAzR,EAME43B,EAAAviC,KAAAZ,KAAMsmB,IAAoBtmB,YALhBuL,EAAA+a,oBAAAA,EACA/a,EAAA4Z,iBAAAA,EACA5Z,EAAA4uB,QAAAA,EACA5uB,EAAAyR,qBAAAA,EANZzR,EAAAyyD,UAAYC,GAAe1B,gBADiBxzD,EAAAA,EAAAA,GAc5C81D,EAAA3+D,UAAAo6C,WAAA,WACE,OAAOt6C,KAAK+8D,WAAWrxD,KACrB4S,EAAAA,OAAM,SAACiJ,GAAS,OAAA5c,QAAQ4c,KACxB7X,EAAAA,IAAG,SAAC6X,GACF,OAAAA,EAAMoB,QAAQrK,OAAM,SAClBkK,GAAS,OAAuB,IAAvBA,EAAMI,aAAsBJ,EAAMs1C,oBAAsB,QAMzEe,EAAA3+D,UAAA0+D,KAAA,WAAA,IAAArzD,EAAAvL,KACQ0lB,EAAY1lB,KAAKsjB,KAAKnhB,MAAMujB,UAC5BiD,EAAU3oB,KAAKsjB,KAAKnhB,MAAMwmB,QAC1Bm2C,EAA4Ct/D,OAAOqvB,KAAKlG,GAC3DrK,OAAM,SAACsK,GAAe,OAAQD,EAAQC,GAAe,IACrDlZ,IAAG,SACFkZ,GACE,MAAA,CACEF,iBAAkB3R,OAAO6R,GACzByqB,SAAkB1qB,EAAQC,MAIlC5oB,KAAKsjB,KAAKo0B,QAEV13C,KAAKmlB,iBAAiB45C,YAAYr5C,EAAW,CAC3Cs5C,+BAAgCF,IAGlC9+D,KAAKmlB,iBACF85C,wBACAvzD,KAAK2gB,EAAAA,MAAM1hB,UACX8B,UAAS,WAAO,OAAAlB,EAAK2zD,UAAUx5C,MAG5Bm5C,EAAA3+D,UAAAg/D,UAAR,SAAkBx5C,GAChB1lB,KAAKmlB,iBAAiBg6C,+BACtBn/D,KAAKgd,qBAAqBxR,IACxB,CACEsO,IAAK,mDACL2L,OAAQ,CAAEC,UAASA,IAErBxI,EAAAA,kBAAkBylB,uBAEpB3iC,KAAKm6B,QAAQmS,GAAG,CACdC,QAAS,gCA/Dd3lC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLoe,UAJPgB,EAAAA,wBADAC,EAAAA,sBAHA5I,EAAAA,+OAe4Co/C,IClB9C,IAAAyC,GAAA,WAWE,SAAAA,EACYjlC,EACAgkC,GADAn+D,KAAAm6B,QAAAA,EACAn6B,KAAAm+D,kBAAAA,SAGZiB,EAAAl/D,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACE,OAAOA,KAAKm+D,kBAAkBtB,UAAUnxD,KACtCgE,EAAAA,IAAG,SAAC4T,GACF,QAAKA,EAAK2zB,QAIR1rC,EAAK4uB,QAAQmS,GAAG,CAAEC,QAAS,YACpB,2BAjBhB3lC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLqf,EAAAA,sBAGA04C,0JALT,GCAA,IAAAQ,GAqBc,CACJ9yB,QAAS,2BATnB+yB,GAAA,WAAA,SAAAA,KAmC4C,2BAnC3Cn3D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIo+C,MAKR3kD,EAAAA,oBACAnS,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbs/C,iCAAkC,CAChCr/C,UAAWq/C,GACXp0C,OAAQ,CAACksC,EAAAA,UAAW4I,IACpB32D,UAAW,CACT,CACEC,QAASi0D,GACTh0D,YAAak2D,SAMvBJ,GACAnC,IAEFl0D,aAAc,CAACs2D,IACf71D,QAAS,CAAC61D,IACVp/C,gBAAiB,CAACo/C,QAEwBY,EAnC5C,GCbAE,GAAA,WAoBE,SAAAA,EAAsBrB,GAAtB,IAAA5yD,EAAAvL,KAAsBA,KAAAm+D,kBAAAA,EANtBn+D,KAAAq+D,MAAQr+D,KAAKm+D,kBACVtB,UACAnxD,KAAKG,EAAAA,IAAG,SAACyX,GAAQ,OAAC/X,EAAKma,UAAYpC,EAAKnhB,MAAMujB,aAEjD1lB,KAAAq6C,SAAqCr6C,KAAKm+D,kBAAkB7jB,aAG9D,2BAfC1yC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,4jBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCwrD,MAiBT6C,EArBA,GCAA,IAAAC,GAqBc,CACJlzB,QAAS,eATnBmzB,GAAA,WAAA,SAAAA,KAkCgC,2BAlC/Bv3D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIw+C,MAKRl3D,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbogD,qBAAsB,CACpBngD,UAAWmgD,GACXl1C,OAAQ,CAACksC,EAAAA,WACT/tD,UAAW,CACT,CACEC,QAASi0D,GACTh0D,YAAak2D,SAMvBJ,GACAnC,IAEFl0D,aAAc,CAACo3D,IACf32D,QAAS,CAAC22D,IACVlgD,gBAAiB,CAACkgD,QAEYE,EAlChC,GCbAC,GAAA,WAIA,SAAAA,KAGsC,2BAHrCx3D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACq3D,GAAmBJ,QAEOK,EAPtC,kBCqBE,SAAAC,EACYt5C,EACAu5C,EACA1lC,EACAnd,GAJZ,IAAAzR,EAME43B,EAAAviC,KAAAZ,KAAMsmB,IAAoBtmB,YALhBuL,EAAA+a,oBAAAA,EACA/a,EAAAs0D,qBAAAA,EACAt0D,EAAA4uB,QAAAA,EACA5uB,EAAAyR,qBAAAA,EANZzR,EAAAyyD,UAAYC,GAAezB,gBADWzzD,EAAAA,EAAAA,GAYtC62D,EAAA1/D,UAAAo6C,WAAA,WACE,OAAOt6C,KAAK+8D,WAAWrxD,KACrB4S,EAAAA,OAAM,SAACiJ,GAAS,QAAEA,EAAMoB,UACxBjZ,EAAAA,IAAG,SAAC6X,GACF,OAAAA,EAAMoB,QAAQrK,OAAM,SAClBkK,GAAS,OAAuB,IAAvBA,EAAMI,aAAsBJ,EAAMu1C,mBAAqB,QAMxE6B,EAAA1/D,UAAA0+D,KAAA,WAAA,IAAArzD,EAAAvL,KACQ0lB,EAAY1lB,KAAKsjB,KAAKnhB,MAAMujB,UAC5BiD,EAAU3oB,KAAKsjB,KAAKnhB,MAAMwmB,QAC1Bm2C,EAA4Ct/D,OAAOqvB,KAAKlG,GAC3DrK,OAAM,SAACsK,GAAe,OAAQD,EAAQC,GAAe,IACrDlZ,IAAG,SACFkZ,GACE,MAAA,CACEF,iBAAkB3R,OAAO6R,GACzByqB,SAAkB1qB,EAAQC,MAIlC5oB,KAAKsjB,KAAKo0B,QAEV13C,KAAK6/D,qBAAqBC,yBAAyB,CACjDp6C,UAASA,EACTq6C,yBAA0BjB,IAG5B9+D,KAAK6/D,qBACFG,0BACAt0D,KAAK2gB,EAAAA,MAAM1hB,UACX8B,UAAS,WAAO,OAAAlB,EAAK2zD,eAGlBU,EAAA1/D,UAAAg/D,UAAR,WAAA,IAAA3zD,EAAAvL,KACEA,KAAK6/D,qBACFI,wBACAv0D,KAAK2gB,EAAAA,MAAK,SAACzpB,GAAK,QAAEA,KAClB6J,UAAS,SAACyzD,OACHC,EAAMD,EAAcC,IAC1B50D,EAAKyR,qBAAqBxR,IACxB,CACEsO,IAAK,mDACL2L,OAAQ,CAAE06C,IAAGA,IAEfjjD,EAAAA,kBAAkBylB,uBAEpBp3B,EAAK4uB,QAAQmS,GAAG,CACdC,QAAS,uBACT9mB,OAAQ,CAAE06C,IAAGA,4BAnEtBv5D,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLoe,UALPk7C,EAAAA,iCACAj6C,EAAAA,sBAJA5I,EAAAA,wPAesCo/C,IClBxC,IAAA0D,GAAA,WAWE,SAAAA,EACYlmC,EACAgkC,GADAn+D,KAAAm6B,QAAAA,EACAn6B,KAAAm+D,kBAAAA,SAGZkC,EAAAngE,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACE,OAAOA,KAAKm+D,kBAAkBtB,UAAUnxD,KACtCgE,EAAAA,IAAG,SAAC4T,GACF,QAAKA,EAAK2zB,QAIR1rC,EAAK4uB,QAAQmS,GAAG,CAAEC,QAAS,YACpB,2BAjBhB3lC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLqf,EAAAA,sBAGAy5C,0JALT,GCAA,IAAAU,GAAA,WAuBE,SAAAA,EAAsBnC,GAAtB,IAAA5yD,EAAAvL,KAAsBA,KAAAm+D,kBAAAA,EARtBn+D,KAAAq+D,MAAQr+D,KAAKm+D,kBACVtB,UACAnxD,KAAKG,EAAAA,IAAG,SAACyX,GAAQ,OAAC/X,EAAKma,UAAYpC,EAAKnhB,MAAMujB,aAEjD1lB,KAAAq6C,SAEIr6C,KAAKm+D,kBAAkBvB,oBAQ7B,OAJE0D,EAAApgE,UAAAy+D,OAAA,SAAOr7C,GACLA,EAAKtM,UACLhX,KAAKm+D,kBAAkBS,4BApB1Bh3D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,+BACVC,SAAA,gmBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCwrD,MAwBT2D,EA7BA,GCAA,IAAAC,GA2Bc,CACJh0B,QAAS,2BATnBi0B,GAAA,WAAA,SAAAA,KAoC4C,2BApC3Cr4D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIs/C,MAKRh4D,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbkhD,iCAAkC,CAChCjhD,UAAWihD,GACXh2C,OAAQ,CAACksC,EAAAA,UAAW6J,IACpB53D,UAAW,CACT,CACEC,QAASi0D,GACTh0D,YAAai3D,SAMvBnB,GACApvD,EAAAA,WACAqL,EAAAA,oBACA4hD,IAEFl0D,aAAc,CAACk4D,IACfz3D,QAAS,CAACy3D,IACVhhD,gBAAiB,CAACghD,QAEwBE,EApC5C,GCnBAC,GAAA,WAoBE,SAAAA,EAAsBtC,GAAtB,IAAA5yD,EAAAvL,KAAsBA,KAAAm+D,kBAAAA,EANtBn+D,KAAAq+D,MAAQr+D,KAAKm+D,kBACVtB,UACAnxD,KAAKG,EAAAA,IAAG,SAACyX,GAAQ,OAAC/X,EAAKma,UAAYpC,EAAKnhB,MAAMujB,aAEjD1lB,KAAAq6C,SAAqCr6C,KAAKm+D,kBAAkB7jB,aAG9D,2BAfC1yC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,4jBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCwrD,MAiBT8D,EArBA,GCAA,IAAAC,GAoBc,CACJn0B,QAAS,eATnBo0B,GAAA,WAAA,SAAAA,KAkCgC,2BAlC/Bx4D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIy/C,MAKRn4D,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbqhD,qBAAsB,CACpBphD,UAAWohD,GACXn2C,OAAQ,CAACksC,EAAAA,WACT/tD,UAAW,CACT,CACEC,QAASi0D,GACTh0D,YAAai3D,SAMvBnB,GACAnC,IAEFl0D,aAAc,CAACq4D,IACf53D,QAAS,CAAC43D,IACVnhD,gBAAiB,CAACmhD,QAEYE,EAlChC,GCZAC,GAAA,WAIA,SAAAA,KAGgC,2BAH/Bz4D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACs4D,GAAmBH,QAECI,EAPhC,GCAAC,GAAA,WAYE,SAAAA,EAAoBv6C,GAAAtmB,KAAAsmB,oBAAAA,EAOtB,OAHEu6C,EAAA3gE,UAAA4K,SAAA,WACE9K,KAAK8gE,OAAS9gE,KAAKsmB,oBAAoBL,uCAV1Cre,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,4BACVC,SAAA,29BAJOod,MAcT27C,EAnBA,GCAA,IAAaE,GAAkB,CAAC,qBAAsB,mBACzCC,GAAkB,CAAC,2BCkC9B,SAAAC,EACU36C,EACE8sB,GADFpzC,KAAAsmB,oBAAAA,EACEtmB,KAAAozC,iBAAAA,EAGZpzC,KAAAymB,kBAAuCC,EAAAA,kBAAkBK,MACzD/mB,KAAA8gE,OAA4B9gE,KAAKsmB,oBAAoBL,kBAuDvD,OAjDEg7C,EAAA/gE,UAAA4K,SAAA,WACE9K,KAAK2zC,iBAAmB3zC,KAAKozC,iBAAiB5sB,mBAC5CxmB,KAAKymB,mBAEPzmB,KAAKkhE,QAAUlhE,KAAKmhE,eAActgE,MAAnBb,KAAI+C,EAAmBg+D,GAAoBC,KAC1DhhE,KAAKohE,WAAaphE,KAAKqhE,eAAeN,IACtC/gE,KAAKshE,QAAUthE,KAAKqhE,eAAeL,KAG7BC,EAAA/gE,UAAAmhE,eAAR,SACEE,GAEA,OAAOvhE,KAAK8gE,OAAOp1D,KACjBgE,EAAAA,IAAG,SAAC6X,GACF,GAAI5c,QAAQ4c,EAAMi6C,cAChB,OAAOj6C,EAAMi6C,aAAaljD,OAAM,SAACmjD,GAC/B,OAAAF,EAAkB57D,SAAS87D,EAAYC,cAOzCT,EAAA/gE,UAAAihE,eAAR,eACE,IAAAI,EAAA,GAAAI,EAAA,EAAAA,EAAAjhE,UAAAC,OAAAghE,IAAAJ,EAAAI,GAAAjhE,UAAAihE,GAEA,OAAO3hE,KAAK8gE,OAAOp1D,KACjBgE,EAAAA,IAAG,SAAC6X,GACF,GAAI5c,QAAQ4c,EAAMi6C,cAChB,OAAOj6C,EAAMi6C,aAAaljD,OAAM,SAC9BmjD,GAAe,OAACF,EAAkB57D,SAAS87D,EAAYC,cAWjET,EAAA/gE,UAAA0hE,uBAAA,SAAuBH,OACfI,EAAyB,GAK/B,OAJAJ,EAAY94C,QAAQzc,QAAO,SAACipB,GAC1B0sC,EAASx/D,KAAK8yB,EAAQ+jB,cAGjB2oB,uBA7EVj6D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,61FAROod,UADAkB,MAsFT66C,uBC9EE,SAAAa,EACUx7C,EACAsG,GADA5sB,KAAAsmB,oBAAAA,EACAtmB,KAAA4sB,YAAAA,EA8EZ,OAzEEk1C,EAAA5hE,UAAA4K,SAAA,WACE9K,KAAK8gE,OAAS9gE,KAAKsmB,oBAAoBL,mBAGzC67C,EAAA5hE,UAAA6qD,sBAAA,SAAsB3I,GACpB,OAAO32C,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,wBAC1B1gD,KACDgE,EAAAA,IAAG,SAAE5D,GACH,MAAO,CACLw4B,MAFC3hC,EAAAmJ,EAAA,GAAC,GAGFk/C,SAAa5I,EAAQwG,UAAS,IAAIxG,EAAQyG,SAC1CoC,KAAM,CACJ7I,EAAQ0G,MACR1G,EAAQ2G,MACL3G,EAAQ4G,KAAI,KAAK5G,EAAQ6E,QAAQ7lC,QAAO,KAAKghC,EAAQ6G,WACxD7G,EAAQ8I,YAOlB4W,EAAA5hE,UAAA6hE,6BAAA,SAA6B1a,GAC3B,OAAO57C,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,wBAC1B1gD,KACDgE,EAAAA,IAAG,SAAE5D,GACH,MAAO,CACLw4B,MAFC3hC,EAAAmJ,EAAA,GAAC,GAGFk/C,SAAa3D,EAAeuB,UAAS,IAAIvB,EAAewB,SACxDoC,KAAM,CACJ5D,EAAeyB,MACfzB,EAAe0B,MACZ1B,EAAe2B,KAAI,KAAK3B,EAAeJ,QAAQ7lC,QAAO,KAAKimC,EAAe4B,WAC7E5B,EAAe6D,YAOzB4W,EAAA5hE,UAAA8hE,sBAAA,SAAsB3Z,GACpB,OAAO58C,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,uBAC3BpsD,KAAK4sB,YAAYw/B,UAAU,sBAAuB,CAChDzB,MAAOtC,EAAQI,YACf4B,KAAMhC,EAAQK,eAEfh9C,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmjD,EAAAljD,EAAA,GAAWsgD,EAAAtgD,EAAA,GACf,MAAO,CACLu4B,MAAO2qB,EACPjE,SAAU3C,EAAQC,kBAClB2C,KAAM,CAAC5C,EAAQG,SAASn4B,KAAMg4B,EAAQE,WAAY8D,QAM1DyV,EAAA5hE,UAAA+hE,6BAAA,SAA6BC,GAC3B,OAAOz2D,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,qCAC1B1gD,KACDgE,EAAAA,IAAG,SAAE5D,GACH,MAAO,CACLw4B,MAFC3hC,EAAAmJ,EAAA,GAAC,GAGFk/C,SAAUkX,EAAS7xC,KACnB46B,KAAM,CAACiX,EAASj6C,sCAhFzBrgB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,4BACVC,SAAA,4iCALOod,UAJPkI,EAAAA,sBA4FF00C,KClGA,IAAAK,GAAA,WAWE,SAAAA,EAAsB77C,GAAAtmB,KAAAsmB,oBAAAA,EAOxB,OAHE67C,EAAAjiE,UAAA4K,SAAA,WACE9K,KAAK8gE,OAAS9gE,KAAKsmB,oBAAoBL,uCAV1Cre,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0BACVC,SAAA,+SAJOod,MAcTi9C,EAlBA,GCAA,IAAAC,GAAA,WAcE,SAAAA,EACS74D,EACC4b,GADDnlB,KAAAuJ,YAAAA,EACCvJ,KAAAmlB,iBAAAA,EAMZ,OAHEi9C,EAAAliE,UAAAkN,YAAA,WACEpN,KAAKmlB,iBAAiBk9C,gDAfzBz6D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,szIANOw6D,EAAAA,sBACqBp8C,EAAAA,oBAoB9Bk8C,EAtBA,GCAA,IAAAG,GAAA,WAiCE,SAAAA,EACUp9C,EACAlb,GADAjK,KAAAmlB,iBAAAA,EACAnlB,KAAAiK,aAAAA,EAjBVjK,KAAAuhE,kBAA8B,CAC5B,UACA,aACA,qBACA,oBACA,cAuCJ,OAxBEgB,EAAAriE,UAAA4K,SAAA,WACE9K,KAAKwiE,qBAAuBxiE,KAAKmlB,iBAAiBs9C,0BAGpDF,EAAAriE,UAAAwiE,mBAAA,SAAmBjB,OAKb3sB,EAJJ90C,KAAKmlB,iBAAiBw9C,wBACpB3iE,KAAK0lB,UACL+7C,EAAYxuD,MAGdjT,KAAK+0C,SAAW/0C,KAAKiK,aAAab,KAAKg5D,GAAyB,CAC9Dv0D,UAAU,EACVC,KAAM,QAGRgnC,EAAgB90C,KAAK+0C,SAASC,mBAChB4tB,UAAY5iE,KAAKwiE,qBAC/B1tB,EAAc+tB,SAAWpB,EAAYqB,WACrChuB,EAAciuB,gBAAkBtB,EAAYxuD,MAG9CsvD,EAAAriE,UAAAkN,YAAA,WACEpN,KAAKmlB,iBAAiBk9C,gDA/CzBz6D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0BACVC,SAAA,4ZAXAoe,EAAAA,wBAKAjd,0CAkBCjB,EAAAA,yBAEAA,EAAAA,SAiCHu6D,EA9DA,GCAA,IAAAS,GAAA,WAYE,SAAAA,EAAsB18C,GAAAtmB,KAAAsmB,oBAAAA,EAEtBtmB,KAAA8gE,OAA4B9gE,KAAKsmB,oBAAoBL,kBACvD,2BARCre,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,2BACVC,SAAA,glCAJOod,MAUT89C,EAfA,GCAA,IAAAC,GAAA,WAQA,SAAAA,IAOEjjE,KAAAymB,kBAAuCC,EAAAA,kBAAkBK,MAU3D,OAREk8C,EAAA/iE,UAAA0hE,uBAAA,SAAuBH,OACfI,EAAyB,GAK/B,OAJAJ,EAAY94C,QAAQzc,QAAO,SAACipB,GAC1B0sC,EAASx/D,KAAK8yB,EAAQ+jB,cAGjB2oB,uBAfVj6D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,6BACVC,SAAA,o5BAGCE,EAAAA,qBACAA,EAAAA,SAWHi7D,EAzBA,OC4BMC,GAAmB,CACvBF,GACAnC,GACAI,GACAkB,GACAL,GACAM,GACAG,GACAU,OAiBY,CAAEpxC,UAAW,QAAS0a,QAAS,cAAc42B,GAM7C,CAAE52B,QAAS,gBApBzB62B,GAAA,WAAA,SAAAA,KAoDiC,2BApDhCj7D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPyxC,GACA1qC,EACA9G,EAAAA,aACA+G,EAAAA,WACA6Z,EAAAA,qBACAmsB,GACA7/B,EAAAA,UACAD,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIoiD,IAEN,CACEhyC,KAAM,KACNxF,YAAa,CAAC2qC,EAAAA,UAAWpkC,IACzB/S,UAAW2Q,GACX/O,KAAIkiD,MAGR56D,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbkkD,oCAAqC,CACnCjkD,UAAW2jD,IAEbO,qCAAsC,CACpClkD,UAAWwhD,IAEb2C,kCAAmC,CACjCnkD,UAAW4hD,IAEbwC,mCAAoC,CAClCpkD,UAAW8iD,IAEbuB,qCAAsC,CACpCrkD,UAAWyiD,KAGf72B,SAAU,CACR04B,oBAAqB,SAGzB7mD,IAEFrU,UAAW,CAACyc,IACZ9c,aAAYrF,EAAMmgE,IAClBr6D,QAAO9F,EAAMmgE,IACb5jD,gBAAevc,EAAMmgE,QAEUE,EApDjC,iBCtBE,SAAAQ,EACUzpC,EACAhV,EACAyH,GAHV,IAAArhB,EAAAvL,KACUA,KAAAm6B,QAAAA,EACAn6B,KAAAmlB,iBAAAA,EACAnlB,KAAA4sB,YAAAA,EAGF5sB,KAAA6jE,UAAY,EAGpB7jE,KAAA8jE,QAEI9jE,KAAKmlB,iBAAiB4+C,oBAAoB/jE,KAAK6jE,WAAWn4D,KAC5DG,EAAAA,IAAG,SAAEm4D,GACCA,EAAO5oD,aACT7P,EAAK04D,SAAWD,EAAO5oD,WAAWs6B,SAKxC11C,KAAAkkE,UAEIlkE,KAAKmlB,iBAAiBg/C,4BAM1BnkE,KAAAq5D,eAAqCr5D,KAAK8jE,QAAQp4D,KAChDgE,EAAAA,IAAG,SAAC6X,GAAS,OAAAA,EAAMnM,WAAWgpD,eAC9B9lD,EAAAA,OAAM,SAAC8lD,GAAgB,YAAiB58D,IAAjB48D,IACvBz4D,EAAAA,KAAK,IAoDT,OAjDEi4D,EAAA1jE,UAAAkN,YAAA,WACEpN,KAAKmlB,iBAAiBk/C,kBAGxBT,EAAA1jE,UAAAokE,eAAA,SAAe5nD,OACPtK,EAAmD,CACvDsK,SAAQA,EACRrB,YAAa,GAEfrb,KAAKikE,SAAWvnD,EAChB1c,KAAKukE,YAAYnyD,IAGnBwxD,EAAA1jE,UAAAmc,WAAA,SAAWD,OACHhK,EAAmD,CACvDsK,SAAU1c,KAAKikE,SACf5oD,YAAae,GAEfpc,KAAKukE,YAAYnyD,IAGnBwxD,EAAA1jE,UAAAskE,gBAAA,SAAgBj9C,GACdvnB,KAAKm6B,QAAQmS,GAAG,CACdC,QAAS,eACT9mB,OAAQ8B,KAIZq8C,EAAA1jE,UAAAukE,cAAA,WACE,OAAOh5D,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,gBAC3BpsD,KAAK4sB,YAAYw/B,UAAU,yBAC1B1gD,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GACH,MAAO,CACL44D,OAFE34D,EAAA,GAGF44D,cAHc54D,EAAA,QASd63D,EAAA1jE,UAAAqkE,YAAR,SAAoBnyD,GAClBpS,KAAKmlB,iBAAiBy/C,cACpB5kE,KAAK6jE,UACLzxD,EAAMiJ,YACNjJ,EAAMsK,+BArFX9U,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,guLACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAVzCgV,EAAAA,sBAEAD,EAAAA,wBADAkH,EAAAA,sBA8FFw2C,KCnGA,IAAAiB,GA0Bc,CAAEt4B,QAAS,UARzBu4B,GAAA,WAAA,SAAAA,KA+BiC,2BA/BhC38D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAAC2qC,EAAAA,UAAWpkC,IACzB/S,UAAW2Q,GACX/O,KAAI4jD,MAGRt8D,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb2lD,6BAA8B,CAC5B1lD,UAAWukD,GACXt5C,OAAQ,CAACksC,EAAAA,eAIfjhD,EAAAA,aACAkF,EAAAA,YACAmC,EAAAA,eACAD,GACAnH,EAAAA,UACAnG,EAAAA,YAEFjH,aAAc,CAACw7D,IACf/6D,QAAS,CAAC+6D,IACVn7D,UAAW,CAACuzB,EAAAA,aACZ1c,gBAAiB,CAACskD,QAEakB,EA/BjC,iBCHE,SAAAE,EACY5/C,EACAy6C,EACA7iD,GAFAhd,KAAAolB,eAAAA,EACAplB,KAAA6/D,qBAAAA,EACA7/D,KAAAgd,qBAAAA,SAGZxd,OAAA6H,eAAI29D,EAAA9kE,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK6/D,qBAAqBoF,iEAGnCzlE,OAAA6H,eAAI29D,EAAA9kE,UAAA,mBAAgB,KAApB,WACE,OAAOF,KAAK6/D,qBAAqBqF,iEAGnCF,EAAA9kE,UAAAilE,iBAAA,WAAA,IAAA55D,EAAAvL,KACE,OAAOyL,EAAAA,cAAc,CACnBzL,KAAKolB,eAAeE,iBACpBtlB,KAAK6/D,qBAAqBI,wBAC1BjgE,KAAK6/D,qBAAqBuF,4BACzB15D,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACu5D,EAAAt5D,EAAA,GAAcm0D,EAAAn0D,EAAA,GAAegJ,EAAAhJ,EAAA,GAAe,MAAA,CAChDs5D,EAAa7/C,MAAMC,OAAmB,WACtCy6C,EACAnrD,KAEFuJ,EAAAA,OAAM,SAAExS,OAACw5D,EAAD3iE,EAAAmJ,EAAA,GAAC,GAAgB,OAAAnB,QAAQ26D,KACjCz5D,EAAAA,IAAG,SAAEC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACw5D,EAAAv5D,EAAA,GAAYm0D,EAAAn0D,EAAA,GAAegJ,EAAAhJ,EAAA,QAEVvE,IAAlB04D,GAA+BA,EAAcC,MAAQmF,GACrDvwD,GAEDxJ,EAAKs0D,qBAAqB0F,6BAA6BD,KAG3D51D,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACC,EAAA,GAAsB,OAAnBA,EAAA,KACTuS,EAAAA,OAAO3T,SACPiB,EAAAA,yBAIJo5D,EAAA9kE,UAAAslE,mBAAA,WACExlE,KAAK6/D,qBAAqB4F,iCAG5BT,EAAA9kE,UAAAwlE,oBAAA,SAAoBC,GAClB3lE,KAAK6/D,qBAAqB+F,yBAAyBD,EAAmB,CACpEjE,OAAQ,gBAIZsD,EAAA9kE,UAAA2lE,cAAA,SAAc1F,GACZngE,KAAK6/D,qBAAqBiG,uCAC1B9lE,KAAKgd,qBAAqBxR,IACxB,CACEsO,IAAK,8BACL2L,OAAQ,CAAE06C,IAAGA,IAEfjjD,EAAAA,kBAAkBylB,uBAEpB3iC,KAAKolB,eAAeknB,GAAG,CACrBC,QAAS,YAIby4B,EAAA9kE,UAAA6lE,WAAA,WACE/lE,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,UAAY,KAAM,CAClD/mB,MAAO,CACLwgD,UAAW,0BAvElBp/D,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATZqf,EAAAA,sBADAi6C,EAAAA,iCAGA7iD,EAAAA,2OCLF,IAAA0oD,GAAA,WAiBE,SAAAA,EAAsBpG,GAAtB,IAAAt0D,EAAAvL,KAAsBA,KAAA6/D,qBAAAA,EAKtB7/D,KAAAkmE,eAEIlmE,KAAK6/D,qBACNsF,mBACAz5D,KAAKG,EAAAA,IAAG,SAACq0D,GAAiB,OAAC30D,EAAK40D,IAAMD,EAAcC,OAEvDngE,KAAAmmE,cAAgBnmE,KAAK6/D,qBAAqBsG,cAyB5C,OAvBEF,EAAA/lE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK4W,aAAe5W,KAAK6/D,qBAAqBuG,iBAAiB35D,UAAS,SACtE6qC,GACMA,GACF/rC,EAAKs0D,qBAAqBgG,cAAct6D,EAAK40D,QAMrD8F,EAAA/lE,UAAAmmE,aAAA,SAAaV,GACX3lE,KAAK6/D,qBAAqB6F,oBAAoBC,IAGhDM,EAAA/lE,UAAAumD,KAAA,WACEzmD,KAAK6/D,qBAAqBkG,cAG5BE,EAAA/lE,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,mCAvCvBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,6BACVC,SAAA,8+CACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC6zD,MA4CTiB,EArDA,GCAA,IAAAK,GAAA,WAWE,SAAAA,EAAsBzG,GAAA7/D,KAAA6/D,qBAAAA,EAEtB7/D,KAAAkmE,eAEIlmE,KAAK6/D,qBAAqBsF,mBAChC,2BAXCv9D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0BACVC,SAAA,gxIACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC6zD,MAaTsB,EAhBA,GCAA,IAAAC,GAAA,WAWE,SAAAA,EAAsB1G,GAAA7/D,KAAA6/D,qBAAAA,EAEtB7/D,KAAAkmE,eAEIlmE,KAAK6/D,qBAAqBsF,mBAKhC,OAHEoB,EAAArmE,UAAAkN,YAAA,WACEpN,KAAK6/D,qBAAqB2F,0CAb7B59D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,2BACVC,SAAA,2wCACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC6zD,MAiBTuB,EApBA,OCkBMpnC,GAAa,CACjB8mC,GACAK,GACAC,OAWY,CAAEh6B,QAAS,wBARzBi6B,GAAA,WAAA,SAAAA,KAkCwC,2BAlCvCr+D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAAC2qC,EAAAA,UAAWpkC,IACzB/S,UAAW2Q,GACX/O,KAAIwlD,MAGRl+D,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb6mD,+BAAgC,CAC9B5mD,UAAW4mD,IAEbK,4BAA6B,CAC3BjnD,UAAWinD,IAEbC,6BAA8B,CAC5BlnD,UAAWknD,OAIjBhxD,EAAAA,aACAC,EAAAA,UACAnG,EAAAA,WACAgG,EACA6T,EAAAA,sBAEF9gB,aAAYrF,EAAMo8B,IAClBt2B,QAAO9F,EAAMo8B,IACb7f,gBAAevc,EAAMo8B,QAEiBqnC,EAlCxC,iBCTE,SAAAE,EACU7G,EACAjzC,GAFV,IAAArhB,EAAAvL,KACUA,KAAA6/D,qBAAAA,EACA7/D,KAAA4sB,YAAAA,EAGF5sB,KAAA6jE,UAAY,EAGpB7jE,KAAA2mE,gBAEI3mE,KAAK6/D,qBAAqB+G,0BAA0B5mE,KAAK6jE,WAAWn4D,KACtEG,EAAAA,IAAG,SAAEg7D,GACCA,EAAYzrD,aACd7P,EAAK04D,SAAW4C,EAAYzrD,WAAWs6B,SAS7C11C,KAAAq5D,eAAqCr5D,KAAK2mE,gBAAgBj7D,KACxDgE,EAAAA,IAAG,SAACo3D,GAAkB,OAAAA,EAAe1rD,WAAWgpD,eAChD9lD,EAAAA,OAAM,SAAC8lD,GAAgB,YAAiB58D,IAAjB48D,IACvBz4D,EAAAA,KAAK,IAgDT,OA7CE+6D,EAAAxmE,UAAAkN,YAAA,WACEpN,KAAK6/D,qBAAqBkH,+BAG5BL,EAAAxmE,UAAAokE,eAAA,SAAe5nD,OACPtK,EAAmD,CACvDsK,SAAQA,EACRrB,YAAa,GAEfrb,KAAKikE,SAAWvnD,EAChB1c,KAAKgnE,oBAAoB50D,IAG3Bs0D,EAAAxmE,UAAAmc,WAAA,SAAWD,OACHhK,EAAmD,CACvDsK,SAAU1c,KAAKikE,SACf5oD,YAAae,GAEfpc,KAAKgnE,oBAAoB50D,IAG3Bs0D,EAAAxmE,UAAAukE,cAAA,WACE,OAAOh5D,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,gBAC3BpsD,KAAK4sB,YAAYw/B,UAAU,iBAC1B1gD,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GACH,MAAO,CACL44D,OAFE34D,EAAA,GAGFk7D,MAHcl7D,EAAA,QASd26D,EAAAxmE,UAAA8mE,oBAAR,SAA4B50D,GAI1BpS,KAAK6/D,qBAAqBqH,2BACxBlnE,KAAK6jE,UACLzxD,EAAMiJ,YACNjJ,EAAMsK,+BA5EX9U,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,+BACVC,SAAA,0jJACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDATzCivD,EAAAA,iCACAhzC,EAAAA,sBAoFFs5C,KCxFA,IAAAS,GAAA,WAaA,SAAAA,KAoBsC,2BApBrCh/D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbsnD,gCAAiC,CAC/BrnD,UAAWqnD,GACXp8C,OAAQ,CAACksC,EAAAA,eAIfjhD,EAAAA,aACAoH,GACAnH,EAAAA,UACAnG,EAAAA,YAEFjH,aAAc,CAACs+D,IACf79D,QAAS,CAAC69D,IACVpnD,gBAAiB,CAAConD,QAEkBS,EAjCtC,GCAAC,GAAA,WAUA,SAAAA,KAU0B,2BAVzBj/D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPy8D,GACA1B,GACAzD,GACAiB,GACAuG,GACAX,QAGsBY,EApB1B,iBCqBE,SAAAC,EACU9lB,EACA30B,GADA5sB,KAAAuhD,mBAAAA,EACAvhD,KAAA4sB,YAAAA,EALV5sB,KAAAsK,UAAYC,EAyGd,OAjGE88D,EAAAnnE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKsnE,gBAAkBtnE,KAAKuhD,mBAAmBkB,oBAAoB/2C,KACjEG,EAAAA,IAAG,SAACy/C,GAGAA,EAAe3qD,OAAS,IACvB2qD,EAAe9lD,KAAI,SAAC+hE,GAAiB,OAAAA,EAAcxkB,kBAEpDx3C,EAAKi8D,wBAAwBlc,EAAe,OAKlDtrD,KAAKsO,SAAW,KAChBtO,KAAKmL,SAAWnL,KAAKuhD,mBAAmBqK,2BACxC5rD,KAAKuhD,mBAAmBqB,sBAG1BykB,EAAAnnE,UAAAisD,eAAA,SAAergD,GAAf,IAAAP,EAAAvL,KACE+iD,EAAAj3C,EAAAi3C,eACAuF,EAAAx8C,EAAAw8C,kBACAG,EAAA38C,EAAA28C,YACAC,EAAA58C,EAAA48C,WACAH,EAAAz8C,EAAAy8C,WACAC,EAAA18C,EAAA08C,SAEA,OAAO/8C,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,4BAC3BpsD,KAAK4sB,YAAYw/B,UAAU,iBAC3BpsD,KAAK4sB,YAAYw/B,UAAU,kCAC3BpsD,KAAK4sB,YAAYw/B,UAAU,sBAAuB,CAChDzB,MAAOlC,EACP4B,KAAM3B,IAER1oD,KAAK4sB,YAAYw/B,UAAU,sCAC1B1gD,KACDgE,EAAAA,IAAG,SACA5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GACC27D,EAAA17D,EAAA,GACA27D,EAAA37D,EAAA,GACA47D,EAAA57D,EAAA,GACAsgD,EAAAtgD,EAAA,GACAwgD,EAAAxgD,EAAA,GAEMuhD,EAA6C,GAcnD,OAbKvK,GACHuK,EAAQjrD,KAAK,CAAEguB,KAAMo3C,EAAkBr1D,MAAO,YAEhDk7C,EAAQjrD,KAAK,CAAEguB,KAAMq3C,EAAYt1D,MAAO,SACrB,CACjBm7C,OAAQxK,EAAiBwJ,EAA2B,KACpDvB,SAAU1C,EACV2C,KAAM,CAAC1C,EAAY8D,GACnBiB,QAAOA,EACPsa,UAAWD,EACXta,IAAK9hD,EAAK0hD,YAAYzE,EAASv1C,WASzCo0D,EAAAnnE,UAAA2nE,oBAAA,SAAoBC,GAClB9nE,KAAKuhD,mBAAmBsmB,oBAAoBC,EAAct7D,IAC1DxM,KAAKsO,SAAW,MAGlB+4D,EAAAnnE,UAAA6nE,QAAA,SAAQD,GACN9nE,KAAKsO,SAAWw5D,EAAct7D,IAGhC66D,EAAAnnE,UAAAqO,WAAA,WACEvO,KAAKsO,SAAW,MAGlB+4D,EAAAnnE,UAAAsnE,wBAAA,SAAwBM,GACtB9nE,KAAKuhD,mBAAmBymB,0BAA0BF,EAAct7D,KAGlE66D,EAAAnnE,UAAA+sD,YAAA,SAAYh6C,GAcV,MAZa,SAATA,EACOjT,KAAKsK,UAAUxG,KACN,WAATmP,GAA8B,wBAATA,EACrBjT,KAAKsK,UAAUvG,YACN,WAATkP,EACAjT,KAAKsK,UAAUrG,YACN,SAATgP,EACAjT,KAAKsK,UAAUtG,KAEfhE,KAAKsK,UAAUpG,iCA3G7B0D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,k3CATAq0B,EAAAA,0BADA/O,EAAAA,sBAwHFi6C,KC3HA,IAAAY,GAAA,WAaA,SAAAA,KAoBmC,2BApBlC9/D,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA8G,EACA0N,GACAvU,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb8oD,+BAAgC,CAC9B7oD,UAAWgoD,GACX/8C,OAAQ,CAACksC,EAAAA,eAIfnnD,EAAAA,YAEF5G,UAAW,CAACuzB,EAAAA,aACZ5zB,aAAc,CAACi/D,IACfx+D,QAAS,CAACw+D,IACV/nD,gBAAiB,CAAC+nD,QAEeY,EAjCnC,GCAAE,GAAA,WA+BE,SAAAA,EACUz3B,EACAtrB,EACA2nB,GAFA/sC,KAAA0wC,GAAAA,EACA1wC,KAAAolB,eAAAA,EACAplB,KAAA+sC,YAAAA,EAjBV/sC,KAAA4W,aAAe,IAAIxM,EAAAA,aACnBpK,KAAA+7D,UAAW,EAEX/7D,KAAAsjB,KAAkBtjB,KAAK0wC,GAAGI,MACxB,CACElD,SAAU,CACR,GACA,CAACmD,EAAAA,WAAWC,SAAUntB,GAAqBM,oBAE7CikD,WAAY,CAAC,GAAI,CAACr3B,EAAAA,WAAWC,YAE/B,CAAEq3B,UAAWroE,KAAKskB,gBA8CtB,OArCE6jD,EAAAjoE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK4W,aAAapL,IAChBxL,KAAKolB,eACFE,iBACA7Y,UAAS,SAAC+Y,GAAS,OAACja,EAAK0gC,MAAQzmB,EAAMA,MAAM8iD,YAAmB,SAGrEtoE,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YAAYw7B,kBAAkB97D,UAAS,SAACirC,GACvCA,GACFnsC,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,cAM1C47B,EAAAjoE,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,eAItB86D,EAAAjoE,UAAAsoE,cAAA,WAEE,GADAxoE,KAAK+7D,UAAW,GACZ/7D,KAAKsjB,KAAKI,QAAd,KAIMkqB,EAAW5tC,KAAKsjB,KAAKnhB,MAAgB,SAC3CnC,KAAK+sC,YAAYy7B,cAAcxoE,KAAKisC,MAAO2B,KAGrCu6B,EAAAjoE,UAAAokB,cAAR,SAAsBmkD,GACpB,GAAIA,EAAGrrD,IAAI,YAAYjb,QAAUsmE,EAAGrrD,IAAI,cAAcjb,MACpD,MAAO,CAAEoiB,UAAU,wBA5DxB3c,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,gnEAVAspC,EAAAA,mBAIOjrB,EAAAA,sBAAgB6V,EAAAA,eAmEzBmsC,EA1EA,GCAA,IAAAO,GAAA,WAYA,SAAAA,KAoBkC,2BApBjCvgE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbupD,uBAAwB,CACtBtpD,UAAW8oD,GACX79C,OAAQ,CAAC6xC,EAAAA,kBAIf1hD,EAAAA,YACAC,EAAAA,oBACAnF,EAAAA,aACAlG,EAAAA,YAEFjH,aAAc,CAAC+/D,IACft/D,QAAS,CAACs/D,IACV7oD,gBAAiB,CAAC6oD,QAEcO,EAhClC,GCAAE,GAAA,WAoCE,SAAAA,EAAoBl4B,GAAA1wC,KAAA0wC,GAAAA,EApBpB1wC,KAAA+7D,UAAW,EAGX/7D,KAAA6oE,UAAY,IAAI16D,EAAAA,aAMhBnO,KAAA8oE,YAAc,IAAI36D,EAAAA,aAElBnO,KAAAsjB,KAAkBtjB,KAAK0wC,GAAGI,MACxB,CACEi4B,MAAO,CAAC,GAAI,CAACh4B,EAAAA,WAAWC,SAAUntB,GAAqBI,iBACvD+kD,aAAc,CAAC,GAAI,CAACj4B,EAAAA,WAAWC,WAC/BpD,SAAU,CAAC,GAAI,CAACmD,EAAAA,WAAWC,YAE7B,CAAEq3B,UAAWroE,KAAKipE,aAwCtB,OAnCEL,EAAA1oE,UAAAgpE,uBAAA,SAAuB3lD,GACrB,OACEvjB,KAAKsjB,KAAK6lD,SAAS,cAClBnpE,KAAK+7D,UACH/7D,KAAKsjB,KAAKlG,IAAImG,GAAiBI,SAC9B3jB,KAAKsjB,KAAKlG,IAAImG,GAAiBK,QAIvCglD,EAAA1oE,UAAAixC,WAAA,SAAW5tB,GACT,OAAOH,GAAUC,gBAAgBrjB,KAAKsjB,KAAMC,EAAiBvjB,KAAK+7D,WAGpE6M,EAAA1oE,UAAA+wC,SAAA,WAGE,GAFAjxC,KAAK+7D,UAAW,GAEZ/7D,KAAKsjB,KAAKI,QAAd,KAIM0lD,EAASppE,KAAKsjB,KAAKnhB,MAAM6mE,aACzBp7B,EAAW5tC,KAAKsjB,KAAKnhB,MAAMyrC,SAEjC5tC,KAAK6oE,UAAU/5D,KAAK,CAAEs6D,OAAMA,EAAEx7B,SAAQA,MAGxCg7B,EAAA1oE,UAAAmpE,SAAA,WACErpE,KAAK8oE,YAAYh6D,QAGX85D,EAAA1oE,UAAA+oE,WAAR,SAAmBR,GACjB,GAAIA,EAAGrrD,IAAI,SAASjb,QAAUsmE,EAAGrrD,IAAI,gBAAgBjb,MACnD,MAAO,CAAEoiB,UAAU,wBA3DxB3c,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,qyFAVAspC,EAAAA,kDAeCjiC,EAAAA,4BAMAA,EAAAA,UAiDHy5D,EAzEA,GCAA,IAAAU,GAAA,WAeE,SAAAA,EACUlkD,EACApI,EACA+vB,EACAlB,GAHA7rC,KAAAolB,eAAAA,EACAplB,KAAAgd,qBAAAA,EACAhd,KAAA+sC,YAAAA,EACA/sC,KAAA6rC,YAAAA,EAGF7rC,KAAA4W,aAAe,IAAIxM,EAAAA,aA6C7B,OAzCEk/D,EAAAppE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK+sC,YAAYw8B,8BACjBvpE,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YACFy8B,8BACA/8D,UAAS,SAAC6qC,GAAW,OAAA/rC,EAAKgsC,UAAUD,MAEzCt3C,KAAK2rD,WAAa3rD,KAAK+sC,YAAY08B,+BAGrCH,EAAAppE,UAAAmpE,SAAA,WACErpE,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,UAGpC+8B,EAAAppE,UAAA+wC,SAAA,SAASnlC,OAAEs9D,EAAAt9D,EAAAs9D,OAAQx7B,EAAA9hC,EAAA8hC,SACjB5tC,KAAKopE,OAASA,EACdppE,KAAK+sC,YAAY28B,YAAY97B,EAAUw7B,IAGzCE,EAAAppE,UAAAq3C,UAAA,SAAUD,GACJA,IACFt3C,KAAKgd,qBAAqBxR,IACxB,CACEsO,IAAK,qCACL2L,OAAQ,CAAE2jD,OAAQppE,KAAKopE,SAEzBlsD,EAAAA,kBAAkBylB,uBAEpB3iC,KAAK6rC,YAAYQ,SACjBrsC,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,SAAW,KAAM,CACjD/mB,MAAO,CACL4jD,OAAQppE,KAAKopE,YAMrBE,EAAAppE,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,cAClBrN,KAAK+sC,YAAYw8B,mDAvDpB3hE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,0iBAPAqe,EAAAA,sBAFA5I,EAAAA,4BAGAye,EAAAA,mBAJAhB,EAAAA,eAiEFsuC,EAnEA,GCAA,IAAAK,GAAA,WAaA,SAAAA,KAoBgC,2BApB/BxhE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbkqD,qBAAsB,CACpBjqD,UAAWiqD,GACXh/C,OAAQ,CAACksC,EAAAA,eAIf/7C,EAAAA,YACAC,EAAAA,oBACAoC,GACAzN,EAAAA,YAEFjH,aAAc,CAACwgE,GAA0BU,IACzCzgE,QAAS,CAACygE,GAAsBV,IAChCtpD,gBAAiB,CAACgqD,QAEYK,EAjChC,GCAAC,GAAA,WAwBE,SAAAA,EAAoBl5B,GAAA1wC,KAAA0wC,GAAAA,EATZ1wC,KAAA2wC,eAAgB,EAIxB3wC,KAAA+7D,SAAW,IAAI5tD,EAAAA,aAGfnO,KAAA6pE,UAAY,IAAI17D,EAAAA,aA4DlB,OAxDEy7D,EAAA1pE,UAAA4K,SAAA,WACE9K,KAAKsjB,KAAOtjB,KAAK0wC,GAAGI,MAClB,CACEg5B,YAAa,CAAC,GAAI,CAAC/4B,EAAAA,WAAWC,WAC9B+4B,YAAa,CACX,GACA,CAACh5B,EAAAA,WAAWC,SAAUntB,GAAqBM,oBAE7C6lD,mBAAoB,CAAC,GAAI,CAACj5B,EAAAA,WAAWC,YAEvC,CAAEq3B,UAAWroE,KAAKskB,iBAItBslD,EAAA1pE,UAAAixC,WAAA,SAAW5tB,GACT,OAAOH,GAAUC,gBACfrjB,KAAKsjB,KACLC,EACAvjB,KAAK2wC,gBAITi5B,EAAA1pE,UAAA+pE,0BAAA,WACE,OACEjqE,KAAKsjB,KAAK6lD,SAAS,cAClBnpE,KAAK2wC,eACH3wC,KAAKsjB,KAAKlG,IAAI,sBAAsBuG,SACnC3jB,KAAKsjB,KAAKlG,IAAI,sBAAsBwG,QAI5CgmD,EAAA1pE,UAAA+wC,SAAA,WACEjxC,KAAK2wC,eAAgB,EACjB3wC,KAAKsjB,KAAKI,SAId1jB,KAAK+7D,SAASjtD,KAAK,CACjBg7D,YAAa9pE,KAAKsjB,KAAKnhB,MAAM2nE,YAC7BC,YAAa/pE,KAAKsjB,KAAKnhB,MAAM4nE,eAIjCH,EAAA1pE,UAAAmpE,SAAA,WACErpE,KAAK6pE,UAAU/6D,QAGT86D,EAAA1pE,UAAAokB,cAAR,SAAsB4lD,GACpB,OACEA,EAAgB9sD,IAAI,eAAejb,QACnC+nE,EAAgB9sD,IAAI,sBAAsBjb,MAEnC,CAAEoiB,UAAU,GAEd,0BAtEV3c,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0BACVC,SAAA,y5FATAspC,EAAAA,iDAeCjiC,EAAAA,0BAGAA,EAAAA,UA6DHy6D,EAlFA,GCAA,IAAAO,GAAA,WAiBE,SAAAA,EACU/kD,EACA2nB,EACA/vB,GAFAhd,KAAAolB,eAAAA,EACAplB,KAAA+sC,YAAAA,EACA/sC,KAAAgd,qBAAAA,EANFhd,KAAA4W,aAAe,IAAIxM,EAAAA,aAgD7B,OAvCE+/D,EAAAjqE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK+sC,YAAYq9B,kCACjBpqE,KAAKmL,SAAWnL,KAAK+sC,YAAYs9B,iCACjCrqE,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YACFu9B,iCACA79D,UAAS,SAAC6qC,GAAW,OAAA/rC,EAAKgsC,UAAUD,OAI3C6yB,EAAAjqE,UAAAq3C,UAAA,SAAUD,GACJA,IACFt3C,KAAKgd,qBAAqBxR,IACxB,CAAEsO,IAAK,4CACPoD,EAAAA,kBAAkBylB,uBAEpB3iC,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,WAItC49B,EAAAjqE,UAAAmpE,SAAA,WACErpE,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,UAGpC49B,EAAAjqE,UAAA+wC,SAAA,SAASnlC,OACPg+D,EAAAh+D,EAAAg+D,YACAC,EAAAj+D,EAAAi+D,YAKA/pE,KAAK+sC,YAAYw9B,eAAeT,EAAaC,IAG/CI,EAAAjqE,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,cAElBrN,KAAK+sC,YAAYq9B,uDAnDpBxiE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,wiBAPAqe,EAAAA,sBACA6V,EAAAA,mBAHAze,EAAAA,wBA4DF4sD,EA9DA,GCAA,IAAAK,GAAA,WAaA,SAAAA,KAoBmC,2BApBlCriE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAmS,EAAAA,YACAC,EAAAA,oBACAnS,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb+qD,wBAAyB,CACvB9qD,UAAW8qD,GACX7/C,OAAQ,CAACksC,EAAAA,eAIf15C,GACAzN,EAAAA,YAEFjH,aAAc,CAAC+hE,GAAyBP,IACxC/gE,QAAS,CAACshE,GAAyBP,IACnCtqD,gBAAiB,CAAC6qD,QAEeK,EAjCnC,iBC8BE,SAAAC,EAAoB/5B,GAAA1wC,KAAA0wC,GAAAA,EAbpB1wC,KAAA+7D,SAAW,IAAI5tD,EAAAA,aAGfnO,KAAA6pE,UAAY,IAAI17D,EAAAA,aAEhBnO,KAAAsjB,KAAOtjB,KAAK0wC,GAAGI,MAAM,CACnB8e,UAAW,CAAC,IACZhH,UAAW,CAAC,GAAI7X,EAAAA,WAAWC,UAC3B6X,SAAU,CAAC,GAAI9X,EAAAA,WAAWC,YAGpBhxC,KAAA2wC,eAAgB,EAgC1B,OA5BE85B,EAAAvqE,UAAA4K,SAAA,WACM9K,KAAKu6B,MACPv6B,KAAKsjB,KAAKgtC,WAAWtwD,KAAKu6B,OAI9BkwC,EAAAvqE,UAAAixC,WAAA,SAAW5tB,GACT,OAAOH,GAAUC,gBACfrjB,KAAKsjB,KACLC,EACAvjB,KAAK2wC,gBAIT85B,EAAAvqE,UAAA+wC,SAAA,WACEjxC,KAAK2wC,eAAgB,EACjB3wC,KAAKsjB,KAAKI,SAId1jB,KAAK+7D,SAASjtD,KAAK,CACjB47D,YAAWtqE,EAAA,GAAOJ,KAAKsjB,KAAKnhB,UAIhCsoE,EAAAvqE,UAAAmpE,SAAA,WACErpE,KAAK6pE,UAAU/6D,4BArDlBlH,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,0hFANOspC,EAAAA,6CASNppC,EAAAA,sBAGAA,EAAAA,wBAGAmH,EAAAA,0BAGAA,EAAAA,UAyCHs7D,KC5DA,IAAAE,GAAA,WAuBE,SAAAA,EACUvlD,EACA2nB,EACA/vB,GAFAhd,KAAAolB,eAAAA,EACAplB,KAAA+sC,YAAAA,EACA/sC,KAAAgd,qBAAAA,EATFhd,KAAA4W,aAAe,IAAIxM,EAAAA,aAyD7B,OA7CEugE,EAAAzqE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KAEEA,KAAK+sC,YAAY69B,4CAEjB5qE,KAAK6qE,MAAQ7qE,KAAK+sC,YAAY3vB,MAC9Bpd,KAAK8vD,QAAU9vD,KAAK+sC,YAAYgjB,YAAYrkD,KAC1CG,EAAAA,IAAG,SAACmkD,GACiC,IAA/BxwD,OAAOqvB,KAAKmhC,GAAQrvD,QACtB4K,EAAKwhC,YAAYkjB,gBAIvBjwD,KAAKmL,SAAWnL,KAAK+sC,YAAY+9B,wCAEjC9qE,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YACFg+B,wCACAt+D,UAAS,SAAC6qC,GAAW,OAAA/rC,EAAKgsC,UAAUD,OAI3CqzB,EAAAzqE,UAAAq3C,UAAA,SAAUD,GACJA,IACFt3C,KAAKgd,qBAAqBxR,IACxB,CAAEsO,IAAK,0CACPoD,EAAAA,kBAAkBylB,uBAEpB3iC,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,WAItCo+B,EAAAzqE,UAAAmpE,SAAA,WACErpE,KAAKolB,eAAeknB,GAAG,CAAEC,QAAS,UAGpCo+B,EAAAzqE,UAAA+wC,SAAA,SAASnlC,OAAE4+D,EAAA5+D,EAAA4+D,YACT1qE,KAAK+sC,YAAYi+B,sBAAsBN,IAGzCC,EAAAzqE,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,cAGlBrN,KAAK+sC,YAAY69B,iEA5DpBhjE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,spBAVAqe,EAAAA,sBAGA6V,EAAAA,mBALAze,EAAAA,wBAwEFotD,EA1EA,GCAA,IAAAM,GAAA,WAaA,SAAAA,KAoBkC,2BApBjC9iE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACburD,uBAAwB,CACtBtrD,UAAWsrD,GACXrgD,OAAQ,CAACksC,EAAAA,eAIf/7C,EAAAA,YACAC,EAAAA,oBACAoC,GACAzN,EAAAA,YAEFjH,aAAc,CAACuiE,GAAwBF,IACvC5hE,QAAS,CAAC8hE,GAAwBF,IAClCnrD,gBAAiB,CAACqrD,QAEcM,EAjClC,iBCwBE,SAAAC,EACY9lD,EACAwH,GADA5sB,KAAAolB,eAAAA,EACAplB,KAAA4sB,YAAAA,EALO5sB,KAAAmrE,UAAY,aACZnrE,KAAAorE,qBAAuB,8BAO1CF,EAAAhrE,UAAAmrE,iBAAA,SAAiBvzB,GACf93C,KAAKolB,eAAeknB,GAClB,CACEC,QAAS,SACT9mB,OAAQ,CAAE4sB,MAAOryC,KAAKsrE,iBAAiBxzB,KAEzC,CAAEyzB,WAAYzzB,EAAOC,YAIjBmzB,EAAAhrE,UAAAorE,iBAAR,SAAyBxzB,GACvB,OAAOA,EAAO0zB,sBACVxrE,KAAKmrE,UACLnrE,KAAKmrE,UAAYnrE,KAAKorE,qBAAuBtzB,EAAOC,UAG1DmzB,EAAAhrE,UAAAukE,cAAA,WAME,OAAOh5D,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,0BAC3BpsD,KAAK4sB,YAAYw/B,UAAU,2BAC3BpsD,KAAK4sB,YAAYw/B,UAAU,wBAC3BpsD,KAAK4sB,YAAYw/B,UAAU,2BAC1B1gD,KACDgE,EAAAA,IAAG,SACA5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAMC,MAAO,CACL2/D,eANF1/D,EAAA,GAOE2/D,gBANF3/D,EAAA,GAOE4/D,aANF5/D,EAAA,GAOE6/D,cANF7/D,EAAA,4BApDTnF,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARZqf,EAAAA,sBACAiH,EAAAA,iNCwDA,SAAAy+C,EACYC,EACAC,GADA/rE,KAAA8rE,cAAAA,EACA9rE,KAAA+rE,0BAAAA,EA1CZ/rE,KAAAsK,UAAYC,EAEJvK,KAAAmK,cAAgB,IAAIC,EAAAA,aAEpBpK,KAAA6jE,UAAY,GACZ7jE,KAAAgsE,YAAc,CACpBP,eAAgB,gBAChBC,gBAAiB,iBACjBC,aAAc,cACdC,cAAe,gBAEjB5rE,KAAA01C,KAAO,iBAEP11C,KAAAisE,YAAc,CACZ,CACEh5D,KAAM,iBACNy7C,UAAU,GAEZ,CACEz7C,KAAM,kBACNy7C,UAAU,GAEZ,CACEz7C,KAAM,eACNy7C,UAAU,GAEZ,CACEz7C,KAAM,gBACNy7C,UAAU,IAoGhB,OAnFEmd,EAAA3rE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK8rE,cAAcz1B,oBAAoBr2C,KAAK6jE,WAC5C7jE,KAAKksE,cAAgBlsE,KAAK8rE,cACvBx1B,mBAAmBt2C,KAAK6jE,WACxBn4D,KACCG,EAAAA,IAAG,SACD+qC,GACE,OAACrrC,EAAK6P,WAAa,CACjBC,YAAau7B,EAAQx7B,WAAWgB,KAChCk2B,SAAUsE,EAAQx7B,WAAW+wD,MAC7B1wD,WAAYm7B,EAAQx7B,WAAWK,WAC/B2oD,aAAcxtB,EAAQx7B,WAAWgxD,WACjC12B,KAAMnqC,EAAKmqC,SAIrB11C,KAAKqsE,gBAAkBrsE,KAAK8rE,cAAcQ,4BAC1CtsE,KAAKusE,2BAA6B9gE,EAAAA,cAAc,CAC9CzL,KAAK8rE,cAAcU,0CACnBxsE,KAAK8rE,cAAcW,8CAClB/gE,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC4gE,EAAA3gE,EAAA,GAAa4gE,EAAA5gE,EAAA,GAAmB,OAAA2gE,GAAeC,KAEvD3sE,KAAK4sE,WAAa5sE,KAAK+rE,0BAA0BtH,gBAEjDzkE,KAAKmK,cACFqB,IACCxL,KAAK8rE,cACFe,wCACApgE,UAAS,SAAC3J,GACTyI,EAAKuhE,iBAAiBhqE,MAG3B0I,IACCxL,KAAK8rE,cACFiB,0CACAtgE,UAAS,SAAC3J,GACTyI,EAAKuhE,iBAAiBhqE,OAKxB+oE,EAAA3rE,UAAA4sE,iBAAR,SAAyBhqE,GACnBA,GACF9C,KAAK8rE,cAAcz1B,oBAAoBr2C,KAAK6jE,YAIhDgI,EAAA3rE,UAAA8sE,WAAA,SAAWt3B,GACT11C,KAAK01C,KAAOA,EAEZ11C,KAAK8rE,cAAcz1B,oBACjBr2C,KAAK6jE,UACL7jE,KAAKob,WAAWC,YAChBrb,KAAKgsE,YAAYt2B,KAIrBm2B,EAAA3rE,UAAAmc,WAAA,SAAWD,GACTpc,KAAK8rE,cAAcz1B,oBACjBr2C,KAAK6jE,UACLznD,EACApc,KAAKgsE,YAAYhsE,KAAK01C,QAI1Bm2B,EAAA3rE,UAAA+sE,mBAAA,SAAmBnhE,OACjBisC,EAAAjsC,EAAAisC,SACAjsC,EAAAohE,aAMEltE,KAAK8rE,cAAcqB,wBAAwBp1B,GAE3C/3C,KAAK8rE,cAAcsB,0BAA0Br1B,IAIjD8zB,EAAA3rE,UAAAkN,YAAA,WACEpN,KAAKmK,cAAckD,mCAvItBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gBACVC,SAAA,kmGAVAywC,EAAAA,6BAMO2yB,MA2ITW,KCpJA,IAAAwB,GAAA,WAgBE,SAAAA,EAAsBpjE,GAAAjK,KAAAiK,aAAAA,EANtBjK,KAAAsK,UAAYC,EAWd,OAHE8iE,EAAAntE,UAAA0zC,aAAA,SAAajqC,GACX3J,KAAKiK,aAAaP,mBAAmBC,wBAdxC/B,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,ikDANOmB,qCAYN+P,EAAAA,UAASnS,KAAA,CAAC,SAAU,CAAEoS,QAAQ,EAAO86B,KAAMhsC,EAAAA,gBAQ9CslE,EArBA,GCAA,IAAAC,GAAA,WA0BE,SAAAA,EACYrjE,EACA8hE,GADA/rE,KAAAiK,aAAAA,EACAjK,KAAA+rE,0BAAAA,EAPZ/rE,KAAAutE,oBAAsB,IAAIp/D,EAAAA,aA+B5B,OArBEm/D,EAAAptE,UAAAstE,qBAAA,WACExtE,KAAKutE,oBAAoBz+D,KAAK,CAC5BipC,SAAU/3C,KAAK83C,OAAOC,SACtBm1B,cAAeltE,KAAK83C,OAAO21B,kBAI/BH,EAAAptE,UAAAwtE,SAAA,WAEE1tE,KAAK+0C,SAAW/0C,KAAKiK,aAAab,KAAKikE,GAAuB,CAC5Dx/D,UAAU,EACVC,KAAM,OAGQ9N,KAAK+0C,SAASC,kBAChB8C,OAAS93C,KAAK83C,QAG9Bw1B,EAAAptE,UAAAytE,aAAA,WACE3tE,KAAK+rE,0BAA0BV,iBAAiBrrE,KAAK83C,6BAvCxDlwC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iBACVC,SAAA,u/DATAmB,SAIOiiE,sCAQNljE,EAAAA,0CACAA,EAAAA,mCAGAmH,EAAAA,UAgCHm+D,EApDA,GCAA,IAAAM,GAAA,WAgBE,SAAAA,EACY9B,EACA1mD,EACAyoD,GAFA7tE,KAAA8rE,cAAAA,EACA9rE,KAAAolB,eAAAA,EACAplB,KAAA6tE,eAAAA,EAiCd,OA9BED,EAAA1tE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKolB,eACFE,iBACA7Y,UAAS,SAACqhE,OACH/2B,EAAa+2B,EAAEtoD,MAAMC,OAAOsxB,WAC9BA,GACFxrC,EAAKugE,cAAciC,oBAAoBh3B,GACvCxrC,EAAKqL,aAAerL,EAAKugE,cACtBkC,sCACAvhE,UAAS,SAAC6qC,GACLA,GACF/rC,EAAKsiE,eAAeriE,IAClB,CAAEsO,IAAK,iCACPoD,EAAAA,kBAAkBylB,uBAGtBp3B,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,eAGtChhC,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,eAGrCl/B,eAGLugE,EAAA1tE,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,mCAxCvBzF,EAAAA,UAASf,KAAA,CAAC,CACTiB,SAAA,GACAD,SAAU,+DARV0wC,EAAAA,6BADApyB,EAAAA,sBAEA5I,EAAAA,wBAgDFqwD,EApDA,GCAA,IAAAK,GAiDc,CAAE1hC,QAAS,eA3BzB2hC,GAAA,WAAA,SAAAA,KA4C8B,2BA5C7B/lE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA8G,EACA0N,GACAzN,EAAAA,WACAkG,EAAAA,aACAC,EAAAA,UACAtN,EACAyU,GACApU,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbysD,mBAAoB,CAClBxsD,UAAWwsD,GACXvhD,OAAQ,CAACksC,EAAAA,YAEXoX,qBAAsB,CACpBvuD,UAAWuuD,GACXtjD,OAAQ,CAACksC,EAAAA,eAIfjhD,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAAC2qC,EAAAA,UAAWpkC,IACzB/S,UAAW2Q,GACX/O,KAAIgtD,OAIV7lE,aAAc,CACZyjE,GACAyB,GACAD,GACAO,IAEF/kE,QAAS,CAACgjE,GAAoB+B,IAC9BtuD,gBAAiB,CACfusD,GACAwB,GACAO,QAG0BM,EA5C9B,iBCHE,SAAAC,EACUC,GAAApuE,KAAAouE,8BAAAA,EAHApuE,KAAAquE,YAAwC,GAmCpD,OA7BEF,EAAAjuE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKouE,8BAA8BE,+BACnCtuE,KAAKuuE,aAAevuE,KAAKouE,8BACtBI,iBACA9iE,KAAKG,EAAAA,IAAG,SAACwiE,GAAe,OAAC9iE,EAAK8iE,YAAcA,KAC/CruE,KAAKouE,8BAA8BK,kBAEnCzuE,KAAK2rD,WAAalgD,EAAAA,cAAc,CAC9BzL,KAAKouE,8BAA8BM,wBACnC1uE,KAAKouE,8BAA8BO,sCAClCjjE,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAAC8iE,EAAA7iE,EAAA,GAAc8iE,EAAA9iE,EAAA,GAAmB,OAAA6iE,GAAgBC,MAI3DV,EAAAjuE,UAAA4uE,iBAAA,SAAiBC,OACTC,EAAqB,GAC3BhvE,KAAKquE,YAAYniE,QAAO,SAACtM,GACnBA,EAAEqvE,UAAYF,EAAWE,QAC3BD,EAAmB3sE,KAAIjC,EAAA,GAClBR,EAAC,CACJqiC,SAAUriC,EAAEqiC,WAGd+sC,EAAmB3sE,KAAKzC,KAG5BI,KAAKouE,8BAA8Bc,kBAAkBF,wBA1CxDpnE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,6BACVC,SAAA,69CACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDARzCirB,EAAAA,qCAiDF+xC,KCpDA,IAAAgB,GAAA,WAWA,SAAAA,KAkB2C,2BAlB1ChnE,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAAC+lE,IACf9lE,QAAS,CACPC,EAAAA,aACAwU,GACAzN,EAAAA,WACA9G,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb+uD,gCAAiC,CAC/B9uD,UAAW8uD,GACX7jD,OAAQ,CAACksC,EAAAA,gBAKjB3tD,QAAS,CAACslE,IACV7uD,gBAAiB,CAAC6uD,QAEuBgB,EA7B3C,GCyBA,IAAAC,GAAA,WA8BE,SAAAA,EACUC,EACAhU,EACArwB,GAFAhrC,KAAAqvE,uBAAAA,EACArvE,KAAAq7D,mBAAAA,EACAr7D,KAAAgrC,eAAAA,EA3BFhrC,KAAAsvE,kBAAoB,GACpBtvE,KAAAgsE,YAAc,CACpBuD,UAAW,WACXC,WAAY,aAGdxvE,KAAA01C,KAAO,YACP11C,KAAAisE,YAAc,CACZ,CACEh5D,KAAM,YACNy7C,UAAU,GAEZ,CACEz7C,KAAM,aACNy7C,UAAU,IAyGhB,OAzFE0gB,EAAAlvE,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKyvE,WAAazvE,KAAKqvE,uBACpBK,2BAA2B1vE,KAAKsvE,mBAChC5jE,KACCG,EAAAA,IAAG,SACD8jE,GACE,OAACpkE,EAAK6P,WAAa,CACjBC,YAAas0D,EAAUv0D,WAAWgB,KAClCk2B,SAAUq9B,EAAUv0D,WAAW+wD,MAC/B1wD,WAAYk0D,EAAUv0D,WAAWK,WACjC2oD,aAAcuL,EAAUv0D,WAAWgxD,WACnC12B,KAAM,eAGZhmC,EAAAA,IAAG,SAACkgE,GAAY,OAAAxvE,EAAA,GACXwvE,EAAQ,CACX3lB,QAAS2lB,EAAS3lB,QACd2lB,EAAS3lB,QAAQv6C,IAAG,SAACye,GAAU,OAAA/tB,EAAA,GAC1B+tB,EAAM,CACT6tB,SAAUzwC,EAAK+/B,WAAWnd,OAE5ByhD,EAAS3lB,aAInBjqD,KAAK6vE,qBAAuB7vE,KAAKqvE,uBAAuBS,4BACxD9vE,KAAK+vE,kBAAoBtkE,EAAAA,cAAc,CACrCzL,KAAK6vE,qBACL7vE,KAAKqvE,uBAAuBW,mCAC3BtkE,KAAKgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmkE,EAAAlkE,EAAA,GAAYmkE,EAAAnkE,EAAA,GAAmB,OAAAkkE,GAAcC,KAE3DlwE,KAAK4sE,WAAa5sE,KAAKykE,iBAGjB2K,EAAAlvE,UAAAukE,cAAR,WAIE,OAAOh5D,EAAAA,cAAc,CACnBzL,KAAKq7D,mBAAmBjP,UAAU,iCAClCpsD,KAAKq7D,mBAAmBjP,UAAU,oCACjC1gD,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GACH,MAAO,CACLyjE,UAFExjE,EAAA,GAGFyjE,WAHOzjE,EAAA,QASPqjE,EAAAlvE,UAAAorC,WAAR,SACEskC,GAEA,OAAO5vE,KAAKgrC,eAAe5tB,IAAIwyD,EAAS91C,QAAQ7mB,KAAMm4B,EAAAA,aAAaC,UAGrE+jC,EAAAlvE,UAAAiwE,eAAA,SACEC,GAIApwE,KAAKqvE,uBAAuBgB,qBAAqB,CAC/Cv2C,QAASs2C,EAASt2C,QAClBw2C,qBAAsBF,EAASE,wBAInClB,EAAAlvE,UAAA8sE,WAAA,SAAWt3B,GACT11C,KAAK01C,KAAOA,EACZ11C,KAAKqvE,uBAAuBkB,qBAC1BvwE,KAAKsvE,kBACL,EACAtvE,KAAKgsE,YAAYt2B,KAIrB05B,EAAAlvE,UAAAmc,WAAA,SAAWD,GACTpc,KAAKqvE,uBAAuBkB,qBAC1BvwE,KAAKsvE,kBACLlzD,EACApc,KAAKgsE,YAAYhsE,KAAK01C,QAI1B05B,EAAAlvE,UAAAkN,YAAA,WACEpN,KAAKqvE,uBAAuBmB,wBAC5BxwE,KAAKqvE,uBAAuBoB,gDA3H/B7oE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,w3PACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAbzCkrB,EAAAA,4BADAjP,EAAAA,0BADAoO,EAAAA,kBAyIF4zC,EA7HA,GCzBA,IAAAsB,GAAA,WAeA,SAAAA,KAuBgC,2BAvB/BvoE,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAACgnE,IACf/mE,QAAS,CACPC,EAAAA,aACA+G,EAAAA,WACA9G,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbgwD,qBAAsB,CACpB/vD,UAAW+vD,GACX9kD,OAAQ,CAACksC,EAAAA,eAIfjhD,EAAAA,aACAoH,GACAtN,EAAAA,WACAmG,EAAAA,UACAH,EACAyH,IAEFjU,QAAS,CAACumE,IACV9vD,gBAAiB,CAAC8vD,QAEYsB,EAtChC,iBCoBE,SAAAC,EACStxD,EACG8kB,EACFvX,GAFD5sB,KAAAqf,UAAAA,EACGrf,KAAAmkC,gBAAAA,EACFnkC,KAAA4sB,YAAAA,EA2BZ,OAxBE+jD,EAAAzwE,UAAA4K,SAAA,WACE9K,KAAK4kC,WACL5kC,KAAK4wE,aAGCD,EAAAzwE,UAAA0kC,SAAR,WACE5kC,KAAK6wE,OAAS7wE,KAAKmkC,gBAAgBC,UAAU14B,KAC3C4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAE20B,GAAmB,OAAAA,EAAKysC,SAAWzsC,EAAKC,UAIzCqsC,EAAAzwE,UAAA0wE,UAAR,WACE5wE,KAAK+wE,QAAUtlE,EAAAA,cAAc,CAC3BzL,KAAKmkC,gBAAgBC,UACrBpkC,KAAK4sB,YAAYw/B,UAAU,eAAe1gD,KAAKo1B,EAAAA,UAAUC,EAAAA,mBACxDr1B,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACu4B,EAAAt4B,EAAA,GAAMilE,EAAAjlE,EAAA,GACV,OAAAs4B,GAAQA,EAAKwD,YACTxD,EAAKwD,YACL,CAAC,CAAExmC,MAAO2vE,EAAU1qE,KAAM,8BAnCrCsB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gBACVC,SAAA,6KACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCkQ,UALP+Z,EAAAA,uBACAhO,EAAAA,sBA6CFujD,KClDA,IAAAM,GAAA,WAMA,SAAAA,KAiB+B,2BAjB9B9oE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAhN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbuxD,oBAAqB,CACnBtxD,UAAWsxD,OAIjBO,EAAAA,oBAEF9oE,aAAc,CAACuoE,IACf9nE,QAAS,CAAC8nE,IACVrxD,gBAAiB,CAACqxD,QAEWM,EAvB/B,iBCcE,SAAAE,EACY9+C,EACAI,GADAzyB,KAAAqyB,WAAAA,EACAryB,KAAAyyB,oBAAAA,SAGL0+C,EAAAjxE,UAAAkxE,iBAAP,SACEpwD,GAEA,OAAOvV,EAAAA,cAAc,CAACuV,EAAOhhB,KAAKqxE,kBAAkBrwD,KAAStV,KAC3DgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmV,EAAAlV,EAAA,GAAMulE,EAAAvlE,EAAA,GACV,MAAO,CACLu4B,MAAOrjB,EAAKoP,KACZ4B,SAAU,CAACq/C,QAWZH,EAAAjxE,UAAAmxE,kBAAP,SACErwD,GADF,IAAAzV,EAAAvL,KAGE,OAAKghB,EAGEA,EAAMtV,KACX4S,EAAAA,OAAM,SAAC2C,GAAQ,QAAEA,IACjB1C,EAAAA,UAAS,SAAC0C,OACFswD,EAAatwD,EAAKuwD,eAAiBvwD,EAAKuwD,eAAiBvwD,EAC/D,OAAO1V,EAAK8mB,WAAWo/C,wBAAwBF,EAAWxzC,KAAKryB,KAC7DG,EAAAA,IAAG,SAAC+E,GACF,QAAcpJ,IAAVoJ,EACFrF,EAAKmmE,yBAAyBH,GAAY,OACrC,KAECI,EAAgB,GACtBpmE,EAAKmmE,yBAAyBH,GAAY,EAAOI,OAC3CC,EAAgBpyE,OAAOqvB,KAAKje,GAAOlB,IAAG,SAC1CoK,GAAO,OAAAlJ,EAAMkJ,GAAKikB,MAEd8zC,EAAeF,EAAcrzD,OAAM,SACvCwzD,GAAM,OAACF,EAAcjsE,SAASmsE,EAAGtlE,MAE/BqlE,EAAalxE,OAAS,GACxB4K,EAAK8mB,WAAW0/C,oBACdR,EAAWxzC,IACX8zC,MAKRvzD,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAACkB,GAAS,OAAArF,EAAKymE,uBAAuBT,EAAY3gE,SA7BlD2B,EAAAA,MAyCH4+D,EAAAjxE,UAAAwxE,yBAAR,SACEO,EACAC,EACAC,GAHF,IAAA5mE,EAAAvL,UAGE,IAAAmyE,IAAAA,EAAA,IAEIF,EAAStpD,SAAWspD,EAAStpD,QAAQhoB,OAAS,GAChDsxE,EAAStpD,QAAQzc,QAAO,SAACsc,GACvB2pD,EAAU9vE,KAAK,CACb+vE,UAAW5pD,EAAM6pD,cACjB7lE,GAAIgc,EAAM8pD,WAKZL,EAAShgD,UAAYggD,EAAShgD,SAAStxB,OAAS,GAClDsxE,EAAShgD,SAAS/lB,QAAO,SAACqmE,GACxB,OAAAhnE,EAAKmmE,yBAAyBa,GAAO,EAAOJ,KAI5CD,GACFlyE,KAAKqyB,WAAW0/C,oBAAoBE,EAASl0C,IAAKo0C,IAS9ChB,EAAAjxE,UAAA8xE,uBAAR,SAA+BC,EAAerhE,GAA9C,IAAArF,EAAAvL,KACQwyE,EAAuB,GAY7B,GAVIP,EAAS3tC,QAGXkuC,EAAKluC,MAAQ2tC,EAAS3tC,OAGpB2tC,EAAStpD,SAAWspD,EAAStpD,QAAQhoB,OAAS,GAChDX,KAAKyyE,aAAaD,EAAMP,EAAStpD,QAAQ,GAAI/X,GAG3CqhE,EAAShgD,UAAYggD,EAAShgD,SAAStxB,OAAS,EAAG,KAC/CsxB,EAAWggD,EAAShgD,SACvBviB,IAAG,SAAC6iE,GAAS,OAAAhnE,EAAKymE,uBAAuBO,EAAO3hE,KAChD0N,OAAO3T,SACNsnB,EAAStxB,OAAS,IACpB6xE,EAAKvgD,SAAWA,GAKpB,OAAoC,IAA7BzyB,OAAOqvB,KAAK2jD,GAAM7xE,OAAe,KAAO6xE,GAMzCrB,EAAAjxE,UAAAuyE,aAAR,SAAqBD,EAAsBhqD,EAAO5X,OAC1C6P,EAAO7P,EAAS4X,EAAM8pD,OAAM,IAAI9pD,EAAM6pD,eAG5C,GAAI5xD,GAA2B,qBAAnB+H,EAAMkqD,SAAiC,CAC5CF,EAAKluC,QACRkuC,EAAKluC,MAAQ7jB,EAAKkyD,cAEd1tE,EAAMjF,KAAK4yE,QAAQnyD,GAErB+xD,EAAKluC,OAASr/B,IAChButE,EAAKvtE,IAAMA,EAGXutE,EAAKrgE,OAAWsO,EAAKtO,OAAS,SAAW,MASvCg/D,EAAAjxE,UAAA0yE,QAAR,SAAgBnyD,GACd,OAAIA,EAAKxb,IACAwb,EAAKxb,IACHwb,EAAKoyD,aACP7yE,KAAKyyB,oBAAoB0d,UAAU,CACxC5D,QAAS,WACT9mB,OAAQ,CACNxS,KAAMwN,EAAKoyD,aACXxiD,KAAM5P,EAAK4P,aALV,uBA7JVzpB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARZipB,EAAAA,kBACA0D,EAAAA,6LCJF,IAAAq/C,GAAA,WAmBE,SAAAA,EACYjzD,EACAvP,GADAtQ,KAAA6f,cAAAA,EACA7f,KAAAsQ,QAAAA,EARZtQ,KAAA+yE,MAAoC/yE,KAAKsQ,QAAQ+gE,kBAC/CrxE,KAAK6f,cAAcmB,OAGrBhhB,KAAAghB,MAA4ChhB,KAAK6f,cAAcmB,MAMjE,2BAhBCpZ,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,oMACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAPlCkQ,UAEA8vD,MAkBT2B,EAvBA,qBC0DE,SAAAE,EACUjiD,EACAjb,EACAm9D,GAHV,IAAA1nE,EAAAvL,KACUA,KAAA+wB,OAAAA,EACA/wB,KAAA8V,SAAAA,EACA9V,KAAAizE,QAAAA,EA7BDjzE,KAAAkzE,mBAAoB,EAM7BlzE,KAAAuF,SAAWgF,EAO2BvK,KAAAmzE,QAAS,EAERnzE,KAAAozE,QAAS,EAExCpzE,KAAAqzE,UAA2B,GAC3BrzE,KAAAmK,cAAgB,IAAIC,EAAAA,aACpBpK,KAAAszE,OAAS,IAAInlE,EAAAA,aAYnBnO,KAAKmK,cAAcqB,IACjBxL,KAAK+wB,OAAO0hC,OACT/mD,KAAK4S,EAAAA,OAAM,SAAClM,GAAS,OAAAA,aAAiBmhE,EAAAA,iBACtC9mE,UAAS,WAAO,OAAAlB,EAAK8R,WAE1Brd,KAAKmK,cAAcqB,IACjBxL,KAAKszE,OAAO5nE,KAAKuG,EAAAA,aAAa,KAAKxF,UAAS,WAC1ClB,EAAKioE,oCA8Gb,OA9HER,EAAA9yE,UAAAuzE,SADA,WAEEzzE,KAAKszE,OAAO7xE,QAoBduxE,EAAA9yE,UAAAwzE,WAAA,SAAWthE,OACHogE,EAAoBpgE,EAAmB,cACzCpS,KAAKqzE,UAAU1tE,SAAS6sE,IAC1BxyE,KAAKqzE,UAAYrzE,KAAKqzE,UAAU/0D,OAAM,SAAC7d,GAAK,OAAAA,IAAM+xE,IAClDxyE,KAAK8V,SAAS8a,YAAY4hD,EAAM,YAEhCxyE,KAAKqzE,UAAUhxE,KAAKmwE,GAGtBxyE,KAAK2zE,gBAELvhE,EAAMwhE,2BACNxhE,EAAM8F,mBAGR86D,EAAA9yE,UAAAumD,KAAA,WACEzmD,KAAK8V,SAAS8a,YACZ5wB,KAAKqzE,UAAUrzE,KAAKqzE,UAAU1yE,OAAS,GACvC,WAEFX,KAAKqzE,UAAUjxE,MACfpC,KAAK2zE,iBAGPX,EAAA9yE,UAAAmd,MAAA,WACErd,KAAKqzE,UAAY,GACjBrzE,KAAK2zE,iBAGPX,EAAA9yE,UAAA2zE,aAAA,SAAazhE,GACXpS,KAAK8zE,8BAA2C1hE,EAAmB,eACnEpS,KAAK+zE,0BAA0B3hE,IAGjC4gE,EAAA9yE,UAAA8zE,SAAA,SAASxB,EAAsByB,GAA/B,IAAA1oE,EAAAvL,KACE,YAD6B,IAAAi0E,IAAAA,EAAA,GACzBzB,EAAKvgD,UAAYugD,EAAKvgD,SAAStxB,OAAS,EACnCuP,KAAKoH,IAAGzW,MAARqP,KAAInN,EAAQyvE,EAAKvgD,SAASviB,IAAG,SAACjP,GAAK,OAAA8K,EAAKyoE,SAASvzE,EAAGwzE,EAAQ,OAE5DA,GAIXjB,EAAA9yE,UAAAg0E,eAAA,SAAevzE,GACb,OAAOuP,KAAKwtD,MAAM/8D,GAAUX,KAAKm0E,WAAaxzE,KAGhDqyE,EAAA9yE,UAAA6zE,0BAAA,SAA0B3hE,OAClBD,EACHC,EAAMD,QAAUC,EAAMgiE,cAQzB,OALEjiE,EAAOkiE,cAAcC,cAAcC,QAAQ,kBAC3CpiE,EAAOylB,cAAc28C,QAAQ,YAE7BpiE,EAAOiG,QAEFjG,EAAOkiE,eAGhBrB,EAAA9yE,UAAAkN,YAAA,WACMpN,KAAKmK,eACPnK,KAAKmK,cAAckD,eAIf2lE,EAAA9yE,UAAA4zE,8BAAR,SAAsCtB,GACpC,GAAIxyE,KAAKkzE,kBAAmB,KACpBsB,EAAuBhC,EAAKiC,cAAc,YAC1CC,EAAsB10E,KAAKizE,QAAqB,cAClDuB,IACFx0E,KAAK8V,SAAS6+D,YAAYH,EAAS,eAEjCA,EAAQI,WAAaJ,EAAQK,YAC7BH,EAAOE,WAAaF,EAAOG,aAE3B70E,KAAK8V,SAASg/D,SACZN,EACA,cACGhC,EAAKqC,YAAcL,EAAQK,YAAW,SAO3C7B,EAAA9yE,UAAAszE,+BAAR,WAAA,IAAAjoE,EAAAvL,KACQ+0E,EAAuB/0E,KAAKizE,QAAQvrE,cAAwB,WAClE/H,MAAMirB,KAAKmqD,GACRz2D,OAAM,SAACk0D,GAAQ,MAAiB,QAAjBA,EAAKwC,UACpB9oE,QAAO,SAAColE,GAAO,OAAA/lE,EAAKuoE,8BAA6B,MAG9Cd,EAAA9yE,UAAAyzE,cAAR,WAAA,IAAApoE,EAAAvL,KACEA,KAAKqzE,UAAUnnE,QAAO,SAAEsmE,EAAMhyE,GACxBA,EAAI,EAAI+K,EAAK8nE,UAAU1yE,QACzB4K,EAAKuK,SAAS+a,SAAS2hD,EAAM,aAC7BjnE,EAAKuK,SAAS8a,YAAY4hD,EAAM,aAEhCjnE,EAAKuK,SAAS8a,YAAY4hD,EAAM,aAChCjnE,EAAKuK,SAAS+a,SAAS2hD,EAAM,cAIjCxyE,KAAKozE,OAASpzE,KAAKqzE,UAAU1yE,OAAS,uBAjKzCiH,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,2hEACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDATnBghB,EAAAA,cAFtBpZ,EAAAA,iBANAhR,EAAAA,4CAuBCC,EAAAA,yBAKAA,EAAAA,iCACAA,EAAAA,sBAaAA,EAAAA,OAAK,CAAAjD,KAAIkD,EAAAA,YAAWpB,KAAA,CAAC,gCAErBmB,EAAAA,OAAK,CAAAjD,KAAIkD,EAAAA,YAAWpB,KAAA,CAAC,mCAMrByT,EAAAA,aAAYzT,KAAA,CAAC,oBA+HhBmsE,KCpLA,IAAAiC,GAAA,WAsBE,SAAAA,EACYp1D,EACAvP,GADAtQ,KAAA6f,cAAAA,EACA7f,KAAAsQ,QAAAA,EAVZtQ,KAAA+yE,MAAoC/yE,KAAKsQ,QAAQ8gE,iBAC/CpxE,KAAK6f,cAAcmB,OAGrBhhB,KAAAk1E,YAAkCl1E,KAAK6f,cAAcmB,MAAMtV,KACzDgE,EAAAA,IAAG,SAACpQ,GAAK,OAAAA,EAAEgxB,cAOf,2BAlBC1oB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gBACVC,SAAA,mGACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAPlCkQ,UAEA8vD,MAoBT8D,EA1BA,GCAA,IAAAE,GAAA,WASA,SAAAA,KAmB+B,2BAnB9BhtE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACArN,EACA6S,GACAxS,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb61D,oBAAqB,CACnB51D,UAAW41D,OAIjB5lE,EAAAA,YAEFjH,aAAc,CAAC6sE,GAAqBjC,IACpC1zD,gBAAiB,CAAC21D,IAClBpsE,QAAS,CAACosE,GAAqBjC,QAEFmC,EA5B/B,GCAAC,GAAA,WAMA,SAAAA,KAgBuC,2BAhBtCjtE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA6sE,GACA5sE,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb0zD,4BAA6B,CAC3BzzD,UAAWyzD,QAKnB1qE,aAAc,CAAC0qE,IACfxzD,gBAAiB,CAACwzD,IAClBjqE,QAAS,CAACiqE,QAE2BsC,EAtBvC,GCAAC,GAAA,WA4DE,SAAAA,EACYx1D,EACAvP,EACAyjD,GAHZ,IAAAxoD,EAAAvL,KACYA,KAAA6f,cAAAA,EACA7f,KAAAsQ,QAAAA,EACAtQ,KAAA+zD,wBAAAA,EA5CZ/zD,KAAA+yE,MAAoC/yE,KAAKsQ,QAAQ+gE,kBAC/CrxE,KAAK6f,cAAcmB,OAGrBhhB,KAAAk1E,YAAkCl1E,KAAK6f,cAAcmB,MAAMtV,KACzDgE,EAAAA,IAAG,SAACpQ,GAAK,OAAAA,EAAEgxB,cAIbtwB,KAAAghB,MAAQhhB,KAAK6f,cAAcmB,MAAMtV,KAC/B4S,EAAAA,OAAM,SACJld,GACE,OAACsrB,EAAAA,iBACCnhB,EAAKwoD,wBACLE,EAAAA,+BAgCV,2BApDCrsD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,gNACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAPlCkQ,UAEA8vD,UATP7jE,EAAAA,2BA+DF+nE,EAjEA,GCAA,IAAAC,GAAA,WAQA,SAAAA,KAmBqC,2BAnBpCntE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACA4/D,GACAp6D,GACA1L,EAAAA,WACA9G,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbi2D,0BAA2B,CACzBh2D,UAAWg2D,QAKnBjtE,aAAc,CAACitE,IACf/1D,gBAAiB,CAAC+1D,IAClBxsE,QAAS,CAACwsE,QAEyBC,EA3BrC,OCcAC,GAAA,WAIE,SAAAA,EACSC,EACGpwD,EACAi2C,EACAl2D,GAHHnF,KAAAw1E,cAAAA,EACGx1E,KAAAolB,eAAAA,EACAplB,KAAAq7D,mBAAAA,EACAr7D,KAAAmF,OAAAA,SAQZowE,EAAAr1E,UAAAu1E,OAAA,SAAOpjC,EAAejtC,GACfitC,GAAmB,KAAVA,EAMZjtC,EAAOswE,4BACPrjC,EAAM1xC,OAASyE,EAAOswE,6BAKpBtwE,EAAOuwE,iBACT31E,KAAKw1E,cAAcC,OAAOpjC,EAAO,CAC/BC,SAAUltC,EAAOwwE,cAIjBxwE,EAAOywE,oBACT71E,KAAKw1E,cAAcM,kBAAkBzjC,EAAO,CAC1CC,SAAUltC,EAAO2wE,kBAnBnB/1E,KAAKg2E,gBA6BTT,EAAAr1E,UAAA+1E,WAAA,SAAW7wE,GAAX,IAAAmG,EAAAvL,KACE,OAAOyL,EAAAA,cAAc,CACnBzL,KAAKk2E,kBAAkB9wE,GACvBpF,KAAKm2E,sBAAsB/wE,GAC3BpF,KAAKo2E,iBAAiBhxE,KACrBsG,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACuqE,EAAAtqE,EAAA,GAAgBuqE,EAAAvqE,EAAA,GAAawqE,EAAAxqE,EAAA,GACjC,MAAO,CACL81D,SAAUwU,EAAiBA,EAAexU,SAAW,KACrDyU,YAAWA,EACXC,QAAOA,KAGX1qE,EAAAA,IAAG,SAACo+C,GACF,OAAA1+C,EAAKirE,gBA/DmB,wBA+DsBjrE,EAAKkrE,WAAWxsB,QASpEsrB,EAAAr1E,UAAA81E,aAAA,WACEh2E,KAAKw1E,cAAcQ,eACnBh2E,KAAKw2E,gBA1EuB,yBA0EkB,IAGhDjB,EAAAr1E,UAAAw2E,aAAA,SAAazf,GACX,OAAOj3D,KAAKmF,OAAOiB,SAASpF,KAAK2G,UAAUirC,SAASqkB,IAGtDse,EAAAr1E,UAAAs2E,gBAAA,SAAgBvf,EAAmBzrD,QACrBhE,IAARgE,EACFxL,KAAKmF,OAAOiB,SAASpF,KAAK2G,UAAUgrD,OAAOsE,GAE3CzrD,EACIxL,KAAKmF,OAAOiB,SAASpF,KAAK2G,UAAU6D,IAAIyrD,GACxCj3D,KAAKmF,OAAOiB,SAASpF,KAAK2G,UAAU2V,OAAO25C,IAI3Cse,EAAAr1E,UAAAu2E,WAAR,SAAmBxsB,GACjB,QACKA,EAAQ4X,UAAY5X,EAAQ4X,SAASlhE,OAAS,KAC9CspD,EAAQqsB,aAAersB,EAAQqsB,YAAY31E,OAAS,KACrDspD,EAAQssB,SAINhB,EAAAr1E,UAAAg2E,kBAAR,SACE9wE,GAEA,OAAIA,EAAOuwE,gBACF31E,KAAKw1E,cAAcS,aAEnB1jE,EAAAA,GAAG,KAQNgjE,EAAAr1E,UAAAi2E,sBAAR,SAA8B/wE,GAA9B,IAAAmG,EAAAvL,KACE,OAAKoF,EAAOywE,mBAGH71E,KAAKw1E,cAAcmB,uBAAuBjrE,KAC/CgE,EAAAA,IAAG,SAACjK,GAAO,OAAAA,EAAIiK,IAAG,SAACknE,GAAc,OAAAA,EAAWz0E,UAC5Coc,EAAAA,UAAS,SAAC+3D,GACR,OAA2B,IAAvBA,EAAY31E,OACP4K,EAAKsrE,mBAAmBzxE,GAAQsG,KACrCgE,EAAAA,IAAG,SAACqU,GAAS,OAACA,EAAQ,CAACA,GAAS,MAG3BxR,EAAAA,GAAG+jE,MAVT/jE,EAAAA,GAAG,KAqBNgjE,EAAAr1E,UAAA22E,mBAAR,SAA2BzxE,GAA3B,IAAAmG,EAAAvL,KACE,OAAOA,KAAKk2E,kBAAkB9wE,GAAQsG,KACpC6S,EAAAA,UAAS,SAACu4D,GACR,OAAOA,EAAcjV,UAAYiV,EAAcjV,SAASlhE,OAAS,EAC7D4K,EAAKwrE,iBAAiB,4BAA6B,CACjDC,KAAMF,EAAcG,iBAEtB1kE,EAAAA,GAAG,UAKLgjE,EAAAr1E,UAAAk2E,iBAAR,SAAyBhxE,GAAzB,IAAAmG,EAAAvL,KACE,OAAOyL,EAAAA,cAAc,CACnBzL,KAAKk2E,kBAAkB9wE,GACvBpF,KAAKm2E,sBAAsB/wE,KAC1BsG,KACD6S,EAAAA,UAAS,SAAEzS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACgrE,EAAA/qE,EAAA,GAAeuqE,EAAAvqE,EAAA,GACzB,OACE+qE,GACAA,EAAcjV,UACoB,IAAlCiV,EAAcjV,SAASlhE,QACtB21E,GAAsC,IAAvBA,EAAY31E,OAErB4K,EAAKwrE,iBAAiB,0BAEtBxkE,EAAAA,GAAG,UASXgjE,EAAAr1E,UAAAmrE,iBAAP,SAAwBh5B,GACtBryC,KAAKolB,eAAeknB,GAAG,CACrBC,QAAS,SACT9mB,OAAQ,CAAE4sB,MAAKA,MAIXkjC,EAAAr1E,UAAA62E,iBAAR,SACEG,EACA5tE,GAEA,OAAOtJ,KAAKq7D,mBAAmBjP,UAAU8qB,EAAgB5tE,wBApL5D1C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAXZ80B,EAAAA,wBADAzV,EAAAA,sBAEAiH,EAAAA,0BACArmB,EAAAA,0OAQF,OCAMowE,GAA4C,CAChDzB,2BAA4B,EAC5BC,iBAAiB,EACjBE,oBAAoB,EACpBD,YAAa,EACbG,eAAgB,EAChBqB,sBAAsB,GAGxBC,GAAA,WA6BE,SAAAA,EACYC,EAEAz3D,GAHZ,IAAAtU,EAAAvL,KACYA,KAAAs3E,0BAAAA,EAEAt3E,KAAA6f,cAAAA,EAfZ7f,KAAAsK,UAAYC,EAMJvK,KAAAm2C,kBAAmB,EAY3Bn2C,KAAAu3E,SAAsCv3E,KAAKw3E,QAAQ9rE,KACjDG,EAAAA,IAAG,SAAC4rE,GAAK,OAAClsE,EAAKnG,OAASqyE,IACxBl5D,EAAAA,UAAS,SAACnZ,GAAU,OAAAmG,EAAK+rE,0BAA0BrB,WAAW7wE,MAqGlE,OAhIE5F,OAAA6H,eACIgwE,EAAAn3E,UAAA,YAAS,KADb,SACciC,GACRA,GACFnC,KAAKy1E,OAAOtzE,oCA8BhB3C,OAAA6H,eAAYgwE,EAAAn3E,UAAA,UAAO,KAAnB,WACE,OAAIF,KAAK6f,cAC6B7f,KAAK6f,cAAcmB,MAAMtV,KAG3DgE,EAAAA,IAAG,SAAC+nE,GACF,OAAAr3E,EAAA,GACKq3E,EAAC,CACJ9B,gBAC6B,SAAtB8B,EAAiB,kBAAqC,IAAtBA,EAAE9B,gBACzCyB,qBACkC,SAA3BK,EAAsB,uBACA,IAA3BA,EAAEL,qBACJvB,mBACgC,SAAzB4B,EAAoB,qBACA,IAAzBA,EAAE5B,wBAKHtjE,EAAAA,GAAG4kE,qCAOdE,EAAAn3E,UAAAu1E,OAAA,SAAOpjC,GACLryC,KAAKs3E,0BAA0B7B,OAAOpjC,EAAOryC,KAAKoF,QAElDpF,KAAKoJ,QAMPiuE,EAAAn3E,UAAAkJ,KAAA,WACEpJ,KAAKs3E,0BAA0Bd,gBAAgB,uBAAuB,IAMxEa,EAAAn3E,UAAA4J,MAAA,SAAMsI,GACCpS,KAAKm2C,mBACRn2C,KAAKs3E,0BAA0Bd,gBAC7B,uBACA,GAEEpkE,GAASA,EAAMD,QACHC,EAAY,OAAEguB,QAGhCpgC,KAAKm2C,kBAAmB,GAO1BkhC,EAAAn3E,UAAAw3E,YAAA,SAAYtlE,GACNpS,KAAKs3E,0BAA0BZ,aAAa,yBAC9C12E,KAAK8J,MAAMsI,GACXA,EAAM6F,mBASVo/D,EAAAn3E,UAAAy3E,mBAAA,SAAmBvlE,EAAgBigC,GAC5BA,GAAiC,IAAxBA,EAAMF,OAAOxxC,SAG3BX,KAAK8J,MAAMsI,GACXpS,KAAKs3E,0BAA0BjM,iBAAiBh5B,KAMlDglC,EAAAn3E,UAAAo4C,aAAA,WACEt4C,KAAKm2C,kBAAmB,GAMnBkhC,EAAAn3E,UAAAmd,MAAP,SAAahN,GACXrQ,KAAKs4C,eACLjoC,EAAGlO,MAAQ,GACXnC,KAAKs3E,0BAA0BtB,oCAxIlCpuE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,eACVC,SAAA,u1DACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAflCokE,UADAl0D,GAAgBC,WAAA,CAAA,CAAAvc,KA4CpBwc,EAAAA,iDArBFvZ,EAAAA,MAAKnB,KAAA,CAAC,gBAgITwwE,EA1IA,GCvBA,IAAAO,GAAA,WAEA,SAAAA,KAWA,OATEA,EAAA13E,UAAAiwC,UAAA,SAAU8a,EAAclnC,GACtB,OAAKA,EAGEknC,EAAK13C,QACVwQ,EAAMouB,OACN,2BAA2BpuB,EAAMouB,OAAM,WAJhC8Y,uBAJZza,EAAAA,KAAI3pC,KAAA,CAAC,CAAEwpB,KAAM,kBAWdunD,EAbA,GCAAC,GAAA,WAaA,SAAAA,KAoB8B,2BApB7B1vE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAF,EACA9M,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbi4D,mBAAoB,CAClBh4D,UAAWg4D,OAIjBnvE,EACAsN,EAAAA,UACAnG,EAAAA,YAEFjH,aAAc,CAACivE,GAAoBO,IACnCt4D,gBAAiB,CAAC+3D,IAClBxuE,QAAS,CAACwuE,QAEkBQ,EAjC9B,GCAAC,GAAA,WAsCE,SAAAA,EACYvxD,EACA6sB,GADApzC,KAAAumB,gBAAAA,EACAvmB,KAAAozC,iBAAAA,EAnBZpzC,KAAAymB,kBAAuCC,EAAAA,kBAAkBG,SAgC3D,OAVEixD,EAAA53E,UAAA4K,SAAA,WACE9K,KAAK8gE,OAAS9gE,KAAKumB,gBAAgBN,kBACnCjmB,KAAK2zC,iBAAmB3zC,KAAKozC,iBAAiB5sB,mBAC5CxmB,KAAKymB,oBAITqxD,EAAA53E,UAAAkN,YAAA,WACEpN,KAAKumB,gBAAgBwxD,yCApCxBnwE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,8BACVC,SAAA,gkBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAXzC2X,EAAAA,uBAMO1C,MAwCT0xD,EArDA,qBC0BE,SAAAE,EACYzxD,EACFqG,GADE5sB,KAAAumB,gBAAAA,EACFvmB,KAAA4sB,YAAAA,EAsEZ,OAnEEorD,EAAA93E,UAAA4K,SAAA,WACE9K,KAAK8gE,OAAS9gE,KAAKumB,gBAAgBN,mBAGrC+xD,EAAA93E,UAAAkN,YAAA,WACEpN,KAAKumB,gBAAgBwxD,qBAGvBC,EAAA93E,UAAA6qD,sBAAA,SAAsBlF,GACpB,OAAO7lD,KAAK4sB,YAAYw/B,UAAU,sBAAsB1gD,KACtD4S,EAAAA,OAAM,SAACld,GAAK,OAAAuJ,QAAQk7C,KACpBn2C,EAAAA,IAAG,SAACu/C,GAAa,MAAA,CACf3qB,MAAO2qB,EACPjE,SAAanF,EAAgB+C,UAAS,IAAI/C,EAAgBgD,SAC1DoC,KAAM,CACJpF,EAAgBiD,MAChBjD,EAAgBkD,MACblD,EAAgBmD,KAAI,KAAKnD,EAAgBoB,QAAQ7lC,QAAO,KAAKykC,EAAgBoD,WAChFpD,EAAgBqF,YAMxB8sB,EAAA93E,UAAA+3E,2BAAA,SAA2Bz4B,GACzB,OAAOx/C,KAAK4sB,YAAYw/B,UAAU,mCAAmC1gD,KACnE4S,EAAAA,OAAM,SAACld,GAAK,OAAAuJ,QAAQ60C,KACpB9vC,EAAAA,IAAG,SAACu/C,GAAa,MAAA,CACf3qB,MAAO2qB,EACPjE,SAAUxL,EAAanvB,KACvB46B,KAAM,CAACzL,EAAav3B,kBAK1B+vD,EAAA93E,UAAA6hE,6BAAA,SAA6B1a,GAC3B,OAAOrnD,KAAK4sB,YAAYw/B,UAAU,sBAAsB1gD,KACtD4S,EAAAA,OAAM,SAACld,GAAK,OAAAuJ,QAAQ08C,KACpB33C,EAAAA,IAAG,SAACu/C,GAAa,MAAA,CACf3qB,MAAO2qB,EACPjE,SAAa3D,EAAeuB,UAAS,IAAIvB,EAAewB,SACxDoC,KAAM,CACJ5D,EAAeyB,MACfzB,EAAe0B,MACZ1B,EAAe2B,KAAI,KAAK3B,EAAeJ,QAAQ7lC,QAAO,KAAKimC,EAAe4B,WAC7E5B,EAAe6D,YAMvB8sB,EAAA93E,UAAAg4E,0BAAA,SAA0B7vB,GACxB,OAAO58C,EAAAA,cAAc,CACnBzL,KAAK4sB,YAAYw/B,UAAU,uBAC3BpsD,KAAK4sB,YAAYw/B,UAAU,sBAAuB,CAChDzB,MAAOhgD,QAAQ09C,GAAWA,EAAQI,YAAc,GAChD4B,KAAM1/C,QAAQ09C,GAAWA,EAAQK,WAAa,OAE/Ch9C,KACD4S,EAAAA,OAAM,SAACld,GAAK,OAAAuJ,QAAQ09C,KACpB34C,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmjD,EAAAljD,EAAA,GAAWsgD,EAAAtgD,EAAA,GAAiB,MAAA,CAChCu4B,MAAO2qB,EACPjE,SAAU3C,EAAQC,kBAClB2C,KAAM,CAAC5C,EAAQE,WAAY8D,4BA5ElCzkD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,iCACVC,SAAA,wpCACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAbzC2X,EAAAA,uBAIAsE,EAAAA,sBAsFF4qD,KClGA,IAAAG,GAAA,WAqBE,SAAAA,EAAsB5xD,GAAAvmB,KAAAumB,gBAAAA,EAHtBvmB,KAAAo4E,iBAAkB,EAiBpB,OAZED,EAAAj4E,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK8gE,OAAS9gE,KAAKumB,gBAAgBN,kBAAkBva,KACnDG,EAAAA,IAAG,SAAC0b,GACFhc,EAAK6sE,gBAAkB7wD,EAAM8wD,cAC7B9sE,EAAK+sE,UAAY/wD,EAAMmvB,SAK7ByhC,EAAAj4E,UAAAkN,YAAA,WACEpN,KAAKumB,gBAAgBwxD,yCAvBxBnwE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0CACVC,SAAA,6yBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAPlC2X,EAAAA,mBA6BTqvD,EAnCA,GCAA,IAAAI,GAAA,WAiBE,SAAAA,EAAsBhyD,GAAAvmB,KAAAumB,gBAAAA,EASxB,OAPEgyD,EAAAr4E,UAAA4K,SAAA,WACE9K,KAAK8gE,OAAS9gE,KAAKumB,gBAAgBN,mBAGrCsyD,EAAAr4E,UAAAkN,YAAA,WACEpN,KAAKumB,gBAAgBwxD,yCAfxBnwE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,+BACVC,SAAA,wQACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlC2X,EAAAA,mBAoBTyvD,EA1BA,GCAA,IAAAC,GAAA,WA2BE,SAAAA,EACYzrC,EACA3nB,EACAymB,EACA6E,GAHA1wC,KAAA+sC,YAAAA,EACA/sC,KAAAolB,eAAAA,EACAplB,KAAA6rC,YAAAA,EACA7rC,KAAA0wC,GAAAA,EAfZ1wC,KAAAy4E,kBAA+Bz4E,KAAK0wC,GAAGI,MACrC,CACElD,SAAU,CACR,GACA,CAACmD,EAAAA,WAAWC,SAAUntB,GAAqBM,oBAE7Cu0D,aAAc,CAAC,GAAI3nC,EAAAA,WAAWC,WAEhC,CAAEq3B,UAAWxkD,GAAqBS,gBA6BtC,OAnBEk0D,EAAAt4E,UAAAy+D,OAAA,WAAA,IAAApzD,EAAAvL,KACEA,KAAK+sC,YAAY4rC,cACf34E,KAAK02C,KACL12C,KAAKy4E,kBAAkBt2E,MAAMyrC,UAE1B5tC,KAAK4W,eACR5W,KAAK4W,aAAe5W,KAAK6rC,YAAYG,eAAev/B,UAAS,SAACw/B,GACxDA,EAAMsB,cACRhiC,EAAK6Z,eAAeknB,GAAG,CAAEC,QAAS,aAM1CisC,EAAAt4E,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,mCA5CvBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,6kFANoCk0B,EAAAA,mBAAhB7V,EAAAA,sBAAb6U,EAAAA,mBADAoW,EAAAA,6CAUNppC,EAAAA,qBACAA,EAAAA,SAyCHwwE,EArDA,GCAA,IAAAI,GAAA,WAYE,SAAAA,EACUryD,EACAwK,EACA0B,GAFAzyB,KAAAumB,gBAAAA,EACAvmB,KAAA+wB,OAAAA,EACA/wB,KAAAyyB,oBAAAA,SAGVmmD,EAAA14E,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACE,OAAOA,KAAKumB,gBAAgBN,kBAAkBva,KAC5CgE,EAAAA,IAAG,SAACmpE,GACF,SAAIA,GAAqD,IAArCr5E,OAAOqvB,KAAKgqD,GAAcl4E,SAGrC4K,EAAKwlB,OAAOwzB,SAASh5C,EAAKknB,oBAAoBrV,IAAI,mCAhBlExW,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHLgiB,EAAAA,uBALsBqJ,EAAAA,cAKLsB,EAAAA,oNAN1B,OCqBMqlD,GAA8B,CAClChB,GACAE,GACAG,GACAI,GACAC,IAGFO,GAAA,WAAA,SAAAA,KAmCsC,2BAnCrC5wE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAwxC,GACA1qC,EACAo0B,GACA6R,GACAhmC,EAAAA,WACAqL,EAAAA,oBACAwO,EAAAA,qBACA3gB,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb45D,uCAAwC,CACtC35D,UAAW84D,GACX7tD,OAAQ,CAACsuD,KAEXd,gCAAiC,CAC/Bz4D,UAAWy4D,GACXxtD,OAAQ,CAACsuD,KAEXL,iCAAkC,CAChCl5D,UAAWk5D,GACXjuD,OAAQ,CAACsuD,KAEXZ,mCAAoC,CAClC34D,UAAW24D,GACX1tD,OAAQ,CAACsuD,SAKjBxwE,aAAYrF,EAAM+1E,IAClBjwE,QAAO9F,EAAM+1E,IACbx5D,gBAAevc,EAAM+1E,QAEeC,EAnCtC,GC7BA,IAAAE,GAAA,WAgBE,SAAAA,EACYjuC,EACAkuC,EACAzmD,GAFAzyB,KAAAgrC,eAAAA,EACAhrC,KAAAk5E,iBAAAA,EACAl5E,KAAAyyB,oBAAAA,SAMZwmD,EAAA/4E,UAAAi5E,YAAA,SAAYlmE,GAAZ,IAAA1H,EAAAvL,KACE,OAAOA,KAAKgrC,eAAe5tB,IAAInK,GAAMvH,KACnC4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAACoqB,GAAW,OAAAvuB,EAAK6tE,eAAet/C,OAIvCm/C,EAAA/4E,UAAAm5E,qBAAA,SACEpmE,EACAqmE,EACAC,EACAC,GAJF,IAAAjuE,EAAAvL,KAME,OAAOA,KAAKk5E,iBAAiB97D,IAAInK,EAAMqmE,GAAe5tE,KACpD4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAE+pE,GACH,OAAAA,EAAK/pE,IAAG,SAACgqE,GACP,OAAAnuE,EAAK6tE,eAAeM,EAAIvnE,OAAQonE,EAAcC,SAS9CP,EAAA/4E,UAAAk5E,eAAR,SACEO,EACAJ,EACAC,QADA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,OAEM/4D,EAA4B,GAiBlC,OAhBI84D,IACF94D,EAAK6jB,MAAQq1C,EAAOtpD,MAElBmpD,GAAwBG,EAAO7wC,OAAS6wC,EAAO7wC,MAAM8S,iBACvDn7B,EAAKqoB,MAAQ6wC,EAAO7wC,MAAM8S,gBAExB+9B,EAAOjxC,QAAUixC,EAAOjxC,OAAOC,UACjCloB,EAAK5M,MAAQ,CACXT,UAAWumE,EAAOjxC,OAAOC,QACzBt1B,OAAQ,YAGZoN,EAAKiL,MAAQ1rB,KAAKyyB,oBAAoB0d,UAAU,CAC9C5D,QAAS,UACT9mB,OAAQk0D,IAEHl5D,uBA7DV7Z,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARZ00B,EAAAA,sBADAG,EAAAA,+BAEAlI,EAAAA,oOANF,GCAA,IAAAmmD,GAAA,WA2DE,SAAAA,EACY/5D,EACAmrB,EACAC,GAHZ,IAAA1/B,EAAAvL,KACYA,KAAA6f,cAAAA,EACA7f,KAAAgrC,eAAAA,EACAhrC,KAAAirC,SAAAA,EA5COjrC,KAAA65E,cACjB75E,KAAKirC,UAAYjrC,KAAKirC,SAASE,QAAQ,OAASC,EAAAA,aAAa9nC,KAAO,GAE9DtD,KAAAq3D,eAAoCr3D,KAAK6f,cAAcmB,MAAMtV,KACnE4S,EAAAA,OAAO3T,UAMT3K,KAAA6wE,OAA6B7wE,KAAKq3D,eAAe3rD,KAC/CgE,EAAAA,IAAG,SAACuR,GAAQ,OAAAA,EAAKqjB,SAQnBtkC,KAAAw3D,OAA4Cx3D,KAAKq3D,eAAe3rD,KAC9DgE,EAAAA,IAAG,SAACuR,GAAQ,OAAAA,EAAK64D,aAAa3nC,OAAOvZ,MAAM,OAC3ClpB,EAAAA,IAAG,SAACgoD,GACF,OAAAA,EAAMhoD,IAAG,SAACuD,GAAQ,OAAA1H,EAAKy/B,eAAe5tB,IAAInK,EAAM1H,EAAKsuE,oBAwB3D,2BApDCjyE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,sBACVC,SAAA,ghBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlCkQ,UAJPma,EAAAA,sBAHAH,EAAAA,wBA6DFu+C,EAhEA,GCAA,IAAAG,GAAA,WAUA,SAAAA,KAmBoC,2BAnBnC5xE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAgN,EACAD,EACAE,EAAAA,aACAC,EAAAA,UACAjN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbw6D,yBAA0B,CACxBv6D,UAAWu6D,QAKnBxxE,aAAc,CAACwxE,IACft6D,gBAAiB,CAACs6D,IAClB/wE,QAAS,CAAC+wE,QAEwBG,EA7BpC,iBCoDE,SAAAC,EACY36D,EACA46D,EACAf,GAHZ,IAAA3tE,EAAAvL,KACYA,KAAAqf,UAAAA,EACArf,KAAAi6E,QAAAA,EACAj6E,KAAAk5E,iBAAAA,EA5BZl5E,KAAA6wE,OAAS7wE,KAAKqf,UAAU2B,MAAMtV,KAAKgE,EAAAA,IAAG,SAACpQ,GAAK,OAAAA,EAAEglC,SAEtCtkC,KAAAk6E,oBAEJl6E,KAAKi6E,QAAQ3uC,aAAa5/B,KAC5B4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAE9P,GAAe,OAAAA,EAAEqT,OACtBrH,EAAAA,uBACAC,EAAAA,IAAG,WAAO,OAAAN,EAAK2tE,iBAAiBiB,qBAQlCn6E,KAAAw3D,OAA4C/rD,EAAAA,cAAc,CACxDzL,KAAKk6E,oBACLl6E,KAAKqf,UAAU2B,QACdtV,KACD6S,EAAAA,UAAS,SAAEzS,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACmH,EAAAlH,EAAA,GAAMkV,EAAAlV,EAAA,GAChB,OAAAR,EAAK8tE,qBAAqBpmE,EAAMgO,EAAKm5D,0BAmB3C,OATUJ,EAAA95E,UAAAm5E,qBAAR,SACEpmE,EACAqmE,GAEA,OAAOt5E,KAAKk5E,iBAAiB97D,IAAInK,EAAMqmE,GAAe5tE,KACpD4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAE+pE,GAA6B,OAAAA,EAAK/pE,IAAG,SAACgqE,GAAO,OAAAnnE,EAAAA,GAAGmnE,EAAIvnE,kCA9C9DvK,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,2fACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlCkQ,UACA0pB,UAXPpP,EAAAA,2BA8DFq+C,KCnEA,IAAAK,GAAA,WAQA,SAAAA,KAmBsC,2BAnBrClyE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAgN,EACAD,EACAE,EAAAA,aACAC,EAAAA,UACAjN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb46D,2BAA4B,CAC1B36D,UAAW26D,QAKnB5xE,aAAc,CAAC4xE,IACf16D,gBAAiB,CAAC06D,IAClBnxE,QAAS,CAACmxE,QAE0BK,EA3BtC,GCEaC,GAAkC,CAC7Cv3D,KAAM,CACJw3D,eAAgB,CACdC,QAAQ,EACRC,aAAc,EACdC,gBAAgB,mBCoCpB,SAAAC,EAAoB1mC,GAApB,IAAA1oC,EAAAvL,KAAoBA,KAAAi0C,sBAAAA,EA/BZj0C,KAAA46E,mBAAqB,IAAIh9D,EAAAA,gBAAgB,MAEzC5d,KAAAg8C,SAEJh8C,KAAKi0C,sBAAsB3I,aAAa5/B,KAC1C4S,EAAAA,OAAO3T,SACPiB,EAAAA,uBACAC,EAAAA,IAAG,SAAEjM,GACH,OAAA2L,EAAKqvE,mBAAmBn5E,KAAK7B,EAAE8oC,OAAS9oC,EAAE8oC,OAAOC,QAAU,OAW/D3oC,KAAA66E,QAA6B76E,KAAKg8C,SAAStwC,KACzCgE,EAAAA,IAAG,SAACoqB,GAAW,OAAAvuB,EAAKuvE,aAAahhD,KAEjCjuB,EAAAA,IAAG,SAACkvE,GACFxvE,EAAKyvE,cAAkC,IAAlBD,EAAOp6E,UAIhCX,KAAAi7E,WAAaxvE,EAAAA,cAAc,CAACzL,KAAKg8C,SAAUh8C,KAAK46E,qBAAqBlvE,KACnEgE,EAAAA,IAAG,SAAE5D,GAAkB,OAAlBnJ,EAAAmJ,EAAA,GAAG,MAyDZ,OApDE6uE,EAAAz6E,UAAAg7E,UAAA,SAAUz6D,GACRzgB,KAAK46E,mBAAmBn5E,KAAKgf,IAG/Bk6D,EAAAz6E,UAAAi7E,SAAA,SAASC,GACP,OAAOp7E,KAAK46E,mBAAmBlvE,KAC7B4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAE0D,GACH,OACEA,EAAUioE,MACVjoE,EAAUioE,KAAKp2E,KACfm2E,EAAUC,MACVD,EAAUC,KAAKp2E,KACfmO,EAAUioE,KAAKp2E,MAAQm2E,EAAUC,KAAKp2E,QAO9C01E,EAAAz6E,UAAA0gB,UAAA,SAAUm6D,GACR,OAAO/6E,KAAK46E,mBAAmBlvE,KAC7B4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAE0D,OACG6mE,EAAUc,EAAOv1E,KAAI,SACzBlF,GACE,OAAAA,EAAEuT,OACFT,EAAUioE,MACV/6E,EAAEuT,MAAMT,WACR9S,EAAEuT,MAAMT,UAAUioE,MAClB/6E,EAAEuT,MAAMT,UAAUioE,KAAKp2E,MAAQmO,EAAUioE,KAAKp2E,MAElD,OAAO81E,EAAOrrD,QAAQuqD,OASpBU,EAAAz6E,UAAA46E,aAAR,SAAqBhhD,GACnB,OACGA,EAAQ4O,SACR5O,EAAQ4O,OAAO4yC,SAChBxhD,EAAQ4O,OAAO4yC,QAAQ36E,OAAS,EAEzB,GAGMm5B,EAAQ4O,OAAc,QAAEh5B,IAAG,SAAC+nE,GAAK,OAAAllE,EAAAA,GAAG,CAAEa,UAAWqkE,2BAzFnE7vE,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,ooBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC45B,MA6FT4vC,KCjGA,IAAAY,GAAA,WASA,SAAAA,KAmBkC,2BAnBjCpzE,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAF,EACAyiB,GACAvvB,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbu7D,uBAAwB,CACtBt7D,UAAWs7D,OAIjBrlE,GAEFlN,aAAc,CAACuyE,IACfr7D,gBAAiB,CAACq7D,IAClB9xE,QAAS,CAAC8xE,QAEsBY,EA5BlC,iBCmBE,SAAAC,EACYvnC,EACFonB,EACEl2D,GAFAnF,KAAAi0C,sBAAAA,EACFj0C,KAAAq7D,mBAAAA,EACEr7D,KAAAmF,OAAAA,EAPZnF,KAAAy7E,oBAAsB,IAAI79D,EAAAA,iBAAyB,GAEnD5d,KAAAg8C,SAAgCh8C,KAAKi0C,sBAAsB3I,aAsE7D,OA9DEkwC,EAAAt7E,UAAAw7E,sBAAA,WACE17E,KAAKy7E,oBAAoBh6E,OAAOzB,KAAK27E,wBAIvCH,EAAAt7E,UAAA07E,YAAA,WAAA,IAAArwE,EAAAvL,KAEEA,KAAKq7D,mBACFjP,UAAU,qDACV3/C,UAAS,SAACovE,OACHC,EAAgBvwE,EAAKwwE,mBACrBC,EAAazwE,EAAK0wE,cAAcJ,EAAiBC,GACjDI,EAAmB3wE,EAAKowE,sBAC1BK,GAAcE,IAChB3wE,EAAK4wE,mBAAmBH,GACxBI,WAAU,WACF,OAAAF,EAAiB37C,eAAe,CAAE87C,SAAU,YAClD,MAILhvE,eAKGmuE,EAAAt7E,UAAAy7E,oBAAR,WACE,OAAO37E,KAAKmF,OAAOiB,SAASquE,cAAc,uBAIpC+G,EAAAt7E,UAAA67E,iBAAR,WACE,OAAO/7E,KAAKmF,OAAOiB,SAASquE,cAAc,+BAIpC+G,EAAAt7E,UAAAi8E,mBAAR,SAA2BvjB,GAEtBA,EAAIjxD,UAAUirC,SAAS,YACxBgmB,EAAIjxD,UAAUirC,SAAS,YAEvBgmB,EAAI0jB,SAKAd,EAAAt7E,UAAA+7E,cAAR,SAAsB56E,EAAey6E,WACnC,GAAIA,EAAe,KAGXS,EAEFT,EAAcz1E,qBAAqB,UAGvC,IAAwB,IAAA0F,EAAAkB,EAAAtN,MAAMirB,KAAK2xD,IAAWp0D,EAAApc,EAAAtK,QAAA0mB,EAAAjmB,KAAAimB,EAAApc,EAAAtK,OAAE,CAA3C,IAAM+6E,EAASr0D,EAAAhmB,MAClB,GAAIq6E,EAAU12C,UAAUngC,SAAStE,GAC/B,OAAOm7E,2HAzEhB50E,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,mBACVC,SAAA,+rBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC45B,UAFS3d,EAAAA,0BAAoBrmB,EAAAA,aAkFtCy0E,KCvFA,IAAAiB,GAAA,WAMA,SAAAA,KAiBiC,2BAjBhCt0E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA+G,EAAAA,WACAqT,GACAna,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbo8D,sBAAuB,CACrBn8D,UAAWm8D,QAKnBpzE,aAAc,CAACozE,IACf3yE,QAAS,CAAC2yE,IACVl8D,gBAAiB,CAACk8D,QAEaiB,EAvBjC,GCiCA,IAAAC,GAAA,WASE,SAAAA,EACYC,EACAxiD,EACAukB,EACAk+B,EACAx3C,EACArU,GANZ,IAAAxlB,EAAAvL,KACYA,KAAA28E,qBAAAA,EACA38E,KAAAm6B,QAAAA,EACAn6B,KAAA0+C,eAAAA,EACA1+C,KAAA48E,gBAAAA,EACA58E,KAAAolC,gBAAAA,EACAplC,KAAA+wB,OAAAA,EAbF/wB,KAAA68E,gBAAkB,GAIT78E,KAAA88E,mBAAqB,uBACrB98E,KAAA+8E,gBAAkB,oBAW7B/8E,KAAAg9E,eAEJh9E,KAAK28E,qBACN1G,aACAvqE,KAAK4S,EAAAA,OAAM,SAAC2+D,GAAgB,OAAAz9E,OAAOqvB,KAAKouD,GAAct8E,OAAS,KAE1DX,KAAAk9E,iBAEJzxE,EAAAA,cAAc,CAChBzL,KAAKm6B,QAAQ7U,iBAAiB5Z,KAC5BE,EAAAA,qBAAoB,SAAEuxE,EAAGj8E,GAGvB,OAAOi8E,EAAE33D,MAAMvgB,MAAQ/D,EAAEskB,MAAMvgB,OAInCjF,KAAKolC,gBAAgBxkB,YACrB5gB,KAAK48E,gBAAgBh8D,cACpBlV,KACD0xE,EAAAA,MAAM,EAAG,SACTvxE,EAAAA,IAAG,SAAE2Z,OACG63D,EAAW9xE,EAAK+xE,qBACpB93D,EAAMC,OACND,EAAM8iD,aAER/8D,EAAKkqE,OAAO4H,MAaPr9E,KAAAu9E,OAAwC9xE,EAAAA,cAAc,CAC7DzL,KAAKg9E,eACLh9E,KAAKk9E,mBACJxxE,KACD0xE,EAAAA,MAAM,GACNt3D,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAGzC02D,EAAAx8E,UAAAs9E,mBAAA,WACEx9E,KAAK28E,qBAAqB3G,gBAGpB0G,EAAAx8E,UAAAo9E,qBAAR,SACEG,EACAnV,GAEA,MAAO,CACLj2B,MAAOi2B,EAAYj2B,OAASryC,KAAK09E,wBAAwBD,GACzDnrC,SAAUg2B,EAAYh2B,UAAYtyC,KAAK68E,gBACvCxhE,YAAaitD,EAAYjtD,YACzBqB,SAAU4rD,EAAY5rD,WAIlBggE,EAAAx8E,UAAAw9E,wBAAR,SAAgC5xE,OAC9B6xE,EAAA7xE,EAAA6xE,UACA9K,EAAA/mE,EAAA+mE,aACAxgC,EAAAvmC,EAAAumC,MAEA,OAAIA,IAGAwgC,EACK7yE,KAAK88E,mBAAqBjK,EAE/B8K,EACK39E,KAAK+8E,gBAAkBY,OADhC,IAKMjB,EAAAx8E,UAAAu1E,OAAR,SAAe4H,OACPhrC,EAAQgrC,EAAShrC,MACjBurC,EAAe59E,KAAK69E,gBAAgBR,GAE1Cr9E,KAAK28E,qBAAqBlH,OAAOpjC,EAAOurC,IAGlClB,EAAAx8E,UAAA29E,gBAAR,SAAwBR,OAChBlvD,EAAuB,CAC3B9S,YAAagiE,EAAShiE,YACtBi3B,SAAU+qC,EAAS/qC,SACnB51B,SAAU2gE,EAAS3gE,UAMrB,OAFAld,OAAOqvB,KAAKV,GAAQjiB,QAAO,SAAC4N,GAAO,OAACqU,EAAOrU,WAAeqU,EAAOrU,KAE1DqU,GAGTuuD,EAAAx8E,UAAA49E,SAAA,SAASzrC,GACPryC,KAAK+9E,eAAe,CAAE1rC,MAAKA,EAAEh3B,iBAAa7T,KAG5Ck1E,EAAAx8E,UAAA89E,SAAA,SAASC,GACPj+E,KAAK+9E,eAAe,CAAE1iE,YAAa4iE,KAMrCvB,EAAAx8E,UAAAg+E,aAAA,SAAaD,GAAb,IAAA1yE,EAAAvL,KACEA,KAAKm6B,QACF7U,iBACA7Y,UAAS,SAACif,OACHyyD,EAAgB5yE,EAAK+xE,qBACzB5xD,EAAMlG,MAAMC,OACZiG,EAAMlG,MAAM8iD,aAER+U,EAAQj9E,EAAA,GACT+9E,EAAa,CAChB9iE,YAAa4iE,IAEf1yE,EAAKkqE,OAAO4H,KAEbhwE,eAGLqvE,EAAAx8E,UAAAw1C,KAAA,SAAKh5B,GACH1c,KAAK+9E,eAAe,CAAErhE,SAAQA,KAGxBggE,EAAAx8E,UAAA69E,eAAR,SAAuBzV,GACrBtoE,KAAK+wB,OAAOqtD,SAAS,GAAI,CACvB9V,YAAWA,EACX+V,oBAAqB,QACrBC,WAAYt+E,KAAK0+C,sCAzJtB93C,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDA1BxB20B,EAAAA,4BACAtV,EAAAA,sBAPOugC,EAAAA,sBAGP7qB,EAAAA,uBACAC,EAAAA,uBAJuB3J,EAAAA,gSAgCzB,WCvBEosD,KAAO,OACPC,KAAO,sBAGT,SAAAC,IAMEz+E,KAAAsK,UAAYC,EAIZvK,KAAA0+E,WAAa,IAAIvwE,EAAAA,aAwBnB,OAtBE3O,OAAA6H,eAAIo3E,EAAAv+E,UAAA,cAAW,KAAf,WAEE,MAAO,cADkBF,KAAK2+E,SAAStmC,+CAQzC74C,OAAA6H,eAAIo3E,EAAAv+E,UAAA,WAAQ,KAAZ,WACE,MAAkB,SAAdF,KAAKgmD,KACAhmD,KAAKsK,UAAUjH,KACC,SAAdrD,KAAKgmD,KACPhmD,KAAKsK,UAAUhH,UADjB,mCAKTm7E,EAAAv+E,UAAAsmD,WAAA,eACQo4B,EACJ5+E,KAAKgmD,OAAS64B,GAAUN,KAAOM,GAAUL,KAAOK,GAAUN,KAC5Dv+E,KAAK0+E,WAAW5vE,KAAK8vE,wBAhCxBh3E,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,gUACAmJ,gBAAiBC,EAAAA,wBAAwBC,yCAIxCnJ,EAAAA,0BAEAmH,EAAAA,UAyBHsvE,KChDA,IAAAK,GAAA,WA0CE,SAAAA,EACU7uD,EACA8uD,EACDC,GAFCh/E,KAAAiwB,kBAAAA,EACAjwB,KAAA++E,4BAAAA,EACD/+E,KAAAg/E,aAAAA,EA/BDh/E,KAAA4W,aAAe,IAAIxM,EAAAA,aAI3BpK,KAAAu9E,OAAwCv9E,KAAK++E,4BAC1CxB,OAEHv9E,KAAAi/E,UAAY,IAAIrhE,EAAAA,gBAA2BihE,GAAUN,MACrDv+E,KAAA6+E,UAAYA,GAyDd,OA/BEC,EAAA5+E,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKk/E,iBAAmBl/E,KAAKg/E,aAAaj8D,KAAKw3D,eAAeC,OAE9Dx6E,KAAK++E,4BAA4BvB,qBAEjCx9E,KAAK4W,aAAapL,IAChBxL,KAAKiwB,kBAAkBE,cAAczkB,KAAKC,EAAAA,KAAK,IAAIc,UAAS,SAAC3E,GAC3DyD,EAAK0zE,UAAUx9E,KACA,4BAAbqG,EACI+2E,GAAUN,KACVM,GAAUL,UAMtBM,EAAA5+E,UAAA89E,SAAA,SAASC,GACPj+E,KAAK++E,4BAA4Bf,SAASC,IAG5Ca,EAAA5+E,UAAAuc,SAAA,SAASC,GACP1c,KAAK++E,4BAA4BrpC,KAAKh5B,IAGxCoiE,EAAA5+E,UAAAi/E,YAAA,SAAYn5B,GACVhmD,KAAKi/E,UAAUx9E,KAAKukD,IAGtB84B,EAAA5+E,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,mCApErBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,8oIAPO0lB,UAEAkvD,UACA15D,MAwET87D,EA/EA,qBCmDE,SAAAM,EACUL,EACArF,GADA15E,KAAA++E,4BAAAA,EACA/+E,KAAA05E,IAAAA,EAzCF15E,KAAA4W,aAAe,IAAIxM,EAAAA,aAgC3BpK,KAAA6+E,UAAYA,GACZ7+E,KAAAq/E,gBAAiB,EACjBr/E,KAAAs/E,WAAY,EACZt/E,KAAAu/E,eAAgB,EAChBv/E,KAAAw/E,YAAa,EACbx/E,KAAAg7C,SAAU,EAwHZ,OA3JEx7C,OAAA6H,eACI+3E,EAAAl/E,UAAA,YAAS,KADb,SACcu/E,GACZz/E,KAAK0/E,2BAA2BD,oCAIlCjgF,OAAA6H,eACI+3E,EAAAl/E,UAAA,WAAQ,KADZ,SACay/E,GACX3/E,KAAK4/E,yBAAyBD,oCAIhCngF,OAAA6H,eACI+3E,EAAAl/E,UAAA,cAAW,KADf,SACgB2/E,GACd7/E,KAAK6/E,cAAgBA,EAGjB7/E,KAAK2+E,SACP3+E,KAAK8/E,4BAIL9/E,KAAK2+E,SAAWkB,mCAoBpBT,EAAAl/E,UAAA6/E,WAAA,SAAW9B,GACTj+E,KAAKq/E,gBAAiB,EACtBr/E,KAAK05E,IAAIhiD,eACT13B,KAAK++E,4BAA4Bb,aAAaD,IAGhDmB,EAAAl/E,UAAA8/E,aAAA,SAAa/B,GACXj+E,KAAKu/E,eAAgB,EACrBv/E,KAAK+/E,WAAW9B,IAGlBmB,EAAAl/E,UAAA+/E,YAAA,WACEluE,OAAOmuE,OAAO,EAAG,IAGXd,EAAAl/E,UAAAw/E,2BAAR,SAAmCV,OAC3BmB,EAAWnB,EAAaj8D,KAAKw3D,eAAeG,eAC5C0F,EAAqBpB,EAAaj8D,KAAKw3D,eAAeE,aAI5Dz6E,KAAKy6E,aAAe0F,EAAW,EAAIC,GAG7BhB,EAAAl/E,UAAA0/E,yBAAR,SAAiCD,GAC3B3/E,KAAKqgF,WAAWV,KAIhB3/E,KAAKq/E,eACPr/E,KAAKsgF,MAAKlgF,EAAA,GACLu/E,EAAU,CACb9d,SAAU7hE,KAAKsgF,MAAMze,SAAS7+D,OAAO28E,EAAW9d,aAGlD7hE,KAAKsgF,MAAQX,EACb3/E,KAAK41E,YAAc51E,KAAKy6E,cAE1Bz6E,KAAKugF,gBACLvgF,KAAK05E,IAAIhiD,iBAGH0nD,EAAAl/E,UAAA4/E,0BAAR,WACE9/E,KAAKigF,cACLjgF,KAAKs/E,WAAY,EACjBt/E,KAAK++E,4BAA4Bb,aAAa,IAIxCkB,EAAAl/E,UAAAqgF,cAAR,WACEvgF,KAAKg7C,SAAWh7C,KAAKsgF,MAAMze,UAA2C,IAA/B7hE,KAAKsgF,MAAMze,SAASlhE,OAE3DX,KAAKw/E,WACHx/E,KAAKsgF,MAAMllE,WAAWC,cACtBrb,KAAKsgF,MAAMllE,WAAWK,WAAa,EAErCzb,KAAKu/E,cACHv/E,KAAKy6E,cACiB,IAAtBz6E,KAAKy6E,cACLz6E,KAAKsgF,MAAMze,SAASlhE,QAAUX,KAAK41E,YAGjC51E,KAAKu/E,gBACPv/E,KAAK41E,YAAc51E,KAAKsgF,MAAMze,SAASlhE,OAASX,KAAKy6E,cAKnDz6E,KAAK2+E,WAAa3+E,KAAK6/E,gBACzB7/E,KAAK2+E,SAAW3+E,KAAK6/E,eAGvB7/E,KAAKs/E,WAAY,EACjBt/E,KAAKq/E,gBAAiB,GAQhBD,EAAAl/E,UAAAmgF,WAAR,SAAmBV,GACjB,IACG3/E,KAAKs/E,WACNt/E,KAAKsgF,OACLtgF,KAAKsgF,MAAMz4C,aACX83C,EAAW93C,aACX7nC,KAAKsgF,MAAMz4C,YAAYlnC,OAAS,GAChCg/E,EAAW93C,YAAYlnC,OAAS,GAE5BX,KAAKsgF,MAAMz4C,YAAYlnC,SAAWg/E,EAAW93C,YAAYlnC,OAC3D,IAAK,IAAIH,EAAI,EAAGA,EAAIR,KAAKsgF,MAAMz4C,YAAYlnC,OAAQH,IACjD,GACER,KAAKsgF,MAAMz4C,YAAYrnC,GAAGggF,YACxBb,EAAW93C,YAAYrnC,GAAGggF,WAC5BxgF,KAAKsgF,MAAMz4C,YAAYrnC,GAAGigF,iBACxBd,EAAW93C,YAAYrnC,GAAGigF,gBAC5BzgF,KAAKsgF,MAAMz4C,YAAYrnC,GAAGkgF,YAAYruC,MAAMlwC,QAC1Cw9E,EAAW93C,YAAYrnC,GAAGkgF,YAAYruC,MAAMlwC,OAC9CnC,KAAKsgF,MAAMllE,WAAWC,cACpBskE,EAAWvkE,WAAWC,YAExB,OAAO,EAKf,OAAO,GAGT+jE,EAAAl/E,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,mCAhKrBzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,6sFALO40E,UAJ6Bj9C,EAAAA,wDAcnCz3B,EAAAA,MAAKnB,KAAA,CAAC,kCAMNmB,EAAAA,MAAKnB,KAAA,CAAC,8BAMNmB,EAAAA,MAAKnB,KAAA,CAAC,oBA+ITu4E,KCzKA,IAAAuB,GAAA,WAkCE,SAAAA,EACU12E,EACAy0C,EACAqgC,GAFA/+E,KAAAiK,aAAAA,EACAjK,KAAA0+C,eAAAA,EACA1+C,KAAA++E,4BAAAA,EAdV/+E,KAAAsK,UAAYC,EAIZvK,KAAA4gF,YAAc,EAGN5gF,KAAA6gF,gBAAkB,IAAIt2D,IAS5BvqB,KAAK8gF,mBAAqB,IAAI9sD,IAC9Bh0B,KAAK+gF,WAAa,IAAIC,EAAAA,qBA2E1B,OAxEEL,EAAAzgF,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKihF,IAAMjhF,KAAK0+C,eAAej5B,OAAOhZ,UAAS,SAACgZ,GAC9Cla,EAAK21E,qBAAuBz7D,EAAOotD,cAAgBptD,EAAOk4D,YAG5D39E,KAAKmhF,cAAgBnhF,KAAK++E,4BAA4BxB,OAAO7xE,KAC3DG,EAAAA,IAAG,SAACoxE,GACEA,EAAamE,QACfnE,EAAamE,OAAOl1E,QAAO,SAACmE,GAC1B9E,EAAKu1E,mBAAmB1sE,IAAI/D,EAAGggB,MAAM,QAM7CrwB,KAAKqhF,eAAiBrhF,KAAKmhF,cAAcz1E,KACvCgE,EAAAA,IAAG,SAACutE,GACF,OAAOA,EAAamE,OAChBnE,EAAamE,OAAO9iE,OAAM,SAACgjE,GAAS,OAAAA,EAAMC,UAC1C,OAKVZ,EAAAzgF,UAAAshF,gBAAA,SAAgBn4E,GACdrJ,KAAKiK,aAAab,KAAKC,EAAS,CAAEo4E,eAAgB,uBAGpDd,EAAAzgF,UAAAwhF,YAAA,SAAYrvC,GACVryC,KAAK++E,4BAA4BjB,SAC/B99E,KAAK+gF,WAAWY,YAAYtvC,KAIhCsuC,EAAAzgF,UAAA0hF,SAAA,SAASC,GACP7hF,KAAK8hF,yBAAyBD,GAAW,IAG3ClB,EAAAzgF,UAAA6hF,SAAA,SAASF,GACP7hF,KAAK8hF,yBAAyBD,GAAW,IAGnClB,EAAAzgF,UAAA4hF,yBAAR,SAAiCD,EAAmBG,GAClDhiF,KAAK8gF,mBAAmB1sE,IAAIytE,EAAWG,IAGzCrB,EAAAzgF,UAAA+hF,iBAAA,SAAiBJ,GACf,OAAO7hF,KAAK6gF,gBAAgBqB,IAAIL,IAGlClB,EAAAzgF,UAAAiiF,YAAA,SAAYN,GACN7hF,KAAK6gF,gBAAgBqB,IAAIL,GAC3B7hF,KAAK6gF,gBAAgB9xE,OAAO8yE,GAE5B7hF,KAAK6gF,gBAAgBr1E,IAAIq2E,IAI7BlB,EAAAzgF,UAAAkiF,sBAAA,SAAsBd,GACpB,OAAOA,EAAMe,OAAO9xC,MAClB,EACAvwC,KAAK8gF,mBAAmB1jE,IAAIkkE,EAAMjxD,MAC9BixD,EAAMe,OAAO1hF,OACbX,KAAK4gF,cAIbD,EAAAzgF,UAAAkN,YAAA,WACMpN,KAAKihF,KACPjhF,KAAKihF,IAAI5zE,mCAjGdzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,8BACVC,SAAA,29MACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlClI,SALAy9C,EAAAA,sBAMAg2B,MAsGTiE,EAnHA,GCAA,IAAA2B,GAAA,WAEA,SAAAA,KAOA,2BAPC16E,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,0uCACAmJ,gBAAiBC,EAAAA,wBAAwBC,4CAGxCnJ,EAAAA,SACHs6E,EATA,GCAA,IAAAC,GAAA,WAEA,SAAAA,KAOA,2BAPC36E,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,4nDACAmJ,gBAAiBC,EAAAA,wBAAwBC,4CAGxCnJ,EAAAA,SACHu6E,EATA,GCAA,IAAAC,GAAA,WAYE,SAAAA,EAAoBvuC,GAAAj0C,KAAAi0C,sBAAAA,EAEpBj0C,KAAAyiF,SAAyB,GACzBziF,KAAA0iF,YAAcC,EAAAA,YAgBhB,OAbEH,EAAAtiF,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKg8C,SAAWh8C,KAAKi0C,sBAAsB3I,aAAa5/B,KACtD4S,EAAAA,OAAM,SAACwb,GAAW,SAAGA,IAAWA,EAAQ8oD,eACxCh3E,EAAAA,uBACAC,EAAAA,IAAG,SAACiuB,GACFA,EAAQ8oD,YAAY12E,QAAO,SAAC22E,GACtBA,GAAUA,EAAOH,cACnBn3E,EAAKk3E,SAASI,EAAOH,aAAeG,6BAnB/Cj7E,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,sBACVC,SAAA,mqBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlC45B,MA4BTy3C,EA/BA,GCAA,IAAAM,GAAA,WAmBE,SAAAA,EACU19E,EACA4lC,EACA5lB,GAFAplB,KAAAoF,OAAAA,EACApF,KAAAgrC,eAAAA,EACAhrC,KAAAolB,eAAAA,EAGVplB,KAAA+iF,iBAAmBC,EAAAA,iBAsCrB,OAjCEF,EAAA5iF,UAAA+iF,sBAAA,SAAsBC,OACdl3D,EAAMk3D,EAAW19E,KAAI,SAACk3D,GAAK,OAAAA,EAAEymB,YAAcH,EAAAA,iBAAiBI,QAClE,OAAOp3D,EAAMA,EAAI7pB,MAAQ,IAG3B2gF,EAAA5iF,UAAAmjF,uBAAA,SACEC,OAEMH,EAAYG,EAAwB99E,KAAI,SAACib,GAAQ,OAAAA,EAAK8jB,QAC5D,OAAO4+C,EACH,GAAGnjF,KAAKoF,OAAOmP,QAAQE,IAAID,QAAU2uE,EAAU5+C,MAAMt/B,IACrD,IAGN69E,EAAA5iF,UAAAqjF,YAAA,SAAYtwE,GAAZ,IAAA1H,EAAAvL,KAiBE,OAhBIiT,GACFjT,KAAKgrC,eACF5tB,IAAInK,EAAMm4B,EAAAA,aAAa9nC,MACvBoI,KAGC4S,EAAAA,OAAO3T,SACPgB,EAAAA,KAAK,IAENc,UAAS,SAAEqtB,GACVvuB,EAAK6Z,eAAeknB,GAAG,CACrBC,QAAS,UACT9mB,OAAQqU,MAIT,0BAhDVlyB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,4BACVC,SAAA,+zBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAdzCuD,EAAAA,iBAKA8mB,EAAAA,sBAEArV,EAAAA,oDAkBCne,EAAAA,SAoCH86E,EA/DA,GCAA,IAAAU,GAAA,WAMA,SAAAA,KAMyC,2BANxCr7E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAciN,EAAAA,aAAcC,EAAAA,UAAWnG,EAAAA,YACjDjH,aAAc,CAAC06E,IACfxjE,gBAAiB,CAACwjE,IAClBj6E,QAAS,CAACi6E,QAE6BU,EAZzC,GCAAC,GAAA,WAkBE,SAAAA,EACUz4C,EACA5lB,GADAplB,KAAAgrC,eAAAA,EACAhrC,KAAAolB,eAAAA,EAgCZ,OAvBEq+D,EAAAvjF,UAAAwjF,WAAA,SAAWzwE,GAAX,IAAA1H,EAAAvL,KAiBE,OAhBIiT,GACFjT,KAAKgrC,eACF5tB,IAAInK,EAAMm4B,EAAAA,aAAa9nC,MACvBoI,KAGC4S,EAAAA,OAAO3T,SACPgB,EAAAA,KAAK,IAENc,UAAS,SAAEqtB,GACVvuB,EAAK6Z,eAAeknB,GAAG,CACrBC,QAAS,UACT9mB,OAAQqU,MAIT,MAET2pD,EAAAvjF,UAAA+iF,sBAAA,SAAsBC,OACdl3D,EAAMk3D,EAAW19E,KAAI,SAACk3D,GAAK,OAAAA,EAAEymB,YAAcH,EAAAA,iBAAiBW,OAClE,OAAO33D,EAAMA,EAAI7pB,MAAQ,wBAtC5ByF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,2BACVC,SAAA,6qBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDARzCqqB,EAAAA,sBAJArV,EAAAA,mDAoBCne,EAAAA,wBAGAA,EAAAA,SA0BHy7E,EApDA,GCAA,IAAAG,GAAA,WAMA,SAAAA,KAMwC,2BANvCz7E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAciN,EAAAA,aAAcC,EAAAA,UAAWnG,EAAAA,YACjDjH,aAAc,CAACq7E,IACfnkE,gBAAiB,CAACmkE,IAClB56E,QAAS,CAAC46E,QAE4BG,EAZxC,GCAAC,GAAA,WAeE,SAAAA,EAAoBz+D,GAAAplB,KAAAolB,eAAAA,EAqBtB,OAbEy+D,EAAA3jF,UAAA4jF,YAAA,SAAY7wE,EAAcod,GAOxB,OANIpd,GACFjT,KAAKolB,eAAeknB,GAAG,CACrBC,QAAS,UACT9mB,OAAQ,CAAExS,KAAIA,EAAEod,KAAIA,KAGjB,MAETwzD,EAAA3jF,UAAA+iF,sBAAA,SAAsBC,OACdl3D,EAAMk3D,EAAW19E,KAAI,SAACk3D,GAAK,OAAAA,EAAEymB,YAAcH,EAAAA,iBAAiBe,QAClE,OAAO/3D,EAAMA,EAAI7pB,MAAQ,wBAzB5ByF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,4BACVC,SAAA,ygBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDARzCgV,EAAAA,mDAaCne,EAAAA,wBAGAA,EAAAA,SAgBH67E,EApCA,GCAA,IAAAG,GAAA,WAMA,SAAAA,KAMyC,2BANxC77E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAciN,EAAAA,aAAcC,EAAAA,UAAWnG,EAAAA,YACjDjH,aAAc,CAACy7E,IACfvkE,gBAAiB,CAACukE,IAClBh7E,QAAS,CAACg7E,QAE6BG,EAZzC,GCAAC,GAAA,WAqBE,SAAAA,EAAoB7+E,GAAApF,KAAAoF,OAAAA,EAKpBpF,KAAAkkF,aAA0C,GAkC5C,OAhCED,EAAA/jF,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKyiF,SAASv2E,QAAO,SAACi4E,GACpB54E,EAAK24E,aAAaC,EAAQlxE,MAAQ1H,EAAK64E,eACrCD,EAAQb,4BAKdW,EAAA/jF,UAAAmjF,uBAAA,SACEC,OAEMlI,EAAYkI,EAAwB99E,KAAI,SAC5Cib,GAAQ,OAAAA,EAAK0iE,YAAcH,EAAAA,iBAAiBqB,YAE9C,OAAOjJ,EACH,GAAGp7E,KAAKoF,OAAOmP,QAAQE,IAAID,QAAU4mE,EAAU72C,MAAMt/B,IACrD,IAGEg/E,EAAA/jF,UAAAkkF,eAAR,SACEd,OAEMgB,EAAiBhB,EAAwB99E,KAAI,SACjDib,GAAQ,OAAAA,EAAK0iE,YAAcH,EAAAA,iBAAiBuB,kBAExCC,EAAWF,EACbhB,EAAwB99E,KAAI,SAC1Bib,GAAQ,OAAAA,EAAK0iE,YAAcmB,EAAeniF,QAE5C,KACJ,OAAOqiF,EAAWA,EAASriF,MAAQ,wBA5CtCyF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,6PAEAmJ,gBAAiBC,EAAAA,wBAAwBC,0JAVzCuD,EAAAA,+CAeC1M,EAAAA,SAqCHi8E,EA5DA,GCAA,IAAAQ,GAAA,WAMA,SAAAA,KAMsC,2BANrCt8E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACC,EAAAA,aAAciN,EAAAA,aAAcC,EAAAA,UAAWnG,EAAAA,YACjDjH,aAAc,CAAC67E,IACf3kE,gBAAiB,CAAC2kE,IAClBp7E,QAAS,CAACo7E,QAE0BQ,EAZtC,GCCAC,GAAA,WAeE,SAAAA,EACU15C,EACA5lB,GADAplB,KAAAgrC,eAAAA,EACAhrC,KAAAolB,eAAAA,SAGVs/D,EAAAxkF,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KACE,OAAOA,KAAKolB,eAAeE,iBAAiB5Z,KAC1CgE,EAAAA,IAAG,SAAC8V,GAAS,OAAAA,EAAMm/D,UAAUl/D,OAAO+lB,cACpCjtB,EAAAA,UAAS,SAAEitB,GAET,OAAKA,EAIEjgC,EAAKy/B,eAAe5tB,IAAIouB,EAAaJ,EAAAA,aAAaw5C,UAAUl5E,KACjE4S,EAAAA,OAAO3T,SACP+E,EAAAA,IAAG,SAAEoqB,GACH,GAAKA,EAAQ+qD,YAkBX,OAAO,MAjBDV,EAAU54E,EAAKu5E,YAAYhrD,EAAQirD,gBAezC,OAZAx5E,EAAKy/B,eACF5tB,IAAI+mE,EAAQlxE,KAAMm4B,EAAAA,aAAa9nC,MAC/BoI,KACC4S,EAAAA,OAAO3T,SACPgB,EAAAA,KAAK,IAENc,UAAS,SAAEu4E,GACVz5E,EAAK6Z,eAAeknB,GAAG,CACrBC,QAAS,UACT9mB,OAAQu/D,OAGP,KAtBJzyE,EAAAA,IAAG,OAgClBmyE,EAAAxkF,UAAA4kF,YAAA,SAAYrC,OACJx4B,EAA2Bw4B,EAASnkE,OAAM,SAAC6lE,GAC/C,SAAOA,EAAQl7C,QAASk7C,EAAQl7C,MAAMuL,aAAa2vC,IAErD,OAAQl6B,EAAQtpD,QAAU8hF,EAAS9hF,OAAS8hF,EAAS,GAAKx4B,EAAQ,wBAnDrErjD,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPZ00B,EAAAA,sBAEArV,EAAAA,oLAPF,GCDA,IAAA8+D,GAAA,WAiBA,SAAAA,KAuBoC,2BAvBnC98E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAC,EAAAA,UACAjN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb8lE,gCAAiC,CAC/B7lE,UAAWmjE,GACXl4D,OAAQ,CAACo6D,QAIfr1E,EAAAA,WACAm0E,GACAI,GACAI,GACAS,IAEFr8E,aAAc,CAACo6E,IACfljE,gBAAiB,CAACkjE,IAClB35E,QAAS,CAACo7E,QAEwBgB,EAxCpC,GCAAE,GAAA,WA+BA,SAAAA,KAqDgC,2BArD/Bh9E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,IACvBD,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbgmE,wBAAyB,CACvB/lE,UAAWy/D,IAEbuG,qBAAsB,CACpBhmE,UAAWy/D,IAEbwG,2BAA4B,CAC1BjmE,UAAWy/D,IAEbyG,2BAA4B,CAC1BlmE,UAAWshE,OAIjBprE,EAAAA,aACAF,EACA2kC,GACAx/B,EACAmC,GACAnH,EAAAA,UACAnG,EAAAA,WACAqT,GACAxa,EACA4U,GACA0oE,EAAAA,qBACA7iE,GACAsiE,GACA/7D,EAAAA,sBAEF9gB,aAAc,CACZ02E,GACA6B,GACA4B,GACAD,GACA7D,GACAW,IAEFv2E,QAAS,CACPi2E,GACA6B,GACA4B,GACAD,GACA7D,GACAW,IAEF9/D,gBAAiB,CAACw/D,GAAsB6B,QAEVwE,EApFhC,OCCEM,MAAQ,YACRC,MAAQ,YACRC,MAAQ,YACRC,QAAU,eCJZC,GAAA,WAgBE,SAAAA,EAAsB5xC,GAAAj0C,KAAAi0C,sBAAAA,EAJtBj0C,KAAA8lF,QAAUC,GAEV/lF,KAAAg8C,SAAgCh8C,KAAKi0C,sBAAsB3I,aAG7D,2BAXC1jC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,yxBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDANlC45B,MAcT86C,EAjBA,GCAA,IAAAG,GAAA,WAMA,SAAAA,KAiBmC,2BAjBlC79E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAwvB,GACAzoB,EAAAA,WACA9G,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbymE,wBAAyB,CACvBxmE,UAAWwmE,QAKnBz9E,aAAc,CAACy9E,IACfvmE,gBAAiB,CAACumE,IAClBh9E,QAAS,CAACg9E,QAEuBG,EAvBnC,GCAAC,GAAA,WAeE,SAAAA,EAAsBhyC,GAAAj0C,KAAAi0C,sBAAAA,EAJtBj0C,KAAAg8C,SAAgCh8C,KAAKi0C,sBAAsB3I,WACzDF,EAAAA,aAAa86C,YAOjB,OADED,EAAA/lF,UAAA4K,SAAA,iCAbDlD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,2lBACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC45B,MAgBTk7C,EAnBA,GCAA,IAAAE,GAAA,WAMA,SAAAA,KAgBsC,2BAhBrCh+E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA+G,EAAAA,WACA9G,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbgnE,yBAA0B,CACxB/mE,UAAW4mE,QAKnB79E,aAAc,CAAC69E,IACf3mE,gBAAiB,CAAC2mE,IAClBp9E,QAAS,CAACo9E,QAE0BE,EAtBtC,GCAAE,GAAA,WAaE,SAAAA,EAAsBpyC,GAAAj0C,KAAAi0C,sBAAAA,EAKxB,OAHEoyC,EAAAnmF,UAAA4K,SAAA,WACE9K,KAAKg8C,SAAWh8C,KAAKi0C,sBAAsB3I,kCAX9C1jC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,4IACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDALlC45B,MAeTs7C,EAlBA,GCAA,IAAAC,GAAA,WAMA,SAAAA,KAesC,2BAfrCn+E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbinE,2BAA4B,CAC1BhnE,UAAWgnE,QAKnBj+E,aAAc,CAACi+E,IACf/mE,gBAAiB,CAAC+mE,IAClBx9E,QAAS,CAACw9E,QAE0BC,EArBtC,GCAAC,GAAA,WAuCE,SAAAA,EACYj9C,EACA2K,EACFvD,GAHV,IAAAnlC,EAAAvL,KACYA,KAAAspC,cAAAA,EACAtpC,KAAAi0C,sBAAAA,EACFj0C,KAAA0wC,GAAAA,EAvBV1wC,KAAAwmF,iBAAkB,EAGlBxmF,KAAAymF,oBAAsB,EAItBzmF,KAAAg8C,SAAgCh8C,KAAKi0C,sBAAsB3I,aAE3DtrC,KAAA0mF,SAAiC1mF,KAAKg8C,SAAStwC,KAC7C4S,EAAAA,OAAM,SAAC1e,GAAK,QAAEA,IACd8P,EAAAA,IAAG,SAAC9P,GAAK,OAAAA,EAAEqT,OACXrH,EAAAA,uBACA2S,EAAAA,UAAS,SAACitB,GAAe,OAAAjgC,EAAK+9B,cAAcC,iBAAiBiC,KAC7D3/B,EAAAA,IAAG,WACDN,EAAKo7E,kBACLp7E,EAAKq7E,aAAer7E,EAAKk7E,uBA8C/B,OApCEF,EAAArmF,UAAA2mF,oBAAA,WACE7mF,KAAKwmF,iBAAkB,GAGzBD,EAAArmF,UAAA4mF,kBAAA,WACE9mF,KAAKwmF,iBAAkB,EACvBxmF,KAAK2mF,mBAGPJ,EAAArmF,UAAA6mF,UAAA,SAAU1kE,GACRriB,KAAKgnF,WAAW91C,SAAS7uB,OAAOowB,SAASpwB,IAG3CkkE,EAAArmF,UAAA+mF,aAAA,SAAantD,OACLotD,EAAqBlnF,KAAKgnF,WAAW91C,SACrCvH,EAAiB,CACrBiB,SAAUs8C,EAAmB5iD,MAAMniC,MACnC+nC,QAASg9C,EAAmBh9C,QAAQ/nC,MACpCkgB,OAAQ6kE,EAAmB7kE,OAAOlgB,MAClCglF,MAAOD,EAAmBE,aAAajlF,OAGzCnC,KAAKspC,cAAc99B,IAAIsuB,EAAQ7mB,KAAM02B,GAErC3pC,KAAKwmF,iBAAkB,EACvBxmF,KAAK2mF,mBAGCJ,EAAArmF,UAAAymF,gBAAR,WACE3mF,KAAKgnF,WAAahnF,KAAK0wC,GAAGI,MAAM,CAC9BxM,MAAO,CAAC,GAAIyM,EAAAA,WAAWC,UACvB9G,QAAS,CAAC,GAAI6G,EAAAA,WAAWC,UACzB3uB,OAAQ,CAAC,EAAG,CAAC0uB,EAAAA,WAAWp6B,IAAI,GAAIo6B,EAAAA,WAAWz5B,IAAI,KAC/C8vE,aAAc,0BAjEnBx/E,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qBACVC,SAAA,mmIACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAdzBuqB,EAAAA,4BASTqP,UAVAqG,EAAAA,eAgFTm1C,EAjFA,GCAA,IAAAc,GAAA,WAQA,SAAAA,KAmBmC,2BAnBlCl/E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACAD,EAAAA,YACApL,EAAAA,WACAqT,GACAna,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbkoE,2BAA4B,CAC1BjoE,UAAWknE,QAKnBn+E,aAAc,CAACm+E,IACfjnE,gBAAiB,CAACinE,IAClB19E,QAAS,CAAC09E,QAEuBc,EA3BnC,GCAAE,GAAA,WAKA,SAAAA,KAOgC,2BAP/Bp/E,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACP89E,GACAG,GACAe,QAG4BE,EAZhC,GCAAC,GAAA,WAaE,SAAAA,EACUv9E,EACAw9E,GADAznF,KAAAiK,aAAAA,EACAjK,KAAAynF,iBAAAA,EAJVznF,KAAA0nF,aAAyC,GAsB3C,OAfEF,EAAAtnF,UAAA4J,MAAA,WACE9J,KAAKiK,aAAaP,sBAGpB89E,EAAAtnF,UAAAkN,YAAA,WAAA,IAAA7B,EAAAvL,KACMA,KAAK2nF,mBACP3nF,KAAK2nF,kBACFl7E,UAAS,SAAC6qC,GACLA,GACF/rC,EAAKk8E,iBAAiBG,0BAGzBv6E,mCAzBRzF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,+BACVC,SAAA,kxFAJOmB,SAFwBozB,EAAAA,wBAgCjCmrD,EAjCA,qBCyCE,SAAAK,EACUh8C,EACAoI,EACAj3B,EACAq+C,EACAosB,EACAx9E,EACA69E,GANA9nF,KAAA6rC,YAAAA,EACA7rC,KAAAi0C,sBAAAA,EACAj0C,KAAAgd,qBAAAA,EACAhd,KAAAq7D,mBAAAA,EACAr7D,KAAAynF,iBAAAA,EACAznF,KAAAiK,aAAAA,EACAjK,KAAA8nF,wBAAAA,EAdV9nF,KAAA+nF,WAAY,EAEJ/nF,KAAA0nF,aAAyC,GAGzC1nF,KAAAmK,cAAgB,IAAIC,EAAAA,aA+H9B,OAnHEy9E,EAAA3nF,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAKgoF,YAAcv8E,EAAAA,cAAc,CAC/BzL,KAAKi0C,sBAAsB3I,aAAa5/B,KAAK4S,EAAAA,OAAO3T,UACpD3K,KAAK6rC,YAAYgE,iBAChBnkC,KACDG,EAAAA,IAAG,SAAEC,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACguB,EAAA/tB,EAAA,GAAS4hC,EAAA5hC,EAAA,GACbR,EAAKigC,YAAc1R,EAAQ7mB,KACvB06B,IAAW8I,EAAAA,wBACblrC,EAAKw8E,WAAY,EACjBx8E,EAAKu8E,wBAAwBrZ,kBAC7BljE,EAAKk8E,iBAAiBlX,qBACpB,KACA,KACA,KACAz2C,EAAQ7mB,KACRg1E,EAAAA,iBAAiBC,kBAIvBx4E,EAAAA,IAAG,SACA5D,OAACguB,EAADn3B,EAAAmJ,EAAA,GAAC,GACA,QAAEguB,EAAQmP,OAA4C,eAAnCnP,EAAQmP,MAAMC,oBAIvClpC,KAAKmoF,qBAAuBnoF,KAAKynF,iBAC9BW,sBACA18E,KACCgE,EAAAA,IAAG,SAACigE,GAAa,QAAEA,EAAU1lB,SAAwC,IAA7B0lB,EAAU1lB,QAAQtpD,UAE9DX,KAAK2nF,kBAAoB3nF,KAAKynF,iBAAiBY,+BAC/CroF,KAAKsoF,yBAA2BtoF,KAAKynF,iBAAiBzX,iCACtDhwE,KAAKuoF,cAAgBvoF,KAAK8nF,wBACvBU,wBACA98E,KACCG,EAAAA,IAAG,SAAC48E,GAAS,OAACl9E,EAAKm8E,aAAee,IAClC/4E,EAAAA,IAAG,SAAC+4E,GAAS,OAAAA,EAAM9nF,OAAS,KAGhCX,KAAKmK,cAAcqB,IACjBxL,KAAKynF,iBAAiBiB,6BAA6Bj8E,UAAS,SAAC3J,GACvDA,GACFyI,EAAKo9E,2BAIX3oF,KAAKmK,cAAcqB,IACjBxL,KAAKynF,iBACFmB,iCACAn8E,UAAS,SAAC6qC,GACLA,GACF/rC,EAAKs9E,gCAMfhB,EAAA3nF,UAAAuM,UAAA,WACEzM,KAAKgpB,aACLhpB,KAAKynF,iBAAiBqB,mBACpB9oF,KAAKwrC,YACLy8C,EAAAA,iBAAiBC,gBAIrBL,EAAA3nF,UAAAmN,YAAA,WACErN,KAAKynF,iBAAiBpX,qBACpB,CACEv2C,QAAS,CACP7mB,KAAMjT,KAAKwrC,aAEb8kC,qBAAsB,CACpB,CACEyY,aAAcd,EAAAA,iBAAiBC,kBAIrC,IAIIL,EAAA3nF,UAAA2oF,0BAAR,WAAA,IAAAt9E,EAAAvL,KACEA,KAAKmK,cAAcqB,IACjBxL,KAAKq7D,mBACFjP,UAAU,wCACV1gD,KAAK2gB,EAAAA,SACL5f,UAAS,SAACw+C,GACT,OAAA1/C,EAAKyR,qBAAqBxR,IAAIy/C,EAAM/tC,EAAAA,kBAAkB8rE,kBAG5DhpF,KAAKynF,iBAAiBhX,4BAGhBoX,EAAA3nF,UAAAyoF,sBAAR,WACE3oF,KAAKiK,aAAaP,qBAClB1J,KAAKynF,iBAAiBG,yBAGhBC,EAAA3nF,UAAA8oB,WAAR,eACQ8rB,EAAgB90C,KAAKiK,aAAab,KACtCo+E,GACA,CACE35E,UAAU,EACVC,KAAM,OAERknC,kBACFF,EAAc6yC,kBAAoB3nF,KAAK2nF,kBACvC7yC,EAAc4yC,aAAe1nF,KAAK0nF,cAGpCG,EAAA3nF,UAAAkN,YAAA,WACEpN,KAAKmK,cAAckD,cACnBrN,KAAKynF,iBAAiBjX,wBACtBxwE,KAAK8nF,wBAAwBmB,wCA5IhCrhF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,kvEACAmJ,gBAAiBC,EAAAA,wBAAwBC,oDAlBzC6pB,EAAAA,mBAWO+P,UANPxtB,EAAAA,4BACA6P,EAAAA,0BARAiP,EAAAA,4BAcOpzB,SAbPmzB,EAAAA,qCA8JFyrD,KCtKA,IAAAqB,GAAA,WAaA,SAAAA,KAsBsC,2BAtBrC/gF,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAACy/E,GAA4BL,IAC3Cn/E,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbyoE,2BAA4B,CAC1BxoE,UAAWwoE,OAIjBtyE,EAAAA,aACAlG,EAAAA,WACAyN,GACAtH,EAAAA,WAEF8J,gBAAiB,CACfuoE,GACAL,IAEF3+E,QAAS,CAACg/E,GAA4BL,QAEF0B,EAnCtC,GCKAC,GAAA,WASE,SAAAA,EAAoBC,GAAAppF,KAAAopF,iBAAAA,EAFpBppF,KAAAqpF,YAAsB,KA0CxB,OAtCEF,EAAAjpF,UAAA+U,YAAA,SAAY8hB,GACV,GAAIA,EAAQoG,UAAYn9B,KAAKm9B,SAAU,KAC/BmsD,EAActpF,KAAKupF,iBACzBvpF,KAAKqpF,YAAc,GAEnB,IAAK,IAAI7oF,EAAI,EAAGA,EAlBG,EAkBmBA,IAAK,KACnC8pC,EAAO,IAAIC,KAAK++C,EAAYE,WAClCl/C,EAAKm/C,QAAQn/C,EAAKK,UAAYnqC,GAC9BR,KAAKqpF,YAAYhnF,KAAKioC,MAS5B6+C,EAAAjpF,UAAAwpF,oBAAA,SAAoBp/C,GAClB,OAAOtqC,KAAKopF,iBAAiBM,oBAAoB1pF,KAAKm9B,SAAUmN,IAOlE6+C,EAAAjpF,UAAAypF,oBAAA,SAAoBr/C,GAClB,OAAOtqC,KAAKopF,iBAAiBO,oBAAoB3pF,KAAKm9B,SAAUmN,IAM1D6+C,EAAAjpF,UAAAqpF,eAAR,eACQK,EAAc,IAAIr/C,KAGxB,OAFAq/C,EAAYH,QAAQG,EAAYj/C,UAAYi/C,EAAYC,UAEjDD,uBA/CVhiF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,cACVC,SAAA,inBANOgiF,EAAAA,sDASN9hF,EAAAA,SA4CHmhF,EAjDA,GCLA,IAAAY,GAAA,WAgBE,SAAAA,EACUC,EACAt+D,EACAtG,GAFAplB,KAAAgqF,mBAAAA,EACAhqF,KAAA0rB,MAAAA,EACA1rB,KAAAolB,eAAAA,EAmCZ,OAhCE2kE,EAAA7pF,UAAA4K,SAAA,WACE9K,KAAK2rD,WAAa3rD,KAAKgqF,mBAAmBC,0BAC1CjqF,KAAKkqF,WAAalqF,KAAKgqF,mBAAmBG,2BAC1CnqF,KAAKoqF,gBAAkB,GAEnBpqF,KAAK0rB,MAAMm0B,SAASp6B,OAAOwhC,SAC7BjnD,KAAKgqF,mBAAmBK,iBACtB,GACA,CACE/3C,UAAW,QAEb9qC,EACAxH,KAAK0rB,MAAMm0B,SAASp6B,OAAOwhC,UAKjC8iC,EAAA7pF,UAAAoqF,UAAA,SAAUntD,GACRn9B,KAAKolB,eAAeknB,GAAG,CAACtsC,KAAKuqF,gBAAgBptD,MAG/C4sD,EAAA7pF,UAAAqqF,gBAAA,SAAgBptD,GAOd,MAAO,iBANcn9B,KAAK0rB,MAAMm0B,SAASp6B,OAAOwhC,QAC5C,WAAWjnD,KAAK0rB,MAAMm0B,SAASp6B,OAAOwhC,QAAO,IAC7C,KACgBjnD,KAAK0rB,MAAMm0B,SAASp6B,OAAO+hC,OAC3C,UAAUxnD,KAAK0rB,MAAMm0B,SAASp6B,OAAO+hC,OAAM,IAC3C,IACgDrqB,EAAS9M,MAG/D05D,EAAA7pF,UAAAkN,YAAA,iCAhDDxF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,8nBALuB0iF,EAAAA,0BADhB9jC,EAAAA,sBACAvgC,EAAAA,kBAoDT4jE,EAtDA,GCAA,IAAAU,GAAA,WAEA,SAAAA,KAIyC,2BAJxC7iF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,6FAEuC2iF,EANzC,GCAAC,GAAA,WAOE,SAAAA,EAAsBtB,GAAAppF,KAAAopF,iBAAAA,EAYxB,OAVEsB,EAAAxqF,UAAAyqF,cAAA,SAAcxtD,GAIZ,MAHuB,oDACNn9B,KAAKopF,iBAAiBwB,iBAAiBztD,GAErB,IADjBn9B,KAAKopF,iBAAiByB,kBAAkB1tD,IAI5DutD,EAAAxqF,UAAA4qF,yBAAA,SAAyBC,GACvB,OAAOA,EAAazsE,OAAO3T,SAASilB,KAAK,yCAb1C5nB,EAAAA,SAeH0iF,EAnBA,sBCkBE,SAAAM,EAAsB5B,GAAtB,IAAA79E,EACE43B,EAAAviC,KAAAZ,KAAMopF,IAAiBppF,YADHuL,EAAA69E,iBAAAA,EARtB79E,EAAA0/E,cAAwB,KAMxB1/E,EAAA2/E,eAAuC,IAAI/8E,EAAAA,eAW7C,OAnBkDpF,EAAAA,EAAAA,GAchDiiF,EAAA9qF,UAAAirF,qBAAA,WAC6B,OAAvBnrF,KAAKirF,eACPjrF,KAAKkrF,eAAep8E,KAAK9O,KAAKirF,oCApBnCrjF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,4BACVC,SAAA,slCALOgiF,EAAAA,2DAQN9hF,EAAAA,8BAEAA,EAAAA,+BAEAA,EAAAA,8BAEAmH,EAAAA,UAYH67E,GAnBkDN,ICRlD,IAAAU,GAAA,WAwBE,SAAAA,EAAoBC,GAAArrF,KAAAqrF,yBAAAA,EAFpBrrF,KAAAsrF,kBAA0C,IAAIn9E,EAAAA,aAgChD,OA5BEi9E,EAAAlrF,UAAA+U,YAAA,SAAY8hB,GACNA,EAAQw0D,WAAavrF,KAAKurF,WAC5BvrF,KAAKwrF,aASTJ,EAAAlrF,UAAAurF,UAAA,SAAUC,EAAkBC,GAC1B3rF,KAAKqrF,yBAAyBI,UAAUC,EAAUC,IAGpDP,EAAAlrF,UAAAsrF,UAAA,WAAA,IAAAjgF,EAAAvL,KACEA,KAAKqrF,yBAAyBG,UAC5BxrF,KAAK4rF,WAAWlkF,cAChB1H,KAAKurF,UAAS,SACdM,GACEtgF,EAAKugF,2BAA2BD,MAK9BT,EAAAlrF,UAAA4rF,2BAAR,SAAmCD,GACjC7rF,KAAKsrF,kBAAkBx8E,KAAK+8E,wBAxC/BjkF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,sBACVC,SAAA,8FAJOikF,EAAAA,gEAON/yE,EAAAA,UAASnS,KAAA,CAAC,aAAc,CAAEoS,QAAQ,uBAElCjR,EAAAA,iCAEAmH,EAAAA,UAiCHi8E,EAtDA,GCAA,IAAAY,GAAA,WAWE,SAAAA,KAmBF,OAjBEA,EAAA9rF,UAAA+rF,kBAAA,WACE,GAAIjsF,KAAKob,WAAWgpD,aAAepkE,KAAKob,WAAWk3B,SAAU,KACrD45C,EACJlsF,KAAKob,WAAWC,YAAcrb,KAAKob,WAAWk3B,SAAW,EAEvD65C,GACDnsF,KAAKob,WAAWC,YAAc,GAAKrb,KAAKob,WAAWk3B,SAMtD,OAJI65C,EAAiBnsF,KAAKob,WAAWgpD,eACnC+nB,EAAiBnsF,KAAKob,WAAWgpD,cAGzB8nB,EAAS,MAAMC,EAEzB,MAAO,OAAOnsF,KAAKob,WAAWgpD,kCAxBnCx8D,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,qCACVC,SAAA,uQAGCE,EAAAA,SAsBHgkF,EA9BA,GCAA,IAAAI,GAAA,WAwBE,SAAAA,EACUhD,EACkBhjF,GADlBpG,KAAAopF,iBAAAA,EACkBppF,KAAAoG,SAAAA,EAJ5BpG,KAAAsK,UAAYC,EAMVvK,KAAKqsF,sBAAuB,EAiChC,OA9BED,EAAAlsF,UAAAosF,wBAAA,SAAwBtwE,EAAemhB,GACrCn9B,KAAKusF,iBAAiBpvD,GACtBn9B,KAAKwsF,mBAAqBxwE,EAC1Bhc,KAAKysF,cAAgBtvD,EACrBn9B,KAAK0sF,SAASjB,UACZzrF,KAAKopF,iBAAiBwB,iBAAiB5qF,KAAKurF,UAAUoB,OAAO3wE,IAC7Dhc,KAAKopF,iBAAiByB,kBAAkB7qF,KAAKurF,UAAUoB,OAAO3wE,MAIlEowE,EAAAlsF,UAAA0sF,oBAAA,SAAoB5wE,GAClBhc,KAAKwsF,mBAAqBxwE,EACJhc,KAAKoG,SAAS6/B,eAAe,QAAUjqB,GAC/CukB,eAAe,CAC3B87C,SAAU,SACVwQ,MAAO,YAIXT,EAAAlsF,UAAAqsF,iBAAA,SAAiBpvD,GACfn9B,KAAKqsF,sBAAuB,EAC5BrsF,KAAK8sF,aAAe3vD,GAGtBivD,EAAAlsF,UAAA6sF,iBAAA,WACE/sF,KAAKqsF,sBAAuB,EAC5BrsF,KAAKwsF,wBAAqBhlF,EAC1BxH,KAAKysF,mBAAgBjlF,EACrBxH,KAAK0sF,SAASlB,iCArDjB5jF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,uBACVC,SAAA,ymJANOgiF,EAAAA,iDAwBJz+D,EAAAA,OAAMxkB,KAAA,CAACqyB,EAAAA,kDAfTlxB,EAAAA,6BAEAA,EAAAA,wBAEAgR,EAAAA,UAASnS,KAAA,CAAC,WAAY,CAAEoS,QAAQ,OA8CnCmzE,EA7DA,qBC2BE,SAAAY,EACUhD,EACAt+D,GADA1rB,KAAAgqF,mBAAAA,EACAhqF,KAAA0rB,MAAAA,EAPV1rB,KAAAitF,YAAsB,KACtBjtF,KAAA49E,aAA6B,CAC3BviE,YAAa,GAgEjB,OAxDE2xE,EAAA9sF,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK4W,aAAe5W,KAAK0rB,MAAM48C,YAAY77D,UAAS,SAACgZ,GACnD,OAAAla,EAAKuS,WAAW2H,MAIpBunE,EAAA9sF,UAAAkN,YAAA,WACMpN,KAAK4W,cACP5W,KAAK4W,aAAavJ,eAItB2/E,EAAA9sF,UAAA89E,SAAA,SAASC,GACPj+E,KAAK49E,aAAYx9E,EAAA,GAAQJ,KAAK49E,aAAY,CAAEviE,YAAa4iE,IACzDj+E,KAAKgqF,mBAAmBK,iBACtBrqF,KAAKktF,YAAYC,UACjBntF,KAAK49E,aACL59E,KAAKotF,YACLptF,KAAKitF,YACLjtF,KAAKqtF,gBAIDL,EAAA9sF,UAAA4d,WAAR,SAAmB2H,GACjBzlB,KAAKktF,YAAcltF,KAAKstF,gBAAgB7nE,GACxCzlB,KAAKqtF,iBAAgB5nE,IAAUA,EAAO4nE,eACtCrtF,KAAK49E,aAAYx9E,EAAA,GAAQJ,KAAK49E,aAAY,CAAEviE,YAAa,IACzDrb,KAAKgqF,mBAAmBK,iBACtBrqF,KAAKktF,YAAYC,UACjBntF,KAAK49E,aACL59E,KAAKotF,YACLptF,KAAKitF,YACLjtF,KAAKqtF,eAGPrtF,KAAK2rD,WAAa3rD,KAAKgqF,mBAAmBuD,mBAC1CvtF,KAAKkqF,WAAalqF,KAAKgqF,mBAAmBwD,yBAGpCR,EAAA9sF,UAAAotF,gBAAR,SAAwBhlB,OAGlB4kB,EAYJ,OATEA,EADE5kB,EAAYj2B,MACA,CAAE86C,UAAW7kB,EAAYj2B,OAEzB,CAAE86C,UAAW,KAGjBE,cACmB,MAA7B/kB,EAAY+kB,eACgC,SAA5C/kB,EAAY+kB,cAAcI,cAErBP,uBA5EVtlF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gCACVC,SAAA,82BANA0iF,EAAAA,0BALO9jC,EAAAA,kBAuFTsmC,KCxFA,IAAAU,GAAA,WAaE,SAAAA,EAAoBtoE,GAAAplB,KAAAolB,eAAAA,EAHpBplB,KAAA2tF,UAAyB,IAAIt3E,EAAAA,YAC7BrW,KAAAsK,UAAYC,EAqBd,OAjBEmjF,EAAAxtF,UAAA0tF,WAAA,SAAWxrC,GACTpiD,KAAKolB,eAAeknB,GAAG,CAAC,qBAAsB,CAAE+F,MAAO+P,KAGzDsrC,EAAAxtF,UAAA2tF,oBAAA,WACE7tF,KAAKolB,eAAeknB,GAAG,CAAC,qBAAsB,CAAE+gD,eAAe,KAGjEK,EAAAxtF,UAAA4tF,MAAA,SAAM17E,GAEFpS,KAAK2tF,UAAUxrF,OACfnC,KAAK2tF,UAAUxrF,MAAMxB,QACP,UAAdyR,EAAM0H,KAEN9Z,KAAK4tF,WAAW5tF,KAAK2tF,UAAUxrF,4BAxBpCyF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,yBACVC,SAAA,s8CALOqe,EAAAA,kBA8BTunE,EAhCA,sBCYE,SAAAK,EAAsB3E,GAAtB,IAAA79E,EACE43B,EAAAviC,KAAAZ,KAAMopF,IAAiBppF,YADHuL,EAAA69E,iBAAAA,IAGxB,OAP0DrgF,EAAAA,EAAAA,uBAJzDnB,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oCACVC,SAAA,qtEALOgiF,EAAAA,sDAQN9hF,EAAAA,0BACAA,EAAAA,SAKH+lF,GAP0DrD,ICR1D,IAAAsD,GAAA,WAYE,SAAAA,EAAoBhE,GAAAhqF,KAAAgqF,mBAAAA,EAOtB,OALEgE,EAAA9tF,UAAA4K,SAAA,WACE9K,KAAKgqF,mBAAmBiE,gBACxBjuF,KAAKkqF,WAAalqF,KAAKgqF,mBAAmBG,2BAC1CnqF,KAAK2rD,WAAa3rD,KAAKgqF,mBAAmBC,+CAb7CriF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,+BACVC,SAAA,g8CALO0iF,EAAAA,sBAkBTwD,EAnBA,GCAA,IAAAE,GAAA,WAEA,SAAAA,KAImC,2BAJlCtmF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,uLAEiComF,EANnC,GCAAC,GAAA,WAsBE,SAAAA,EACUnE,EACAt+D,EACAtG,GAFAplB,KAAAgqF,mBAAAA,EACAhqF,KAAA0rB,MAAAA,EACA1rB,KAAAolB,eAAAA,EARVplB,KAAAsK,UAAYC,EA4Bd,OAjBE4jF,EAAAjuF,UAAA4K,SAAA,WACO9K,KAAKm9B,WACRn9B,KAAKouF,oBACLpuF,KAAKquF,UAAYruF,KAAKgqF,mBAAmBwD,wBACzCxtF,KAAK2rD,WAAa3rD,KAAKgqF,mBAAmBuD,qBAI9CY,EAAAjuF,UAAAkuF,kBAAA,WACEpuF,KAAKgqF,mBAAmBsE,cAActuF,KAAK0rB,MAAMm0B,SAASp6B,OAAO8O,QAGnE45D,EAAAjuF,UAAAioD,OAAA,WACEnoD,KAAKolB,eAAeknB,GAAG,CACrB,wBAAwBtsC,KAAK0rB,MAAMm0B,SAASp6B,OAAOwhC,+BAhCxDr/C,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,wBACVC,SAAA,4zBAVA0iF,EAAAA,0BAKO9jC,EAAAA,sBAHPvgC,EAAAA,oDAeCne,EAAAA,0BACAA,EAAAA,SAyBHmmF,EA7CA,GCAA,IAAAI,GAAA,WA8BA,SAAAA,KAyFgC,2BAzF/BpmF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAoS,EAAAA,oBACAnF,EAAAA,aACAoH,GACA6xE,EAAAA,gBACA1xE,GACAtH,EAAAA,UACAi5E,EAAAA,sBACAp/E,EAAAA,WACAnH,EACAK,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb8uE,qBAAsB,CACpB7uE,UAAW6uE,GACX/iE,YAAa,CACX,CACEkG,KAAM,OACNhS,UAAW2tE,IAEb,CACE37D,KAAM,WACNhS,UAAW2uE,IAEb,CACE38D,KAAM,mBACNhS,UAAW0qE,IAEb,CACE14D,KAAM,kCACNhS,UAAW0qE,IAEb,CACE14D,KAAM,yCACNhS,UAAW8uE,IAEb,CACE98D,KAAM,0BACNhS,UAAW8uE,OAKnB5/D,YAAa,CACXmgE,wBAAyB,CACvBzgE,MAAO,CAAC,gBAAiB,oBAKjC7lB,aAAc,CACZslF,GACAtB,GACAhB,GACAJ,GACAgD,GACAjE,GACAgE,GACA5E,GACAsB,GACAuC,GACAkB,GACAlC,GACAmC,IAEFtlF,QAAS,CACPsgF,GACA+E,GACAnE,GACAU,GACAO,GACAI,GACAY,GACA0B,GACAV,GACAZ,GACA2B,GACAC,GACAG,IAEF7uE,gBAAiB,CACf4uE,GACAlB,GACAgB,GACAjE,GACAoE,QAG4BI,EAvHhC,GCAAI,GAAA,WA6BE,SAAAA,EACU34C,EACA3vB,EACA+5B,GAFApgD,KAAAg2C,YAAAA,EACAh2C,KAAAqmB,YAAAA,EACArmB,KAAAogD,oBAAAA,EAfVpgD,KAAAsjB,KAAkBtjB,KAAKg2C,YAAYlF,MACjC,CACEi4B,MAAO,CAAC,GAAI,CAACh4B,EAAAA,WAAWC,SAAUntB,GAAqBI,iBACvD2qE,kBAAmB,CAAC,GAAI,CAAC79C,EAAAA,WAAWC,YAEtC,CAAEq3B,UAAWroE,KAAK6uF,cAKZ7uF,KAAA2wC,eAAgB,EAwD1B,OAhDEg+C,EAAAzuF,UAAAixC,WAAA,SAAW5tB,GACT,OAAOH,GAAUC,gBACfrjB,KAAKsjB,KACLC,EACAvjB,KAAK2wC,gBAITg+C,EAAAzuF,UAAA4uF,sBAAA,WACE,OACE9uF,KAAKsjB,KAAK6lD,SAAS,cAClBnpE,KAAK2wC,eACH3wC,KAAKsjB,KAAKlG,IAAI,qBAAqBuG,SAClC3jB,KAAKsjB,KAAKlG,IAAI,qBAAqBwG,QAI3C+qE,EAAAzuF,UAAA+wC,SAAA,WAAA,IAAA1lC,EAAAvL,KAGE,GAFAA,KAAK2wC,eAAgB,GAEjB3wC,KAAKsjB,KAAKI,QAAd,KAIMqlD,EAAQ/oE,KAAKsjB,KAAKnhB,MAAM4mE,MAC9B/oE,KAAKqmB,YAAY0oE,SAAShmB,GAErB/oE,KAAKihF,MACRjhF,KAAKihF,IAAMjhF,KAAKqmB,YAAYi6B,kBAAkB7zC,UAAS,SAACrL,GAClDmK,EAAK8a,YAAYk6B,eACnBh1C,EAAK60C,oBAAoB4uC,gBAMjCL,EAAAzuF,UAAAkN,YAAA,WACMpN,KAAKihF,KACPjhF,KAAKihF,IAAI5zE,eAILshF,EAAAzuF,UAAA2uF,YAAR,SAAoB3kB,GAClB,OAAOA,EAAgB9sD,IAAI,SAASjb,QAClC+nE,EAAgB9sD,IAAI,qBAAqBjb,MACvC,CAAEoiB,UAAU,GACZ,0BArEP3c,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,++CAXAspC,EAAAA,mBAI4BvoB,EAAAA,mBAArB63B,EAAAA,uBA4ETiuC,EAnFA,GCAA,IAAAM,GAAA,WAOA,SAAAA,KAqBkC,2BArBjC9mF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACA+G,EAAAA,WACAoL,EAAAA,YACAC,EAAAA,oBACAnS,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb8vE,4BAA6B,CAC3B7vE,UAAWsvE,GACXrkE,OAAQ,CAACgoC,QAIf73C,EAAAA,YACAC,EAAAA,qBAEFtS,aAAc,CAACumF,IACf9lF,QAAS,CAAC8lF,IACVrvE,gBAAiB,CAACqvE,QAEcM,EA5BlC,GCAAE,GAAA,WAoDE,SAAAA,EACU/1D,EACApc,EACA0zB,EACA0P,EACAj7C,EACAu5C,EACA2B,GANArgD,KAAAo5B,KAAAA,EACAp5B,KAAAgd,qBAAAA,EACAhd,KAAA0wC,GAAAA,EACA1wC,KAAAogD,oBAAAA,EACApgD,KAAAmF,OAAAA,EACAnF,KAAA0+C,eAAAA,EACA1+C,KAAAqgD,sBAAAA,EAtCVrgD,KAAAovF,cAAe,EAgGjB,OAvDED,EAAAjvF,UAAA4K,SAAA,WAcE,GAbA9K,KAAKsjB,KAAOtjB,KAAK0wC,GAAGI,MAAM,CACxBnD,OAAQ,CAAC,GAAI,CAACoD,EAAAA,WAAWC,SAAUntB,GAAqBI,iBACxD2pB,SAAU,CAAC,GAAImD,EAAAA,WAAWC,YAI1BhxC,KAAKqgD,uBACLrgD,KAAKqgD,sBAAsBT,oBAE3B5/C,KAAKovF,aAAepvF,KAAK0+C,eAAemB,SAASyoB,YAAoB,QAInEtoE,KAAKmF,QAAUnF,KAAKmF,OAAOyN,aAAc,KACrCmmD,EACJ/4D,KAAKmF,OAAOyN,aAAaomD,SACzBh5D,KAAKmF,OAAOyN,aAAaomD,QAAQxzC,MAE/BuzC,GAAcA,EAAmB,QAAKA,EAAmB,OAAEp4D,QAC7DX,KAAKqvF,YAAY,SAAUt2B,EAAmB,UAKpDo2B,EAAAjvF,UAAAovF,MAAA,WAAA,IAAA/jF,EAAAvL,KACQ8L,EAAA9L,KAAAsjB,KAAA4tB,SAAEvD,EAAA7hC,EAAA6hC,OAAQC,EAAA9hC,EAAA8hC,SAChB5tC,KAAKo5B,KAAKm2D,UACR5hD,EAAOxrC,MAAMk2C,cACbzK,EAASzrC,OAGNnC,KAAKihF,MACRjhF,KAAKihF,IAAMjhF,KAAKo5B,KAAK4S,eAAev/B,UAAS,SAACwU,GACxCA,GAAQA,EAAKssB,eACfhiC,EAAKyR,qBAAqBM,OAAOJ,EAAAA,kBAAkBuwB,gBACnDliC,EAAK60C,oBAAoB4uC,gBAMjCG,EAAAjvF,UAAAkN,YAAA,WACMpN,KAAKihF,KACPjhF,KAAKihF,IAAI5zE,eAIL8hF,EAAAjvF,UAAAmvF,YAAR,SAAoBliC,EAAehrD,SACjCnC,KAAKsjB,KAAKgtC,aAAUxkD,EAAA,IACjBqhD,GAAQhrD,MAGXnC,KAAKsjB,KAAKlG,IAAI+vC,GAAOqiC,qCArGxB5nF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,gBACVC,SAAA,uwEAXAkzB,EAAAA,mBACAzd,EAAAA,4BALO6zB,EAAAA,mBAGPsP,EAAAA,2BAIA35C,EAAAA,iBANO2/C,EAAAA,sBAUAzI,MAyGTkxC,EArHA,GCAA,IAAAM,GAAA,WAaA,SAAAA,KAqB8B,2BArB7BtnF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAmS,EAAAA,YACAC,EAAAA,oBACAnF,EAAAA,aACAC,EAAAA,UACAjN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbswE,gCAAiC,CAC/BrwE,UAAW8vE,GACX7kE,OAAQ,CAAC6xC,EAAAA,kBAIf9sD,EAAAA,YAEFjH,aAAc,CAAC+mF,IACftmF,QAAS,CAACsmF,IACV7vE,gBAAiB,CAAC6vE,QAEUM,EAlC9B,GCAAE,GAAA,WAYE,SAAAA,EAAoBv2D,EAA2B2T,GAA3B/sC,KAAAo5B,KAAAA,EAA2Bp5B,KAAA+sC,YAAAA,EAajD,OAXE4iD,EAAAzvF,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK6qE,MAAQ7qE,KAAKo5B,KAAKohB,iBAAiB9uC,KACtC6S,EAAAA,UAAS,SAACi8B,GACR,OAAIA,EACKjvC,EAAKwhC,YAAY3vB,MAEjB7K,EAAAA,QAAG/K,2BAfnBI,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,WACVC,SAAA,2cANOkzB,EAAAA,mBAAmBgB,EAAAA,eAwB5B2zD,EAzBA,GCAA,IAAAC,GAAA,WAYA,SAAAA,KAmB0B,2BAnBzBznF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAiN,EAAAA,aACAC,EAAAA,UACAqsB,GACAt5B,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbuwE,eAAgB,CACdtwE,UAAWswE,OAIjBtgF,EAAAA,YAEFjH,aAAc,CAACunF,IACfrwE,gBAAiB,CAACqwE,IAClB9mF,QAAS,CAAC8mF,QAEcC,EA/B1B,GCAAC,GAAA,WAwBE,SAAAA,EACYz2D,EACA3L,EACA0M,EACA1H,EACAq9D,EACAp2D,GALA15B,KAAAo5B,KAAAA,EACAp5B,KAAAytB,IAAAA,EACAztB,KAAAm6B,QAAAA,EACAn6B,KAAAyyB,oBAAAA,EACAzyB,KAAA8vF,gBAAAA,EACA9vF,KAAA05B,cAAAA,SAGZm2D,EAAA3vF,UAAA2rB,YAAA,WAAA,IAAAtgB,EAAAvL,KAGE,OAFAA,KAAKqsC,SAEErsC,KAAKytB,IACTsiE,QAAQ,CACPvjF,GAAIxM,KAAKyyB,oBAAoBrV,IAAI,UACjCrY,KAAM+sB,EAAAA,SAASC,eAEhBrmB,KACCG,EAAAA,IAAG,SAACkkF,GACGA,GACHxkF,EAAKyjF,eAMLa,EAAA3vF,UAAA8uF,SAAV,eAEQziD,EACJvsC,KAAK05B,cAAcyR,QAAQ,QAC3BnrC,KAAK8vF,iBACL9vF,KAAK8vF,gBAAgBE,cACjB,QACA,OAENhwF,KAAKm6B,QAAQmS,GAAG,CAAEC,QAAOA,KAGjBsjD,EAAA3vF,UAAAmsC,OAAV,WACErsC,KAAKo5B,KAAKiT,8BAjDbzlC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAZZk0B,EAAAA,mBACAjL,EAAAA,kBAEA5J,EAAAA,sBACAsN,EAAAA,2BACAw8D,EAAAA,8BACA50D,EAAAA,0TATF,GCAA,IAAA60D,GAgBc,CAAE3jD,QAAS,UARzB4jD,GAAA,WAAA,SAAAA,KAa2B,2BAb1BhoF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPy5B,GACAvsB,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACgkE,IACdxwE,UAAW2Q,GACX/O,KAAIivE,WAKeC,EAb3B,iBCsGE,SAAAC,EACYh3D,EACAgnB,EACArT,EACA/vB,EACA0zB,EACA3f,EACA2I,EACAxvB,EACA6pD,GARA/zD,KAAAo5B,KAAAA,EACAp5B,KAAAogD,oBAAAA,EACApgD,KAAA+sC,YAAAA,EACA/sC,KAAAgd,qBAAAA,EACAhd,KAAA0wC,GAAAA,EACA1wC,KAAA+wB,OAAAA,EACA/wB,KAAA05B,cAAAA,EACA15B,KAAAkK,yBAAAA,EACAlK,KAAA+zD,wBAAAA,EAnFJ/zD,KAAA4W,aAAe,IAAIxM,EAAAA,aAQ3BpK,KAAAqwF,yBACErwF,KAAK05B,eAAiB15B,KAAK05B,cAAcyR,QAAQ,OAEnDnrC,KAAAswF,0BACEtwF,KAAK05B,eACL15B,KAAK05B,cAAc6U,UAAU0lB,EAAAA,4BAE/Bj0D,KAAAuwF,qBAAkCvwF,KAAK0wC,GAAGI,MACxC,CACE8e,UAAW,CAAC,IACZhH,UAAW,CAAC,GAAI7X,EAAAA,WAAWC,UAC3B6X,SAAU,CAAC,GAAI9X,EAAAA,WAAWC,UAC1B+3B,MAAO,CAAC,GAAI,CAACh4B,EAAAA,WAAWC,SAAUntB,GAAqBI,iBACvD2pB,SAAU,CACR,GACA,CAACmD,EAAAA,WAAWC,SAAUntB,GAAqBM,oBAE7Cu0D,aAAc,CAAC,GAAI3nC,EAAAA,WAAWC,UAC9Bw/C,WAAY,IAAIn6E,EAAAA,YAAY,CAC1BlU,OAAO,EACPmU,WAAUtW,KAAKswF,2BACXtwF,KAAKywF,sBAGXC,mBAAoB,EAAC,EAAO3/C,EAAAA,WAAW4/C,eAEzC,CAAEtoB,UAAWxkD,GAAqBS,gBAiOtC,OA7KE8rE,EAAAlwF,UAAA4K,SAAA,WAAA,IAAAS,EAAAvL,KACEA,KAAK8vD,QAAU9vD,KAAK+sC,YAAYgjB,YAAYrkD,KAC1CG,EAAAA,IAAG,SAACmkD,GACiC,IAA/BxwD,OAAOqvB,KAAKmhC,GAAQrvD,QACtB4K,EAAKwhC,YAAYkjB,eAGrBvgD,EAAAA,IAAG,SAACsgD,GACF,OAAOA,EAAOta,KAAK3wB,OAKnB/kB,KAAKqwF,0BACPrwF,KAAKmL,SAAWnL,KAAK+sC,YAAY6jD,+BACjC5wF,KAAK6wF,2BAED7wF,KAAKo5B,MAAQp5B,KAAKogD,sBACpBpgD,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YACF+jD,+BACArkF,UAAS,SAAE6qC,GACV,GAAIA,EAAS,CACL,IAAAxrC,EAAAP,EAAAwlF,4BAAAxlF,EAAAglF,qBAAApuF,OAAE47B,EAAAjyB,EAAAiyB,IAAK6P,EAAA9hC,EAAA8hC,SAGbriC,EAAK6tB,KAAKm2D,UAAUxxD,EAAK6P,OAIjC5tC,KAAK4W,aAAapL,IAChBxL,KAAKo5B,KAAK4S,eAAev/B,UAAS,SAACwU,GAC7BA,GAAQA,EAAKssB,eACfhiC,EAAKyR,qBAAqBM,OACxBJ,EAAAA,kBAAkBuwB,gBAEpBliC,EAAK60C,oBAAoB4uC,gBAQnChvF,KAAK4W,aAAapL,IAChBxL,KAAKgd,qBACFI,MACA1R,KAAK4S,EAAAA,OAAM,SAAC0yE,GAAY,QAAExxF,OAAOqvB,KAAKmiE,GAAUrwF,UAChD8L,UAAS,SAAEwkF,OACJD,EACJC,GACAA,EAAsB/zE,EAAAA,kBAAkBuwB,gBAGxCujD,GACAA,EAAS7gC,KAAI,SAAComB,GAAW,MAAY,4BAAZA,MAEzBhrE,EAAKyR,qBAAqBM,OAAOJ,EAAAA,kBAAkBuwB,gBACnDliC,EAAKyR,qBAAqBxR,IACxB,CAAEsO,IAAK,0BACPoD,EAAAA,kBAAkBuwB,oBAO1BztC,KAAKswF,2BACL3lF,QAAQ3K,KAAK+zD,0BACbppD,QAAQ3K,KAAK+zD,wBAAwBnpD,oBACrCD,QAAQ3K,KAAK+zD,wBAAwBnpD,kBAAkBsmF,mBAEvDlxF,KAAKmxF,kBAAoB1lF,EAAAA,cAAc,CACrCzL,KAAKkK,yBAAyBknF,WAC5BpxF,KAAK+zD,wBAAwBnpD,kBAAkBsmF,iBAEjDlxF,KAAKkK,yBAAyBmnF,YAC5BrxF,KAAK+zD,wBAAwBnpD,kBAAkBsmF,mBAEhDxlF,KACDgE,EAAAA,IAAG,SAAE5D,OAAAC,EAAApJ,EAAAmJ,EAAA,GAACK,EAAAJ,EAAA,GAASjE,EAAAiE,EAAA,GACb,MAAO,CACLI,QAAOA,EACPrE,SAAUA,EAAWA,EAASmgB,YAAc,OAKlDjoB,KAAK4W,aAAapL,IAChBxL,KAAKuwF,qBACFnzE,IAAI,cACJvG,aAAapK,UAAS,SAACrL,GACtBmK,EAAK+lF,8BAMflB,EAAAlwF,UAAAy+D,OAAA,WACE3+D,KAAK+sC,YAAYrJ,SACf1jC,KAAK+wF,4BAA4B/wF,KAAKuwF,qBAAqBpuF,SAI/DiuF,EAAAlwF,UAAAqwD,cAAA,SAAcjsB,GACZtkC,KAAKuwF,qBAA+B,SAAE3gC,UAAUnd,SAASnO,EAAMrxB,OAGjEm9E,EAAAlwF,UAAA6wF,4BAAA,SAA4BQ,GAClB,IAAA3oC,EAAA2oC,EAAA3oC,UAAWC,EAAA0oC,EAAA1oC,SAAUkgB,EAAAwoB,EAAAxoB,MAAOn7B,EAAA2jD,EAAA3jD,SAAUgiB,EAAA2hC,EAAA3hC,UAE9C,MAAO,CACLhH,UAASA,EACTC,SAAQA,EACR9qB,IAAKgrC,EAAM1wB,cACXzK,SAAQA,EACRgiB,UAASA,IAIbwgC,EAAAlwF,UAAAmM,eAAA,SAAeF,GACb,OAAOnM,KAAKkK,yBAAyBmC,eAAeF,IAG9CikF,EAAAlwF,UAAAuwF,kBAAR,WACE,SACE9lF,QAAQ3K,KAAKkK,2BACbS,QAAQ3K,KAAK+zD,wBAAwBnpD,oBACrCD,QAAQ3K,KAAK+zD,wBAAwBnpD,kBAAkBsmF,kBACvDvmF,QAAQ3K,KAAK+zD,wBAAwBnpD,kBAAkBJ,oBAEhDxK,KAAK+zD,wBAAwBnpD,kBAAkBJ,iBAAiB7E,SACrE3F,KAAK+zD,wBAAwBnpD,kBAAkBsmF,kBAM7Cd,EAAAlwF,UAAAsxF,sBAAR,SAA8Bl6C,GACxBt3C,KAAK+wB,QAAUumB,IACjBt3C,KAAK+wB,OAAOub,GAAG,SACftsC,KAAKgd,qBAAqBxR,IACxB,CAAEsO,IAAK,gCACPoD,EAAAA,kBAAkBylB,yBAKxBytD,EAAAlwF,UAAAoxF,uBAAA,WACM3mF,QAAQ3K,KAAKuwF,qBAAqBnzE,IAAI,cAAcjb,OACtDnC,KAAKkK,yBAAyB2C,YAC5B7M,KAAK+zD,wBAAwBnpD,kBAAkBsmF,iBAGjDlxF,KAAKkK,yBAAyBqC,gBAC5BvM,KAAK+zD,wBAAwBnpD,kBAAkBsmF,kBAK7Cd,EAAAlwF,UAAA2wF,wBAAR,WAAA,IAAAtlF,EAAAvL,KACEA,KAAK+sC,YAAY0kD,gCACjBzxF,KAAK4W,aAAapL,IAChBxL,KAAK+sC,YAAY+jD,+BAA+BrkF,UAAS,SAAC6qC,GACxD/rC,EAAKimF,sBAAsBl6C,OAKjC84C,EAAAlwF,UAAAkN,YAAA,WACEpN,KAAK4W,aAAavJ,cAClBrN,KAAK+sC,YAAY0kD,qDAxQpB7pF,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,cACVC,SAAA,2uPAlBAkzB,EAAAA,mBADA0lB,EAAAA,2BASA1kB,EAAAA,mBAJAze,EAAAA,4BAfA6zB,EAAAA,mBAiBAjrB,EAAAA,sBAJAkV,EAAAA,4BALA9tB,EAAAA,gCADAD,EAAAA,2BA8RF8iF,KCvSA,IAAAsB,GAAA,WAeA,SAAAA,KAsBsC,2BAtBrCvpF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAsnF,GACAl1E,EAAAA,oBACAnF,EAAAA,aACAC,EAAAA,UACAjN,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACbuyE,0BAA2B,CACzBtyE,UAAW+wE,GACX9lE,OAAQ,CAAC6xC,EAAAA,kBAIf9sD,EAAAA,WACAyN,IAEF1U,aAAc,CAACgoF,IACfvnF,QAAS,CAACunF,IACV9wE,gBAAiB,CAAC8wE,QAEkBsB,EArCtC,GCAAE,GAAA,WAWA,SAAAA,KAakC,2BAbjCzpF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPC,EAAAA,aACAsnF,GACAH,GACAU,GACAlB,GACAv0E,EAAAA,oBACAnF,EAAAA,aACAC,EAAAA,UACAk8E,QAG8BE,EAxBlC,GCAAC,GAAA,WASA,SAAAA,IAOE7xF,KAAA+U,WAAY,EAIZ/U,KAAAsd,OAAS,IAAInP,EAAAA,aAKf,OAHE0jF,EAAA3xF,UAAA2zC,YAAA,SAAYpzB,GACVzgB,KAAKsd,OAAOxO,KAAK2R,wBAdpB7Y,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,oBACVC,SAAA,gsFACAmJ,gBAAiBC,EAAAA,wBAAwBC,8CAGxCnJ,EAAAA,yBAEAA,EAAAA,sBAEAmH,EAAAA,UAMH0iF,EAzBA,GCAA,IAAAC,GAAA,WAYE,SAAAA,EAAsB/1C,GAAA/7C,KAAA+7C,gBAAAA,EAHtB/7C,KAAA+xF,UAA8B/xF,KAAK+7C,gBAAgBG,cACnDl8C,KAAAmL,SAAgCnL,KAAK+7C,gBAAgBO,qBAOvD,OAHEw1C,EAAA5xF,UAAA2zC,YAAA,SAAYpzB,GACVzgB,KAAK+7C,gBAAgBlI,YAAYpzB,wBAXpC7Y,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,eACVC,SAAA,8nCALyB00C,EAAAA,mBAgB3Bs1C,EAjBA,GCAA,IAAAE,GAAA,WAmBA,SAAAA,KAuB6B,2BAvB5B7pF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACP2xC,GACA1xC,EAAAA,aACAC,EAAAA,aAAaC,WAAU,CACrB4W,cAAe,CACb0yE,kBAAmB,CACjBzyE,UAAWyyE,GACXxnE,OAAQ,CAACksC,EAAAA,eAIfnnD,EAAAA,WACAgG,EACAE,EAAAA,aACAmN,GACAlN,EAAAA,UACAgF,GAEFpS,aAAc,CAAC0pF,GAAmBD,IAClCvyE,gBAAiB,CAACwyE,IAClBjpF,QAAS,CAACipF,GAAmBD,QAEFG,EA1C7B,GCAAC,GAAA,WAyDA,SAAAA,KAoD2B,2BApD1B9pF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACP4gB,GACAgqB,GACA8f,GACAsF,GACAH,GACAJ,GACAsd,GACAD,GACAG,GACArE,GACA4G,GACAj2D,GACAzC,GACA+7C,GACA4J,GACAnF,GACAiB,GACAuG,GACAX,GACA2e,GACAoC,GACAxN,GACAM,GACAjX,GACA6E,GACA0B,GACAa,GACAS,GACA1U,GACAsF,GACA7e,GACAuc,GACAwf,GACAwV,GACAhT,GACAyK,GACAf,GACAxI,GACApqB,GACA6J,GACAwM,GACA/Q,GACAi6B,GACA1jB,GACA8jB,GACA7iB,GACAuB,GACAwY,QAGuB+I,EA7G3B,GCyBA,SAAgBC,GACdC,EACAC,EACA1mE,SAEMtmB,EAASsmB,EAAMzK,KAAKoxE,mBAClBC,EAAAltF,EAAAktF,OAAQC,EAAAntF,EAAAmtF,UACVC,EAAqBptF,EAAOotF,oBAAsB,QAElD3G,EAmBR,SAAiC4G,EAAeC,GAC9C,IAAK,IAAI12E,EAAQy2E,EAAS9xF,OAAS,EAAGqb,GAAS,EAAGA,IAChD,GAAI02E,EAAUD,EAASz2E,IACrB,OAAOA,EAGX,OAAQ,EAzBY22E,CAAcR,EAAQ,SAAGrmF,GAAa,OAAXA,EAAAulB,OAAoBihE,IAC7DM,EAAsB/G,IAAgBsG,EAASxxF,OAAS,EAE9D,IAAqB,IAAjBkrF,GAAsB+G,EACxB,OAAO,KAQT,QALMC,EAAahH,EAAc,EAC3BiH,IAAShnF,EAAA,IACZymF,GAAYJ,EAASU,MAGfryF,EAAI,EAAGA,EAAIqrF,EAAarrF,IAC/BsyF,EAAU,GAAGN,EAAqBhyF,GAAO2xF,EAAS3xF,GAGpD,MAAO,CAAEuyF,SAAUZ,EAAS5hD,MAAM,EAAGsiD,EAAa,GAAIC,UAASA,GClDjE,IAAAE,GAac,CAAEzmD,QAAS,WAAW0mD,GAMtB,CACJZ,mBAAoB,CAClBC,OAAQ,IACRC,UAAW,gBAhBvBW,GAAA,WAAA,SAAAA,KAuBuC,2BAvBtC/qF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPkN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAI+xE,IAEN,CACEG,QAASjB,GACTrmE,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIgyE,WAU2BC,EAvBvC,GCNAE,GAWc,CAAE7mD,QAAS,YAAY8mD,GAMvB,CAAExhE,UAAW,SAAU0a,QAAS,UAAU+mD,GAM1C,CAAE/mD,QAAS,SAASgnD,GAMpB,CACJlB,mBAAoB,CAClBC,OAAQ,IACRC,UAAW,iBA5BvBiB,GAAA,WAAA,SAAAA,KAmCuC,2BAnCtCrrF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPkN,EAAAA,aAAagqD,SAAS,CACpB,CACEluC,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAImyE,IAEN,CACE/hE,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIoyE,IAEN,CACEhiE,KAAM,KACNxF,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIqyE,IAEN,CACEH,QAASjB,GACTrmE,YAAa,CAACuG,IACd/S,UAAW2Q,GACX/O,KAAIsyE,WAU2BC,EAnCvC,GCFaC,GAAgC,CAK3CllE,YAAa,CACXg/B,OAAQ,CACNj8C,GAAI,CACF2c,MAAO,CACL,YACA,cACA,YACA,WACA,YACA,YACA,WACA,kBAGJ7c,GAAI,CACF6c,MAAO,CAAC,YAAa,WAAY,YAAa,cAGlDsjD,WAAY,CACVjgE,GAAI,CAAE2c,MAAO,IACb7c,GAAI,CACF6c,MAAO,CAAC,YAAa,gBAAiB,cAAe,eAGzDylE,OAAQ,CACNzlE,MAAO,CAAC,WAEV0lE,qBAAsB,CACpBjlE,SAAU,YACVT,MAAO,CACL,WACA,YACA,YACA,YACA,WACA,WACA,aAIJ2lE,qBAAsB,CACpB3lE,MAAO,CAAC,YAAa,cAEvB4lE,qBAAsB,CACpBnlE,SAAU,WACVT,MAAO,CAAC,WAAY,WAAY,aAElC6lE,wBAAyB,CACvB7lE,MAAO,CAAC,kBAAmB,2BAE7B8lE,wBAAyB,CACvB9lE,MAAO,CAAC,kBAAmB,2BAE7B+lE,8BAA+B,CAC7B/lE,MAAO,CACL,WACA,wBACA,yBACA,aAGJgmE,8BAA+B,CAC7BhmE,MAAO,CACL,WACA,yBACA,wBACA,aAGJimE,2BAA4B,CAC1B5iF,GAAI,CACFod,SAAU,aAEZtd,GAAI,CACFsd,SAAU,WAEZT,MAAO,CACL,UACA,YACA,eACA,OACA,2BAGJkmE,iBAAkB,CAChBlmE,MAAO,CAAC,aAAc,yBAA0B,2BAElDmmE,oBAAqB,CACnBnmE,MAAO,CAAC,cAAe,gBAEzBomE,kBAAmB,CACjBpmE,MAAO,CAAC,kBAAmB,qBAE7BqmE,kBAAmB,CACjBrmE,MAAO,CAAC,aAAc,gBAAiB,kBAEzCsmE,8BAA+B,CAC7BtmE,MAAO,CAAC,cAAe,gBAEzBumE,qCAAsC,CACpCvmE,MAAO,CAAC,aAAc,cAAe,cAAe,kBAEtDwmE,0BAA2B,CACzBxmE,MAAO,CAAC,uBC5GDymE,GAET,CACF7hC,uBAAwB,CACtBx6B,SAAU,yBACV5O,SAAU,0BAEZkmE,eAAgB,CACdt3D,SAAU,iBACV5O,SAAU,iBACVsU,IAAK,mBAII42D,GAA8C,CACzDC,UAAW,CACTC,aAAc,CAAC,2BAEjBC,UAAW,CACTD,aAAc,CAAC,oBCfnB,SAAgBE,KACd,MAAO,CACLC,aAAc,CACZ71D,WAAU/+B,EAAA,GACLs0F,IAELzmE,MAAK7tB,EAAA,GACAu0F,IAELM,MAAO,KCbb,IAAaC,GAA8C,CACzDC,KAAM,CAAEn1C,MAAO,CAAC,KAChBo1C,SAAU,CAAEp1C,MAAO,CAAC,cACpB/4B,KAAM,CAAE+4B,MAAO,CAAC,SAGhBsvC,MAAO,CAAEtvC,MAAO,CAAC,SAAUq1C,WAAW,GACtC3xD,SAAU,CAAEsc,MAAO,CAAC,kBAAmBq1C,WAAW,GAClDC,eAAgB,CAAEt1C,MAAO,CAAC,yBAA0Bq1C,WAAW,GAC/D7sB,cAAe,CAAExoB,MAAO,CAAC,mBAAoBq1C,WAAW,GACxDhpD,OAAQ,CAAE2T,MAAO,CAAC,WAClBu1C,cAAe,CAAEv1C,MAAO,CAAC,mBAEzB1mB,SAAU,CAAE0mB,MAAO,CAAC,aACpBw1C,wBAAyB,CAAEx1C,MAAO,CAAC,8BACnCy1C,qBAAsB,CAAEz1C,MAAO,CAAC,2BAChC01C,uBAAwB,CAAE11C,MAAO,CAAC,6BAClC21C,oBAAqB,CAAE31C,MAAO,CAAC,0BAC/B41C,kBAAmB,CAAE51C,MAAO,CAAC,uBAG7By1B,OAAQ,CAAEz1B,MAAO,CAAC,kBAClB61C,SAAU,CACR71C,MAAO,CAAC,0BACR81C,cAAe,CAAEjjB,aAAc,SAEjCjqC,MAAO,CAAEoX,MAAO,CAAC,mCAGjBlmB,QAAS,CACPkmB,MAAO,CAAC,8BACR81C,cAAe,CAAEtqD,YAAa,SAGhCuqD,mBAAoB,CAAE/1C,MAAO,CAAC,yBAC9BgkB,OAAQ,CACNhkB,MAAO,CAAC,sBAEV64B,aAAc,CACZ74B,MAAO,CAAC,+BACR81C,cAAe,CAAEpwE,UAAW,SAE9BswE,WAAY,CACVh2C,MAAO,CAAC,0BACR81C,cAAe,CAAEpwE,UAAW,SAE9BuwE,YAAa,CACXj2C,MAAO,CAAC,sCACR81C,cAAe,CAAEpwE,UAAW,SAE9BwwE,wBAAyB,CACvBl2C,MAAO,CAAC,mDACR81C,cAAe,CAAEpwE,UAAW,SAE9BywE,YAAa,CACXn2C,MAAO,CAAC,sCACR81C,cAAe,CAAEpwE,UAAW,SAE9B0wE,wBAAyB,CACvBp2C,MAAO,CAAC,mDACR81C,cAAe,CAAEpwE,UAAW,SAE9B2wE,qBAAsB,CACpBr2C,MAAO,CAAC,yCACR81C,cAAe,CAAExwB,WAAY,QAE/B1uB,QAAS,CAAEoJ,MAAO,CAAC,uBACnBs2C,YAAa,CACXt2C,MAAO,CAAC,uCACR81C,cAAe,CAAE/+C,WAAY,UAIpBw/C,GAAsC,CACjDp8D,QAAS,CACPnQ,OAAQkrE,KC7EZsB,GAAA,WAQA,SAAAA,KAUA,OANSA,EAAA5zE,QAAP,WACE,MAAO,CACLC,SAAU2zE,EACV/tF,UAAW,CAACqa,EAAAA,cAAcyzE,2BAP/BpuF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CAACouF,EAAAA,cAAkB7zE,UAAWmhB,QASzCyyD,EAlBA,iBCsBA,SAAAE,KAuByC,2BAvBxCvuF,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPsuF,EAAAA,YAAY/zE,UACZg0E,EAAAA,WAAWh0E,UACX6zC,EAAAA,wBAAwB7zC,UACxBra,EAAAA,aAAaqa,UACbi0E,EAAAA,wBAAwBj0E,UACxB4zE,GAAc5zE,UACdvT,EAAAA,WAAWuT,UACXk0E,EAAAA,UAAUl0E,UACVm0E,EAAAA,oBAAoBn0E,UACpBo0E,EAAAA,cAAcp0E,UACdq6B,EAAAA,WAAWr6B,UACXq0E,EAAAA,eAAer0E,UACfs0E,EAAAA,WAAWt0E,UACXu0E,EAAAA,cAAcv0E,UACdD,GAAiBC,UACjBsG,EAAAA,qBAAqBtG,QAAQ,OAC7BowC,IAEFnqD,QAAS,CAACmqD,IACVvqD,UAAS1F,EAAMq0F,EAAAA,iCAEwBV,KC7CzCW,GAAA,WAmBA,SAAAA,KAgDA,OARSA,EAAA7uF,WAAP,SACEpD,GAEA,MAAO,CACLyd,SAAUw0E,EACV5uF,UAAW,CAACqa,EAAAA,cAAc1d,0BA7C/B+C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPkN,EAAAA,aAAaqN,QAAQ,GAAI,CACvB00E,0BAA2B,UAC3BC,gBAAiB,YAGnBC,EAAAA,YAAY50E,QACV,GACA,CACE60E,cAAe,CACbC,yBAAyB,EACzBC,4BAA4B,EAC5BC,0BAA0B,EAC1BC,6BAA6B,KAInCC,EAAAA,cAAcl1E,QAAQ,IAItBqwB,GAEAyjD,GACAv/B,GACAn1C,EAAAA,kBAAkBY,UAElBm1E,EAAAA,gBAAgBn1E,UAChBo1E,EAAAA,sBAAsBp1E,UAGtBq1E,EAAAA,UAAUr1E,UACVswE,GACAM,GACA0E,EAAAA,qBAAqBt1E,WAEvB/Z,QAAS,CAACsuD,GAAYu/B,QAWxBW,EAnEA,GCAAc,GAAA,WAQA,SAAAA,KA0BA,OARSA,EAAA3vF,WAAP,SACEpD,GAEA,MAAO,CACLyd,SAAUs1E,EACV1vF,UAAW,CAACqa,EAAAA,cAAc1d,0BAvB/B+C,EAAAA,SAAQtB,KAAA,CAAC,CACRwB,QAAS,CACPgvF,GAAiB7uF,WAAU,CACzBw5B,IAAK,CACHC,SAAS,EACTC,iBAAiB,KAIrB35B,EAAAA,aAAaC,WAAWirF,IACxBlrF,EAAAA,aAAa6vF,kBAAkBrD,IAG/B9C,IAEFppF,QAAS,CAACwuF,QAWZc,EAlCA,4B5TMqC,kpO6TLnCE,SAAW,WACXC,SAAW,k3B7TKsB","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\nconst MATCH_HTML_TAGS: RegExp = /\\<.*?\\>/g;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    alt = alt ? alt.replace(MATCH_HTML_TAGS, '') : null;\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      const altText = media[format || DEFAULT_MEDIA_FORMAT].altText;\n      return altText ? altText.replace(MATCH_HTML_TAGS, '') : altText;\n    } else if (media.altText) {\n      const altText = media.altText;\n      return altText ? altText.replace(MATCH_HTML_TAGS, '') : altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return this.min !== undefined && incomingValue < this.min\n      ? this.min\n      : this.max !== undefined && incomingValue > this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    if (value) {\n      value = value.replace(/[^0-9]+/g, '');\n      this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n    }\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderEntry,\n  PromotionResult,\n  CartService,\n  Cart,\n  Order,\n  CheckoutService,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected cartService: CartService,\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.cartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.cartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  Config,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n\n  shouldForceRefreshPage(): boolean {\n    const config = this.injector.get(Config);\n    return !isFeatureEnabled(config, 'cmsPageLoadOnce');\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService\n          .getPage(pageContext, this.cmsGuards.shouldForceRefreshPage())\n          .pipe(\n            first(),\n            withLatestFrom(of(pageContext))\n          )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, (T)[]>();\n  private templatesRefsBefore = new Map<string, (T)[]>();\n  private templatesRefsAfter = new Map<string, (T)[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, (T)[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    if (this.cdRef) {\n      this.cdRef.markForCheck();\n    }\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  SkipLink,\n  SkipLinkConfig,\n  SkipLinkScrollPosition,\n} from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(protected config: SkipLinkConfig) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target: target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key: key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(\n    target: HTMLElement,\n    position: SkipLinkScrollPosition,\n    event: MouseEvent\n  ): void {\n    target = <HTMLElement>target.parentNode;\n    (<HTMLElement>event.target).blur();\n    const options: ScrollIntoViewOptions =\n      position === SkipLinkScrollPosition.AFTER ? { inline: 'end' } : {};\n\n    target.scrollIntoView(options);\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\nimport { observeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService\n    .getSkipLinks()\n    .pipe(observeOn(asyncScheduler)); // delay view's update to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink, event: MouseEvent): void {\n    this.skipLinkService.scrollToTarget(\n      skipLink.target,\n      skipLink.position,\n      event\n    );\n  }\n\n  /**\n   * Hides the skip link by removing the focus.\n   */\n  blur(event: MouseEvent): void {\n    (<HTMLElement>event.target).blur();\n  }\n\n  tabNext(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).nextSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).nextSibling).focus();\n    }\n  }\n  tabPrev(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).previousSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).previousSibling).focus();\n    }\n  }\n\n  private isElement(element: Node): boolean {\n    return !!element && element instanceof HTMLElement;\n  }\n}\n","import { SkipLinkConfig, SkipLinkScrollPosition } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'SiteContext',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'BottomHeaderSlot',\n      position: SkipLinkScrollPosition.AFTER,\n      i18nKey: 'skipLink.labels.main',\n    },\n    {\n      key: 'ProductLeftRefinements',\n      i18nKey: 'skipLink.labels.productFacets',\n    },\n    { key: 'ProductListSlot', i18nKey: 'skipLink.labels.productList' },\n    { key: 'Footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, Input, OnDestroy, OnInit, ElementRef } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input()\n  cxSkipLink: string;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n    private skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\nimport { SkipLinkModule } from '../../../layout/a11y/skip-link/skip-link.module';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule, SkipLinkModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    routingService: RoutingService,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(routingService: RoutingService, productService: ProductService);\n\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.DETAILS : '';\n\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(\n          productCode,\n          // TODO deprecated since 1.4 - should be replaced with 'scopes || this.DEFAULT_PRODUCT_SCOPE'\n          this.features && this.features.isLevel('1.4')\n            ? scopes || this.DEFAULT_PRODUCT_SCOPE\n            : undefined\n          // deprecated END\n        )\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/index';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  OrderEntry,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    modalService: ModalService,\n    cartService: CartService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(\n    modalService: ModalService,\n    cartService: CartService,\n    fb: FormBuilder\n  );\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n          if (!this.modalIsOpen) {\n            this.modalIsOpen = true;\n          }\n        }\n      })\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  CustomerCouponService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n  filteredCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder,\n    customerCouponService: CustomerCouponService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add customerCouponService,featureConfig for customer coupon feature.\n   * Remove issue: #5971\n   */\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder\n  );\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder,\n    protected customerCouponService?: CustomerCouponService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n    this.filteredCoupons = this.applicableCoupons;\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  filter(query: string): void {\n    const filterValue = query.toLowerCase();\n\n    this.filteredCoupons = this.applicableCoupons.filter(\n      coupon => coupon.couponId.toLowerCase().indexOf(filterValue) > -1\n    );\n  }\n\n  open(): void {\n    this.filteredCoupons = this.applicableCoupons;\n    if (this.applicableCoupons.length > 0) {\n      this.couponBoxIsActive = true;\n    }\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  CartService,\n  PromotionResult,\n  PromotionLocation,\n  SelectiveCartService,\n  FeatureConfigService,\n  ConsignmentEntry,\n} from '@spartacus/core';\nimport {\n  Item,\n  CartItemComponentOptions,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input()\n  set items(_items) {\n    if (_items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = _items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = _items;\n      this.items.forEach(item => {\n        const { code } = item.product;\n        if (!this.form.controls[code]) {\n          this.form.setControl(code, this.createEntryFormGroup(item));\n        } else {\n          const entryForm = this.form.controls[code] as FormGroup;\n          entryForm.controls.quantity.setValue(item.quantity);\n        }\n      });\n    }\n  }\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  private _items: Item[] = [];\n\n  get items(): Item[] {\n    return this._items;\n  }\n\n  constructor(\n    cartService: CartService,\n    fb: FormBuilder,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService authService routingService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService, fb: FormBuilder);\n\n  constructor(\n    protected cartService: CartService,\n    protected fb: FormBuilder,\n    protected selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  // TODO remove for 2.0 - left to keep backward compatibility\n  ngOnInit(): void {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.cartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    //don't show promotions in saveforlater\n    if (this.options.isSaveForLater) {\n      return entryPromotions;\n    }\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { PromotionResult, PromotionLocation } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Input()\n  options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n  @Input()\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input()\n  potentialProductPromotions: any[];\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService,\n    selectiveCartService: SelectiveCartService,\n    authService: AuthService,\n    routingService: RoutingService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected promotionService?: PromotionService,\n    protected selectiveCartService?: SelectiveCartService,\n    private authService?: AuthService,\n    private routingService?: RoutingService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n\n    /**\n     * TODO Remove the check for promotion service\n     * Issue: GH-5670\n     */\n    if (this.promotionService) {\n      this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n    }\n\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.cartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.cartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n    if (this.promotionService) {\n      this.orderPromotions$ = this.promotionService.getOrderPromotions(\n        this.promotionLocation\n      );\n    }\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.cartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.cartService.getActive(),\n      this.cartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CartService,\n  SelectiveCartService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    private cartService: CartService,\n    private selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      if (this.featureConfig && this.featureConfig.isEnabled('saveForLater')) {\n        return combineLatest([\n          slots$,\n          this.cartService.getActive(),\n          this.selectiveCartService.getCart(),\n        ]).pipe(\n          map(([slots, cart, selectiveCart]) => {\n            if (cart.totalItems) {\n              return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n            } else if (selectiveCart.totalItems) {\n              return slots.filter(\n                slot =>\n                  slot !== 'EmptyCartMiddleContent' &&\n                  slot !== 'CenterRightContentSlot'\n              );\n            } else {\n              return slots.filter(\n                slot =>\n                  slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n              );\n            }\n          })\n        );\n      }\n      //TODO remove old code for #5958\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n      ////TODO remove old code for #5958\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  FeaturesConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n    I18nModule,\n    CartSharedModule,\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService, // tslint:disable-line\n    promotionService: PromotionService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/index';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    orderDetailsService: OrderDetailsService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(orderDetailsService: OrderDetailsService);\n\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  /**\n   * @deprecated\n   * NOTE: This function will be removed in version 2.0\n   */\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/index';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map } from 'rxjs/operators';\nimport { combineLatest } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                key => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                it => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    checkoutService: CheckoutService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(checkoutService: CheckoutService);\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.LIST : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  /**\n   * @deprecated since version 1.5\n   * This variable will no longer be in use. Use thumbs$ observable instead.\n   * TODO(issue:#6166).\n   */\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    // TODO: deprecated, remove the below tap (issue:#6166)\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(\n                  filter(Boolean),\n                  take(1)\n                )\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  UrlModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductGridSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}